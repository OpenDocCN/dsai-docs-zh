- en: Signal processing (scipy.signal)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号处理（scipy.signal）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/signal.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/signal.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/signal.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/signal.html)
- en: '## Convolution'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 卷积'
- en: '| [`convolve`](generated/scipy.signal.convolve.html#scipy.signal.convolve "scipy.signal.convolve")(in1, in2[, mode, method])
    | Convolve two N-dimensional arrays. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`convolve`](generated/scipy.signal.convolve.html#scipy.signal.convolve "scipy.signal.convolve")(in1, in2[, mode, method])
    | 对两个N维数组进行卷积。'
- en: '| [`correlate`](generated/scipy.signal.correlate.html#scipy.signal.correlate
    "scipy.signal.correlate")(in1, in2[, mode, method]) | Cross-correlate two N-dimensional
    arrays. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`correlate`](generated/scipy.signal.correlate.html#scipy.signal.correlate
    "scipy.signal.correlate")(in1, in2[, mode, method]) | 对两个N维数组进行交叉相关。'
- en: '| [`fftconvolve`](generated/scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "scipy.signal.fftconvolve")(in1, in2[, mode, axes]) | Convolve two N-dimensional
    arrays using FFT. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`fftconvolve`](generated/scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "scipy.signal.fftconvolve")(in1, in2[, mode, axes]) | 使用FFT对两个N维数组进行卷积。'
- en: '| [`oaconvolve`](generated/scipy.signal.oaconvolve.html#scipy.signal.oaconvolve
    "scipy.signal.oaconvolve")(in1, in2[, mode, axes]) | Convolve two N-dimensional
    arrays using the overlap-add method. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`oaconvolve`](generated/scipy.signal.oaconvolve.html#scipy.signal.oaconvolve
    "scipy.signal.oaconvolve")(in1, in2[, mode, axes]) | 使用重叠-加法方法对两个N维数组进行卷积。'
- en: '| [`convolve2d`](generated/scipy.signal.convolve2d.html#scipy.signal.convolve2d
    "scipy.signal.convolve2d")(in1, in2[, mode, boundary, fillvalue]) | Convolve two
    2-dimensional arrays. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`convolve2d`](generated/scipy.signal.convolve2d.html#scipy.signal.convolve2d
    "scipy.signal.convolve2d")(in1, in2[, mode, boundary, fillvalue]) | 对两个二维数组进行卷积。'
- en: '| [`correlate2d`](generated/scipy.signal.correlate2d.html#scipy.signal.correlate2d
    "scipy.signal.correlate2d")(in1, in2[, mode, boundary, ...]) | Cross-correlate
    two 2-dimensional arrays. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`correlate2d`](generated/scipy.signal.correlate2d.html#scipy.signal.correlate2d
    "scipy.signal.correlate2d")(in1, in2[, mode, boundary, ...]) | 对两个二维数组进行交叉相关。'
- en: '| [`sepfir2d`](generated/scipy.signal.sepfir2d.html#scipy.signal.sepfir2d "scipy.signal.sepfir2d")(input, hrow, hcol)
    | Convolve with a 2-D separable FIR filter. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`sepfir2d`](generated/scipy.signal.sepfir2d.html#scipy.signal.sepfir2d "scipy.signal.sepfir2d")(input, hrow, hcol)
    | 使用二维可分离FIR滤波器进行卷积。'
- en: '| [`choose_conv_method`](generated/scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method")(in1, in2[, mode, measure]) | Find the fastest
    convolution/correlation method. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`choose_conv_method`](generated/scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method")(in1, in2[, mode, measure]) | 查找最快的卷积/相关方法。'
- en: '| [`correlation_lags`](generated/scipy.signal.correlation_lags.html#scipy.signal.correlation_lags
    "scipy.signal.correlation_lags")(in1_len, in2_len[, mode]) | Calculates the lag
    / displacement indices array for 1D cross-correlation. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`correlation_lags`](generated/scipy.signal.correlation_lags.html#scipy.signal.correlation_lags
    "scipy.signal.correlation_lags")(in1_len, in2_len[, mode]) | 计算1D交叉相关的滞后/位移索引数组。'
- en: B-splines
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B样条曲线
- en: '| [`bspline`](generated/scipy.signal.bspline.html#scipy.signal.bspline "scipy.signal.bspline")(x, n)
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`bspline`](generated/scipy.signal.bspline.html#scipy.signal.bspline "scipy.signal.bspline")(x, n)
    | B样条基函数。'
- en: Deprecated since version 1.11.0.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.11.0起已弃用。
- en: '|'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`cubic`](generated/scipy.signal.cubic.html#scipy.signal.cubic "scipy.signal.cubic")(x)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`cubic`](generated/scipy.signal.cubic.html#scipy.signal.cubic "scipy.signal.cubic")(x)
    | 三次曲线插值。'
- en: Deprecated since version 1.11.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.11.0起已弃用。
- en: '|'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`quadratic`](generated/scipy.signal.quadratic.html#scipy.signal.quadratic
    "scipy.signal.quadratic")(x) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`quadratic`](generated/scipy.signal.quadratic.html#scipy.signal.quadratic
    "scipy.signal.quadratic")(x) | 二次曲线插值。'
- en: Deprecated since version 1.11.0.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.11.0起已弃用。
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`gauss_spline`](generated/scipy.signal.gauss_spline.html#scipy.signal.gauss_spline
    "scipy.signal.gauss_spline")(x, n) | Gaussian approximation to B-spline basis
    function of order n. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`gauss_spline`](generated/scipy.signal.gauss_spline.html#scipy.signal.gauss_spline
    "scipy.signal.gauss_spline")(x, n) | 高斯逼近的B样条基函数（n阶）。'
- en: '| [`cspline1d`](generated/scipy.signal.cspline1d.html#scipy.signal.cspline1d
    "scipy.signal.cspline1d")(signal[, lamb]) | Compute cubic spline coefficients
    for rank-1 array. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`cspline1d`](generated/scipy.signal.cspline1d.html#scipy.signal.cspline1d
    "scipy.signal.cspline1d")(signal[, lamb]) | 计算一维秩为1的三次样条插值系数。'
- en: '| [`qspline1d`](generated/scipy.signal.qspline1d.html#scipy.signal.qspline1d
    "scipy.signal.qspline1d")(signal[, lamb]) | Compute quadratic spline coefficients
    for rank-1 array. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`qspline1d`](generated/scipy.signal.qspline1d.html#scipy.signal.qspline1d
    "scipy.signal.qspline1d")(signal[, lamb]) | 计算一维秩为1的二次样条插值系数。'
- en: '| [`cspline2d`](generated/scipy.signal.cspline2d.html#scipy.signal.cspline2d
    "scipy.signal.cspline2d")(input[, lambda, precision]) | Coefficients for 2-D cubic
    (3rd order) B-spline. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '[`cspline2d`](generated/scipy.signal.cspline2d.html#scipy.signal.cspline2d
    "scipy.signal.cspline2d")(input[, lambda, precision]) | 二维三次 B 样条的系数。'
- en: '| [`qspline2d`](generated/scipy.signal.qspline2d.html#scipy.signal.qspline2d
    "scipy.signal.qspline2d")(input[, lambda, precision]) | Coefficients for 2-D quadratic
    (2nd order) B-spline: |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '[`qspline2d`](generated/scipy.signal.qspline2d.html#scipy.signal.qspline2d
    "scipy.signal.qspline2d")(input[, lambda, precision]) | 二维二次 B 样条的系数：'
- en: '| [`cspline1d_eval`](generated/scipy.signal.cspline1d_eval.html#scipy.signal.cspline1d_eval
    "scipy.signal.cspline1d_eval")(cj, newx[, dx, x0]) | Evaluate a cubic spline at
    the new set of points. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '[`cspline1d_eval`](generated/scipy.signal.cspline1d_eval.html#scipy.signal.cspline1d_eval
    "scipy.signal.cspline1d_eval")(cj, newx[, dx, x0]) | 在新点集上评估一维三次样条。'
- en: '| [`qspline1d_eval`](generated/scipy.signal.qspline1d_eval.html#scipy.signal.qspline1d_eval
    "scipy.signal.qspline1d_eval")(cj, newx[, dx, x0]) | Evaluate a quadratic spline
    at the new set of points. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '[`qspline1d_eval`](generated/scipy.signal.qspline1d_eval.html#scipy.signal.qspline1d_eval
    "scipy.signal.qspline1d_eval")(cj, newx[, dx, x0]) | 在新点集上评估一维二次样条。'
- en: '| [`spline_filter`](generated/scipy.signal.spline_filter.html#scipy.signal.spline_filter
    "scipy.signal.spline_filter")(Iin[, lmbda]) | Smoothing spline (cubic) filtering
    of a rank-2 array. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '[`spline_filter`](generated/scipy.signal.spline_filter.html#scipy.signal.spline_filter
    "scipy.signal.spline_filter")(Iin[, lmbda]) | 对二维数组进行平滑样条（三次）滤波。'
- en: Filtering
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Filtering
- en: '| [`order_filter`](generated/scipy.signal.order_filter.html#scipy.signal.order_filter
    "scipy.signal.order_filter")(a, domain, rank) | Perform an order filter on an
    N-D array. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '[`order_filter`](generated/scipy.signal.order_filter.html#scipy.signal.order_filter
    "scipy.signal.order_filter")(a, domain, rank) | 在 N 维数组上执行阶次滤波。'
- en: '| [`medfilt`](generated/scipy.signal.medfilt.html#scipy.signal.medfilt "scipy.signal.medfilt")(volume[, kernel_size])
    | Perform a median filter on an N-dimensional array. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '[`medfilt`](generated/scipy.signal.medfilt.html#scipy.signal.medfilt "scipy.signal.medfilt")(volume[, kernel_size])
    | 对 N 维数组执行中值滤波。'
- en: '| [`medfilt2d`](generated/scipy.signal.medfilt2d.html#scipy.signal.medfilt2d
    "scipy.signal.medfilt2d")(input[, kernel_size]) | Median filter a 2-dimensional
    array. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '[`medfilt2d`](generated/scipy.signal.medfilt2d.html#scipy.signal.medfilt2d
    "scipy.signal.medfilt2d")(input[, kernel_size]) | 对二维数组进行中值滤波。'
- en: '| [`wiener`](generated/scipy.signal.wiener.html#scipy.signal.wiener "scipy.signal.wiener")(im[, mysize, noise])
    | Perform a Wiener filter on an N-dimensional array. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '[`wiener`](generated/scipy.signal.wiener.html#scipy.signal.wiener "scipy.signal.wiener")(im[, mysize, noise])
    | 对 N 维数组执行维纳滤波。'
- en: '| [`symiirorder1`](generated/scipy.signal.symiirorder1.html#scipy.signal.symiirorder1
    "scipy.signal.symiirorder1")(input, c0, z1[, precision]) | Implement a smoothing
    IIR filter with mirror-symmetric boundary conditions using a cascade of first-order
    sections. The second section uses a reversed sequence. This implements a system
    with the following transfer function and mirror-symmetric boundary conditions::.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '[`symiirorder1`](generated/scipy.signal.symiirorder1.html#scipy.signal.symiirorder1
    "scipy.signal.symiirorder1")(input, c0, z1[, precision]) | 使用第一阶段级联实现具有镜像对称边界条件的平滑
    IIR 滤波器。第二阶段使用反向序列。'
- en: '| [`symiirorder2`](generated/scipy.signal.symiirorder2.html#scipy.signal.symiirorder2
    "scipy.signal.symiirorder2")(input, r, omega[, precision]) | Implement a smoothing
    IIR filter with mirror-symmetric boundary conditions using a cascade of second-order
    sections. The second section uses a reversed sequence. This implements the following
    transfer function::. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '[`symiirorder2`](generated/scipy.signal.symiirorder2.html#scipy.signal.symiirorder2
    "scipy.signal.symiirorder2")(input, r, omega[, precision]) | 使用第二阶段级联实现具有镜像对称边界条件的平滑
    IIR 滤波器。第二阶段使用反向序列。'
- en: '| [`lfilter`](generated/scipy.signal.lfilter.html#scipy.signal.lfilter "scipy.signal.lfilter")(b, a, x[, axis, zi])
    | Filter data along one-dimension with an IIR or FIR filter. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '[`lfilter`](generated/scipy.signal.lfilter.html#scipy.signal.lfilter "scipy.signal.lfilter")(b, a, x[, axis, zi])
    | 使用 IIR 或 FIR 滤波器沿着一维对数据进行滤波。'
- en: '| [`lfiltic`](generated/scipy.signal.lfiltic.html#scipy.signal.lfiltic "scipy.signal.lfiltic")(b, a, y[, x])
    | Construct initial conditions for lfilter given input and output vectors. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '[`lfiltic`](generated/scipy.signal.lfiltic.html#scipy.signal.lfiltic "scipy.signal.lfiltic")(b, a, y[, x])
    | 给定输入和输出向量，构造 lfilter 的初始条件。'
- en: '| [`lfilter_zi`](generated/scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi
    "scipy.signal.lfilter_zi")(b, a) | Construct initial conditions for lfilter for
    step response steady-state. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '[`lfilter_zi`](generated/scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi
    "scipy.signal.lfilter_zi")(b, a) | 构造 lfilter 的初始条件，用于阶跃响应的稳态。'
- en: '| [`filtfilt`](generated/scipy.signal.filtfilt.html#scipy.signal.filtfilt "scipy.signal.filtfilt")(b, a, x[, axis, padtype, padlen, ...])
    | Apply a digital filter forward and backward to a signal. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`filtfilt`](generated/scipy.signal.filtfilt.html#scipy.signal.filtfilt "scipy.signal.filtfilt")
    | 对信号进行前向和后向数字滤波。 |'
- en: '| [`savgol_filter`](generated/scipy.signal.savgol_filter.html#scipy.signal.savgol_filter
    "scipy.signal.savgol_filter")(x, window_length, polyorder[, ...]) | Apply a Savitzky-Golay
    filter to an array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`savgol_filter`](generated/scipy.signal.savgol_filter.html#scipy.signal.savgol_filter
    "scipy.signal.savgol_filter") | 对数组应用Savitzky-Golay滤波器。 |'
- en: '| [`deconvolve`](generated/scipy.signal.deconvolve.html#scipy.signal.deconvolve
    "scipy.signal.deconvolve")(signal, divisor) | Deconvolves `divisor` out of `signal`
    using inverse filtering. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`deconvolve`](generated/scipy.signal.deconvolve.html#scipy.signal.deconvolve
    "scipy.signal.deconvolve") | 使用逆滤波器将`divisor`从`signal`中去卷积出来。 |'
- en: '| [`sosfilt`](generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt "scipy.signal.sosfilt")(sos, x[, axis, zi])
    | Filter data along one dimension using cascaded second-order sections. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`sosfilt`](generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt "scipy.signal.sosfilt")
    | 使用级联的二阶段沿着一个维度对数据进行滤波。 |'
- en: '| [`sosfilt_zi`](generated/scipy.signal.sosfilt_zi.html#scipy.signal.sosfilt_zi
    "scipy.signal.sosfilt_zi")(sos) | Construct initial conditions for sosfilt for
    step response steady-state. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`sosfilt_zi`](generated/scipy.signal.sosfilt_zi.html#scipy.signal.sosfilt_zi
    "scipy.signal.sosfilt_zi") | 构造sosfilt的初始条件，用于步响应稳态。 |'
- en: '| [`sosfiltfilt`](generated/scipy.signal.sosfiltfilt.html#scipy.signal.sosfiltfilt
    "scipy.signal.sosfiltfilt")(sos, x[, axis, padtype, padlen]) | A forward-backward
    digital filter using cascaded second-order sections. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`sosfiltfilt`](generated/scipy.signal.sosfiltfilt.html#scipy.signal.sosfiltfilt
    "scipy.signal.sosfiltfilt") | 使用级联的二阶段进行前向-后向数字滤波。 |'
- en: '| [`hilbert`](generated/scipy.signal.hilbert.html#scipy.signal.hilbert "scipy.signal.hilbert")(x[, N, axis])
    | Compute the analytic signal, using the Hilbert transform. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`hilbert`](generated/scipy.signal.hilbert.html#scipy.signal.hilbert "scipy.signal.hilbert")
    | 使用Hilbert变换计算解析信号。 |'
- en: '| [`hilbert2`](generated/scipy.signal.hilbert2.html#scipy.signal.hilbert2 "scipy.signal.hilbert2")(x[, N])
    | Compute the ''2-D'' analytic signal of *x* |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`hilbert2`](generated/scipy.signal.hilbert2.html#scipy.signal.hilbert2 "scipy.signal.hilbert2")
    | 计算*x*的二维解析信号。 |'
- en: '| [`decimate`](generated/scipy.signal.decimate.html#scipy.signal.decimate "scipy.signal.decimate")(x, q[, n, ftype, axis, zero_phase])
    | Downsample the signal after applying an anti-aliasing filter. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`decimate`](generated/scipy.signal.decimate.html#scipy.signal.decimate "scipy.signal.decimate")
    | 在应用抗混叠滤波器后对信号进行下采样。 |'
- en: '| [`detrend`](generated/scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")(data[, axis, type, bp, overwrite_data])
    | Remove linear trend along axis from data. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`detrend`](generated/scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    | 从数据中沿着指定轴去除线性趋势。 |'
- en: '| [`resample`](generated/scipy.signal.resample.html#scipy.signal.resample "scipy.signal.resample")(x, num[, t, axis, window, domain])
    | Resample *x* to *num* samples using Fourier method along the given axis. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`resample`](generated/scipy.signal.resample.html#scipy.signal.resample "scipy.signal.resample")
    | 使用傅里叶方法沿给定轴对*x*进行*num*样本的重采样。 |'
- en: '| [`resample_poly`](generated/scipy.signal.resample_poly.html#scipy.signal.resample_poly
    "scipy.signal.resample_poly")(x, up, down[, axis, window, ...]) | Resample *x*
    along the given axis using polyphase filtering. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`resample_poly`](generated/scipy.signal.resample_poly.html#scipy.signal.resample_poly
    "scipy.signal.resample_poly") | 使用多相滤波器沿指定轴对*x*进行重采样。 |'
- en: '| [`upfirdn`](generated/scipy.signal.upfirdn.html#scipy.signal.upfirdn "scipy.signal.upfirdn")(h, x[, up, down, axis, mode, cval])
    | Upsample, FIR filter, and downsample. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`upfirdn`](generated/scipy.signal.upfirdn.html#scipy.signal.upfirdn "scipy.signal.upfirdn")
    | 上采样、FIR滤波和下采样。 |'
- en: Filter design
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Filter design
- en: '| [`bilinear`](generated/scipy.signal.bilinear.html#scipy.signal.bilinear "scipy.signal.bilinear")(b, a[, fs])
    | Return a digital IIR filter from an analog one using a bilinear transform. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`bilinear`](generated/scipy.signal.bilinear.html#scipy.signal.bilinear "scipy.signal.bilinear")
    | 使用双线性变换从模拟滤波器返回数字IIR滤波器。 |'
- en: '| [`bilinear_zpk`](generated/scipy.signal.bilinear_zpk.html#scipy.signal.bilinear_zpk
    "scipy.signal.bilinear_zpk")(z, p, k, fs) | Return a digital IIR filter from an
    analog one using a bilinear transform. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`bilinear_zpk`](generated/scipy.signal.bilinear_zpk.html#scipy.signal.bilinear_zpk
    "scipy.signal.bilinear_zpk") | 使用双线性变换从模拟滤波器返回数字IIR滤波器。 |'
- en: '| [`findfreqs`](generated/scipy.signal.findfreqs.html#scipy.signal.findfreqs
    "scipy.signal.findfreqs")(num, den, N[, kind]) | Find array of frequencies for
    computing the response of an analog filter. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '[`findfreqs`](generated/scipy.signal.findfreqs.html#scipy.signal.findfreqs
    "scipy.signal.findfreqs")(num, den, N[, kind]) | 查找用于计算模拟滤波器响应的频率数组。'
- en: '| [`firls`](generated/scipy.signal.firls.html#scipy.signal.firls "scipy.signal.firls")(numtaps, bands, desired, *[, weight, ...])
    | FIR filter design using least-squares error minimization. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '[`firls`](generated/scipy.signal.firls.html#scipy.signal.firls "scipy.signal.firls")(numtaps, bands, desired, *[, weight, ...])
    | 使用最小二乘误差最小化设计FIR滤波器。'
- en: '| [`firwin`](generated/scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")(numtaps, cutoff, *[, width, window, ...])
    | FIR filter design using the window method. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '[`firwin`](generated/scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")(numtaps, cutoff, *[, width, window, ...])
    | 使用窗口方法设计FIR滤波器。'
- en: '| [`firwin2`](generated/scipy.signal.firwin2.html#scipy.signal.firwin2 "scipy.signal.firwin2")(numtaps, freq, gain, *[, nfreqs, ...])
    | FIR filter design using the window method. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '[`firwin2`](generated/scipy.signal.firwin2.html#scipy.signal.firwin2 "scipy.signal.firwin2")(numtaps, freq, gain, *[, nfreqs, ...])
    | 使用窗口方法设计FIR滤波器。'
- en: '| [`freqs`](generated/scipy.signal.freqs.html#scipy.signal.freqs "scipy.signal.freqs")(b, a[, worN, plot])
    | Compute frequency response of analog filter. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '[`freqs`](generated/scipy.signal.freqs.html#scipy.signal.freqs "scipy.signal.freqs")(b, a[, worN, plot])
    | 计算模拟滤波器的频率响应。'
- en: '| [`freqs_zpk`](generated/scipy.signal.freqs_zpk.html#scipy.signal.freqs_zpk
    "scipy.signal.freqs_zpk")(z, p, k[, worN]) | Compute frequency response of analog
    filter. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '[`freqs_zpk`](generated/scipy.signal.freqs_zpk.html#scipy.signal.freqs_zpk
    "scipy.signal.freqs_zpk")(z, p, k[, worN]) | 计算模拟滤波器的频率响应。'
- en: '| [`freqz`](generated/scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz")(b[, a, worN, whole, plot, fs, ...])
    | Compute the frequency response of a digital filter. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '[`freqz`](generated/scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz")(b[, a, worN, whole, plot, fs, ...])
    | 计算数字滤波器的频率响应。'
- en: '| [`freqz_zpk`](generated/scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk
    "scipy.signal.freqz_zpk")(z, p, k[, worN, whole, fs]) | Compute the frequency
    response of a digital filter in ZPK form. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '[`freqz_zpk`](generated/scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk
    "scipy.signal.freqz_zpk")(z, p, k[, worN, whole, fs]) | 计算ZPK形式数字滤波器的频率响应。'
- en: '| [`sosfreqz`](generated/scipy.signal.sosfreqz.html#scipy.signal.sosfreqz "scipy.signal.sosfreqz")(sos[, worN, whole, fs])
    | Compute the frequency response of a digital filter in SOS format. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '[`sosfreqz`](generated/scipy.signal.sosfreqz.html#scipy.signal.sosfreqz "scipy.signal.sosfreqz")(sos[, worN, whole, fs])
    | 计算SOS格式数字滤波器的频率响应。'
- en: '| [`gammatone`](generated/scipy.signal.gammatone.html#scipy.signal.gammatone
    "scipy.signal.gammatone")(freq, ftype[, order, numtaps, fs]) | Gammatone filter
    design. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '[`gammatone`](generated/scipy.signal.gammatone.html#scipy.signal.gammatone
    "scipy.signal.gammatone")(freq, ftype[, order, numtaps, fs]) | Gammatone滤波器设计。'
- en: '| [`group_delay`](generated/scipy.signal.group_delay.html#scipy.signal.group_delay
    "scipy.signal.group_delay")(system[, w, whole, fs]) | Compute the group delay
    of a digital filter. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '[`group_delay`](generated/scipy.signal.group_delay.html#scipy.signal.group_delay
    "scipy.signal.group_delay")(system[, w, whole, fs]) | 计算数字滤波器的群延迟。'
- en: '| [`iirdesign`](generated/scipy.signal.iirdesign.html#scipy.signal.iirdesign
    "scipy.signal.iirdesign")(wp, ws, gpass, gstop[, analog, ...]) | Complete IIR
    digital and analog filter design. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '[`iirdesign`](generated/scipy.signal.iirdesign.html#scipy.signal.iirdesign
    "scipy.signal.iirdesign")(wp, ws, gpass, gstop[, analog, ...]) | 完成IIR数字和模拟滤波器设计。'
- en: '| [`iirfilter`](generated/scipy.signal.iirfilter.html#scipy.signal.iirfilter
    "scipy.signal.iirfilter")(N, Wn[, rp, rs, btype, analog, ...]) | IIR digital and
    analog filter design given order and critical points. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '[`iirfilter`](generated/scipy.signal.iirfilter.html#scipy.signal.iirfilter
    "scipy.signal.iirfilter")(N, Wn[, rp, rs, btype, analog, ...]) | 给定阶数和关键点，设计IIR数字和模拟滤波器。'
- en: '| [`kaiser_atten`](generated/scipy.signal.kaiser_atten.html#scipy.signal.kaiser_atten
    "scipy.signal.kaiser_atten")(numtaps, width) | Compute the attenuation of a Kaiser
    FIR filter. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '[`kaiser_atten`](generated/scipy.signal.kaiser_atten.html#scipy.signal.kaiser_atten
    "scipy.signal.kaiser_atten")(numtaps, width) | 计算Kaiser FIR滤波器的衰减。'
- en: '| [`kaiser_beta`](generated/scipy.signal.kaiser_beta.html#scipy.signal.kaiser_beta
    "scipy.signal.kaiser_beta")(a) | Compute the Kaiser parameter *beta*, given the
    attenuation *a*. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '[`kaiser_beta`](generated/scipy.signal.kaiser_beta.html#scipy.signal.kaiser_beta
    "scipy.signal.kaiser_beta")(a) | 给定衰减*a*，计算Kaiser参数*beta*。'
- en: '| [`kaiserord`](generated/scipy.signal.kaiserord.html#scipy.signal.kaiserord
    "scipy.signal.kaiserord")(ripple, width) | Determine the filter window parameters
    for the Kaiser window method. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '[`kaiserord`](generated/scipy.signal.kaiserord.html#scipy.signal.kaiserord
    "scipy.signal.kaiserord")(ripple, width) | 确定Kaiser窗口方法的滤波器窗口参数。'
- en: '| [`minimum_phase`](generated/scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")(h[, method, n_fft]) | Convert a linear-phase FIR
    filter to minimum phase |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '[`minimum_phase`](generated/scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")(h[, method, n_fft]) | 将线性相位 FIR 滤波器转换为最小相位。'
- en: '| [`savgol_coeffs`](generated/scipy.signal.savgol_coeffs.html#scipy.signal.savgol_coeffs
    "scipy.signal.savgol_coeffs")(window_length, polyorder[, ...]) | Compute the coefficients
    for a 1-D Savitzky-Golay FIR filter. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '[`savgol_coeffs`](generated/scipy.signal.savgol_coeffs.html#scipy.signal.savgol_coeffs
    "scipy.signal.savgol_coeffs")(window_length, polyorder[, ...]) | 计算 1-D Savitzky-Golay
    FIR 滤波器的系数。'
- en: '| [`remez`](generated/scipy.signal.remez.html#scipy.signal.remez "scipy.signal.remez")(numtaps, bands, desired, *[, weight, ...])
    | Calculate the minimax optimal filter using the Remez exchange algorithm. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '[`remez`](generated/scipy.signal.remez.html#scipy.signal.remez "scipy.signal.remez")(numtaps, bands, desired, *[, weight, ...])
    | 使用 Remez 交换算法计算最小最大化优化滤波器。'
- en: '| [`unique_roots`](generated/scipy.signal.unique_roots.html#scipy.signal.unique_roots
    "scipy.signal.unique_roots")(p[, tol, rtype]) | Determine unique roots and their
    multiplicities from a list of roots. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '[`unique_roots`](generated/scipy.signal.unique_roots.html#scipy.signal.unique_roots
    "scipy.signal.unique_roots")(p[, tol, rtype]) | 从根列表中确定唯一的根及其重数。'
- en: '| [`residue`](generated/scipy.signal.residue.html#scipy.signal.residue "scipy.signal.residue")(b, a[, tol, rtype])
    | Compute partial-fraction expansion of b(s) / a(s). |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '[`residue`](generated/scipy.signal.residue.html#scipy.signal.residue "scipy.signal.residue")(b, a[, tol, rtype])
    | 计算 b(s) / a(s) 的部分分数展开。'
- en: '| [`residuez`](generated/scipy.signal.residuez.html#scipy.signal.residuez "scipy.signal.residuez")(b, a[, tol, rtype])
    | Compute partial-fraction expansion of b(z) / a(z). |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '[`residuez`](generated/scipy.signal.residuez.html#scipy.signal.residuez "scipy.signal.residuez")(b, a[, tol, rtype])
    | 计算 b(z) / a(z) 的部分分数展开。'
- en: '| [`invres`](generated/scipy.signal.invres.html#scipy.signal.invres "scipy.signal.invres")(r, p, k[, tol, rtype])
    | Compute b(s) and a(s) from partial fraction expansion. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '[`invres`](generated/scipy.signal.invres.html#scipy.signal.invres "scipy.signal.invres")(r, p, k[, tol, rtype])
    | 从部分分数展开中计算 b(s) 和 a(s)。'
- en: '| [`invresz`](generated/scipy.signal.invresz.html#scipy.signal.invresz "scipy.signal.invresz")(r, p, k[, tol, rtype])
    | Compute b(z) and a(z) from partial fraction expansion. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '[`invresz`](generated/scipy.signal.invresz.html#scipy.signal.invresz "scipy.signal.invresz")(r, p, k[, tol, rtype])
    | 从部分分数展开中计算 b(z) 和 a(z)。'
- en: '| [`BadCoefficients`](generated/scipy.signal.BadCoefficients.html#scipy.signal.BadCoefficients
    "scipy.signal.BadCoefficients") | Warning about badly conditioned filter coefficients
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '[`BadCoefficients`](generated/scipy.signal.BadCoefficients.html#scipy.signal.BadCoefficients
    "scipy.signal.BadCoefficients") | 关于条件不佳的滤波器系数的警告。'
- en: 'Lower-level filter design functions:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 低级滤波器设计函数：
- en: '| [`abcd_normalize`](generated/scipy.signal.abcd_normalize.html#scipy.signal.abcd_normalize
    "scipy.signal.abcd_normalize")([A, B, C, D]) | Check state-space matrices and
    ensure they are 2-D. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '[`abcd_normalize`](generated/scipy.signal.abcd_normalize.html#scipy.signal.abcd_normalize
    "scipy.signal.abcd_normalize")([A, B, C, D]) | 检查状态空间矩阵并确保其为二维。'
- en: '| [`band_stop_obj`](generated/scipy.signal.band_stop_obj.html#scipy.signal.band_stop_obj
    "scipy.signal.band_stop_obj")(wp, ind, passb, stopb, gpass, ...) | Band Stop Objective
    Function for order minimization. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '[`band_stop_obj`](generated/scipy.signal.band_stop_obj.html#scipy.signal.band_stop_obj
    "scipy.signal.band_stop_obj")(wp, ind, passb, stopb, gpass, ...) | 频带阻止目标函数，用于最小化阶数。'
- en: '| [`besselap`](generated/scipy.signal.besselap.html#scipy.signal.besselap "scipy.signal.besselap")(N[, norm])
    | Return (z,p,k) for analog prototype of an Nth-order Bessel filter. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '[`besselap`](generated/scipy.signal.besselap.html#scipy.signal.besselap "scipy.signal.besselap")(N[, norm])
    | 返回 N 阶贝塞尔滤波器的模拟原型 (z, p, k)。'
- en: '| [`buttap`](generated/scipy.signal.buttap.html#scipy.signal.buttap "scipy.signal.buttap")(N)
    | Return (z,p,k) for analog prototype of Nth-order Butterworth filter. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '[`buttap`](generated/scipy.signal.buttap.html#scipy.signal.buttap "scipy.signal.buttap")(N)
    | 返回 N 阶巴特沃斯滤波器的模拟原型 (z, p, k)。'
- en: '| [`cheb1ap`](generated/scipy.signal.cheb1ap.html#scipy.signal.cheb1ap "scipy.signal.cheb1ap")(N, rp)
    | Return (z,p,k) for Nth-order Chebyshev type I analog lowpass filter. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '[`cheb1ap`](generated/scipy.signal.cheb1ap.html#scipy.signal.cheb1ap "scipy.signal.cheb1ap")(N, rp)
    | 返回 N 阶切比雪夫类型 I 模拟低通滤波器的 (z, p, k)。'
- en: '| [`cheb2ap`](generated/scipy.signal.cheb2ap.html#scipy.signal.cheb2ap "scipy.signal.cheb2ap")(N, rs)
    | Return (z,p,k) for Nth-order Chebyshev type II analog lowpass filter. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '[`cheb2ap`](generated/scipy.signal.cheb2ap.html#scipy.signal.cheb2ap "scipy.signal.cheb2ap")(N, rs)
    | 返回 N 阶切比雪夫类型 II 模拟低通滤波器的 (z, p, k)。'
- en: '| [`cmplx_sort`](generated/scipy.signal.cmplx_sort.html#scipy.signal.cmplx_sort
    "scipy.signal.cmplx_sort")(p) |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '[`cmplx_sort`](generated/scipy.signal.cmplx_sort.html#scipy.signal.cmplx_sort
    "scipy.signal.cmplx_sort")(p) |  |'
- en: '| [`ellipap`](generated/scipy.signal.ellipap.html#scipy.signal.ellipap "scipy.signal.ellipap")(N, rp, rs)
    | Return (z,p,k) of Nth-order elliptic analog lowpass filter. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`ellipap`](generated/scipy.signal.ellipap.html#scipy.signal.ellipap "scipy.signal.ellipap")(N, rp, rs)
    | 返回第 N 阶椭圆模拟低通滤波器的 (z,p,k)。 |'
- en: '| [`lp2bp`](generated/scipy.signal.lp2bp.html#scipy.signal.lp2bp "scipy.signal.lp2bp")(b, a[, wo, bw])
    | Transform a lowpass filter prototype to a bandpass filter. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2bp`](generated/scipy.signal.lp2bp.html#scipy.signal.lp2bp "scipy.signal.lp2bp")(b, a[, wo, bw])
    | 将低通滤波器原型转换到带通滤波器。 |'
- en: '| [`lp2bp_zpk`](generated/scipy.signal.lp2bp_zpk.html#scipy.signal.lp2bp_zpk
    "scipy.signal.lp2bp_zpk")(z, p, k[, wo, bw]) | Transform a lowpass filter prototype
    to a bandpass filter. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2bp_zpk`](generated/scipy.signal.lp2bp_zpk.html#scipy.signal.lp2bp_zpk
    "scipy.signal.lp2bp_zpk")(z, p, k[, wo, bw]) | 将低通滤波器原型转换到带通滤波器。 |'
- en: '| [`lp2bs`](generated/scipy.signal.lp2bs.html#scipy.signal.lp2bs "scipy.signal.lp2bs")(b, a[, wo, bw])
    | Transform a lowpass filter prototype to a bandstop filter. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2bs`](generated/scipy.signal.lp2bs.html#scipy.signal.lp2bs "scipy.signal.lp2bs")(b, a[, wo, bw])
    | 将低通滤波器原型转换到带阻滤波器。 |'
- en: '| [`lp2bs_zpk`](generated/scipy.signal.lp2bs_zpk.html#scipy.signal.lp2bs_zpk
    "scipy.signal.lp2bs_zpk")(z, p, k[, wo, bw]) | Transform a lowpass filter prototype
    to a bandstop filter. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2bs_zpk`](generated/scipy.signal.lp2bs_zpk.html#scipy.signal.lp2bs_zpk
    "scipy.signal.lp2bs_zpk")(z, p, k[, wo, bw]) | 将低通滤波器原型转换到带阻滤波器。 |'
- en: '| [`lp2hp`](generated/scipy.signal.lp2hp.html#scipy.signal.lp2hp "scipy.signal.lp2hp")(b, a[, wo])
    | Transform a lowpass filter prototype to a highpass filter. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2hp`](generated/scipy.signal.lp2hp.html#scipy.signal.lp2hp "scipy.signal.lp2hp")(b, a[, wo])
    | 将低通滤波器原型转换到高通滤波器。 |'
- en: '| [`lp2hp_zpk`](generated/scipy.signal.lp2hp_zpk.html#scipy.signal.lp2hp_zpk
    "scipy.signal.lp2hp_zpk")(z, p, k[, wo]) | Transform a lowpass filter prototype
    to a highpass filter. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2hp_zpk`](generated/scipy.signal.lp2hp_zpk.html#scipy.signal.lp2hp_zpk
    "scipy.signal.lp2hp_zpk")(z, p, k[, wo]) | 将低通滤波器原型转换到高通滤波器。 |'
- en: '| [`lp2lp`](generated/scipy.signal.lp2lp.html#scipy.signal.lp2lp "scipy.signal.lp2lp")(b, a[, wo])
    | Transform a lowpass filter prototype to a different frequency. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2lp`](generated/scipy.signal.lp2lp.html#scipy.signal.lp2lp "scipy.signal.lp2lp")(b, a[, wo])
    | 将低通滤波器原型转换到不同的频率。 |'
- en: '| [`lp2lp_zpk`](generated/scipy.signal.lp2lp_zpk.html#scipy.signal.lp2lp_zpk
    "scipy.signal.lp2lp_zpk")(z, p, k[, wo]) | Transform a lowpass filter prototype
    to a different frequency. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`lp2lp_zpk`](generated/scipy.signal.lp2lp_zpk.html#scipy.signal.lp2lp_zpk
    "scipy.signal.lp2lp_zpk")(z, p, k[, wo]) | 将低通滤波器原型转换到不同的频率。 |'
- en: '| [`normalize`](generated/scipy.signal.normalize.html#scipy.signal.normalize
    "scipy.signal.normalize")(b, a) | Normalize numerator/denominator of a continuous-time
    transfer function. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`normalize`](generated/scipy.signal.normalize.html#scipy.signal.normalize
    "scipy.signal.normalize")(b, a) | 归一化连续时间传递函数的分子/分母。 |'
- en: Matlab-style IIR filter design
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matlab 风格 IIR 滤波器设计
- en: '| [`butter`](generated/scipy.signal.butter.html#scipy.signal.butter "scipy.signal.butter")(N, Wn[, btype, analog, output, fs])
    | Butterworth digital and analog filter design. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`butter`](generated/scipy.signal.butter.html#scipy.signal.butter "scipy.signal.butter")(N, Wn[, btype, analog, output, fs])
    | Butterworth 数字和模拟滤波器设计。 |'
- en: '| [`buttord`](generated/scipy.signal.buttord.html#scipy.signal.buttord "scipy.signal.buttord")(wp, ws, gpass, gstop[, analog, fs])
    | Butterworth filter order selection. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`buttord`](generated/scipy.signal.buttord.html#scipy.signal.buttord "scipy.signal.buttord")(wp, ws, gpass, gstop[, analog, fs])
    | Butterworth 滤波器阶数选择。 |'
- en: '| [`cheby1`](generated/scipy.signal.cheby1.html#scipy.signal.cheby1 "scipy.signal.cheby1")(N, rp, Wn[, btype, analog, output, fs])
    | Chebyshev type I digital and analog filter design. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`cheby1`](generated/scipy.signal.cheby1.html#scipy.signal.cheby1 "scipy.signal.cheby1")(N, rp, Wn[, btype, analog, output, fs])
    | Chebyshev I 数字和模拟滤波器设计。 |'
- en: '| [`cheb1ord`](generated/scipy.signal.cheb1ord.html#scipy.signal.cheb1ord "scipy.signal.cheb1ord")(wp, ws, gpass, gstop[, analog, fs])
    | Chebyshev type I filter order selection. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`cheb1ord`](generated/scipy.signal.cheb1ord.html#scipy.signal.cheb1ord "scipy.signal.cheb1ord")(wp, ws, gpass, gstop[, analog, fs])
    | Chebyshev I 滤波器阶数选择。 |'
- en: '| [`cheby2`](generated/scipy.signal.cheby2.html#scipy.signal.cheby2 "scipy.signal.cheby2")(N, rs, Wn[, btype, analog, output, fs])
    | Chebyshev type II digital and analog filter design. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`cheby2`](generated/scipy.signal.cheby2.html#scipy.signal.cheby2 "scipy.signal.cheby2")(N, rs, Wn[, btype, analog, output, fs])
    | Chebyshev II 数字和模拟滤波器设计。 |'
- en: '| [`cheb2ord`](generated/scipy.signal.cheb2ord.html#scipy.signal.cheb2ord "scipy.signal.cheb2ord")(wp, ws, gpass, gstop[, analog, fs])
    | Chebyshev type II filter order selection. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`cheb2ord`](generated/scipy.signal.cheb2ord.html#scipy.signal.cheb2ord "scipy.signal.cheb2ord")(wp, ws, gpass, gstop[, analog, fs])
    | Chebyshev II 滤波器阶数选择。 |'
- en: '| [`ellip`](generated/scipy.signal.ellip.html#scipy.signal.ellip "scipy.signal.ellip")(N, rp, rs, Wn[, btype, analog, output, fs])
    | Elliptic (Cauer) digital and analog filter design. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`ellip`](generated/scipy.signal.ellip.html#scipy.signal.ellip "scipy.signal.ellip")(N, rp, rs, Wn[, btype, analog, output, fs])
    | 椭圆（考尔）数字和模拟滤波器设计。 |'
- en: '| [`ellipord`](generated/scipy.signal.ellipord.html#scipy.signal.ellipord "scipy.signal.ellipord")(wp, ws, gpass, gstop[, analog, fs])
    | Elliptic (Cauer) filter order selection. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`ellipord`](generated/scipy.signal.ellipord.html#scipy.signal.ellipord "scipy.signal.ellipord")(wp, ws, gpass, gstop[, analog, fs])
    | 椭圆（考尔）滤波器阶数选择。 |'
- en: '| [`bessel`](generated/scipy.signal.bessel.html#scipy.signal.bessel "scipy.signal.bessel")(N, Wn[, btype, analog, output, norm, fs])
    | Bessel/Thomson digital and analog filter design. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`bessel`](generated/scipy.signal.bessel.html#scipy.signal.bessel "scipy.signal.bessel")(N, Wn[, btype, analog, output, norm, fs])
    | Bessel/Thomson数字和模拟滤波器设计。 |'
- en: '| [`iirnotch`](generated/scipy.signal.iirnotch.html#scipy.signal.iirnotch "scipy.signal.iirnotch")(w0, Q[, fs])
    | Design second-order IIR notch digital filter. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`iirnotch`](generated/scipy.signal.iirnotch.html#scipy.signal.iirnotch "scipy.signal.iirnotch")(w0, Q[, fs])
    | 设计二阶IIR陷波数字滤波器。 |'
- en: '| [`iirpeak`](generated/scipy.signal.iirpeak.html#scipy.signal.iirpeak "scipy.signal.iirpeak")(w0, Q[, fs])
    | Design second-order IIR peak (resonant) digital filter. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`iirpeak`](generated/scipy.signal.iirpeak.html#scipy.signal.iirpeak "scipy.signal.iirpeak")(w0, Q[, fs])
    | 设计二阶IIR峰值（共振）数字滤波器。 |'
- en: '| [`iircomb`](generated/scipy.signal.iircomb.html#scipy.signal.iircomb "scipy.signal.iircomb")(w0, Q[, ftype, fs, pass_zero])
    | Design IIR notching or peaking digital comb filter. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`iircomb`](generated/scipy.signal.iircomb.html#scipy.signal.iircomb "scipy.signal.iircomb")(w0, Q[, ftype, fs, pass_zero])
    | 设计IIR凹凸或峰值数字梳状滤波器。 |'
- en: Continuous-time linear systems
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连续时间线性系统
- en: '| [`lti`](generated/scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti")(*system)
    | Continuous-time linear time invariant system base class. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`lti`](generated/scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti")(*system)
    | 连续时间线性时不变系统基类。 |'
- en: '| [`StateSpace`](generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace")(*system, **kwargs) | Linear Time Invariant system in
    state-space form. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`StateSpace`](generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace")(*system, **kwargs) | 状态空间形式的线性时不变系统。 |'
- en: '| [`TransferFunction`](generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction")(*system, **kwargs) | Linear Time Invariant system
    class in transfer function form. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`TransferFunction`](generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction")(*system, **kwargs) | 传递函数形式的线性时不变系统类。 |'
- en: '| [`ZerosPolesGain`](generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain")(*system, **kwargs) | Linear Time Invariant system
    class in zeros, poles, gain form. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`ZerosPolesGain`](generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain")(*system, **kwargs) | 零极点增益形式的线性时不变系统类。 |'
- en: '| [`lsim`](generated/scipy.signal.lsim.html#scipy.signal.lsim "scipy.signal.lsim")(system, U, T[, X0, interp])
    | Simulate output of a continuous-time linear system. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`lsim`](generated/scipy.signal.lsim.html#scipy.signal.lsim "scipy.signal.lsim")(system, U, T[, X0, interp])
    | 模拟连续时间线性系统的输出。 |'
- en: '| [`lsim2`](generated/scipy.signal.lsim2.html#scipy.signal.lsim2 "scipy.signal.lsim2")(system[, U, T, X0])
    | Simulate output of a continuous-time linear system, by using the ODE solver
    [`scipy.integrate.odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint"). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`lsim2`](generated/scipy.signal.lsim2.html#scipy.signal.lsim2 "scipy.signal.lsim2")(system[, U, T, X0])
    | 使用ODE求解器 [`scipy.integrate.odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") 模拟连续时间线性系统的输出。 |'
- en: '| [`impulse`](generated/scipy.signal.impulse.html#scipy.signal.impulse "scipy.signal.impulse")(system[, X0, T, N])
    | Impulse response of continuous-time system. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`impulse`](generated/scipy.signal.impulse.html#scipy.signal.impulse "scipy.signal.impulse")(system[, X0, T, N])
    | 连续时间系统的冲激响应。 |'
- en: '| [`impulse2`](generated/scipy.signal.impulse2.html#scipy.signal.impulse2 "scipy.signal.impulse2")(system[, X0, T, N])
    | Impulse response of a single-input, continuous-time linear system. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`impulse2`](generated/scipy.signal.impulse2.html#scipy.signal.impulse2 "scipy.signal.impulse2")(system[, X0, T, N])
    | 单输入连续时间线性系统的冲激响应。 |'
- en: '| [`step`](generated/scipy.signal.step.html#scipy.signal.step "scipy.signal.step")(system[, X0, T, N])
    | Step response of continuous-time system. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`step`](generated/scipy.signal.step.html#scipy.signal.step "scipy.signal.step")(system[, X0, T, N])
    | 连续时间系统的阶跃响应。 |'
- en: '| [`step2`](generated/scipy.signal.step2.html#scipy.signal.step2 "scipy.signal.step2")(system[, X0, T, N])
    | Step response of continuous-time system. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`step2`](generated/scipy.signal.step2.html#scipy.signal.step2 "scipy.signal.step2")(system[, X0, T, N])
    | 连续时间系统的阶跃响应。 |'
- en: '| [`freqresp`](generated/scipy.signal.freqresp.html#scipy.signal.freqresp "scipy.signal.freqresp")(system[, w, n])
    | Calculate the frequency response of a continuous-time system. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`freqresp`](generated/scipy.signal.freqresp.html#scipy.signal.freqresp "scipy.signal.freqresp")(system[, w, n])
    | 计算连续时间系统的频率响应。 |'
- en: '| [`bode`](generated/scipy.signal.bode.html#scipy.signal.bode "scipy.signal.bode")(system[, w, n])
    | Calculate Bode magnitude and phase data of a continuous-time system. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`bode`](generated/scipy.signal.bode.html#scipy.signal.bode "scipy.signal.bode")(system[, w, n])
    | 计算连续时间系统的波德幅度和相位数据。 |'
- en: Discrete-time linear systems
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散时间线性系统
- en: '| [`dlti`](generated/scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti")(*system, **kwargs)
    | Discrete-time linear time invariant system base class. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`dlti`](generated/scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti")(*system, **kwargs)
    | 离散时间线性时不变系统基类。 |'
- en: '| [`StateSpace`](generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace")(*system, **kwargs) | Linear Time Invariant system in
    state-space form. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`StateSpace`](generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace")(*system, **kwargs) | 状态空间形式的线性时不变系统。 |'
- en: '| [`TransferFunction`](generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction")(*system, **kwargs) | Linear Time Invariant system
    class in transfer function form. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`TransferFunction`](generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction")(*system, **kwargs) | 传递函数形式的线性时不变系统类。 |'
- en: '| [`ZerosPolesGain`](generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain")(*system, **kwargs) | Linear Time Invariant system
    class in zeros, poles, gain form. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`ZerosPolesGain`](generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain")(*system, **kwargs) | 零点、极点、增益形式的线性时不变系统类。 |'
- en: '| [`dlsim`](generated/scipy.signal.dlsim.html#scipy.signal.dlsim "scipy.signal.dlsim")(system, u[, t, x0])
    | Simulate output of a discrete-time linear system. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`dlsim`](generated/scipy.signal.dlsim.html#scipy.signal.dlsim "scipy.signal.dlsim")(system, u[, t, x0])
    | 模拟离散时间线性系统的输出。 |'
- en: '| [`dimpulse`](generated/scipy.signal.dimpulse.html#scipy.signal.dimpulse "scipy.signal.dimpulse")(system[, x0, t, n])
    | Impulse response of discrete-time system. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`dimpulse`](generated/scipy.signal.dimpulse.html#scipy.signal.dimpulse "scipy.signal.dimpulse")(system[, x0, t, n])
    | 离散时间系统的冲激响应。 |'
- en: '| [`dstep`](generated/scipy.signal.dstep.html#scipy.signal.dstep "scipy.signal.dstep")(system[, x0, t, n])
    | Step response of discrete-time system. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`dstep`](generated/scipy.signal.dstep.html#scipy.signal.dstep "scipy.signal.dstep")(system[, x0, t, n])
    | 离散时间系统的阶跃响应。 |'
- en: '| [`dfreqresp`](generated/scipy.signal.dfreqresp.html#scipy.signal.dfreqresp
    "scipy.signal.dfreqresp")(system[, w, n, whole]) | Calculate the frequency response
    of a discrete-time system. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`dfreqresp`](generated/scipy.signal.dfreqresp.html#scipy.signal.dfreqresp
    "scipy.signal.dfreqresp")(system[, w, n, whole]) | 计算离散时间系统的频率响应。 |'
- en: '| [`dbode`](generated/scipy.signal.dbode.html#scipy.signal.dbode "scipy.signal.dbode")(system[, w, n])
    | Calculate Bode magnitude and phase data of a discrete-time system. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`dbode`](generated/scipy.signal.dbode.html#scipy.signal.dbode "scipy.signal.dbode")(system[, w, n])
    | 计算离散时间系统的波德幅度和相位数据。 |'
- en: LTI representations
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LTI 表示
- en: '| [`tf2zpk`](generated/scipy.signal.tf2zpk.html#scipy.signal.tf2zpk "scipy.signal.tf2zpk")(b, a)
    | Return zero, pole, gain (z, p, k) representation from a numerator, denominator
    representation of a linear filter. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`tf2zpk`](generated/scipy.signal.tf2zpk.html#scipy.signal.tf2zpk "scipy.signal.tf2zpk")(b, a)
    | 从分子、分母表示的线性滤波器返回零点、极点、增益（z, p, k）表示。 |'
- en: '| [`tf2sos`](generated/scipy.signal.tf2sos.html#scipy.signal.tf2sos "scipy.signal.tf2sos")(b, a[, pairing, analog])
    | Return second-order sections from transfer function representation |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`tf2sos`](generated/scipy.signal.tf2sos.html#scipy.signal.tf2sos "scipy.signal.tf2sos")(b, a[, pairing, analog])
    | 从传递函数表示返回二阶段节。 |'
- en: '| [`tf2ss`](generated/scipy.signal.tf2ss.html#scipy.signal.tf2ss "scipy.signal.tf2ss")(num, den)
    | Transfer function to state-space representation. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`tf2ss`](generated/scipy.signal.tf2ss.html#scipy.signal.tf2ss "scipy.signal.tf2ss")(num, den)
    | 传递函数到状态空间表示。 |'
- en: '| [`zpk2tf`](generated/scipy.signal.zpk2tf.html#scipy.signal.zpk2tf "scipy.signal.zpk2tf")(z, p, k)
    | Return polynomial transfer function representation from zeros and poles |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`zpk2tf`](generated/scipy.signal.zpk2tf.html#scipy.signal.zpk2tf "scipy.signal.zpk2tf")(z, p, k)
    | 从零点和极点返回多项式传递函数表示。 |'
- en: '| [`zpk2sos`](generated/scipy.signal.zpk2sos.html#scipy.signal.zpk2sos "scipy.signal.zpk2sos")(z, p, k[, pairing, analog])
    | Return second-order sections from zeros, poles, and gain of a system |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`zpk2sos`](generated/scipy.signal.zpk2sos.html#scipy.signal.zpk2sos "scipy.signal.zpk2sos")(z, p, k[, pairing, analog])
    | 从系统的零点、极点和增益返回二阶段节。 |'
- en: '| [`zpk2ss`](generated/scipy.signal.zpk2ss.html#scipy.signal.zpk2ss "scipy.signal.zpk2ss")(z, p, k)
    | Zero-pole-gain representation to state-space representation |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`zpk2ss`](generated/scipy.signal.zpk2ss.html#scipy.signal.zpk2ss "scipy.signal.zpk2ss")(z, p, k)
    | 零极点增益表示转换为状态空间表示 |'
- en: '| [`ss2tf`](generated/scipy.signal.ss2tf.html#scipy.signal.ss2tf "scipy.signal.ss2tf")(A, B, C, D[, input])
    | State-space to transfer function. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`ss2tf`](generated/scipy.signal.ss2tf.html#scipy.signal.ss2tf "scipy.signal.ss2tf")(A, B, C, D[, input])
    | 状态空间到传递函数的转换。 |'
- en: '| [`ss2zpk`](generated/scipy.signal.ss2zpk.html#scipy.signal.ss2zpk "scipy.signal.ss2zpk")(A, B, C, D[, input])
    | State-space representation to zero-pole-gain representation. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`ss2zpk`](generated/scipy.signal.ss2zpk.html#scipy.signal.ss2zpk "scipy.signal.ss2zpk")(A, B, C, D[, input])
    | 状态空间表示转换为零极点增益表示。 |'
- en: '| [`sos2zpk`](generated/scipy.signal.sos2zpk.html#scipy.signal.sos2zpk "scipy.signal.sos2zpk")(sos)
    | Return zeros, poles, and gain of a series of second-order sections |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`sos2zpk`](generated/scipy.signal.sos2zpk.html#scipy.signal.sos2zpk "scipy.signal.sos2zpk")(sos)
    | 返回一系列二阶段的零点、极点和增益 |'
- en: '| [`sos2tf`](generated/scipy.signal.sos2tf.html#scipy.signal.sos2tf "scipy.signal.sos2tf")(sos)
    | Return a single transfer function from a series of second-order sections |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`sos2tf`](generated/scipy.signal.sos2tf.html#scipy.signal.sos2tf "scipy.signal.sos2tf")(sos)
    | 从一系列二阶段得到单一传递函数 |'
- en: '| [`cont2discrete`](generated/scipy.signal.cont2discrete.html#scipy.signal.cont2discrete
    "scipy.signal.cont2discrete")(system, dt[, method, alpha]) | Transform a continuous
    to a discrete state-space system. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`cont2discrete`](generated/scipy.signal.cont2discrete.html#scipy.signal.cont2discrete
    "scipy.signal.cont2discrete")(system, dt[, method, alpha]) | 将连续状态空间系统转换为离散系统。
    |'
- en: '| [`place_poles`](generated/scipy.signal.place_poles.html#scipy.signal.place_poles
    "scipy.signal.place_poles")(A, B, poles[, method, rtol, maxiter]) | Compute K
    such that eigenvalues (A - dot(B, K))=poles. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`place_poles`](generated/scipy.signal.place_poles.html#scipy.signal.place_poles
    "scipy.signal.place_poles")(A, B, poles[, method, rtol, maxiter]) | 计算K使得特征值（A
    - dot(B, K))=poles。 |'
- en: Waveforms
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 波形
- en: '| [`chirp`](generated/scipy.signal.chirp.html#scipy.signal.chirp "scipy.signal.chirp")(t, f0, t1, f1[, method, phi, vertex_zero])
    | Frequency-swept cosine generator. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`chirp`](generated/scipy.signal.chirp.html#scipy.signal.chirp "scipy.signal.chirp")(t, f0, t1, f1[, method, phi, vertex_zero])
    | 频率扫描余弦波生成器。 |'
- en: '| [`gausspulse`](generated/scipy.signal.gausspulse.html#scipy.signal.gausspulse
    "scipy.signal.gausspulse")(t[, fc, bw, bwr, tpr, retquad, ...]) | Return a Gaussian
    modulated sinusoid: |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`gausspulse`](generated/scipy.signal.gausspulse.html#scipy.signal.gausspulse
    "scipy.signal.gausspulse")(t[, fc, bw, bwr, tpr, retquad, ...]) | 返回高斯调制正弦波： |'
- en: '| [`max_len_seq`](generated/scipy.signal.max_len_seq.html#scipy.signal.max_len_seq
    "scipy.signal.max_len_seq")(nbits[, state, length, taps]) | Maximum length sequence
    (MLS) generator. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`max_len_seq`](generated/scipy.signal.max_len_seq.html#scipy.signal.max_len_seq
    "scipy.signal.max_len_seq")(nbits[, state, length, taps]) | 最大长度序列（MLS）生成器。 |'
- en: '| [`sawtooth`](generated/scipy.signal.sawtooth.html#scipy.signal.sawtooth "scipy.signal.sawtooth")(t[, width])
    | Return a periodic sawtooth or triangle waveform. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`sawtooth`](generated/scipy.signal.sawtooth.html#scipy.signal.sawtooth "scipy.signal.sawtooth")(t[, width])
    | 返回周期锯齿波形或三角波形。 |'
- en: '| [`square`](generated/scipy.signal.square.html#scipy.signal.square "scipy.signal.square")(t[, duty])
    | Return a periodic square-wave waveform. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/scipy.signal.square.html#scipy.signal.square "scipy.signal.square")(t[, duty])
    | 返回周期方波波形。 |'
- en: '| [`sweep_poly`](generated/scipy.signal.sweep_poly.html#scipy.signal.sweep_poly
    "scipy.signal.sweep_poly")(t, poly[, phi]) | Frequency-swept cosine generator,
    with a time-dependent frequency. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`sweep_poly`](generated/scipy.signal.sweep_poly.html#scipy.signal.sweep_poly
    "scipy.signal.sweep_poly")(t, poly[, phi]) | 频率扫描余弦波生成器，具有时间相关的频率。 |'
- en: '| [`unit_impulse`](generated/scipy.signal.unit_impulse.html#scipy.signal.unit_impulse
    "scipy.signal.unit_impulse")(shape[, idx, dtype]) | Unit impulse signal (discrete
    delta function) or unit basis vector. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`unit_impulse`](generated/scipy.signal.unit_impulse.html#scipy.signal.unit_impulse
    "scipy.signal.unit_impulse")(shape[, idx, dtype]) | 单位冲激信号（离散δ函数）或单位基向量。 |'
- en: Window functions
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口函数
- en: For window functions, see the [`scipy.signal.windows`](signal.windows.html#module-scipy.signal.windows
    "scipy.signal.windows") namespace.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于窗口函数，请参见[`scipy.signal.windows`](signal.windows.html#module-scipy.signal.windows
    "scipy.signal.windows")命名空间。
- en: 'In the [`scipy.signal`](#module-scipy.signal "scipy.signal") namespace, there
    is a convenience function to obtain these windows by name:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`scipy.signal`](#module-scipy.signal "scipy.signal")命名空间中，有一个方便的函数可通过名称获取这些窗口：
- en: '| [`get_window`](generated/scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window")(window, Nx[, fftbins]) | Return a window of a given
    length and type. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`get_window`](generated/scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window")(window, Nx[, fftbins]) | 返回指定长度和类型的窗口。 |'
- en: Wavelets
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小波
- en: '| [`cascade`](generated/scipy.signal.cascade.html#scipy.signal.cascade "scipy.signal.cascade")(hk[, J])
    | Return (x, phi, psi) at dyadic points `K/2**J` from filter coefficients. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`cascade`](generated/scipy.signal.cascade.html#scipy.signal.cascade "scipy.signal.cascade")(hk[, J])
    | 从滤波器系数返回dyadic点`K/2**J`处的(x, phi, psi)。 |'
- en: '| [`daub`](generated/scipy.signal.daub.html#scipy.signal.daub "scipy.signal.daub")(p)
    | The coefficients for the FIR low-pass filter producing Daubechies wavelets.
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`daub`](generated/scipy.signal.daub.html#scipy.signal.daub "scipy.signal.daub")(p)
    | 产生Daubechies小波的FIR低通滤波器系数。 |'
- en: '| [`morlet`](generated/scipy.signal.morlet.html#scipy.signal.morlet "scipy.signal.morlet")(M[, w, s, complete])
    | Complex Morlet wavelet. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`morlet`](generated/scipy.signal.morlet.html#scipy.signal.morlet "scipy.signal.morlet")(M[, w, s, complete])
    | 复杂Morlet小波。 |'
- en: '| [`qmf`](generated/scipy.signal.qmf.html#scipy.signal.qmf "scipy.signal.qmf")(hk)
    | Return high-pass qmf filter from low-pass |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`qmf`](generated/scipy.signal.qmf.html#scipy.signal.qmf "scipy.signal.qmf")(hk)
    | 从低通滤波器返回高通qmf滤波器。 |'
- en: '| [`ricker`](generated/scipy.signal.ricker.html#scipy.signal.ricker "scipy.signal.ricker")(points, a)
    | Return a Ricker wavelet, also known as the "Mexican hat wavelet". |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`ricker`](generated/scipy.signal.ricker.html#scipy.signal.ricker "scipy.signal.ricker")(points, a)
    | 返回一个Ricker小波，也称为“墨西哥帽小波”。 |'
- en: '| [`morlet2`](generated/scipy.signal.morlet2.html#scipy.signal.morlet2 "scipy.signal.morlet2")(M, s[, w])
    | Complex Morlet wavelet, designed to work with [`cwt`](generated/scipy.signal.cwt.html#scipy.signal.cwt
    "scipy.signal.cwt"). |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`morlet2`](generated/scipy.signal.morlet2.html#scipy.signal.morlet2 "scipy.signal.morlet2")(M, s[, w])
    | 复杂Morlet小波，专为与[`cwt`](generated/scipy.signal.cwt.html#scipy.signal.cwt "scipy.signal.cwt")一起使用而设计。
    |'
- en: '| [`cwt`](generated/scipy.signal.cwt.html#scipy.signal.cwt "scipy.signal.cwt")(data, wavelet, widths[, dtype])
    | Continuous wavelet transform. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`cwt`](generated/scipy.signal.cwt.html#scipy.signal.cwt "scipy.signal.cwt")(data, wavelet, widths[, dtype])
    | 连续小波变换。 |'
- en: Peak finding
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 峰值检测
- en: '| [`argrelmin`](generated/scipy.signal.argrelmin.html#scipy.signal.argrelmin
    "scipy.signal.argrelmin")(data[, axis, order, mode]) | Calculate the relative
    minima of *data*. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`argrelmin`](generated/scipy.signal.argrelmin.html#scipy.signal.argrelmin
    "scipy.signal.argrelmin")(data[, axis, order, mode]) | 计算*data*的相对最小值。 |'
- en: '| [`argrelmax`](generated/scipy.signal.argrelmax.html#scipy.signal.argrelmax
    "scipy.signal.argrelmax")(data[, axis, order, mode]) | Calculate the relative
    maxima of *data*. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`argrelmax`](generated/scipy.signal.argrelmax.html#scipy.signal.argrelmax
    "scipy.signal.argrelmax")(data[, axis, order, mode]) | 计算*data*的相对最大值。 |'
- en: '| [`argrelextrema`](generated/scipy.signal.argrelextrema.html#scipy.signal.argrelextrema
    "scipy.signal.argrelextrema")(data, comparator[, axis, ...]) | Calculate the relative
    extrema of *data*. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`argrelextrema`](generated/scipy.signal.argrelextrema.html#scipy.signal.argrelextrema
    "scipy.signal.argrelextrema")(data, comparator[, axis, ...]) | 计算*data*的相对极值。
    |'
- en: '| [`find_peaks`](generated/scipy.signal.find_peaks.html#scipy.signal.find_peaks
    "scipy.signal.find_peaks")(x[, height, threshold, distance, ...]) | Find peaks
    inside a signal based on peak properties. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`find_peaks`](generated/scipy.signal.find_peaks.html#scipy.signal.find_peaks
    "scipy.signal.find_peaks")(x[, height, threshold, distance, ...]) | 基于峰值特性在信号内部找到峰值。
    |'
- en: '| [`find_peaks_cwt`](generated/scipy.signal.find_peaks_cwt.html#scipy.signal.find_peaks_cwt
    "scipy.signal.find_peaks_cwt")(vector, widths[, wavelet, ...]) | Find peaks in
    a 1-D array with wavelet transformation. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`find_peaks_cwt`](generated/scipy.signal.find_peaks_cwt.html#scipy.signal.find_peaks_cwt
    "scipy.signal.find_peaks_cwt")(vector, widths[, wavelet, ...]) | 使用小波变换在1-D数组中找到峰值。
    |'
- en: '| [`peak_prominences`](generated/scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences")(x, peaks[, wlen]) | Calculate the prominence
    of each peak in a signal. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`peak_prominences`](generated/scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences")(x, peaks[, wlen]) | 计算信号中每个峰值的显著性。 |'
- en: '| [`peak_widths`](generated/scipy.signal.peak_widths.html#scipy.signal.peak_widths
    "scipy.signal.peak_widths")(x, peaks[, rel_height, ...]) | Calculate the width
    of each peak in a signal. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`peak_widths`](generated/scipy.signal.peak_widths.html#scipy.signal.peak_widths
    "scipy.signal.peak_widths")(x, peaks[, rel_height, ...]) | 计算信号中每个峰值的宽度。 |'
- en: Spectral analysis
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谱分析
- en: '| [`periodogram`](generated/scipy.signal.periodogram.html#scipy.signal.periodogram
    "scipy.signal.periodogram")(x[, fs, window, nfft, detrend, ...]) | Estimate power
    spectral density using a periodogram. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`periodogram`](generated/scipy.signal.periodogram.html#scipy.signal.periodogram
    "scipy.signal.periodogram")(x[, fs, window, nfft, detrend, ...]) | 使用周期图估算功率谱密度。
    |'
- en: '| [`welch`](generated/scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")(x[, fs, window, nperseg, noverlap, ...])
    | Estimate power spectral density using Welch''s method. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`welch`](generated/scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")(x[, fs, window, nperseg, noverlap, ...])
    | 使用Welch方法估算功率谱密度。 |'
- en: '| [`csd`](generated/scipy.signal.csd.html#scipy.signal.csd "scipy.signal.csd")(x, y[, fs, window, nperseg, noverlap, ...])
    | Estimate the cross power spectral density, Pxy, using Welch''s method. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`csd`](generated/scipy.signal.csd.html#scipy.signal.csd "scipy.signal.csd")(x, y[, fs, window, nperseg, noverlap, ...])
    | 使用 Welch 方法估计交叉功率谱密度 Pxy。 |'
- en: '| [`coherence`](generated/scipy.signal.coherence.html#scipy.signal.coherence
    "scipy.signal.coherence")(x, y[, fs, window, nperseg, ...]) | Estimate the magnitude
    squared coherence estimate, Cxy, of discrete-time signals X and Y using Welch''s
    method. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`coherence`](generated/scipy.signal.coherence.html#scipy.signal.coherence
    "scipy.signal.coherence")(x, y[, fs, window, nperseg, ...]) | 使用 Welch 方法估计离散时间信号
    X 和 Y 的幅度平方相干估计 Cxy。 |'
- en: '| [`spectrogram`](generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram
    "scipy.signal.spectrogram")(x[, fs, window, nperseg, ...]) | Compute a spectrogram
    with consecutive Fourier transforms. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`spectrogram`](generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram
    "scipy.signal.spectrogram")(x[, fs, window, nperseg, ...]) | 使用连续傅里叶变换计算谱图。 |'
- en: '| [`lombscargle`](generated/scipy.signal.lombscargle.html#scipy.signal.lombscargle
    "scipy.signal.lombscargle")(x, y, freqs) | Computes the Lomb-Scargle periodogram.
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`lombscargle`](generated/scipy.signal.lombscargle.html#scipy.signal.lombscargle
    "scipy.signal.lombscargle")(x, y, freqs) | 计算朗伯-斯卡戈尔周期图。 |'
- en: '| [`vectorstrength`](generated/scipy.signal.vectorstrength.html#scipy.signal.vectorstrength
    "scipy.signal.vectorstrength")(events, period) | Determine the vector strength
    of the events corresponding to the given period. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`vectorstrength`](generated/scipy.signal.vectorstrength.html#scipy.signal.vectorstrength
    "scipy.signal.vectorstrength")(events, period) | 确定与给定周期对应的事件的向量强度。 |'
- en: '| [`ShortTimeFFT`](generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT")(win, hop, fs, *[, fft_mode, ...]) | Provide a parametrized
    discrete Short-time Fourier transform (stft) and its inverse (istft). |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`ShortTimeFFT`](generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT")(win, hop, fs, *[, fft_mode, ...]) | 提供参数化的离散短时傅里叶变换（STFT）及其逆变换（ISTFT）。
    |'
- en: '| [`stft`](generated/scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")(x[, fs, window, nperseg, noverlap, ...])
    | Compute the Short Time Fourier Transform (STFT). |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`stft`](generated/scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")(x[, fs, window, nperseg, noverlap, ...])
    | 计算短时傅里叶变换（STFT）。 |'
- en: '| [`istft`](generated/scipy.signal.istft.html#scipy.signal.istft "scipy.signal.istft")(Zxx[, fs, window, nperseg, noverlap, ...])
    | Perform the inverse Short Time Fourier transform (iSTFT). |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`istft`](generated/scipy.signal.istft.html#scipy.signal.istft "scipy.signal.istft")(Zxx[, fs, window, nperseg, noverlap, ...])
    | 执行逆短时傅里叶变换（iSTFT）。 |'
- en: '| [`check_COLA`](generated/scipy.signal.check_COLA.html#scipy.signal.check_COLA
    "scipy.signal.check_COLA")(window, nperseg, noverlap[, tol]) | Check whether the
    Constant OverLap Add (COLA) constraint is met. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`check_COLA`](generated/scipy.signal.check_COLA.html#scipy.signal.check_COLA
    "scipy.signal.check_COLA")(window, nperseg, noverlap[, tol]) | 检查是否满足恒定重叠添加（COLA）约束。
    |'
- en: '| [`check_NOLA`](generated/scipy.signal.check_NOLA.html#scipy.signal.check_NOLA
    "scipy.signal.check_NOLA")(window, nperseg, noverlap[, tol]) | Check whether the
    Nonzero Overlap Add (NOLA) constraint is met. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`check_NOLA`](generated/scipy.signal.check_NOLA.html#scipy.signal.check_NOLA
    "scipy.signal.check_NOLA")(window, nperseg, noverlap[, tol]) | 检查非零重叠添加（NOLA）约束是否满足。
    |'
- en: Chirp Z-transform and Zoom FFT
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chirp Z-transform and Zoom FFT
- en: '| [`czt`](generated/czt-function.html#scipy.signal.czt "scipy.signal.czt")(x[, m, w, a, axis])
    | Compute the frequency response around a spiral in the Z plane. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`czt`](generated/czt-function.html#scipy.signal.czt "scipy.signal.czt")(x[, m, w, a, axis])
    | 计算 Z 平面上螺旋周围的频率响应。 |'
- en: '| [`zoom_fft`](generated/scipy.signal.zoom_fft.html#scipy.signal.zoom_fft "scipy.signal.zoom_fft")(x, fn[, m, fs, endpoint, axis])
    | Compute the DFT of *x* only for frequencies in range *fn*. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`zoom_fft`](generated/scipy.signal.zoom_fft.html#scipy.signal.zoom_fft "scipy.signal.zoom_fft")(x, fn[, m, fs, endpoint, axis])
    | 仅计算范围内频率 *fn* 的 *x* 的离散傅里叶变换（DFT）。 |'
- en: '| [`CZT`](generated/scipy.signal.CZT.html#scipy.signal.CZT "scipy.signal.CZT")(n[, m, w, a])
    | Create a callable chirp z-transform function. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`CZT`](generated/scipy.signal.CZT.html#scipy.signal.CZT "scipy.signal.CZT")(n[, m, w, a])
    | 创建可调用的啁啾 Z 变换函数。 |'
- en: '| [`ZoomFFT`](generated/scipy.signal.ZoomFFT.html#scipy.signal.ZoomFFT "scipy.signal.ZoomFFT")(n, fn[, m, fs, endpoint])
    | Create a callable zoom FFT transform function. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`ZoomFFT`](generated/scipy.signal.ZoomFFT.html#scipy.signal.ZoomFFT "scipy.signal.ZoomFFT")(n, fn[, m, fs, endpoint])
    | 创建可调用的缩放 FFT 变换函数。 |'
- en: '| [`czt_points`](generated/scipy.signal.czt_points.html#scipy.signal.czt_points
    "scipy.signal.czt_points")(m[, w, a]) | Return the points at which the chirp z-transform
    is computed. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`czt_points`](generated/scipy.signal.czt_points.html#scipy.signal.czt_points
    "scipy.signal.czt_points")(m[, w, a]) | 返回进行啁啾 Z 变换的点。 |'
- en: The functions are simpler to use than the classes, but are less efficient when
    using the same transform on many arrays of the same length, since they repeatedly
    generate the same chirp signal with every call. In these cases, use the classes
    to create a reusable function instead.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 函数比类更易于使用，但在对许多长度相同的数组执行相同变换时效率较低，因为它们在每次调用时都会重复生成相同的啁啾信号。在这些情况下，使用类来创建可重复使用的函数更为合适。
