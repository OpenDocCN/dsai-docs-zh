["```py\nclass sympy.ntheory.generate.Sieve(sieve_interval=1000000)\n```", "```py\n>>> from sympy import sieve\n>>> sieve._reset() # this line for doctest only\n>>> 25 in sieve\nFalse\n>>> sieve._list\narray('L', [2, 3, 5, 7, 11, 13, 17, 19, 23]) \n```", "```py\nextend(n)\n```", "```py\n>>> from sympy import sieve\n>>> sieve._reset() # this line for doctest only\n>>> sieve.extend(30)\n>>> sieve[10] == 29\nTrue \n```", "```py\nextend_to_no(i)\n```", "```py\n>>> from sympy import sieve\n>>> sieve._reset() # this line for doctest only\n>>> sieve.extend_to_no(9)\n>>> sieve._list\narray('L', [2, 3, 5, 7, 11, 13, 17, 19, 23]) \n```", "```py\nmobiusrange(a, b)\n```", "```py\n>>> from sympy import sieve\n>>> print([i for i in sieve.mobiusrange(7, 18)])\n[-1, 0, 0, 1, -1, 0, -1, 1, 1, 0, -1] \n```", "```py\nprimerange(a, b=None)\n```", "```py\n>>> from sympy import sieve, prime \n```", "```py\n>>> print([i for i in sieve.primerange(19)])\n[2, 3, 5, 7, 11, 13, 17] \n```", "```py\n>>> print([i for i in sieve.primerange(7, 19)])\n[7, 11, 13, 17] \n```", "```py\n>>> list(sieve.primerange(prime(10) + 1))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] \n```", "```py\nsearch(n)\n```", "```py\n>>> from sympy import sieve\n>>> sieve.search(25)\n(9, 10)\n>>> sieve.search(23)\n(9, 9) \n```", "```py\ntotientrange(a, b)\n```", "```py\n>>> from sympy import sieve\n>>> print([i for i in sieve.totientrange(7, 18)])\n[6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16] \n```", "```py\nsympy.ntheory.generate.prime(nth)\n```", "```py\n>>> from sympy import prime\n>>> prime(10)\n29\n>>> prime(1)\n2\n>>> prime(100000)\n1299709 \n```", "```py\nsympy.ntheory.generate.primepi(n)\n```", "```py\n>>> from sympy import primepi, prime, prevprime, isprime\n>>> primepi(25)\n9 \n```", "```py\n>>> isprime(25)\nFalse \n```", "```py\n>>> prevprime(25) == prime(9)\nTrue \n```", "```py\nsympy.ntheory.generate.nextprime(n, ith=1)\n```", "```py\n>>> from sympy import nextprime\n>>> [(i, nextprime(i)) for i in range(10, 15)]\n[(10, 11), (11, 13), (12, 13), (13, 17), (14, 17)]\n>>> nextprime(2, ith=2) # the 2nd prime after 2\n5 \n```", "```py\nsympy.ntheory.generate.prevprime(n)\n```", "```py\n>>> from sympy import prevprime\n>>> [(i, prevprime(i)) for i in range(10, 15)]\n[(10, 7), (11, 7), (12, 11), (13, 11), (14, 13)] \n```", "```py\nsympy.ntheory.generate.primerange(a, b=None)\n```", "```py\n>>> from sympy import primerange, prime \n```", "```py\n>>> list(primerange(19))\n[2, 3, 5, 7, 11, 13, 17] \n```", "```py\n>>> list(primerange(7, 19))\n[7, 11, 13, 17] \n```", "```py\n>>> list(primerange(prime(10) + 1))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] \n```", "```py\n>>> from sympy import sieve\n>>> list(sieve.primerange(1, 30))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] \n```", "```py\nsympy.ntheory.generate.randprime(a, b)\n```", "```py\n>>> from sympy import randprime, isprime\n>>> randprime(1, 30) \n13\n>>> isprime(randprime(1, 30))\nTrue \n```", "```py\nsympy.ntheory.generate.primorial(n, nth=True)\n```", "```py\n>>> from sympy.ntheory.generate import primorial, primerange\n>>> from sympy import factorint, Mul, primefactors, sqrt\n>>> primorial(4) # the first 4 primes are 2, 3, 5, 7\n210\n>>> primorial(4, nth=False) # primes <= 4 are 2 and 3\n6\n>>> primorial(1)\n2\n>>> primorial(1, nth=False)\n1\n>>> primorial(sqrt(101), nth=False)\n210 \n```", "```py\n>>> factorint(primorial(4) + 1)\n{211: 1} \n```", "```py\n>>> factorint(primorial(4) - 1)\n{11: 1, 19: 1} \n```", "```py\n>>> p = list(primerange(10, 20))\n>>> sorted(set(primefactors(Mul(*p) + 1)).difference(set(p)))\n[2, 5, 31, 149] \n```", "```py\nsympy.ntheory.generate.cycle_length(f, x0, nmax=None, values=False)\n```", "```py\n>>> from sympy.ntheory.generate import cycle_length \n```", "```py\n>>> def gen(func, i):\n...     while 1:\n...         yield i\n...         i = func(i)\n... \n```", "```py\n>>> func = lambda i: (i**2 + 1) % 51 \n```", "```py\n>>> next(cycle_length(func, 4))\n(6, 3) \n```", "```py\n>>> iter = cycle_length(func, 4, values=True)\n>>> list(iter)\n[4, 17, 35, 2, 5, 26, 14, 44, 50, 2, 5, 26, 14] \n```", "```py\n>>> next(cycle_length(func, 4, nmax = 4))\n(4, None)\n>>> list(cycle_length(func, 4, nmax = 4, values=True))\n[4, 17, 35, 2] \n```", "```py\nsympy.ntheory.generate.composite(nth)\n```", "```py\n>>> from sympy import composite\n>>> composite(36)\n52\n>>> composite(1)\n4\n>>> composite(17737)\n20000 \n```", "```py\nsympy.ntheory.generate.compositepi(n)\n```", "```py\n>>> from sympy import compositepi\n>>> compositepi(25)\n15\n>>> compositepi(1000)\n831 \n```", "```py\nsympy.ntheory.factor_.smoothness(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import smoothness\n>>> smoothness(2**7*3**2)\n(3, 128)\n>>> smoothness(2**4*13)\n(13, 16)\n>>> smoothness(2)\n(2, 2) \n```", "```py\nsympy.ntheory.factor_.smoothness_p(n, m=-1, power=0, visual=None)\n```", "```py\n>>> from sympy.ntheory.factor_ import smoothness_p, factorint\n>>> smoothness_p(10431, m=1)\n(1, [(3, (2, 2, 4)), (19, (1, 5, 5)), (61, (1, 31, 31))])\n>>> smoothness_p(10431)\n(-1, [(3, (2, 2, 2)), (19, (1, 3, 9)), (61, (1, 5, 5))])\n>>> smoothness_p(10431, power=1)\n(-1, [(3, (2, 2, 2)), (61, (1, 5, 5)), (19, (1, 3, 9))]) \n```", "```py\n>>> print(smoothness_p(21477639576571, visual=1))\np**i=4410317**1 has p-1 B=1787, B-pow=1787\np**i=4869863**1 has p-1 B=2434931, B-pow=2434931 \n```", "```py\n>>> factorint(17*9)\n{3: 2, 17: 1}\n>>> smoothness_p(_)\n'p**i=3**2 has p-1 B=2, B-pow=2\\np**i=17**1 has p-1 B=2, B-pow=16'\n>>> smoothness_p(_)\n{3: 2, 17: 1} \n```", "```py\nsympy.ntheory.factor_.multiplicity(p, n)\n```", "```py\n>>> from sympy import multiplicity, Rational\n>>> [multiplicity(5, n) for n in [8, 5, 25, 125, 250]]\n[0, 1, 2, 3, 3]\n>>> multiplicity(3, Rational(1, 9))\n-2 \n```", "```py\n>>> from sympy.ntheory import multiplicity_in_factorial\n>>> from sympy import factorial\n>>> p = factorial(25)\n>>> n = 2**100\n>>> nfac = factorial(n, evaluate=False)\n>>> multiplicity(p, nfac)\n52818775009509558395695966887\n>>> _ == multiplicity_in_factorial(p, n)\nTrue \n```", "```py\nsympy.ntheory.factor_.perfect_power(n, candidates=None, big=True, factor=True)\n```", "```py\n>>> from sympy import perfect_power, Rational\n>>> perfect_power(16)\n(2, 4)\n>>> perfect_power(16, big=False)\n(4, 2) \n```", "```py\n>>> perfect_power(-4)\nFalse\n>>> perfect_power(-8)\n(-2, 3) \n```", "```py\n>>> perfect_power(Rational(1, 2)**3)\n(1/2, 3)\n>>> perfect_power(Rational(-3, 2)**3)\n(-3/2, 3) \n```", "```py\n>>> is2pow = lambda n: bool(n and not n & (n - 1))\n>>> [(i, is2pow(i)) for i in range(5)]\n[(0, False), (1, True), (2, True), (3, False), (4, True)] \n```", "```py\n>>> perfect_power(3**8, [9])\nFalse\n>>> perfect_power(3**8, [2, 4, 8])\n(3, 8)\n>>> perfect_power(3**8, [4, 8], big=False)\n(9, 4) \n```", "```py\nsympy.ntheory.factor_.pollard_rho(n, s=2, a=1, retries=5, seed=1234, max_steps=None, F=None)\n```", "```py\n>>> from sympy.ntheory.generate import cycle_length\n>>> n = 16843009\n>>> F = lambda x:(2048*pow(x, 2, n) + 32767) % n\n>>> for s in range(5):\n...     print('loop length = %4i; leader length = %3i' % next(cycle_length(F, s)))\n...\nloop length = 2489; leader length =  43\nloop length =   78; leader length = 121\nloop length = 1482; leader length = 100\nloop length = 1482; leader length = 286\nloop length = 1482; leader length = 101 \n```", "```py\n>>> x=2\n>>> for i in range(9):\n...     print(x)\n...     x=(x**2+12)%17\n...\n2\n16\n13\n11\n14\n4\n11\n14\n4\n>>> next(cycle_length(lambda x: (x**2+12)%17, 2))\n(3, 3)\n>>> list(cycle_length(lambda x: (x**2+12)%17, 2, values=True))\n[2, 16, 13, 11, 14, 4] \n```", "```py\n>>> from sympy import pollard_rho\n>>> n=16843009\n>>> F=lambda x:(2048*pow(x,2,n) + 32767) % n\n>>> pollard_rho(n, F=F)\n257 \n```", "```py\n>>> pollard_rho(n, a=n-2, retries=0) \n```", "```py\n>>> pollard_rho(n, a=n-2, retries=1)\n257 \n```", "```py\nsympy.ntheory.factor_.pollard_pm1(n, B=10, a=2, retries=0, seed=1234)\n```", "```py\n>>> from sympy.ntheory.factor_ import smoothness_p, pollard_pm1\n>>> n=257*1009\n>>> smoothness_p(n)\n(-1, [(257, (1, 2, 256)), (1009, (1, 7, 16))]) \n```", "```py\n>>> pollard_pm1(n, B=16, a=3)\n1009 \n```", "```py\n>>> pollard_pm1(n, B=256)\n>>> \n```", "```py\n>>> pollard_pm1(n, B=256, a=257)\n1009 \n```", "```py\n>>> from sympy import ilcm, igcd, factorint, Pow\n>>> M = 1\n>>> for i in range(2, 256):\n...     M = ilcm(M, i)\n...\n>>> set([igcd(pow(a, M, n) - 1, n) for a in range(2, 256) if\n...      igcd(pow(a, M, n) - 1, n) != n])\n{1009} \n```", "```py\n>>> aM = pow(255, M, n)\n>>> [(d, aM%Pow(*d.args)) for d in factorint(n, visual=True).args]\n[(257**1, 1), (1009**1, 1)] \n```", "```py\n>>> from sympy.ntheory import pollard_pm1\n>>> pollard_pm1(21477639576571) \n```", "```py\n>>> pollard_pm1(21477639576571, B=2000)\n4410317 \n```", "```py\n>>> from sympy.ntheory.factor_ import smoothness_p, factorint\n>>> print(smoothness_p(21477639576571, visual=1))\np**i=4410317**1 has p-1 B=1787, B-pow=1787\np**i=4869863**1 has p-1 B=2434931, B-pow=2434931 \n```", "```py\n>>> factorint(4410317 - 1)\n{2: 2, 617: 1, 1787: 1}\n>>> factorint(4869863-1)\n{2: 1, 2434931: 1} \n```", "```py\n>>> pollard_pm1(21477639576571, B=1786)\n>>> pollard_pm1(21477639576571, B=1787)\n4410317 \n```", "```py\nsympy.ntheory.factor_.factorint(n, limit=None, use_trial=True, use_rho=True, use_pm1=True, use_ecm=True, verbose=False, visual=None, multiple=False)\n```", "```py\n>>> from sympy.ntheory import factorint\n>>> factorint(2000)    # 2000 = (2**4) * (5**3)\n{2: 4, 5: 3}\n>>> factorint(65537)   # This number is prime\n{65537: 1} \n```", "```py\n>>> from sympy.ntheory import isprime\n>>> a = 1407633717262338957430697921446883\n>>> f = factorint(a, limit=10000)\n>>> f == {991: 1, int(202916782076162456022877024859): 1, 7: 1}\nTrue\n>>> isprime(max(f))\nFalse \n```", "```py\n>>> factorint(3*101**7, limit=5)\n{3: 1, 101: 7} \n```", "```py\n>>> factorint(24, multiple=True)\n[2, 2, 2, 3] \n```", "```py\n>>> from sympy import pprint\n>>> pprint(factorint(4200, visual=True))\n 3  1  2  1\n2 *3 *5 *7 \n```", "```py\n>>> from sympy import Mul\n>>> regular = factorint(1764); regular\n{2: 2, 3: 2, 7: 2}\n>>> pprint(factorint(regular))\n 2  2  2\n2 *3 *7 \n```", "```py\n>>> visual = factorint(1764, visual=True); pprint(visual)\n 2  2  2\n2 *3 *7\n>>> print(factorint(visual))\n{2: 2, 3: 2, 7: 2} \n```", "```py\n>>> factorint(factorint({4: 2, 12: 3})) # twice to toggle to dict form\n{2: 10, 3: 3}\n>>> factorint(Mul(4, 12, evaluate=False))\n{2: 4, 3: 1} \n```", "```py\n>>> factors = factorint(12345678910111213141516)\n>>> for base, exp in sorted(factors.items()):\n...     print('%s  %s' % (base, exp))\n...\n2 2\n2507191691 1\n1231026625769 1 \n```", "```py\nsympy.ntheory.factor_.factorrat(rat, limit=None, use_trial=True, use_rho=True, use_pm1=True, verbose=False, visual=None, multiple=False)\n```", "```py\n>>> from sympy import factorrat, S\n>>> factorrat(S(8)/9)    # 8/9 = (2**3) * (3**-2)\n{2: 3, 3: -2}\n>>> factorrat(S(-1)/987)    # -1/789 = -1 * (3**-1) * (7**-1) * (47**-1)\n{-1: 1, 3: -1, 7: -1, 47: -1} \n```", "```py\nsympy.ntheory.factor_.primefactors(n, limit=None, verbose=False, **kwargs)\n```", "```py\n>>> from sympy.ntheory import primefactors, factorint, isprime\n>>> primefactors(6)\n[2, 3]\n>>> primefactors(-5)\n[5] \n```", "```py\n>>> sorted(factorint(123456).items())\n[(2, 6), (3, 1), (643, 1)]\n>>> primefactors(123456)\n[2, 3, 643] \n```", "```py\n>>> sorted(factorint(10000000001, limit=200).items())\n[(101, 1), (99009901, 1)]\n>>> isprime(99009901)\nFalse\n>>> primefactors(10000000001, limit=300)\n[101] \n```", "```py\nsympy.ntheory.factor_.divisors(n, generator=False, proper=False)\n```", "```py\n>>> from sympy import divisors, divisor_count\n>>> divisors(24)\n[1, 2, 3, 4, 6, 8, 12, 24]\n>>> divisor_count(24)\n8 \n```", "```py\n>>> list(divisors(120, generator=True))\n[1, 2, 4, 8, 3, 6, 12, 24, 5, 10, 20, 40, 15, 30, 60, 120] \n```", "```py\nsympy.ntheory.factor_.proper_divisors(n, generator=False)\n```", "```py\n>>> from sympy import proper_divisors, proper_divisor_count\n>>> proper_divisors(24)\n[1, 2, 3, 4, 6, 8, 12]\n>>> proper_divisor_count(24)\n7\n>>> list(proper_divisors(120, generator=True))\n[1, 2, 4, 8, 3, 6, 12, 24, 5, 10, 20, 40, 15, 30, 60] \n```", "```py\nsympy.ntheory.factor_.divisor_count(n, modulus=1, proper=False)\n```", "```py\n>>> from sympy import divisor_count\n>>> divisor_count(6)\n4\n>>> divisor_count(6, 2)\n2\n>>> divisor_count(6, proper=True)\n3 \n```", "```py\nsympy.ntheory.factor_.proper_divisor_count(n, modulus=1)\n```", "```py\n>>> from sympy import proper_divisor_count\n>>> proper_divisor_count(6)\n3\n>>> proper_divisor_count(6, modulus=2)\n1 \n```", "```py\nsympy.ntheory.factor_.udivisors(n, generator=False)\n```", "```py\n>>> from sympy.ntheory.factor_ import udivisors, udivisor_count\n>>> udivisors(15)\n[1, 3, 5, 15]\n>>> udivisor_count(15)\n4 \n```", "```py\n>>> sorted(udivisors(120, generator=True))\n[1, 3, 5, 8, 15, 24, 40, 120] \n```", "```py\nsympy.ntheory.factor_.udivisor_count(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import udivisor_count\n>>> udivisor_count(120)\n8 \n```", "```py\nsympy.ntheory.factor_.antidivisors(n, generator=False)\n```", "```py\n>>> from sympy.ntheory.factor_ import antidivisors\n>>> antidivisors(24)\n[7, 16] \n```", "```py\n>>> sorted(antidivisors(128, generator=True))\n[3, 5, 15, 17, 51, 85] \n```", "```py\nsympy.ntheory.factor_.antidivisor_count(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import antidivisor_count\n>>> antidivisor_count(13)\n4\n>>> antidivisor_count(27)\n5 \n```", "```py\nsympy.ntheory.factor_.totient(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import totient\n>>> totient(1)\n1\n>>> totient(25)\n20\n>>> totient(45) == totient(5)*totient(9)\nTrue \n```", "```py\nsympy.ntheory.factor_.reduced_totient(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import reduced_totient\n>>> reduced_totient(1)\n1\n>>> reduced_totient(8)\n2\n>>> reduced_totient(30)\n4 \n```", "```py\nsympy.ntheory.factor_.divisor_sigma(n, k=1)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import divisor_sigma\n>>> divisor_sigma(18, 0)\n6\n>>> divisor_sigma(39, 1)\n56\n>>> divisor_sigma(12, 2)\n210\n>>> divisor_sigma(37)\n38 \n```", "```py\nsympy.ntheory.factor_.udivisor_sigma(n, k=1)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import udivisor_sigma\n>>> udivisor_sigma(18, 0)\n4\n>>> udivisor_sigma(74, 1)\n114\n>>> udivisor_sigma(36, 3)\n47450\n>>> udivisor_sigma(111)\n152 \n```", "```py\nsympy.ntheory.factor_.core(n, t=2)\n```", "```py\n>>> from sympy.ntheory.factor_ import core\n>>> core(24, 2)\n6\n>>> core(9424, 3)\n1178\n>>> core(379238)\n379238\n>>> core(15**11, 10)\n15 \n```", "```py\nsympy.ntheory.factor_.digits(n, b=10, digits=None)\n```", "```py\n>>> from sympy.ntheory.digits import digits\n>>> digits(35)\n[10, 3, 5] \n```", "```py\n>>> digits(-35)\n[-10, 3, 5] \n```", "```py\n>>> digits(27, b=2)\n[2, 1, 1, 0, 1, 1] \n```", "```py\n>>> digits(35, digits=4)\n[10, 0, 0, 3, 5] \n```", "```py\nsympy.ntheory.factor_.primenu(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import primenu\n>>> primenu(1)\n0\n>>> primenu(30)\n3 \n```", "```py\nsympy.ntheory.factor_.primeomega(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import primeomega\n>>> primeomega(1)\n0\n>>> primeomega(20)\n3 \n```", "```py\nsympy.ntheory.factor_.mersenne_prime_exponent(nth)\n```", "```py\n>>> from sympy.ntheory.factor_ import mersenne_prime_exponent\n>>> mersenne_prime_exponent(1)\n2\n>>> mersenne_prime_exponent(20)\n4423 \n```", "```py\nsympy.ntheory.factor_.is_perfect(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import divisor_sigma\n>>> from sympy.ntheory.factor_ import is_perfect, divisors\n>>> is_perfect(20)\nFalse\n>>> is_perfect(6)\nTrue\n>>> 6 == divisor_sigma(6) - 6 == sum(divisors(6)[:-1])\nTrue \n```", "```py\nsympy.ntheory.factor_.abundance(n)\n```", "```py\n>>> from sympy.ntheory import abundance, is_perfect, is_abundant\n>>> abundance(6)\n0\n>>> is_perfect(6)\nTrue\n>>> abundance(10)\n-2\n>>> is_abundant(10)\nFalse \n```", "```py\nsympy.ntheory.factor_.is_abundant(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import is_abundant\n>>> is_abundant(20)\nTrue\n>>> is_abundant(15)\nFalse \n```", "```py\nsympy.ntheory.factor_.is_deficient(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import is_deficient\n>>> is_deficient(20)\nFalse\n>>> is_deficient(15)\nTrue \n```", "```py\nsympy.ntheory.factor_.is_amicable(m, n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import divisor_sigma\n>>> from sympy.ntheory.factor_ import is_amicable\n>>> is_amicable(220, 284)\nTrue\n>>> divisor_sigma(220) == divisor_sigma(284)\nTrue \n```", "```py\nsympy.ntheory.factor_.is_carmichael(n)\n```", "```py\nsympy.ntheory.factor_.find_carmichael_numbers_in_range(x, y)\n```", "```py\nsympy.ntheory.factor_.find_first_n_carmichaels(n)\n```", "```py\nsympy.ntheory.modular.symmetric_residue(a, m)\n```", "```py\n>>> from sympy.ntheory.modular import symmetric_residue\n>>> symmetric_residue(1, 6)\n1\n>>> symmetric_residue(4, 6)\n-2 \n```", "```py\nsympy.ntheory.modular.crt(m, v, symmetric=False, check=True)\n```", "```py\n>>> from sympy.ntheory.modular import crt\n\n>>> crt([99, 97, 95], [49, 76, 65])\n(639985, 912285) \n```", "```py\n>>> [639985 % m for m in [99, 97, 95]]\n[49, 76, 65] \n```", "```py\n>>> crt([12, 6, 17], [3, 4, 2], check=False)\n(954, 1224)\n>>> [954 % m for m in [12, 6, 17]]\n[6, 0, 2]\n>>> crt([12, 6, 17], [3, 4, 2]) is None\nTrue\n>>> crt([3, 6], [2, 5])\n(5, 6) \n```", "```py\nsympy.ntheory.modular.crt1(m)\n```", "```py\n>>> from sympy.ntheory.modular import crt, crt1, crt2\n>>> m = [99, 97, 95]\n>>> v = [49, 76, 65] \n```", "```py\n>>> crt(m, v)\n(639985, 912285) \n```", "```py\n>>> mm, e, s = crt1(m)\n>>> crt2(m, v, mm, e, s)\n(639985, 912285) \n```", "```py\n>>> mm, e, s = crt1(m)\n>>> vs = [[52, 21, 37], [19, 46, 76]]\n>>> for v in vs:\n...     print(crt2(m, v, mm, e, s))\n(397042, 912285)\n(803206, 912285) \n```", "```py\nsympy.ntheory.modular.crt2(m, v, mm, e, s, symmetric=False)\n```", "```py\n>>> from sympy.ntheory.modular import crt1, crt2\n>>> mm, e, s = crt1([18, 42, 6])\n>>> crt2([18, 42, 6], [0, 0, 0], mm, e, s)\n(0, 4536) \n```", "```py\nsympy.ntheory.modular.solve_congruence(*remainder_modulus_pairs, **hint)\n```", "```py\n>>> from sympy.ntheory.modular import solve_congruence \n```", "```py\n>>> solve_congruence((2, 3), (3, 5), (2, 7))\n(23, 105)\n>>> [23 % m for m in [3, 5, 7]]\n[2, 3, 2] \n```", "```py\n>>> solve_congruence(*zip((2, 3, 2), (3, 5, 7)))\n(23, 105) \n```", "```py\n>>> solve_congruence((2, 3), (4, 6)) is None\nTrue \n```", "```py\n>>> solve_congruence((2, 3), (5, 6))\n(5, 6) \n```", "```py\n>>> solve_congruence((2, 3), (5, 6), symmetric=True)\n(-1, 6) \n```", "```py\nsympy.ntheory.multinomial.binomial_coefficients(n)\n```", "```py\n>>> from sympy.ntheory import binomial_coefficients\n>>> binomial_coefficients(9)\n{(0, 9): 1, (1, 8): 9, (2, 7): 36, (3, 6): 84,\n (4, 5): 126, (5, 4): 126, (6, 3): 84, (7, 2): 36, (8, 1): 9, (9, 0): 1} \n```", "```py\nsympy.ntheory.multinomial.binomial_coefficients_list(n)\n```", "```py\n>>> from sympy.ntheory import binomial_coefficients_list\n>>> binomial_coefficients_list(9)\n[1, 9, 36, 84, 126, 126, 84, 36, 9, 1] \n```", "```py\nsympy.ntheory.multinomial.multinomial_coefficients(m, n)\n```", "```py\n>>> from sympy.ntheory import multinomial_coefficients\n>>> multinomial_coefficients(2, 5) # indirect doctest\n{(0, 5): 1, (1, 4): 5, (2, 3): 10, (3, 2): 10, (4, 1): 5, (5, 0): 1} \n```", "```py\nsympy.ntheory.multinomial.multinomial_coefficients_iterator(m, n, _tuple=<class 'tuple'>)\n```", "```py\n>>> from sympy.ntheory.multinomial import multinomial_coefficients\n>>> m53, m33 = multinomial_coefficients(5,3), multinomial_coefficients(3,3)\n>>> m53[(0,0,0,1,2)] == m53[(0,0,1,0,2)] == m53[(1,0,2,0,0)] == m33[(0,1,2)]\nTrue \n```", "```py\n>>> from sympy.ntheory.multinomial import multinomial_coefficients_iterator\n>>> it = multinomial_coefficients_iterator(20,3)\n>>> next(it)\n((3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 1) \n```", "```py\nsympy.ntheory.partitions_.npartitions(n, verbose=False)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import partition\n>>> partition(25)\n1958 \n```", "```py\nsympy.ntheory.primetest.is_fermat_pseudoprime(n, a)\n```", "```py\n>>> from sympy.ntheory.primetest import is_fermat_pseudoprime\n>>> from sympy.ntheory.factor_ import isprime\n>>> for n in range(1, 1000):\n...     if is_fermat_pseudoprime(n, 2) and not isprime(n):\n...         print(n)\n341\n561\n645 \n```", "```py\nsympy.ntheory.primetest.is_euler_pseudoprime(n, a)\n```", "```py\n>>> from sympy.ntheory.primetest import is_euler_pseudoprime\n>>> from sympy.ntheory.factor_ import isprime\n>>> for n in range(1, 1000):\n...     if is_euler_pseudoprime(n, 2) and not isprime(n):\n...         print(n)\n341\n561 \n```", "```py\nsympy.ntheory.primetest.is_euler_jacobi_pseudoprime(n, a)\n```", "```py\n>>> from sympy.ntheory.primetest import is_euler_jacobi_pseudoprime\n>>> from sympy.ntheory.factor_ import isprime\n>>> for n in range(1, 1000):\n...     if is_euler_jacobi_pseudoprime(n, 2) and not isprime(n):\n...         print(n)\n561 \n```", "```py\nsympy.ntheory.primetest.is_square(n, prep=True)\n```", "```py\n>>> from sympy.ntheory.primetest import is_square\n>>> is_square(25)\nTrue\n>>> is_square(2)\nFalse \n```", "```py\nsympy.ntheory.primetest.mr(n, bases)\n```", "```py\n>>> from sympy.ntheory.primetest import mr\n>>> mr(1373651, [2, 3])\nFalse\n>>> mr(479001599, [31, 73])\nTrue \n```", "```py\nsympy.ntheory.primetest.is_lucas_prp(n)\n```", "```py\n>>> from sympy.ntheory.primetest import isprime, is_lucas_prp\n>>> for i in range(10000):\n...     if is_lucas_prp(i) and not isprime(i):\n...         print(i)\n323\n377\n1159\n1829\n3827\n5459\n5777\n9071\n9179 \n```", "```py\nsympy.ntheory.primetest.is_strong_lucas_prp(n)\n```", "```py\n>>> from sympy.ntheory.primetest import isprime, is_strong_lucas_prp\n>>> for i in range(20000):\n...     if is_strong_lucas_prp(i) and not isprime(i):\n...        print(i)\n5459\n5777\n10877\n16109\n18971 \n```", "```py\nsympy.ntheory.primetest.is_extra_strong_lucas_prp(n)\n```", "```py\n>>> from sympy.ntheory.primetest import isprime, is_extra_strong_lucas_prp\n>>> for i in range(20000):\n...     if is_extra_strong_lucas_prp(i) and not isprime(i):\n...        print(i)\n989\n3239\n5777\n10877 \n```", "```py\nsympy.ntheory.primetest.proth_test(n)\n```", "```py\n>>> from sympy.ntheory.primetest import proth_test\n>>> proth_test(41)\nTrue\n>>> proth_test(57)\nFalse \n```", "```py\nsympy.ntheory.primetest.is_mersenne_prime(n)\n```", "```py\n>>> from sympy.ntheory.factor_ import is_mersenne_prime\n>>> is_mersenne_prime(6)\nFalse\n>>> is_mersenne_prime(127)\nTrue \n```", "```py\nsympy.ntheory.primetest.isprime(n)\n```", "```py\n>>> from sympy.ntheory import isprime\n>>> isprime(13)\nTrue\n>>> isprime(15)\nFalse \n```", "```py\n>>> from sympy import Float, S\n>>> int(1e3) == 1e3 == 10**3\nTrue\n>>> int(1e23) == 1e23\nTrue\n>>> int(1e23) == 10**23\nFalse \n```", "```py\n>>> near_int = 1 + S(1)/10**19\n>>> near_int == int(near_int)\nFalse\n>>> n = Float(near_int, 10)  # truncated by precision\n>>> n % 1 == 0\nTrue\n>>> n = Float(near_int, 20)\n>>> n % 1 == 0\nFalse \n```", "```py\nsympy.ntheory.primetest.is_gaussian_prime(num)\n```", "```py\nsympy.ntheory.residue_ntheory.n_order(a, n)\n```", "```py\n>>> from sympy.ntheory import n_order\n>>> n_order(3, 7)\n6\n>>> n_order(4, 7)\n3 \n```", "```py\nsympy.ntheory.residue_ntheory.is_primitive_root(a, p)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import totient\n>>> from sympy.ntheory import is_primitive_root, n_order\n>>> is_primitive_root(3, 10)\nTrue\n>>> is_primitive_root(9, 10)\nFalse\n>>> n_order(3, 10) == totient(10)\nTrue\n>>> n_order(9, 10) == totient(10)\nFalse \n```", "```py\nsympy.ntheory.residue_ntheory.primitive_root(p, smallest=True)\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import primitive_root\n>>> primitive_root(19)\n2\n>>> primitive_root(21) is None\nTrue\n>>> primitive_root(50, smallest=False)\n27 \n```", "```py\nsympy.ntheory.residue_ntheory.sqrt_mod(a, p, all_roots=False)\n```", "```py\n>>> from sympy.ntheory import sqrt_mod\n>>> sqrt_mod(11, 43)\n21\n>>> sqrt_mod(17, 32, True)\n[7, 9, 23, 25] \n```", "```py\nsympy.ntheory.residue_ntheory.sqrt_mod_iter(a, p, domain=<class 'int'>)\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import sqrt_mod_iter\n>>> list(sqrt_mod_iter(11, 43))\n[21, 22] \n```", "```py\nsympy.ntheory.residue_ntheory.quadratic_residues(p) → list[int]\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import quadratic_residues\n>>> quadratic_residues(7)\n[0, 1, 2, 4] \n```", "```py\nsympy.ntheory.residue_ntheory.nthroot_mod(a, n, p, all_roots=False)\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import nthroot_mod\n>>> nthroot_mod(11, 4, 19)\n8\n>>> nthroot_mod(11, 4, 19, True)\n[8, 11]\n>>> nthroot_mod(68, 3, 109)\n23 \n```", "```py\nsympy.ntheory.residue_ntheory.is_nthpow_residue(a, n, m)\n```", "```py\nsympy.ntheory.residue_ntheory.is_quad_residue(a, p)\n```", "```py\n>>> from sympy.ntheory import is_quad_residue\n>>> is_quad_residue(21, 100)\nTrue \n```", "```py\n>>> is_quad_residue(21, 120)\nFalse \n```", "```py\n>>> from sympy.ntheory import is_quad_residue\n>>> sorted(set([i**2 % 7 for i in range(7)]))\n[0, 1, 2, 4]\n>>> [j for j in range(7) if is_quad_residue(j, 7)]\n[0, 1, 2, 4] \n```", "```py\nsympy.ntheory.residue_ntheory.legendre_symbol(a, p)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import legendre_symbol\n>>> [legendre_symbol(i, 7) for i in range(7)]\n[0, 1, 1, -1, 1, -1, -1]\n>>> sorted(set([i**2 % 7 for i in range(7)]))\n[0, 1, 2, 4] \n```", "```py\nsympy.ntheory.residue_ntheory.jacobi_symbol(m, n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import jacobi_symbol, legendre_symbol\n>>> from sympy import S\n>>> jacobi_symbol(45, 77)\n-1\n>>> jacobi_symbol(60, 121)\n1 \n```", "```py\n>>> L = legendre_symbol\n>>> S(45).factors()\n{3: 2, 5: 1}\n>>> jacobi_symbol(7, 45) == L(7, 3)**2 * L(7, 5)**1\nTrue \n```", "```py\nsympy.ntheory.residue_ntheory.mobius(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import mobius\n>>> mobius(13*7)\n1\n>>> mobius(1)\n1\n>>> mobius(13*7*5)\n-1\n>>> mobius(13**2)\n0 \n```", "```py\nsympy.ntheory.residue_ntheory.discrete_log(n, a, b, order=None, prime_order=None)\n```", "```py\n>>> from sympy.ntheory import discrete_log\n>>> discrete_log(41, 15, 7)\n3 \n```", "```py\nsympy.ntheory.residue_ntheory.quadratic_congruence(a, b, c, n)\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import quadratic_congruence\n>>> quadratic_congruence(2, 5, 3, 7) # 2x^2 + 5x + 3 = 0 (mod 7)\n[2, 6]\n>>> quadratic_congruence(8, 6, 4, 15) # No solution\n[] \n```", "```py\nsympy.ntheory.residue_ntheory.polynomial_congruence(expr, m)\n```", "```py\n>>> from sympy.ntheory import polynomial_congruence\n>>> from sympy.abc import x\n>>> expr = x**6 - 2*x**5 -35\n>>> polynomial_congruence(expr, 6125)\n[3257] \n```", "```py\nsympy.ntheory.residue_ntheory.binomial_mod(n, m, k)\n```", "```py\n>>> from sympy.ntheory.residue_ntheory import binomial_mod\n>>> binomial_mod(10, 2, 6)  # binomial(10, 2) = 45\n3\n>>> binomial_mod(17, 9, 10)  # binomial(17, 9) = 24310\n0 \n```", "```py\nsympy.ntheory.continued_fraction.continued_fraction(a) → list\n```", "```py\n>>> from sympy.ntheory.continued_fraction import continued_fraction\n>>> from sympy import sqrt\n>>> continued_fraction((1 + 2*sqrt(3))/5)\n[0, 1, [8, 3, 34, 3]] \n```", "```py\nsympy.ntheory.continued_fraction.continued_fraction_convergents(cf)\n```", "```py\n>>> from sympy.core import pi\n>>> from sympy import S\n>>> from sympy.ntheory.continued_fraction import             continued_fraction_convergents, continued_fraction_iterator \n```", "```py\n>>> list(continued_fraction_convergents([0, 2, 1, 2]))\n[0, 1/2, 1/3, 3/8] \n```", "```py\n>>> list(continued_fraction_convergents([1, S('1/2'), -7, S('1/4')]))\n[1, 3, 19/5, 7] \n```", "```py\n>>> it = continued_fraction_convergents(continued_fraction_iterator(pi))\n>>> for n in range(7):\n...     print(next(it))\n3\n22/7\n333/106\n355/113\n103993/33102\n104348/33215\n208341/66317 \n```", "```py\n>>> it = continued_fraction_convergents([1, [1, 2]])  # sqrt(3)\n>>> for n in range(7):\n...     print(next(it))\n1\n2\n5/3\n7/4\n19/11\n26/15\n71/41 \n```", "```py\nsympy.ntheory.continued_fraction.continued_fraction_iterator(x)\n```", "```py\n>>> from sympy import Rational, pi\n>>> from sympy.ntheory.continued_fraction import continued_fraction_iterator \n```", "```py\n>>> list(continued_fraction_iterator(Rational(3, 8)))\n[0, 2, 1, 2]\n>>> list(continued_fraction_iterator(Rational(-3, 8)))\n[-1, 1, 1, 1, 2] \n```", "```py\n>>> for i, v in enumerate(continued_fraction_iterator(pi)):\n...     if i > 7:\n...         break\n...     print(v)\n3\n7\n15\n1\n292\n1\n1\n1 \n```", "```py\nsympy.ntheory.continued_fraction.continued_fraction_periodic(p, q, d=0, s=1) → list\n```", "```py\n>>> from sympy.ntheory.continued_fraction import continued_fraction_periodic\n>>> continued_fraction_periodic(3, 2, 7)\n[2, [1, 4, 1, 1]] \n```", "```py\n>>> continued_fraction_periodic(1, 2, 5)\n[[1]] \n```", "```py\n>>> continued_fraction_periodic(4, 3, 0)\n[1, 3]\n>>> continued_fraction_periodic(4, 3, 49)\n[3, 1, 2] \n```", "```py\nsympy.ntheory.continued_fraction.continued_fraction_reduce(cf)\n```", "```py\n>>> from sympy.ntheory.continued_fraction import continued_fraction_reduce\n>>> continued_fraction_reduce([1, 2, 3, 4, 5])\n225/157\n>>> continued_fraction_reduce([-2, 1, 9, 7, 1, 2])\n-256/233\n>>> continued_fraction_reduce([2, 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8]).n(10)\n2.718281835\n>>> continued_fraction_reduce([1, 4, 2, [3, 1]])\n(sqrt(21) + 287)/238\n>>> continued_fraction_reduce([[1]])\n(1 + sqrt(5))/2\n>>> from sympy.ntheory.continued_fraction import continued_fraction_periodic\n>>> continued_fraction_reduce(continued_fraction_periodic(8, 5, 13))\n(sqrt(13) + 8)/5 \n```", "```py\nsympy.ntheory.digits.count_digits(n, b=10)\n```", "```py\n>>> from sympy.ntheory import count_digits \n```", "```py\n>>> count_digits(1111339)\n{1: 4, 3: 2, 9: 1} \n```", "```py\n>>> n = 0xFA; n\n250\n>>> count_digits(_)\n{0: 1, 2: 1, 5: 1}\n>>> count_digits(n, 16)\n{10: 1, 15: 1} \n```", "```py\n>>> from sympy import factorial\n>>> c77 = count_digits(factorial(77))\n>>> [i for i in range(10) if c77[i] == 7]\n[1, 3, 7, 9] \n```", "```py\nsympy.ntheory.digits.digits(n, b=10, digits=None)\n```", "```py\n>>> from sympy.ntheory.digits import digits\n>>> digits(35)\n[10, 3, 5] \n```", "```py\n>>> digits(-35)\n[-10, 3, 5] \n```", "```py\n>>> digits(27, b=2)\n[2, 1, 1, 0, 1, 1] \n```", "```py\n>>> digits(35, digits=4)\n[10, 0, 0, 3, 5] \n```", "```py\nsympy.ntheory.digits.is_palindromic(n, b=10)\n```", "```py\n>>> from sympy.ntheory import is_palindromic \n```", "```py\n>>> all(is_palindromic(i) for i in (-11, 1, 22, 121))\nTrue \n```", "```py\n>>> is_palindromic(88, 8)\nFalse \n```", "```py\n>>> 0o121, is_palindromic(0o121)\n(81, False) \n```", "```py\n>>> oct(121), is_palindromic(121, 8) and is_palindromic(121)\n('0o171', True) \n```", "```py\nsympy.ntheory.egyptian_fraction.egyptian_fraction(r, algorithm='Greedy')\n```", "```py\n>>> from sympy import Rational\n>>> from sympy.ntheory.egyptian_fraction import egyptian_fraction\n>>> egyptian_fraction(Rational(3, 7))\n[3, 11, 231]\n>>> egyptian_fraction((3, 7), \"Graham Jewett\")\n[7, 8, 9, 56, 57, 72, 3192]\n>>> egyptian_fraction((3, 7), \"Takenouchi\")\n[4, 7, 28]\n>>> egyptian_fraction((3, 7), \"Golomb\")\n[3, 15, 35]\n>>> egyptian_fraction((11, 5), \"Golomb\")\n[1, 2, 3, 4, 9, 234, 1118, 2580] \n```", "```py\nsympy.ntheory.bbp_pi.pi_hex_digits(n, prec=14)\n```", "```py\n>>> from sympy.ntheory.bbp_pi import pi_hex_digits\n>>> pi_hex_digits(0)\n'3243f6a8885a30'\n>>> pi_hex_digits(0, 3)\n'324' \n```", "```py\n>>> import math\n>>> hex(int(math.pi * 2**((14-1)*4)))\n'0x3243f6a8885a30'\n>>> hex(int(math.pi * 2**((3-1)*4)))\n'0x324' \n```", "```py\nsympy.ntheory.ecm.ecm(n, B1=10000, B2=100000, max_curve=200, seed=1234)\n```", "```py\n>>> from sympy.ntheory import ecm\n>>> ecm(25645121643901801)\n{5394769, 4753701529}\n>>> ecm(9804659461513846513)\n{4641991, 2112166839943} \n```", "```py\n>>> from sympy.ntheory import ecm\n>>> ecm(7060005655815754299976961394452809, B1=100000, B2=1000000)\n{6988699669998001, 1010203040506070809}\n>>> ecm(122921448543883967430908091422761898618349713604256384403202282756086473494959648313841, B1=100000, B2=1000000)\n{15154262241479,\n15423094826093,\n799333555511111,\n809709509409109,\n888888877777777,\n914148152112161} \n```", "```py\nsympy.ntheory.qs.qs(N, prime_bound, M, ERROR_TERM=25, seed=1234)\n```", "```py\n>>> from sympy.ntheory import qs\n>>> qs(25645121643901801, 2000, 10000)\n{5394769, 4753701529}\n>>> qs(9804659461513846513, 2000, 10000)\n{4641991, 2112166839943} \n```", "```py\n>>> from sympy.ntheory import qs\n>>> qs(5915587277*3267000013, 1000, 10000)\n{3267000013, 5915587277} \n```"]