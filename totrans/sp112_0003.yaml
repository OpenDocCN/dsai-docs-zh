- en: Special functions (scipy.special)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊函数（scipy.special）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/special.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/special.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/special.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/special.html)
- en: The main feature of the [`scipy.special`](../reference/special.html#module-scipy.special
    "scipy.special") package is the definition of numerous special functions of mathematical
    physics. Available functions include airy, elliptic, bessel, gamma, beta, hypergeometric,
    parabolic cylinder, mathieu, spheroidal wave, struve, and kelvin. There are also
    some low-level stats functions that are not intended for general use as an easier
    interface to these functions is provided by the `stats` module. Most of these
    functions can take array arguments and return array results following the same
    broadcasting rules as other math functions in Numerical Python. Many of these
    functions also accept complex numbers as input. For a complete list of the available
    functions with a one-line description type `>>> help(special).` Each function
    also has its own documentation accessible using help. If you don’t see a function
    you need, consider writing it and contributing it to the library. You can write
    the function in either C, Fortran, or Python. Look in the source code of the library
    for examples of each of these kinds of functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.special`](../reference/special.html#module-scipy.special "scipy.special")包的主要特点是定义了许多数学物理专用函数。可用函数包括阿尔谢尔、椭圆、贝塞尔、伽玛、贝塔、超几何、拋物线圆柱、马修、球形波、斯特鲁维和开尔文函数。还有一些低级别的统计函数，不适合一般用途，因为这些函数的易用接口由`stats`模块提供。这些函数大多数可以接受数组参数，并返回数组结果，遵循数值Python中其他数学函数的广播规则。许多函数还接受复数作为输入。要获取带有一行描述的可用函数的完整列表，请键入`>>>
    help(special).` 每个函数还有自己的文档，可通过帮助访问。如果找不到需要的函数，请考虑编写并贡献给该库。您可以使用C、Fortran或Python编写该函数。在库的源代码中查找这些函数的示例。'
- en: Bessel functions of real order([`jv`](../reference/generated/scipy.special.jv.html#scipy.special.jv
    "scipy.special.jv"), [`jn_zeros`](../reference/generated/scipy.special.jn_zeros.html#scipy.special.jn_zeros
    "scipy.special.jn_zeros"))
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实阶贝塞尔函数（[`jv`](../reference/generated/scipy.special.jv.html#scipy.special.jv
    "scipy.special.jv"), [`jn_zeros`](../reference/generated/scipy.special.jn_zeros.html#scipy.special.jn_zeros
    "scipy.special.jn_zeros"))
- en: 'Bessel functions are a family of solutions to Bessel’s differential equation
    with real or complex order alpha:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塞尔函数是满足贝塞尔微分方程的解族，其阶数可以是实数或复数α：
- en: \[x^2 \frac{d^2 y}{dx^2} + x \frac{dy}{dx} + (x^2 - \alpha^2)y = 0\]
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: \[x^2 \frac{d^2 y}{dx^2} + x \frac{dy}{dx} + (x^2 - \alpha^2)y = 0\]
- en: 'Among other uses, these functions arise in wave propagation problems, such
    as the vibrational modes of a thin drum head. Here is an example of a circular
    drum head anchored at the edge:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他用途中，这些函数出现在波传播问题中，例如薄鼓面的振动模式。这里是一个固定在边缘的圆形鼓面的例子：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '!["This code generates a 3-D representation of the vibrational modes on a drum
    head viewed at a three-quarter angle. A circular region on the X-Y plane is defined
    with a Z value of 0 around the edge. Within the circle a single smooth valley
    exists on the -X side and a smooth peak exists on the +X side. The image resembles
    a yin-yang at this angle."](../Images/8aea0ad305c97b42c06df7d252814a5f.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '!["This code generates a 3-D representation of the vibrational modes on a drum
    head viewed at a three-quarter angle. A circular region on the X-Y plane is defined
    with a Z value of 0 around the edge. Within the circle a single smooth valley
    exists on the -X side and a smooth peak exists on the +X side. The image resembles
    a yin-yang at this angle."](../Images/8aea0ad305c97b42c06df7d252814a5f.png)'
- en: Cython Bindings for Special Functions ([`scipy.special.cython_special`](../reference/special.cython_special.html#module-scipy.special.cython_special
    "scipy.special.cython_special"))
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊函数的Cython绑定（[`scipy.special.cython_special`](../reference/special.cython_special.html#module-scipy.special.cython_special
    "scipy.special.cython_special"))
- en: 'SciPy also offers Cython bindings for scalar, typed versions of many of the
    functions in special. The following Cython code gives a simple example of how
    to use these functions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy还为special中许多函数提供了标量化、类型化的Cython绑定。以下Cython代码提供了如何使用这些函数的简单示例：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(See the [Cython documentation](http://docs.cython.org/en/latest/src/reference/compilation.html)
    for help with compiling Cython.) In the example the function `csc.gamma` works
    essentially like its ufunc counterpart [`gamma`](../reference/generated/scipy.special.gamma.html#scipy.special.gamma
    "scipy.special.gamma"), though it takes C types as arguments instead of NumPy
    arrays. Note, in particular, that the function is overloaded to support real and
    complex arguments; the correct variant is selected at compile time. The function
    `csc.sici` works slightly differently from [`sici`](../reference/generated/scipy.special.sici.html#scipy.special.sici
    "scipy.special.sici"); for the ufunc we could write `ai, bi = sici(x)`, whereas
    in the Cython version multiple return values are passed as pointers. It might
    help to think of this as analogous to calling a ufunc with an output array: `sici(x,
    out=(si, ci))`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: （参见[Cython文档](http://docs.cython.org/en/latest/src/reference/compilation.html)以获取有关编译Cython的帮助。）在这个例子中，函数`csc.gamma`基本上像其ufunc对应物[`gamma`](../reference/generated/scipy.special.gamma.html#scipy.special.gamma
    "scipy.special.gamma")一样工作，尽管它以C类型作为参数而不是NumPy数组。特别需要注意的是，该函数被重载以支持实数和复数参数；编译时会选择正确的变体。函数`csc.sici`与[`sici`](../reference/generated/scipy.special.sici.html#scipy.special.sici
    "scipy.special.sici")稍有不同；对于ufunc，我们可以写成`ai, bi = sici(x)`，而在Cython版本中，多个返回值作为指针传递。可以将其类比为使用输出数组调用ufunc：`sici(x,
    out=(si, ci))`。
- en: 'There are two potential advantages to using the Cython bindings:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cython绑定有两个潜在的优势：
- en: they avoid Python function overhead
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们避免Python函数开销
- en: they do not require the Python Global Interpreter Lock (GIL)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不需要Python全局解释器锁（GIL）。
- en: The following sections discuss how to use these advantages to potentially speed
    up your code, though, of course, one should always profile the code first to make
    sure putting in the extra effort will be worth it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分讨论如何利用这些优势潜在地加快您的代码，当然，首先应该对代码进行分析，确保付出额外的努力是值得的。
- en: Avoiding Python Function Overhead
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免Python函数开销
- en: 'For the ufuncs in special, Python function overhead is avoided by vectorizing,
    that is, by passing an array to the function. Typically, this approach works quite
    well, but sometimes it is more convenient to call a special function on scalar
    inputs inside a loop, for example, when implementing your own ufunc. In this case,
    the Python function overhead can become significant. Consider the following example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于special中的ufuncs，通过向函数传递数组来避免Python函数开销，即向量化。通常，这种方法效果很好，但有时在循环内部调用标量输入的特殊函数更方便，例如在实现自己的ufunc时。在这种情况下，Python函数开销可能会显著。考虑以下示例：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On one computer `python_tight_loop` took about 131 microseconds to run and
    `cython_tight_loop` took about 18.2 microseconds to run. Obviously this example
    is contrived: one could just call `special.jv(np.arange(100), 1)` and get results
    just as fast as in `cython_tight_loop`. The point is that if Python function overhead
    becomes significant in your code, then the Cython bindings might be useful.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台计算机上，`python_tight_loop`运行大约需要131微秒，而`cython_tight_loop`运行大约需要18.2微秒。显然，这个例子是刻意制造的：可以只调用`special.jv(np.arange(100),
    1)`，就能像在`cython_tight_loop`中一样快速得到结果。关键是，如果Python函数开销在您的代码中变得显著，那么Cython绑定可能会有用。
- en: Releasing the GIL
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 释放GIL
- en: 'One often needs to evaluate a special function at many points, and typically
    the evaluations are trivially parallelizable. Since the Cython bindings do not
    require the GIL, it is easy to run them in parallel using Cython’s `prange` function.
    For example, suppose that we wanted to compute the fundamental solution to the
    Helmholtz equation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常需要在许多点评估特殊函数，通常这些评估可以平凡地并行化。由于Cython绑定不需要GIL，因此可以使用Cython的`prange`函数轻松地并行运行它们。例如，假设我们想计算亥姆霍兹方程的基本解：
- en: \[\Delta_x G(x, y) + k^2G(x, y) = \delta(x - y),\]
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: \[\Delta_x G(x, y) + k^2G(x, y) = \delta(x - y),\]
- en: where \(k\) is the wavenumber and \(\delta\) is the Dirac delta function. It
    is known that in two dimensions the unique (radiating) solution is
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\[k\]是波数，而\[δ\]是狄拉克δ函数。已知在二维空间中，唯一的（辐射）解是
- en: \[G(x, y) = \frac{i}{4}H_0^{(1)}(k|x - y|),\]
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: \[G(x, y) = \frac{i}{4}H_0^{(1)}(k|x - y|),\]
- en: 'where \(H_0^{(1)}\) is the Hankel function of the first kind, i.e., the function
    [`hankel1`](../reference/generated/scipy.special.hankel1.html#scipy.special.hankel1
    "scipy.special.hankel1"). The following example shows how we could compute this
    function in parallel:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\[H_0^{(1)}\]是第一类汉克尔函数，即[`hankel1`](../reference/generated/scipy.special.hankel1.html#scipy.special.hankel1
    "scipy.special.hankel1")函数。以下示例展示了如何并行计算此函数：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '(For help with compiling parallel code in Cython see [here](http://docs.cython.org/en/latest/src/userguide/parallelism.html#compiling).)
    If the above Cython code is in a file `test.pyx`, then we can write an informal
    benchmark which compares the parallel and serial versions of the function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （如果需要帮助编译 Cython 中的并行代码，请参见[这里](http://docs.cython.org/en/latest/src/userguide/parallelism.html#compiling)。）如果上述
    Cython 代码在名为 `test.pyx` 的文件中，那么我们可以编写一个非正式的基准测试，比较该函数的并行和串行版本：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On one quad-core computer the serial method took 1.29 seconds and the parallel
    method took 0.29 seconds.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台四核计算机上，串行方法花费了 1.29 秒，而并行方法只花费了 0.29 秒。
- en: Functions not in [`scipy.special`](../reference/special.html#module-scipy.special
    "scipy.special")
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不在 [`scipy.special`](../reference/special.html#module-scipy.special "scipy.special")
    中的函数
- en: Some functions are not included in special because they are straightforward
    to implement with existing functions in NumPy and SciPy. To prevent reinventing
    the wheel, this section provides implementations of several such functions, which
    hopefully illustrate how to handle similar functions. In all examples NumPy is
    imported as `np` and special is imported as `sc`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数未包含在 `scipy.special` 中，因为它们可以利用 NumPy 和 SciPy 中现有的函数直接实现。为了避免重复造轮子，本节提供了几个这样的函数的实现示例，希望能说明如何处理类似的函数。在所有示例中，NumPy
    被导入为 `np`，而 special 被导入为 `sc`。
- en: 'The [binary entropy function](https://en.wikipedia.org/wiki/Binary_entropy_function):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[二进熵函数](https://en.wikipedia.org/wiki/Binary_entropy_function)：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A rectangular step function on [0, 1]:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[0, 1] 上的矩形阶跃函数：'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Translating and scaling can be used to get an arbitrary step function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用平移和缩放来得到任意阶跃函数。
- en: 'The [ramp function](https://en.wikipedia.org/wiki/Ramp_function):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[阶梯函数](https://en.wikipedia.org/wiki/Ramp_function)：'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
