- en: pandas.Interval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.Interval.html](https://pandas.pydata.org/docs/reference/api/pandas.Interval.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Immutable object implementing an Interval, a bounded slice-like interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**left**orderable scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Left bound for the interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**right**orderable scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Right bound for the interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**closed**{‘right’, ‘left’, ‘both’, ‘neither’}, default ‘right’'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the interval is closed on the left-side, right-side, both or neither.
    See the Notes for more detailed explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](pandas.IntervalIndex.html#pandas.IntervalIndex "pandas.IntervalIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: An Index of Interval objects that are all closed on the same side.
  prefs: []
  type: TYPE_NORMAL
- en: '[`cut`](pandas.cut.html#pandas.cut "pandas.cut")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert continuous data into discrete bins (Categorical of Interval objects).
  prefs: []
  type: TYPE_NORMAL
- en: '[`qcut`](pandas.qcut.html#pandas.qcut "pandas.qcut")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert continuous data into bins (Categorical of Interval objects) based on
    quantiles.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Period`](pandas.Period.html#pandas.Period "pandas.Period")'
  prefs: []
  type: TYPE_NORMAL
- en: Represents a period of time.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The parameters left and right must be from the same type, you must be able to
    compare them and they must satisfy `left <= right`.
  prefs: []
  type: TYPE_NORMAL
- en: A closed interval (in mathematics denoted by square brackets) contains its endpoints,
    i.e. the closed interval `[0, 5]` is characterized by the conditions `0 <= x <=
    5`. This is what `closed='both'` stands for. An open interval (in mathematics
    denoted by parentheses) does not contain its endpoints, i.e. the open interval
    `(0, 5)` is characterized by the conditions `0 < x < 5`. This is what `closed='neither'`
    stands for. Intervals can also be half-open or half-closed, i.e. `[0, 5)` is described
    by `0 <= x < 5` (`closed='left'`) and `(0, 5]` is described by `0 < x <= 5` (`closed='right'`).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to build Intervals of different types, like numeric ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check if an element belongs to it, or if it contains another interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can test the bounds (`closed=''right''`, so `0 < x <= 5`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Calculate its length
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can operate with + and * over an Interval and the operation is applied to
    each of its bounds, so the result depends on the type of the bound elements
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To create a time interval you can use Timestamps as the bounds
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`closed`](pandas.Interval.closed.html#pandas.Interval.closed "pandas.Interval.closed")
    | String describing the inclusive side the intervals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`closed_left`](pandas.Interval.closed_left.html#pandas.Interval.closed_left
    "pandas.Interval.closed_left") | Check if the interval is closed on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`closed_right`](pandas.Interval.closed_right.html#pandas.Interval.closed_right
    "pandas.Interval.closed_right") | Check if the interval is closed on the right
    side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_empty`](pandas.Interval.is_empty.html#pandas.Interval.is_empty "pandas.Interval.is_empty")
    | Indicates if an interval is empty, meaning it contains no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`left`](pandas.Interval.left.html#pandas.Interval.left "pandas.Interval.left")
    | Left bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`length`](pandas.Interval.length.html#pandas.Interval.length "pandas.Interval.length")
    | Return the length of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mid`](pandas.Interval.mid.html#pandas.Interval.mid "pandas.Interval.mid")
    | Return the midpoint of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`open_left`](pandas.Interval.open_left.html#pandas.Interval.open_left "pandas.Interval.open_left")
    | Check if the interval is open on the left side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`open_right`](pandas.Interval.open_right.html#pandas.Interval.open_right
    "pandas.Interval.open_right") | Check if the interval is open on the right side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`right`](pandas.Interval.right.html#pandas.Interval.right "pandas.Interval.right")
    | Right bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`overlaps`](pandas.Interval.overlaps.html#pandas.Interval.overlaps "pandas.Interval.overlaps")(other)
    | Check whether two Interval objects overlap. |'
  prefs: []
  type: TYPE_TB
