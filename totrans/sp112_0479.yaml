- en: scipy.optimize.fmin_powell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Minimize a function using modified Powell’s method.
  prefs: []
  type: TYPE_NORMAL
- en: This method only uses function values, not derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable f(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to func.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Line-search error tolerance.
  prefs: []
  type: TYPE_NORMAL
- en: '**ftol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative error in `func(xopt)` acceptable for convergence.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfun**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of function evaluations to make.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, `fopt`, `xi`, `direc`, `iter`, `funcalls`, and `warnflag` are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, print convergence messages.
  prefs: []
  type: TYPE_NORMAL
- en: '**retall**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a list of the solution at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An optional user-supplied function, called after each iteration. Called as `callback(xk)`,
    where `xk` is the current parameter vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**direc**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial fitting step and parameter order set as an (N, N) array, where N is
    the number of fitting parameters in *x0*. Defaults to step size 1.0 fitting all
    parameters simultaneously (`np.eye((N, N))`). To prevent initial consideration
    of values in a step or to change initial step size, set to 0 or desired step size
    in the Jth position in the Mth block, where J is the position in *x0* and M is
    the desired evaluation step, with steps being evaluated in index order. Step size
    and ordering will change freely as minimization proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter which minimizes *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**fopt**number'
  prefs: []
  type: TYPE_NORMAL
- en: 'Value of function at minimum: `fopt = func(xopt)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**direc**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current direction set.
  prefs: []
  type: TYPE_NORMAL
- en: '**iter**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '**funcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of function calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**warnflag**int'
  prefs: []
  type: TYPE_NORMAL
- en: 'Integer warning flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '1 : Maximum number of function evaluations. 2 : Maximum number of iterations.
    3 : NaN result encountered. 4 : The result is out of the provided bounds.'
  prefs: []
  type: TYPE_NORMAL
- en: '**allvecs**list'
  prefs: []
  type: TYPE_NORMAL
- en: List of solutions at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to unconstrained minimization algorithms for multivariate functions.
    See the ‘Powell’ method in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Uses a modification of Powell’s method to find the minimum of a function of
    N variables. Powell’s method is a conjugate direction method.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm has two loops. The outer loop merely iterates over the inner loop.
    The inner loop minimizes over each current direction in the direction set. At
    the end of the inner loop, if certain conditions are met, the direction that gave
    the largest decrease is dropped and replaced with the difference between the current
    estimated x and the estimated x from the beginning of the inner-loop.
  prefs: []
  type: TYPE_NORMAL
- en: The technical conditions for replacing the direction of greatest increase amount
    to checking that
  prefs: []
  type: TYPE_NORMAL
- en: No further gain can be made along the direction of greatest increase from that
    iteration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The direction of greatest increase accounted for a large sufficient fraction
    of the decrease in the function value from that iteration of the inner loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Powell M.J.D. (1964) An efficient method for finding the minimum of a function
    of several variables without calculating derivatives, Computer Journal, 7 (2):155-162.
  prefs: []
  type: TYPE_NORMAL
- en: 'Press W., Teukolsky S.A., Vetterling W.T., and Flannery B.P.: Numerical Recipes
    (any edition), Cambridge University Press'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
