- en: Development workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工作流程
- en: 原文：[https://numpy.org/doc/1.26/dev/development_workflow.html](https://numpy.org/doc/1.26/dev/development_workflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/dev/development_workflow.html](https://numpy.org/doc/1.26/dev/development_workflow.html)
- en: You already have your own forked copy of the [NumPy](https://www.numpy.org)
    repository, by following [Create a NumPy fork](gitwash/development_setup.html#forking),
    [Make the local copy](gitwash/development_setup.html#set-up-fork), you have configured
    [git](https://git-scm.com/) by following [Git configuration](gitwash/configure_git.html#configure-git),
    and have linked the upstream repository as explained in [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经通过[创建NumPy fork](gitwash/development_setup.html#forking)获得了自己的分叉版本的[NumPy](https://www.numpy.org)存储库，通过[创建本地副本](gitwash/development_setup.html#set-up-fork)，你已经按照[Git配置](gitwash/configure_git.html#configure-git)配置了[git](https://git-scm.com/)，并像[将你的存储库链接到上游存储库](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")中所解释的那样，将上游存储库链接了起来。
- en: What is described below is a recommended workflow with Git.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下面描述的是一种使用Git的推荐工作流程。
- en: Basic workflow
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本工作流程
- en: 'In short:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每次编辑启动一个新的*功能分支*。请参见下面的内容（#making-a-new-feature-branch）。
- en: Hack away! See [below](#editing-workflow)
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始动手吧！请参见下面的内容（#editing-workflow）
- en: 'When finished:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后：
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*贡献者*：将你的功能分支推送到你自己的Github存储库，并[创建一个拉取请求](#asking-for-merging)。'
- en: '*Core developers*: If you want to push changes without further review, see
    the notes [below](#pushing-to-main).'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*核心开发者*：如果你想在不经过进一步审查的情况下推送更改，请参阅下面的注释（#pushing-to-main）。'
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式有助于保持工作井然有序，并尽可能明确历史记录。
- en: See also
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: There are many online tutorials to help you [learn git](https://try.github.io/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线教程可以帮助你[学习git](https://try.github.io/)。有关特定git工作流程的讨论，请参阅这些讨论[linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html)，以及[ipython
    git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html)。
- en: '### Making a new feature branch'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '### 创建一个新的功能分支'
- en: 'First, fetch new commits from the `upstream` repository:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`upstream`存储库获取新的提交：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在上游存储库的主分支基础上创建一个新的分支：
- en: '[PRE1]  ### The editing workflow'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ### 编辑工作流程'
- en: Overview
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概述
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In more detail
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更详细
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做一些更改。当你觉得已经完成了一组完整的相关更改时，继续下一步。
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用`git status`检查哪些文件发生了变化（参见[git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)）。你会看到一个像下面这样的列表：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用`git diff`与上一个版本比较更改（参见[git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)）。这将打开一个简单的文本浏览器界面，突出显示你的文件与上一个版本之间的差异。
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git add modified_file`添加任何相关修改或新文件（参见[git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)）。这将把文件放入暂存区，这是一个文件队列，将添加到下一个提交中。只添加具有相关完整更改的文件。将有未完成更改的文件留到以后提交。
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要将暂存的文件提交到本地仓库副本，请运行`git commit`。此时，一个文本编辑器将打开，允许您编写提交消息。请阅读[提交消息部分](#writing-the-commit-message)以确保您编写的提交消息格式正确且详细足够。保存消息并关闭编辑器后，您的提交将保存。对于微不足道的提交，可以使用`-m`标志通过命令行传递简短的提交消息。例如，`git
    commit -am "ENH: Some message"`。'
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，您会看到这种形式的提交命令：`git commit -a`。额外的`-a`标志自动提交所有修改的文件并删除所有已删除的文件。这可以节省您输入大量`git
    add`命令的操作；但是，如果您不小心，它可能会在提交中添加不需要的更改。欲了解更多信息，请参阅[为什么使用-a标志？](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - 以及[tangled working copy problem](https://tomayko.com/writings/the-thing-about-git)中的有用用例描述。
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到您在[github](https://github.com/numpy/numpy)上fork的仓库：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经按照这些页面上的说明操作，git将创建到您的[githhub](https://github.com/numpy/numpy)仓库的默认链接称为`origin`。在git
    >= 1.7中，您可以使用`--set-upstream`选项确保将链接到`origin`永久设置：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，[git](https://git-scm.com/)将知道`my-new-feature`与您自己的[githhub](https://github.com/numpy/numpy)仓库中的`my-new-feature`分支相关联。随后的推送调用可以简化为以下方式：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You have to use `--set-upstream` for each new branch that you create.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每次创建新分支时，您必须使用`--set-upstream`参数。
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出现这样的情况：在您编辑时，`upstream`上新增了影响您工作的新提交。在这种情况下，请遵循本文档中的[在主分支上进行变基](#rebasing-on-main)部分，将这些更改应用到您的分支上。
- en: '#### Writing the commit message'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写提交消息'
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息应清晰并遵循几个基本规则。示例：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交消息中描述更改的动机，修复错误的性质或有关增强功能的某些细节也是一个好习惯。消息应该能够在不查看代码更改的情况下被理解。像`MAINT：fixed
    another one`这样的提交消息是不被推荐的示例；读者必须在其他地方寻找上下文。
- en: 'Standard acronyms to start the commit message with are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息开头的标准首字母缩写为：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Commands to skip continuous integration
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳过连续集成的命令。
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，针对每个PR都会运行许多连续集成（CI）作业，从在不同操作系统和硬件平台上运行测试套件到构建文档。在某些情况下，您已经知道不需要CI（或不是全部），例如如果您正在处理CI配置文件、自述文件中的文本或其他不涉及常规构建、测试或文档序列的文件。在这种情况下，您可以通过在提交消息中包含以下片段之一来明确跳过CI：
- en: '`[skip ci]`: skip all CI'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 ci]`：跳过所有 CI'
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在您还没有准备好让检查在您的PR上运行时才建议使用（例如，如果这只是一个草稿）。
- en: '`[skip actions]`: skip GitHub Actions jobs'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 actions]`：跳过GitHub Actions作业'
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://docs.github.com/actions) 是运行大多数CI检查的地方，包括代码检查、基本测试在大多数架构和操作系统上运行以及几个编译器和CPU优化设置。[查看这些检查的配置文件。](https://github.com/numpy/numpy/tree/main/.github/workflows)'
- en: '`[skip travis]`: skip TravisCI jobs'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 travis]`：跳过 TravisCI 作业'
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TravisCI](https://www.travis-ci.com/) 将针对Python 3.9在PowerPC和s390x架构上测试您的更改。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.travis.yml)'
- en: '`[skip azp]`: skip Azure jobs'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 azp]`：跳过 Azure 作业'
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) 是进行所有综合测试的地方。这是一个昂贵的运行，如果您只进行文档更改，则通常可以跳过它。[查看这些检查的主配置文件。](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
- en: '`[skip circle]`: skip CircleCI jobs'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 circle]`：跳过 CircleCI 作业'
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/) 是我们构建文档并在每个PR预览中存储生成的工件的地方。此检查还将运行所有的文档字符串示例并验证它们的结果。如果您没有进行文档更改，但例如更改了函数的API，则可能需要运行这些测试以验证doctests仍然有效。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
- en: '`[skip cirrus]`: skip Cirrus jobs'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 cirrus]`：跳过Cirrus作业'
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CirrusCI](https://cirrus-ci.org/) 主要触发Linux aarch64和MacOS Arm64轮子的上传。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
- en: Test building wheels
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试构建轮子
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy目前使用[cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)来通过持续集成服务构建轮子。为了节省资源，cibuildwheel轮子构建器并不默认在每个PR或提交到主分支上运行。
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望测试您的拉取请求不会破坏轮子构建器，您可以将`[wheel build]`附加到提交消息的末尾，也可以将以下标签之一添加到拉取请求中（如果您具有此权限）：
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36 - Build`: 用于改变构建流程/配置的拉取请求'
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03 - Maintenance`: 用于升级依赖关系的拉取请求'
- en: '`14 - Release`: for pull requests preparing for a release'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14 - Release`: 为准备发行的拉取请求'
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过github actions构建的轮子（包括64位linux，macOS和windows，arm64 macOS，和32位windows）将被上传为zip文件的工件。
    你可以从“Wheel builder”[Action](https://github.com/numpy/numpy/actions)的摘要页面访问它们。通过[travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI构建的aarch64轮子不作为工件提供。另外，如果满足以下条件，这些轮子将被上传到[https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)：
- en: by a weekly cron job or
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过每周的cron作业或者
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Github操作或者travis构建是手动触发的，需要适当的权限
- en: 'The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`  ### Get
    the mailing list’s opinion'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '如果构建是由以`v`开头的标签触发的，这些轮子将被上传到[https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)  ###
    获取邮件列表的意见'
- en: 'If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.  ###
    Asking for your changes to be merged with the main repo'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你计划新增功能或者API改变，最明智的做法是先给NumPy邮件列表发送邮件，请求意见。如果一周内没有收到回复，再次发邮件也没问题。  ### 请求将您的更改与主repo合并'
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你觉得自己的工作已完成时，你可以创建一个拉取请求（PR）。 Github有一个很好的帮助页面，详细说明了[提出拉取请求的流程](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request)。
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.  ### Getting your PR reviewed'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你的更改涉及对API的修改或者添加/修改功能，按照`doc/release/upcoming_changes/`目录中`doc/release/upcoming_changes/README.rst`文件中的说明和格式添加发行说明。  ###
    获取您的PR审查'
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会尽快审查拉取请求，通常在一周内。如果你两周内没有收到审查意见，请随时在你的PR上添加评论询问意见（这会通知维护者）。
- en: 'If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.  ### Rebasing on main'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你的PR很大或者很复杂，在numpy-discussion邮件列表上征求意见可能也是有用的。  ### 在主分支上变基'
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据上游[NumPy github](https://github.com/numpy/numpy)仓库的更改来更新你的功能分支。如果你绝对不需要这样做，尽量避免这样做，除非当你完成时。第一步将是将远程仓库与上游的新提交更新：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, you need to update the feature branch:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要更新功能分支：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对已经在上游变更的文件进行了更改，这可能会导致冲突，你需要解决冲突。在这种情况下，请参见[下文](#recovering-from-mess-up)获取帮助。
- en: 'Finally, remove the backup branch upon a successful rebase:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在成功的变基之后，请删除备份分支：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.  ###
    Recovering from mess-ups'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将上游合并回您的分支，不如在`main`上进行变基。当在特性分支上工作时，不鼓励使用`git merge`和`git pull`。### 从错误中恢复
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能会搞砸合并或变基。幸运的是，在Git中相对容易从这些错误中恢复。
- en: 'If you mess up during a rebase:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在变基过程中搞砸了：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you notice you messed up after the rebase:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在变基之后注意到你搞砸了：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you forgot to make a backup branch:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记创建备份分支：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有真正出错，但有合并冲突，您需要解决这些冲突。这可能是最棘手的问题之一。有关如何解决冲突的详细说明，请参见[这篇关于合并冲突的文章](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts)。
- en: Additional things you might want to do
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再做一些你可能想做的事情
- en: '### Rewriting commit history'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重写提交历史'
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do this only for your own feature branches.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这只适用于你自己的特性分支。
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你的提交中有一个令人尴尬的拼写错误？或者你有几次错误的尝试，你不希望后人看到。
- en: This can be done via *interactive rebasing*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过*交互式变基*完成此操作。
- en: 'Suppose that the commit history looks like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设提交历史如下所示：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 而`6ad92e5`是`main`分支中的最后一个提交。假设我们要进行以下更改：
- en: Rewrite the commit message for `13d7934` to something more sensible.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`13d7934`的提交信息改为更合理的内容。
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将提交`2dec1ac`，`a815645`，`eadc391`合并为一个。
- en: 'We do as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按以下步骤进行：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will open an editor with the following text in it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在编辑器中打开以下文本：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To achieve what we want, we will make the following changes to it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们想要的效果，我们将进行以下更改：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着（i）我们想要编辑`13d7934`的提交信息，并且（ii）将最后三个提交合并为一个。现在我们保存并退出编辑器。
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Git会立即打开一个编辑器来编辑提交信息。在修改后，我们得到输出：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'and the history looks now like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在历史看起来是这样的：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出错了，可以通过上面解释的方法进行恢复。
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在[github](https://github.com/numpy/numpy)上删除一个分支
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：[https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)
- en: Several people sharing a single repository
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个人共享一个仓库
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想与其他人一起处理某些事情，其中您都将提交到同一个仓库，甚至是同一个分支，那么请通过[github](https://github.com/numpy/numpy)共享它。
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在[创建一个NumPy fork](gitwash/development_setup.html#forking)中将NumPy首先fork到您的帐户。
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开你的forked仓库的github页面，例如`https://github.com/your-user-name/numpy`
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“管理员”按钮，并将其他任何人添加为仓库的合作者：
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
- en: 'Now all those people can do:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些人都可以做到：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，以`git@`开头的链接使用ssh协议，可读可写；以`git://`开头的链接为只读。
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你的合作者可以直接在那个仓库中进行提交，使用常规的方式：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Checkout changes from an existing pull request
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检出来自现有pull request的更改
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在pull request中测试更改或者在新的pull request中继续工作，那么提交将被克隆到你fork的存储库的本地分支中
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保你的上游指向主要存储库，参考[将您的存储库链接到上游存储库](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(在skimage v0.21.0中)")
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，获取更改并创建一个本地分支。假设`$ID`是pull request的编号，`$BRANCHNAME`是你想要创建的*新的本地*分支的名称：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Checkout the newly created branch:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 检出新创建的分支：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You now have the changes in the pull request.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你把更改放入了pull request中。
- en: Exploring your repository
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索你的存储库
- en: 'To see a graphical representation of the repository branches and commits:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看存储库分支和提交的图形表示：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To see a linear list of commits for this branch:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此分支的线性提交列表：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以查看你的[Github](https://github.com/numpy/numpy)存储库的[网络图形可视化工具](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)。
- en: Backporting
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回溯
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯是将在[numpy/main](https://github.com/numpy/numpy)提交的新功能/修复复制到稳定版本发布分支的过程。为此，你需要在你要回溯到的分支上创建一个分支，从`numpy/main`中挑选你想要的提交，然后为包含回溯内容的分支提交一个pull
    request。
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个你将要工作的分支。它应该是基于较旧版本的NumPy（而不是主分支）：
- en: '[PRE28]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要使用[git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html)将main分支上的更改应用到这个分支上：
- en: '[PRE29]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会遇到一些合并冲突。解决方法与其他合并/衍合冲突相同。此外，你可以使用[git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)来查看主分支和回溯分支之间的差异，确保不会出现问题。
- en: 'Push the new branch to your Github repository:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送新的分支到你的Github存储库：
- en: '[PRE30]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后使用Github发起一个pull request。确保它是针对维护分支而不是主分支的，Github通常会建议你将pull request发起到主分支。
- en: '### Pushing changes to the main repo'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '### 推送更改到主要存储库'
- en: '*Requires commit rights to the main NumPy repo.*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*需要对主要NumPy存储库拥有提交权限*'
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个特性分支上有一组“准备好的”更改，准备推送到NumPy的`main`或`maintenance`分支时，可以按如下方式将它们推送到`upstream`：
- en: First, merge or rebase on the target branch.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在目标分支上进行合并或衍合。
- en: 'Only a few, unrelated commits then prefer rebasing:'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果只有少量不相关的提交，则更倾向于使用衍合：
- en: '[PRE31]'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: See [Rebasing on main](#rebasing-on-main).
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[在主分支上衍合](#rebasing-on-main)。
- en: 'If all of the commits are related, create a merge commit:'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有的提交都是相关的，请创建一个合并提交：
- en: '[PRE32]'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Check that what you are going to push looks sensible:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查即将推送的内容是否合理：
- en: '[PRE33]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Push to upstream:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到上游存储库：
- en: '[PRE34]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It’s usually a good idea to use the `-n` flag to `git push` to check first that
    you’re about to push the changes you want to the place you want.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好使用`-n`标志进行`git push`以先检查一下您将要将更改推送到您希望的位置。
- en: Basic workflow
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本工作流程
- en: 'In short:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你所做的每一组编辑开始一个*特性分支*，参见[下文](#making-a-new-feature-branch)。
- en: Hack away! See [below](#editing-workflow)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始工作！参见[下文](#editing-workflow)
- en: 'When finished:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后：
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*贡献者*：将您的功能分支推送到您自己的 Github 存储库，并[创建一个拉取请求](#asking-for-merging)。'
- en: '*Core developers*: If you want to push changes without further review, see
    the notes [below](#pushing-to-main).'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*核心开发者*：如果您想要在不经过进一步审查的情况下推送更改，请阅读下面的备注[（下方）](#pushing-to-main)。'
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式有助于保持工作井然有序，使历史尽可能清晰。
- en: See also
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: There are many online tutorials to help you [learn git](https://try.github.io/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线教程可帮助您[学习 git](https://try.github.io/)。有关特定 git 工作流程的讨论，请参阅[linux git workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html)，以及[ipython
    git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html)
    。
- en: '### Making a new feature branch'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '### 创建一个新的功能分支'
- en: 'First, fetch new commits from the `upstream` repository:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请从`upstream`存储库中抓取新的提交：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，请基于上游存储库的主分支创建一个新分支：
- en: '[PRE36]  ### The editing workflow'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE36]  ### 编辑工作流程'
- en: Overview
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概述
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In more detail
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更详细的内容
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些更改。当您感觉自己完成了一组完整的相关更改时，请继续下一步。
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git status` 检查更改了哪些文件（请参阅[git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)）。您将看到如下列表：
- en: '[PRE38]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git diff` 与先前版本比较变化（查看[git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)）。这将带来一个简单的文本浏览器界面，突出显示您的文件与先前版本之间的差异。
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git add modified_file` 添加任何相关的修改或新文件（请参阅[git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)）。这将把文件放入暂存区，这是一个将添加到您下一个提交的文件队列。只添加具有相关完整更改的文件。将未完成更改的文件留到后续提交。
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要将暂存文件提交到您的本地存储库副本中，请执行 `git commit`。此时，将打开一个文本编辑器，允许您编写提交消息。阅读[提交消息部分](#writing-the-commit-message)
    确保您正在编写格式正确且足够详细的提交消息。保存消息并关闭编辑器后，您的提交将被保存。对于琐碎的提交，可以使用 `-m` 标志通过命令行传递简短的提交消息。例如，`git
    commit -am "ENH: Some message"`。'
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，您将看到提交命令的这种形式：`git commit -a`。额外的`-a`标志会自动提交所有修改后的文件，并删除所有已删除的文件。这可以帮您节省一些输入大量`git
    add`命令的时间；然而，如果不仔细，它可能会给提交添加不想要的更改。更多信息，请参阅[为什么使用 -a 标志？](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - 以及在 [纠缠的工作副本问题](https://tomayko.com/writings/the-thing-about-git) 中有用的用例描述。
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到您在[github](https://github.com/numpy/numpy)上fork的仓库：
- en: '[PRE39]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获取更多信息，请参阅[git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)。
- en: Note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经按照这些页面中的说明操作，git会为您的[github](https://github.com/numpy/numpy)仓库创建一个名为`origin`的默认链接。在git
    >= 1.7中，您可以使用`--set-upstream`选项确保永久设置到origin的链接：
- en: '[PRE40]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，[git](https://git-scm.com/)将知道`my-new-feature`和您自己的[github](https://github.com/numpy/numpy)仓库中的`my-new-feature`分支相关联。此后的push调用可以简化为以下形式：
- en: '[PRE41]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You have to use `--set-upstream` for each new branch that you create.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新分支，您必须使用`--set-upstream`。
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在这样的情况，即在您编辑时，`upstream`中新增了对您工作有影响的新提交。在这种情况下，请按照本文档的[Rebasing on main](#rebasing-on-main)部分的指示将这些更改应用到您的分支上。
- en: '#### Writing the commit message'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写提交消息'
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息应该清晰并遵循一些基本规则。例如：
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '在提交消息中描述更改的动机、修复错误的性质或有关增强功能的一些细节也很有必要。提交消息应该可以在不查看代码更改的情况下就能理解。`MAINT: fixed
    another one`这样的提交消息是一个不好的示例；读者必须去其他地方找上下文。'
- en: 'Standard acronyms to start the commit message with are:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 进行提交消息时，应该使用以下标准首字母缩写：
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Commands to skip continuous integration
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳过持续集成的命令
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个PR会运行很多持续集成（CI）作业，从在不同操作系统和硬件平台上运行测试套件到构建文档。在某些情况下，您已经知道不需要CI（或者不是全部CI），例如，如果您正在处理CI配置文件、README中的文本或者其他不涉及常规构建、测试或文档序列的文件。在这种情况下，您可以通过在提交消息中包含以下任一片段来显式跳过CI：
- en: '`[skip ci]`: skip all CI'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip ci]`：跳过所有CI'
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅在您还没有准备好在PR上运行检查时才推荐使用（例如，如果只是草稿而已）。
- en: '`[skip actions]`: skip GitHub Actions jobs'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip actions]`：跳过GitHub Actions作业'
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://docs.github.com/actions)是运行大多数CI检查的地方，包括linter、基准测试、运行大多数体系结构和操作系统的基本测试以及几个编译器和CPU优化设置。[请参阅这些检查的配置文件。](https://github.com/numpy/numpy/tree/main/.github/workflows)'
- en: '`[skip travis]`: skip TravisCI jobs'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip travis]`：跳过TravisCI作业'
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TravisCI](https://www.travis-ci.com/)将对您的更改在PowerPC和s390x架构上的Python 3.9进行测试。[请参阅这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.travis.yml)'
- en: '`[skip azp]`: skip Azure jobs'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip azp]`：跳过Azure作业'
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) 是运行所有综合测试的地方。这是一个昂贵的运行，如果您只进行文档更改，那么通常可以跳过这个运行。[请查看这些检查的主配置文件。](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
- en: '`[skip circle]`: skip CircleCI jobs'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 Circle]`: 跳过 CircleCI 作业'
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/) 是我们构建文档并存储生成的预览文件的地方。此检查还将运行所有文档字符串示例并验证其结果。如果你没有进行文档更改，但进行了函数
    API 的更改，例如，你可能需要运行这些测试来验证文档测试仍然有效。[请查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
- en: '`[skip cirrus]`: skip Cirrus jobs'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 Cirrus]`: 跳过 Cirrus 作业'
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CirrusCI](https://cirrus-ci.org/)主要触发 Linux aarch64 和 MacOS Arm64 的 wheels
    上传。[请查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
- en: Test building wheels
  id: totrans-222
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试构建 wheels
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 目前使用 [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    来通过持续集成服务构建 wheels。为节省资源，默认情况下不会在每个单独的 PR 或提交到主分支时运行 cibuildwheel wheel 构建器。
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试您的 pull request 是否导致 wheel 构建器失败，您可以将 `[wheel build]` 添加到提交的提交消息的末尾，或者如果有权限的话，将以下标签之一添加到
    pull request 中：
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36 - 构建`: 用于更改构建过程/配置的 pull requests'
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03 - 维护`: 用于升级依赖项的 pull requests'
- en: '`14 - Release`: for pull requests preparing for a release'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14 - 发布`: 用于准备发布的 pull requests'
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 github actions 构建的 wheels（包括 64 位 linux、macOS 和 windows, arm64 macOS 和 32
    位 windows）将以 zip 文件的形式上传为 artifacts。您可以从“Wheel builder” [Action](https://github.com/numpy/numpy/actions)
    的摘要页面访问它们。通过 [travis](https://app.travis-ci.com/github/numpy/numpy/builds) CI
    构建的 aarch64 wheels 不作为 artifacts 提供。此外，如果满足以下条件，wheels 将上传至 [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)：
- en: by a weekly cron job or
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过每周的定时作业或
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 github action 或 travis 构建是手动触发的，需要适当的权限
- en: 'The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`  ### Get
    the mailing list’s opinion'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '如果构建是由以 `v` 开头的标签触发，则 wheels 将上传至 [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    ### 获取邮件列表的意见'
- en: 'If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.  ###
    Asking for your changes to be merged with the main repo'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您计划进行新的功能或API更改，最明智的做法是先发送电子邮件给NumPy [邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)询问意见。如果一周内没有收到回复，再次发送电子邮件也可以。  ###
    请求将您的更改与主存储库合并'
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当您觉得您的工作已经完成，可以创建一个拉取请求（PR）。Github有一个很好的帮助页面来概述[提交拉取请求的过程](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request)。
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.  ### Getting your PR reviewed'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您的更改涉及对API的修改或添加/修改功能，请在`doc/release/upcoming_changes/`目录下添加一个发布说明，按照`doc/release/upcoming_changes/README.rst`文件中的说明和格式操作。  ###
    获取您的PR审查'
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会尽快审查拉取请求，通常在一周内。如果在两周内没有评论，可以在PR上添加评论要求反馈（这将通知维护者）。
- en: 'If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.  ### Rebasing on main'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您的PR较大或较复杂，向numpy-discussion邮件列表请求输入可能也是有用的。  ### 变基到主分支'
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用upstream [NumPy github](https://github.com/numpy/numpy)仓库中的更改更新您的特性分支。如果不是绝对需要这样做，请尽量避免这样做，除非您已经完成了。第一步将是使用新提交来更新远程存储库：
- en: '[PRE44]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, you need to update the feature branch:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要更新特性分支：
- en: '[PRE45]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对已经发生改变的文件进行了修改，这可能会产生您需要解决的合并冲突。在这种情况下，参见[下文](#recovering-from-mess-up)获取帮助。
- en: 'Finally, remove the backup branch upon a successful rebase:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在成功的变基后，删除备份分支：
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: 'Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.  ###
    Recovering from mess-ups'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '变基到主分支优先于将upstream合并到您的分支。在处理特性分支时，不鼓励使用`git merge`和`git pull`。  ### 从搞砸中恢复'
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能会搞砸合并或变基。幸运的是，在Git中相对简单地从这些错误中恢复。
- en: 'If you mess up during a rebase:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在变基期间出现了问题：
- en: '[PRE47]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you notice you messed up after the rebase:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在变基后注意到您搞砸了：
- en: '[PRE48]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you forgot to make a backup branch:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记创建备份分支：
- en: '[PRE49]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).  ###
    Making a new feature branch'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您实际上并没有搞砸，但存在合并冲突，您需要解决这些问题。这可能是比较棘手的事情之一。有关如何做到这一点的优秀说明，请参阅[这篇关于解决冲突的文章](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts)。
- en: 'First, fetch new commits from the `upstream` repository:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`upstream`存储库中提取新的提交：
- en: '[PRE50]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，基于upstream存储库的主分支创建新分支：
- en: '[PRE51]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '### The editing workflow'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '### 编辑工作流程'
- en: Overview
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概述
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In more detail
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更详细
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些更改。当您感到已经完成一组相关的完整工作时，可以继续下一步。
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git status` 检查哪些文件发生了变化（参见 [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)）。你会看到像下面这样的列表：
- en: '[PRE53]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git diff`（参见 [git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)）比较更改与上一个版本。这将带出一个简单的文本浏览器界面，突出显示你的文件与上一个版本之间的差异。
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git add modified_file` 添加任何相关的修改或新文件（参见 [git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)）。这将把文件放入暂存区，即下一个提交要添加的文件队列。仅添加具有相关、完整更改的文件。将未完成更改的文件留到后续的提交中。
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要将暂存的文件提交到本地副本仓库，请执行 `git commit`。此时，一个文本编辑器将打开，允许你编写提交消息。请阅读 [提交消息部分](#Writing-the-commit-message)
    以确保你编写了格式正确且足够详细的提交消息。保存消息并关闭编辑器后，你的提交将被保存。对于琐碎的提交，可以使用 `-m` 标志通过命令行传递短的提交消息。例如，`git
    commit -am "ENH: Some message"`。'
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能会看到 `git commit -a` 形式的提交命令。额外的 `-a` 标志会自动提交所有修改的文件并删除所有已删除的文件。这可以节省大量输入的
    `git add` 命令；然而，如果不小心，它可能会在提交中添加不需要的更改。更多信息，请参见 [为什么要使用 -a 标志？](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - 以及 [包含综合用例描述的有用工作副本问题](https://tomayko.com/writings/the-thing-about-git)。
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到你在 [github](https://github.com/numpy/numpy) 上 fork 的仓库：
- en: '[PRE54]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见 [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)。
- en: Note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经按照这些页面上的说明进行了操作，git 将会创建一个指向你的 [github](https://github.com/numpy/numpy)
    仓库的默认链接，称为 `origin`。在 git >= 1.7 中，你可以使用 `--set-upstream` 选项来确保链接到 origin 是永久设置的：
- en: '[PRE55]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，[git](https://git-scm.com/) 将会知道 `my-new-feature` 与你自己的 [github](https://github.com/numpy/numpy)
    仓库中的 `my-new-feature` 分支相关。随后的推送操作将被简化为以下内容：
- en: '[PRE56]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You have to use `--set-upstream` for each new branch that you create.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你创建的每个新分支，都必须使用 `--set-upstream`。
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的情况是，在你编辑时，`upstream` 添加了影响你工作的新提交。在这种情况下，请按照本文档的 [Rebasing on main](#rebasing-on-main)
    部分的说明将这些更改应用到你的分支上。
- en: '#### Writing the commit message'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写提交消息'
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息应该清晰，并遵循一些基本规则。例如：
- en: '[PRE57]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '在提交消息中描述变更的动机，修复错误或增强的性质等具体细节也是很好的。提交消息应该能够在不看代码变更的情况下理解。像`MAINT: fixed another
    one`这样的提交消息就是一个反面教材；读者必须去其他地方查看背景信息。'
- en: 'Standard acronyms to start the commit message with are:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要在提交消息开头使用的标准首字母缩写为：
- en: '[PRE58]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Commands to skip continuous integration
  id: totrans-285
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳过持续集成的命令
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个 PR 都会运行大量的持续集成（CI）作业，包括在不同操作系统和硬件平台上运行测试套件以及构建文档。在某些情况下，你已经知道不需要 CI（或者不需要全部），例如如果你在
    CI 配置文件、README 中的文本或其他不涉及常规构建、测试或文档序列的文件上工作。在这种情况下，你可以通过在提交消息中包含以下片段之一来明确地跳过 CI：
- en: '`[skip ci]`: skip all CI'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip ci]`: 跳过所有 CI'
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在你的 PR 还没有准备好进行检查时才推荐使用（例如，如果这只是一个草稿）。
- en: '`[skip actions]`: skip GitHub Actions jobs'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip actions]`: 跳过 GitHub Actions 工作'
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://docs.github.com/actions) 是大多数 CI 检查运行的地方，包括代码检查、基准测试、大部分架构和操作系统的基本测试，以及几个编译器和
    CPU 优化设置。[点击以查看这些检查的配置文件。](https://github.com/numpy/numpy/tree/main/.github/workflows)'
- en: '`[skip travis]`: skip TravisCI jobs'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip travis]`: 跳过 TravisCI 工作'
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TravisCI](https://www.travis-ci.com/) 将在 PowerPC 和 s390x 架构上测试你的更改对 Python
    3.9 的兼容性。[点击以查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.travis.yml)'
- en: '`[skip azp]`: skip Azure jobs'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip azp]`: 跳过 Azure 工作'
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) 是运行所有全面测试的地方。这是一个昂贵的运行，如果你只是做文档更改，可能会跳过。[点击以查看这些检查的主配置文件。](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
- en: '`[skip circle]`: skip CircleCI jobs'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip circle]`: 跳过 CircleCI 工作'
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/) 是我们构建文档并在每个 PR 中存储生成的预览文件的地方。此检查还将运行所有的文档字符串示例并验证它们的结果。如果你不对文档进行更改，但对函数的
    API 进行更改，例如，你可能需要运行这些测试来验证 doctest 是否仍然有效。[点击以查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
- en: '`[skip cirrus]`: skip Cirrus jobs'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip cirrus]`: 跳过 Cirrus 工作'
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CirrusCI](https://cirrus-ci.org/) 主要触发 Linux aarch64 和 MacOS Arm64 轮上传。[点击以查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
- en: Test building wheels
  id: totrans-299
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试构建轮上传
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 目前使用 [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    来通过持续集成服务构建轮子。为了节省资源，默认情况下不会在每个单独的 PR 或提交到主分支时运行 cibuildwheel 轮子构建器。
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试您的拉取请求是否破坏了构建程序，您可以在提交消息的末尾附加 `[wheel build]`，或者在拉取请求中添加以下标签之一（如果您有权限这样做的话）：
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36 - 构建`: 用于更改构建过程/配置的拉取请求'
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03 - 维护`: 用于更新依赖项的拉取请求'
- en: '`14 - Release`: for pull requests preparing for a release'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14 - 发布`: 用于准备发布的拉取请求'
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 github actions 构建的轮子（包括 64 位 Linux、macOS 和 Windows，arm64 macOS 和 32 位 Windows）将以
    zip 文件的形式上传为工件。您可以从“Wheel builder” [Action](https://github.com/numpy/numpy/actions)
    的摘要页面访问它们。通过 [travis](https://app.travis-ci.com/github/numpy/numpy/builds) CI
    构建的 aarch64 轮子不作为工件提供。此外，轮子将根据以下条件上传到 [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)：
- en: by a weekly cron job or
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由每周的定期 cron 任务执行或
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 github action 或 travis 构建已手动触发，则需要适当的权限
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建是由以 `v` 开头的仓库标签触发的，则将轮子上传到 [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
- en: Overview
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概述
- en: '[PRE59]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In more detail
  id: totrans-311
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更详细
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些更改。当你觉得已经完成了一组相关的工作，并且是可工作的时候，就可以继续下一步了。
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git status` 检查哪些文件发生了变化（参见 [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)）。您将看到类似于这样的列表：
- en: '[PRE60]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选：使用 `git diff` ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html))
    比较更改与上一个版本的区别。这将带来一个简单的文本浏览器界面，突出显示您的文件与上一个版本之间的差异。
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git add modified_file`（参见 [git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)）添加任何相关的修改或新文件。这将把文件放入暂存区，即将添加到您的下一个提交的文件队列。只添加具有相关、完整更改的文件。将具有未完成更改的文件留到以后提交。
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要将暂存文件提交到本地仓库的副本中，请使用`git commit`。此时，文本编辑器将打开，允许你编写提交消息。请阅读[commit message
    section](#writing-the-commit-message)以确保你正在编写格式正确且详细的提交消息。保存消息并关闭编辑器后，你的提交将被保存。对于琐碎的提交，可以通过命令行使用`-m`标志传递简短的提交消息。例如，`git
    commit -am "ENH: Some message"`。'
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，你会看到这种形式的提交命令：`git commit -a`。额外的`-a`标志会自动提交所有修改的文件，并删除所有已删除的文件。这可以节省你大量使用`git
    add`命令的输入；但是，如果不小心的话，它可能会向提交添加不必要的更改。欲了解更多信息，请参阅[为什么使用-a标志？](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - 以及在[纠缠的工作副本问题](https://tomayko.com/writings/the-thing-about-git)中的有用用例描述。
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到你在[github](https://github.com/numpy/numpy)上分叉的仓库：
- en: '[PRE61]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)。
- en: Note
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经按照这些页面的说明操作，git将创建到你的[github](https://github.com/numpy/numpy)仓库的默认链接称为`origin`。在git
    >= 1.7中，你可以使用`--set-upstream`选项确保链接到origin永久设置：
- en: '[PRE62]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，[git](https ://git-scm.com/)将知道`my-new-feature`与你自己的[github](https://github.com/numpy/numpy)仓库中的`my-new-feature`分支相关联。随后的推送调用将简化如下：
- en: '[PRE63]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: You have to use `--set-upstream` for each new branch that you create.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须为每个创建的新分支使用`--set-upstream`。
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 可能情况是，当你在编辑时，`upstream`会添加对你的工作有影响的新提交。在这种情况下，请遵循本文档的[Rebasing on main](#rebasing-on-main)部分，将这些更改应用到你的分支上。
- en: '#### Writing the commit message'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 编写提交消息'
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息应明确，并遵循一些基本规则。例如：
- en: '[PRE64]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '描述更改的动机，修复bug的性质或增强功能的一些细节也是需要在提交消息中包含的好内容。提交消息应可不查看代码更改即可理解。像`MAINT: fixed
    another one`这样的提交消息是一个反例；读者必须去其他地方查找上下文。'
- en: 'Standard acronyms to start the commit message with are:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 以标准缩略词开始提交消息的是：
- en: '[PRE65]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Commands to skip continuous integration
  id: totrans-335
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳过持续集成的命令
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，针对每个PR都会运行许多持续集成（CI）作业，从在不同操作系统和硬件平台上运行测试套件到构建文档等。在某些情况下，您可能已经知道不需要进行CI（或者不需要全部CI），例如，如果您正在处理CI配置文件，README中的文本或其他不涉及常规构建、测试或文档序列的文件。在这种情况下，您可以通过在提交消息中包含以下片段之一来明确跳过CI：
- en: '`[skip ci]`: skip all CI'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip ci]`: 跳过所有CI'
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅在您仍未准备好运行检查的情况下才建议使用（例如，如果这只是一个草稿）。
- en: '`[skip actions]`: skip GitHub Actions jobs'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip actions]`: 跳过GitHub Actions作业'
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://docs.github.com/actions)是大多数CI检查都运行的地方，包括检查程序、基准测试、对大多数架构和操作系统运行基本测试，以及若干编译器和CPU优化设置。[查看这些检查的配置文件。](https://github.com/numpy/numpy/tree/main/.github/workflows)'
- en: '`[skip travis]`: skip TravisCI jobs'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip travis]`: 跳过TravisCI作业'
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TravisCI](https://www.travis-ci.com/)将针对Python 3.9在PowerPC和s390x架构上测试您的更改。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.travis.yml)'
- en: '`[skip azp]`: skip Azure jobs'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip azp]`: 跳过Azure作业'
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines)是运行所有综合测试的地方。这是一个昂贵的运行，如果您只进行文档更改，例如，您通常可以跳过这一步。[查看这些检查的主配置文件。](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
- en: '`[skip circle]`: skip CircleCI jobs'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip circle]`: 跳过CircleCI作业'
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/)是我们构建文档并在每个PR中存储生成的预览文件的地方。此检查还将运行所有的文档字符串示例并验证它们的结果。如果您不进行文档更改，但对函数的API进行更改，例如，您可能需要运行这些测试以验证文档测试是否仍然有效。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
- en: '`[skip cirrus]`: skip Cirrus jobs'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[skip cirrus]`: 跳过Cirrus作业'
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CirrusCI](https://cirrus-ci.org/)主要触发Linux aarch64和MacOS Arm64的上传。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
- en: Test building wheels
  id: totrans-349
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试构建轮子
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy目前使用[cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)来通过持续集成服务构建轮子。为了节省资源，cibuildwheel轮子构建器不会在每个单独的PR或提交到主分支上默认运行。
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要测试您的拉取请求不会破坏轮子构建器，您可以在提交的提交消息的末尾附加`[wheel build]`，或者在拉取请求中添加以下标签中的一个（如果您有权限这样做）：
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36 - 构建`：适用于更改构建流程/配置的拉取请求'
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03 - 维护`：适用于升级依赖项的拉取请求'
- en: '`14 - Release`: for pull requests preparing for a release'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14 - 发布`：用于准备发布的拉取请求'
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 通过github动作构建的轮子（包括64位linux、macOS和windows，arm64 macOS和32位windows）将作为zip文件上传为工件。你可以从“Wheel
    builder”[Action](https://github.com/numpy/numpy/actions)的摘要页面访问它们。通过[travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI构建的aarch64轮子不以工件形式提供。此外，如果满足以下条件，这些轮子将被上传到[https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)：
- en: by a weekly cron job or
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过每周的定期计划作业或
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果github动作或travis构建已经手动触发，这需要适当的权限
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建是由仓库以`v`开头的标签触发的，这些轮子将被上传到[https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
- en: Commands to skip continuous integration
  id: totrans-359
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 跳过持续集成的命令
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个PR都会运行许多持续集成（CI）作业，从在不同操作系统和硬件平台上运行测试套件到构建文档。在某些情况下，你可能已经知道不需要CI（或者不需要全部），例如，如果你在CI配置文件、README中的文本，或者其他不涉及正常构建、测试或文档序列的文件上工作。在这种情况下，你可以通过在提交消息中包含以下片段来显式地跳过CI：
- en: '`[skip ci]`: skip all CI'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 ci]`：跳过所有CI'
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在你还没有准备好进行PR检查时才建议这样做（例如，如果这只是一个草稿）。
- en: '`[skip actions]`: skip GitHub Actions jobs'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 actions]`：跳过GitHub Actions作业'
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://docs.github.com/actions) 是大多数CI检查的运行位置，包括代码检查器、基准测试、对大多数架构和操作系统运行基本测试，以及几个编译器和CPU优化设置。[查看这些检查的配置文件。](https://github.com/numpy/numpy/tree/main/.github/workflows)'
- en: '`[skip travis]`: skip TravisCI jobs'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 travis]`：跳过TravisCI作业'
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[TravisCI](https://www.travis-ci.com/) 将在PowerPC和s390x架构上测试您的更改是否适用于Python
    3.9。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.travis.yml)'
- en: '`[skip azp]`: skip Azure jobs'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 azp]`：跳过Azure作业'
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) 是运行所有综合测试的地方。这是一个昂贵的运行，如果你只是进行文档方面的更改，你通常可以跳过。[查看这些检查的主配置文件。](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
- en: '`[skip circle]`: skip CircleCI jobs'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 circle]`：跳过CircleCI作业'
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CircleCI](https://circleci.com/) 是我们构建文档并存储生成的预览内容的地方。此检查还将运行所有文档字符串示例并验证其结果。如果您没有对文档进行更改，但对函数的API进行了更改，例如，您可能需要运行这些测试以验证doctests仍然有效。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
- en: '`[skip cirrus]`: skip Cirrus jobs'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[跳过 Cirrus]`: 跳过 Cirrus 任务'
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[CirrusCI](https://cirrus-ci.org/) 主要触发 Linux aarch64 和 MacOS Arm64 轮毂上传。[查看这些检查的配置文件。](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
- en: Test building wheels
  id: totrans-373
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 测试构建轮毂
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 Numpy 使用 [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    来通过持续集成服务构建轮毂。为了节省资源，cibuildwheel 轮毂构建器默认情况下不会在每个单独的PR或提交到主存储库上运行。
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要测试您的拉取请求不会破坏轮毂构建器，您可以在提交消息的结尾添加`[wheel build]`，或者如果有权限，可以在拉取请求中添加以下任一标签：
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36 - 构建：用于更改构建过程/配置的拉取请求`'
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03 - 维护：用于更新依赖关系的拉取请求`'
- en: '`14 - Release`: for pull requests preparing for a release'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14 - 发布：用于准备发布的拉取请求`'
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 github actions 构建的轮毂（包括 64位 Linux、macOS 和 Windows、arm64 macOS 和 32位 Windows）将以
    zip 文件的形式作为构件上传。您可以从“轮毂构建器”[操作](https://github.com/numpy/numpy/actions)的总览页面访问它们。通过
    [travis](https://app.travis-ci.com/github/numpy/numpy/builds) CI 构建的 aarch64 轮毂不作为构件提供。此外，如果满足以下条件，这些轮毂将被上传到
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)：
- en: by a weekly cron job or
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过每周的定时任务或者
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 github action 或 travis 构建是手动触发的，这需要适当的权限
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该构建是由以`v`开头的tag触发的，将轮毂上传到 [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
- en: '### Get the mailing list’s opinion'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '### 获取邮件列表的意见'
- en: If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划添加新功能或API更改，最明智的做法是先给 NumPy [邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)
    发电子邮件请求评论。如果一周内没有回复，可以再次发送电子邮件询问。
- en: '### Asking for your changes to be merged with the main repo'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '### 请将您的更改申请合并到主存储库'
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当您感到工作已经完成时，可以创建一个拉取请求（PR）。 Github 有一个很好的帮助页面，概述了 [提交拉取请求](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request)
    的过程。
- en: If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的更改涉及对 API 进行修改或添加/修改了某个函数，需要在 `doc/release/upcoming_changes/` 目录中添加一个发布说明，按照
    `doc/release/upcoming_changes/README.rst` 文件中的说明和格式进行操作。
- en: '### Getting your PR reviewed'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '### 获取您的 PR 审核'
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会尽快审查 PR，通常在一周内，如果在两周内没有收到审查意见，欢迎通过在您的 PR 上添加评论来征求反馈（这将会提醒维护者）。
- en: If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 PR 较大或较复杂，询问 numpy-discussion 邮件列表上的意见也可能会有用。
- en: '### Rebasing on main'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '### 变基到主分支'
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将您的功能分支与上游[NumPy 的 GitHub](https://github.com/numpy/numpy) 仓库的更改同步。如果非常不需要这样做，请尽量避免这样做，除非您已经完成。第一步将是从上游更新远程仓库中的新提交：
- en: '[PRE66]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Next, you need to update the feature branch:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要更新功能分支：
- en: '[PRE67]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对已经在上游发生了更改的文件进行了更改，可能会引发您需要解决的合并冲突。有关在这种情况下的帮助，请参见[下文](#recovering-from-mess-up)。
- en: 'Finally, remove the backup branch upon a successful rebase:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在成功变基后删除备份分支：
- en: '[PRE68]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Note
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用变基到主分支，而不是把上游合并回您的分支。在处理功能分支时，不建议使用 `git merge` 和 `git pull`。
- en: '### Recovering from mess-ups'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从错误中恢复'
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您会在合并或变基时搞砸。幸运的是，在 Git 中，从这样的错误中恢复相对容易。
- en: 'If you mess up during a rebase:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在变基时搞砸了：
- en: '[PRE69]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If you notice you messed up after the rebase:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在变基之后发现自己搞砸了：
- en: '[PRE70]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If you forgot to make a backup branch:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘了制作备份分支：
- en: '[PRE71]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实际上您没有搞砸，但出现合并冲突，那就需要解决这些问题。这可能是让人比较头痛的事情之一。有关如何处理这个问题的详细描述，请参见[这篇合并冲突的文章](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts)。
- en: Additional things you might want to do
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可能还需要做的其他事情
- en: '### Rewriting commit history'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重写提交历史'
- en: Note
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do this only for your own feature branches.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 仅适用于您自己的功能分支。
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在您提交的更改中有一个令人尴尬的拼写错误？或者您可能有几次错误的开始，不希望后人看到。
- en: This can be done via *interactive rebasing*.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过*交互式变基*来完成。
- en: 'Suppose that the commit history looks like this:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 假设提交历史看起来是这样的：
- en: '[PRE72]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`6ad92e5` 是 `main` 分支中的最后一个提交。假设我们需要做以下更改：'
- en: Rewrite the commit message for `13d7934` to something more sensible.
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新编写 `13d7934` 的提交消息，变得更合理。
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将提交 `2dec1ac`、`a815645`、`eadc391` 合并为一个。
- en: 'We do as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照以下步骤进行：
- en: '[PRE73]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'This will open an editor with the following text in it:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个编辑器，并在其中显示以下文本：
- en: '[PRE74]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To achieve what we want, we will make the following changes to it:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 为达到我们的目的，我们将对其进行以下更改：
- en: '[PRE75]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着（i）我们想编辑 `13d7934` 的提交消息，以及（ii）将最后的三个提交合并成一个。现在保存并退出编辑器。
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Git 立即会带出一个编辑器，用于编辑提交消息。修改后，我们获得输出：
- en: '[PRE76]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'and the history looks now like this:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，历史记录如下：
- en: '[PRE77]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题，可以再次按照上面的方法进行恢复。
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除[github](https://github.com/numpy/numpy)上的分支
- en: '[PRE78]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：[https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)
- en: Several people sharing a single repository
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多人共享一个单一的存储库
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想和其他人一起处理一些事情，大家一起提交到同一个存储库，甚至是同一个分支中，只需通过[github](https://github.com/numpy/numpy)共享即可。
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将 NumPy 派生到您的帐户中，如[创建 NumPy 派生](gitwash/development_setup.html#forking)所示。
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到您的派生存储库的 github 页面，例如 `https://github.com/your-user-name/numpy`
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“管理”按钮，并将其他人添加为存储库的合作者：
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  id: totrans-441
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
- en: 'Now all those people can do:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有这些人都可以执行以下操作：
- en: '[PRE79]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，以`git@`开头的链接使用 ssh 协议并具有读写权限；以`git://`开头的链接是只读的。
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 您的合作者随后可以直接提交到该存储库，使用如下方式：
- en: '[PRE80]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Checkout changes from an existing pull request
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检出现有拉取请求的更改
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在拉取请求中测试更改或继续新的拉取请求中的工作，则提交将克隆到您的派生存储库中的本地分支
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保您的上游指向主存储库，例如从[将您的存储库链接到上游存储库](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream)（在
    skimage v0.21.0 中）
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，获取更改并创建一个本地分支。假设`$ID`是拉取请求编号，`$BRANCHNAME`是您希望创建的*新的本地*分支的名称：
- en: '[PRE81]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Checkout the newly created branch:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 检出新创建的分支：
- en: '[PRE82]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: You now have the changes in the pull request.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在拉取请求中有了更改。
- en: Exploring your repository
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浏览您的存储库
- en: 'To see a graphical representation of the repository branches and commits:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看存储库分支和提交的图形表示：
- en: '[PRE83]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'To see a linear list of commits for this branch:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此分支的提交的线性列表：
- en: '[PRE84]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查看您的[github](https://github.com/numpy/numpy)存储库的[网络图形可视化器](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)。
- en: Backporting
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回溯
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯是将提交的新功能/修复从 [numpy/main](https://github.com/numpy/numpy) 复制回到稳定发布分支的过程。要做到这一点，您需要从要回溯的分支创建一个分支，从`numpy/main`中选择您想要的提交，然后提交包含回溯内容的分支的拉取请求。
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个分支，该分支需要基于旧版本的NumPy（而不是主分支）：
- en: '[PRE85]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要使用[git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html)将主分支的更改应用到此分支中：
- en: '[PRE86]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里你可能会遇到一些冲突，解决冲突的方法与合并/变基冲突相同。只需使用[git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)可以查看主分支和后移分支之间的差异，以确保不会出错。
- en: 'Push the new branch to your Github repository:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新分支推送到你的 Github 仓库：
- en: '[PRE87]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 Github 创建一个拉取请求。确保它针对的是 maintenance 分支而不是 main 分支，Github 通常会建议你针对 main
    创建拉取请求。
- en: '### Pushing changes to the main repo'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将更改推送到主要仓库'
- en: '*Requires commit rights to the main NumPy repo.*'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '*需要对主要的 NumPy 仓库具有提交权限。*'
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个功能分支上有一组"准备好"的更改，准备推送到 NumPy 的`main`或`maintenance`分支时，可以按如下方式将它们推送到`upstream`：
- en: First, merge or rebase on the target branch.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在���标分支上进行合并或变基。
- en: 'Only a few, unrelated commits then prefer rebasing:'
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有少数不相关的提交，然后优先使用变基：
- en: '[PRE88]'
  id: totrans-476
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: See [Rebasing on main](#rebasing-on-main).
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[在主分支上进行变基](#rebasing-on-main)。
- en: 'If all of the commits are related, create a merge commit:'
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有提交都相关，请创建一个合并提交：
- en: '[PRE89]'
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Check that what you are going to push looks sensible:'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你将要推送的内容是否合理：
- en: '[PRE90]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Push to upstream:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到上游：
- en: '[PRE91]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Note
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'It’s usually a good idea to use the `-n` flag to `git push` to check first
    that you’re about to push the changes you want to the place you want.  ### Rewriting
    commit history'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-n`标志进行`git push`通常是一个好主意，以先检查你要推送的更改是否正确，并将其推送到正确的位置。### 修改提交历史
- en: Note
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Do this only for your own feature branches.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 仅对你自己的功能分支执行此操作。
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 你在一个提交中有一个令人尴尬的拼写错误吗？或者你已经开始了几次你不想让后世看到的错误。
- en: This can be done via *interactive rebasing*.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过*交互式变基*来完成。
- en: 'Suppose that the commit history looks like this:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 假设提交历史看起来是这样的：
- en: '[PRE92]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`6ad92e5`是`main`分支上的最后一个提交。假设我们要进行以下更改：'
- en: Rewrite the commit message for `13d7934` to something more sensible.
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写`13d7934`的提交消息为一些更明智的东西。
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将提交`2dec1ac`，`a815645`，`eadc391`合并为一个提交。
- en: 'We do as follows:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按如下方式操作：
- en: '[PRE93]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'This will open an editor with the following text in it:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个编辑器，其中包含以下文本：
- en: '[PRE94]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'To achieve what we want, we will make the following changes to it:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，我们将对其进行以下更改：
- en: '[PRE95]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们要编辑`13d7934`的提交信息，并将最后三个提交合并为一个。现在我们保存并退出编辑器。
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: Git 立即打开一个编辑器来编辑提交消息。修改后，我们会得到输出：
- en: '[PRE96]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'and the history looks now like this:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 然后历史看起来是这样的：
- en: '[PRE97]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出错了，可以按照上面的说明进行恢复。
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除在[github](https://github.com/numpy/numpy)上的一个分支
- en: '[PRE98]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：[https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)
- en: Several people sharing a single repository
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几个人共享一个仓库
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想与他人一起工作，共享同一个仓库，甚至是同一个分支，只需通过[github](https://github.com/numpy/numpy)共享即可。
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将 NumPy fork 到你的账户中，参见[创建一个 NumPy fork](gitwash/development_setup.html#forking)。
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开你 fork 的仓库的 github 页面，比如`https://github.com/your-user-name/numpy`
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“管理”按钮，并将其他任何人添加为存储库的协作者：
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  id: totrans-515
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
- en: 'Now all those people can do:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些人都可以做：
- en: '[PRE99]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，以`git@`开头的链接使用ssh协议并且是可读写的；以`git://`开头的链接是只读的。
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 你的协作者随后可以直接向该存储库提交常规提交：
- en: '[PRE100]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Checkout changes from an existing pull request
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检出现有拉取请求中的更改
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要测试拉取请求中的更改或者继续新拉取请求中的工作，那么提交将被克隆到你的forked存储库的本地分支中。
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保你的上游指向主存储库，就像[将你的存储库链接到上游存储库](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")一样
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，获取更改并创建一个本地分支。假设`$ID`是拉取请求编号，`$BRANCHNAME`是你想创建的*新的本地*分支的名称：
- en: '[PRE101]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Checkout the newly created branch:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 检出新创建的分支：
- en: '[PRE102]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: You now have the changes in the pull request.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了拉取请求中的更改。
- en: Exploring your repository
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浏览你的存储库
- en: 'To see a graphical representation of the repository branches and commits:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看存储库分支和提交的图形表示：
- en: '[PRE103]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'To see a linear list of commits for this branch:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此分支的提交的线性列表：
- en: '[PRE104]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以查看你的[github](https://github.com/numpy/numpy)存储库的[网络图可视化器](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)。
- en: Backporting
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回溯
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯是将在[numpy/main](https://github.com/numpy/numpy)提交的新功能/修复复制回稳定发布分支的过程。为此，你可以从你要回溯的分支上创建一个分支，从`numpy/main`中挑选你想要的提交，然后为包含回溯的分支提交一个拉取请求。
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要创建你将在其上工作的分支。这需要基于NumPy的旧版本（不是主分支）：
- en: '[PRE105]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你需要使用[git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html)将主分支的更改应用到此分支：
- en: '[PRE106]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会遇到一些冲突在这里挑樱桃。这些冲突的解决方式与合并/重新基础冲突相同。除此之外，你可以使用[git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)来查看主分支和回溯分支之间的差异，以确保没有任何问题。
- en: 'Push the new branch to your Github repository:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新分支推送到你的Github存储库：
- en: '[PRE107]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后使用Github创建一个拉取请求。确保它是针对维护分支而不是主分支的，Github通常会建议你针对主分支创建拉取请求。
- en: '### Pushing changes to the main repo'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将更改推送到主存储库'
- en: '*Requires commit rights to the main NumPy repo.*'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '*需要对主NumPy存储库具有提交权限。*'
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个特性分支上有一组“准备就绪”的更改准备好提交给NumPy的`main`或`maintenance`分支时，你可以按如下方式将它们推送到`upstream`：
- en: First, merge or rebase on the target branch.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在目标分支上合并或重新基于。
- en: 'Only a few, unrelated commits then prefer rebasing:'
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有少数不相关的提交，那么更喜欢重新基于：
- en: '[PRE108]'
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: See [Rebasing on main](#rebasing-on-main).
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 见[在主分支上重新基于](#rebasing-on-main)。
- en: 'If all of the commits are related, create a merge commit:'
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有的提交都是相关的，请创建一个合并提交：
- en: '[PRE109]'
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Check that what you are going to push looks sensible:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认一下你将要推送的内容是否合理：
- en: '[PRE110]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Push to upstream:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到上游：
- en: '[PRE111]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Note
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: It’s usually a good idea to use the `-n` flag to `git push` to check first that
    you’re about to push the changes you want to the place you want.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-n`标志对`git push`使用是一个好习惯，首先可以检查一下你要推送的改动是否是你想要的，并且推送到了正确的位置。
