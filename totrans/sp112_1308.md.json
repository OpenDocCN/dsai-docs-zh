["```py\nscipy.stats.spearmanr(a, b=None, axis=0, nan_policy='propagate', alternative='two-sided')\n```", "```py\n>>> import numpy as np\n>>> # total collagen (mg/g dry weight of liver)\n>>> x = np.array([7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4])\n>>> # free proline (Î¼ mole/g dry weight of liver)\n>>> y = np.array([2.8, 2.9, 2.8, 2.6, 3.5, 4.6, 5.0]) \n```", "```py\n>>> from scipy import stats\n>>> res = stats.spearmanr(x, y)\n>>> res.statistic\n0.7000000000000001 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> dof = len(x)-2  # len(x) == len(y)\n>>> dist = stats.t(df=dof)\n>>> t_vals = np.linspace(-5, 5, 100)\n>>> pdf = dist.pdf(t_vals)\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> def plot(ax):  # we'll reuse this\n...     ax.plot(t_vals, pdf)\n...     ax.set_title(\"Spearman's Rho Test Null Distribution\")\n...     ax.set_xlabel(\"statistic\")\n...     ax.set_ylabel(\"probability density\")\n>>> plot(ax)\n>>> plt.show() \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> rs = res.statistic  # original statistic\n>>> transformed = rs * np.sqrt(dof / ((rs+1.0)*(1.0-rs)))\n>>> pvalue = dist.cdf(-transformed) + dist.sf(transformed)\n>>> annotation = (f'p-value={pvalue:.4f}\\n(shaded area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (2.7, 0.025), (3, 0.03), arrowprops=props)\n>>> i = t_vals >= transformed\n>>> ax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\n>>> i = t_vals <= -transformed\n>>> ax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\n>>> ax.set_xlim(-5, 5)\n>>> ax.set_ylim(0, 0.1)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.07991669030889909  # two-sided p-value \n```", "```py\n>>> res = stats.spearmanr(x, y, alternative='greater')\n>>> res.statistic\n0.7000000000000001  # same statistic\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> pvalue = dist.sf(transformed)\n>>> annotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (3, 0.018), (3.5, 0.03), arrowprops=props)\n>>> i = t_vals >= transformed\n>>> ax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\n>>> ax.set_xlim(1, 5)\n>>> ax.set_ylim(0, 0.1)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.03995834515444954  # one-sided p-value; half of the two-sided p-value \n```", "```py\n>>> def statistic(x):  # explore all possible pairings by permuting `x`\n...     rs = stats.spearmanr(x, y).statistic  # ignore pvalue\n...     transformed = rs * np.sqrt(dof / ((rs+1.0)*(1.0-rs)))\n...     return transformed\n>>> ref = stats.permutation_test((x,), statistic, alternative='greater',\n...                              permutation_type='pairings')\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> ax.hist(ref.null_distribution, np.linspace(-5, 5, 26),\n...         density=True)\n>>> ax.legend(['aymptotic approximation\\n(many observations)',\n...            f'exact \\n({len(ref.null_distribution)} permutations)'])\n>>> plt.show() \n```", "```py\n>>> ref.pvalue\n0.04563492063492063  # exact one-sided p-value \n```"]