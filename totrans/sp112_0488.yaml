- en: scipy.optimize.brent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brent.html#scipy.optimize.brent](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brent.html#scipy.optimize.brent)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Given a function of one variable and a possible bracket, return a local minimizer
    of the function isolated to a fractional precision of tol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable f(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Additional arguments (if present).
  prefs: []
  type: TYPE_NORMAL
- en: '**brack**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Either a triple `(xa, xb, xc)` satisfying `xa < xb < xc` and `func(xb) < func(xa)
    and  func(xb) < func(xc)`, or a pair `(xa, xb)` to be used as initial points for
    a downhill bracket search (see [`scipy.optimize.bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket")). The minimizer `x` will not necessarily satisfy `xa
    <= x <= xb`.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative error in solution *xopt* acceptable for convergence.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return all output args (xmin, fval, iter, funcalls).
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations in solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xmin**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Optimum point.
  prefs: []
  type: TYPE_NORMAL
- en: '**fval**float'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) Optimum function value.
  prefs: []
  type: TYPE_NORMAL
- en: '**iter**int'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) Number of iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '**funcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) Number of objective function evaluations made.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for scalar univariate functions. See the
    ‘Brent’ *method* in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Uses inverse parabolic interpolation when possible to speed up convergence of
    golden section method.
  prefs: []
  type: TYPE_NORMAL
- en: Does not ensure that the minimum lies in the range specified by *brack*. See
    [`scipy.optimize.fminbound`](scipy.optimize.fminbound.html#scipy.optimize.fminbound
    "scipy.optimize.fminbound").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We illustrate the behaviour of the function when *brack* is of size 2 and 3
    respectively. In the case where *brack* is of the form `(xa, xb)`, we can see
    for the given values, the output does not necessarily lie in the range `(xa, xb)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
