- en: What’s new in 0.24.0 (January 25, 2019)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/whatsnew/v0.24.0.html](https://pandas.pydata.org/docs/whatsnew/v0.24.0.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The 0.24.x series of releases will be the last to support Python 2\. Future
    feature releases will support Python 3 only. See [Dropping Python 2.7](https://pandas.pydata.org/pandas-docs/version/0.24/install.html#install-dropping-27)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: This is a major release from 0.23.4 and includes a number of API changes, new
    features, enhancements, and performance improvements along with a large number
    of bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Highlights include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Optional Integer NA Support](#whatsnew-0240-enhancements-intna)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[New APIs for accessing the array backing a Series or Index](#whatsnew-0240-values-api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A new top-level method for creating arrays](#whatsnew-0240-enhancements-array)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Store Interval and Period data in a Series or DataFrame](#whatsnew-0240-enhancements-interval)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Support for joining on two MultiIndexes](#whatsnew-0240-enhancements-join-with-two-multiindexes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the [API Changes](#whatsnew-0240-api-breaking) and [deprecations](#whatsnew-0240-deprecations)
    before updating.
  prefs: []
  type: TYPE_NORMAL
- en: These are the changes in pandas 0.24.0\. See [Release notes](index.html#release)
    for a full changelog including other versions of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Optional integer NA support'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has gained the ability to hold integer dtypes with missing values. This
    long requested feature is enabled through the use of [extension types](../development/extending.html#extending-extension-types).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IntegerArray is currently experimental. Its API or implementation may change
    without warning.
  prefs: []
  type: TYPE_NORMAL
- en: We can construct a `Series` with the specified dtype. The dtype string `Int64`
    is a pandas `ExtensionDtype`. Specifying a list or array using the traditional
    missing value marker of `np.nan` will infer to integer dtype. The display of the
    `Series` will also use the `NaN` to indicate missing values in string outputs.
    ([GH 20700](https://github.com/pandas-dev/pandas/issues/20700), [GH 20747](https://github.com/pandas-dev/pandas/issues/20747),
    [GH 22441](https://github.com/pandas-dev/pandas/issues/22441), [GH 21789](https://github.com/pandas-dev/pandas/issues/21789),
    [GH 22346](https://github.com/pandas-dev/pandas/issues/22346))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Operations on these dtypes will propagate `NaN` as other pandas operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can operate as part of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can be merged, reshaped, and casted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Reduction and groupby operations such as `sum` work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The Integer NA support currently uses the capitalized dtype version, e.g. `Int8`
    as compared to the traditional `int8`. This may be changed at a future date.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Nullable integer data type](../user_guide/integer_na.html#integer-na)
    for more.  ### Accessing the values in a Series or Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") and `Index.array` have been added for extracting the array
    backing a `Series` or `Index`. ([GH 19954](https://github.com/pandas-dev/pandas/issues/19954),
    [GH 23623](https://github.com/pandas-dev/pandas/issues/23623))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Historically, this would have been done with `series.values`, but with `.values`
    it was unclear whether the returned value would be the actual array, some transformation
    of it, or one of pandas custom arrays (like `Categorical`). For example, with
    [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex"),
    `.values` generates a new ndarray of period objects each time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you need an actual NumPy array, use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") or `Index.to_numpy()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For Series and Indexes backed by normal NumPy arrays, [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will return a new `arrays.PandasArray`, which is a thin
    (no-copy) wrapper around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). `PandasArray` isn’t especially useful on its own, but it
    does provide the same interface as any extension array defined in pandas or by
    a third-party library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We haven’t removed or deprecated [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") or [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values"), but we highly recommend and using `.array` or `.to_numpy()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.  ### `pandas.array`: a
    new top-level method for creating arrays'
  prefs: []
  type: TYPE_NORMAL
- en: A new top-level method [`array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") has been added for creating 1-dimensional arrays ([GH 22860](https://github.com/pandas-dev/pandas/issues/22860)).
    This can be used to create any [extension array](../development/extending.html#extending-extension-types),
    including extension arrays registered by [3rd party libraries](https://pandas.pydata.org/community/ecosystem.html).
    See the [dtypes docs](../user_guide/basics.html#basics-dtypes) for more on extension
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Passing data for which there isn’t dedicated extension type (e.g. float, integer,
    etc.) will return a new `arrays.PandasArray`, which is just a thin (no-copy) wrapper
    around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") that satisfies the pandas extension array interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: On their own, a `PandasArray` isn’t a very useful object. But if you need write
    low-level code that works generically for any [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), `PandasArray` satisfies that need.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that by default, if no `dtype` is specified, the dtype of the returned
    array is inferred from the data. In particular, note that the first example of
    `[1, 2, np.nan]` would have returned a floating-point array, since `NaN` is a
    float.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]  ### Storing Interval and Period data in Series and DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    and [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    data may now be stored in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), in addition to an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") like previously ([GH 19453](https://github.com/pandas-dev/pandas/issues/19453),
    [GH 22862](https://github.com/pandas-dev/pandas/issues/22862)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Previously, these would be cast to a NumPy array with object dtype. In general,
    this should result in better performance when storing an array of intervals or
    periods in a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") to extract the underlying array of intervals or periods
    from the `Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These return an instance of [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") or [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"), the new extension arrays that back interval and
    period data.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compatibility, [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") continues to return a NumPy array of objects for Interval
    and Period data. We recommend using [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") when you need the array of data stored in the `Series`,
    and [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") when you know you need a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.  ### Joining with two
    multi-indexes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") and [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") can now be used to join multi-indexed `Dataframe` instances
    on the overlapping index levels ([GH 6360](https://github.com/pandas-dev/pandas/issues/6360))'
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merge, join, and concatenate](../user_guide/merging.html#merging-join-with-two-multi-indexes)
    documentation section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For earlier versions this can be done using the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]  ### Function `read_html` enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    previously ignored `colspan` and `rowspan` attributes. Now it understands them,
    treating them as sequences of cells with the same value. ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: New `Styler.pipe()` method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") class has gained a [`pipe()`](../reference/api/pandas.io.formats.style.Styler.pipe.html#pandas.io.formats.style.Styler.pipe
    "pandas.io.formats.style.Styler.pipe") method. This provides a convenient way
    to apply users’ predefined styling functions, and can help reduce “boilerplate”
    when using DataFrame styling functionality repeatedly within a notebook. ([GH
    23229](https://github.com/pandas-dev/pandas/issues/23229))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Similar methods already exist for other classes in pandas, including [`DataFrame.pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe"), `GroupBy.pipe()`, and [`Resampler.pipe()`](../reference/api/pandas.core.resample.Resampler.pipe.html#pandas.core.resample.Resampler.pipe
    "pandas.core.resample.Resampler.pipe").
  prefs: []
  type: TYPE_NORMAL
- en: '### Renaming names in a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") now supports `index` and `columns` arguments and
    [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") supports `index` argument ([GH 19978](https://github.com/pandas-dev/pandas/issues/19978)).'
  prefs: []
  type: TYPE_NORMAL
- en: This change allows a dictionary to be passed so that some of the names of a
    `MultiIndex` can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'See the [Advanced documentation on renaming](../user_guide/advanced.html#advanced-index-names)
    for more details.  ### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    now directly allows merge between objects of type `DataFrame` and named `Series`,
    without the need to convert the `Series` object into a `DataFrame` beforehand
    ([GH 21220](https://github.com/pandas-dev/pandas/issues/21220))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcelWriter` now accepts `mode` as a keyword argument, enabling append to
    existing workbooks when using the `openpyxl` engine ([GH 3441](https://github.com/pandas-dev/pandas/issues/3441))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrozenList` has gained the `.union()` and `.difference()` methods. This functionality
    greatly simplifies groupby’s that rely on explicitly excluding certain columns.
    See [Splitting an object into groups](../user_guide/groupby.html#groupby-split)
    for more information ([GH 15475](https://github.com/pandas-dev/pandas/issues/15475),
    [GH 15506](https://github.com/pandas-dev/pandas/issues/15506)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now accepts `index` as an argument, allowing the
    user to override the engine’s default behavior to include or omit the dataframe’s
    indexes from the resulting Parquet file. ([GH 20768](https://github.com/pandas-dev/pandas/issues/20768))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") now accepts `columns` as an argument, allowing the user
    to specify which columns should be read. ([GH 24025](https://github.com/pandas-dev/pandas/issues/24025))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now accept a callable for generic calculation methods of
    correlation, e.g. histogram intersection ([GH 22684](https://github.com/pandas-dev/pandas/issues/22684))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") now accepts `decimal` as an argument, allowing the
    user to specify which decimal separator should be used in the output. ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now accepts `render_links` as an argument, allowing
    the user to generate HTML with links to any URLs that appear in the DataFrame.
    See the [section on writing HTML](../user_guide/io.html#io-html) in the IO docs
    for example usage. ([GH 2679](https://github.com/pandas-dev/pandas/issues/2679))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") now supports pandas extension types as an argument to `dtype`,
    allowing the user to use pandas extension types when reading CSVs. ([GH 23228](https://github.com/pandas-dev/pandas/issues/23228))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`shift()`](../reference/api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift") method now accepts `fill_value` as an argument, allowing
    the user to specify a value which will be used instead of NA/NaT in the empty
    periods. ([GH 15486](https://github.com/pandas-dev/pandas/issues/15486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now supports the `%Z` and `%z` directive when passed into
    `format` ([GH 13486](https://github.com/pandas-dev/pandas/issues/13486))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.mode()`](../reference/api/pandas.Series.mode.html#pandas.Series.mode
    "pandas.Series.mode") and [`DataFrame.mode()`](../reference/api/pandas.DataFrame.mode.html#pandas.DataFrame.mode
    "pandas.DataFrame.mode") now support the `dropna` parameter which can be used
    to specify whether `NaN`/`NaT` values should be considered ([GH 17534](https://github.com/pandas-dev/pandas/issues/17534))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") and [`Series.to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv") now support the `compression` keyword when a file handle
    is passed. ([GH 21227](https://github.com/pandas-dev/pandas/issues/21227))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.droplevel()`](../reference/api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel") is now implemented also for flat indexes, for compatibility
    with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") ([GH 21115](https://github.com/pandas-dev/pandas/issues/21115))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.droplevel()`](../reference/api/pandas.Series.droplevel.html#pandas.Series.droplevel
    "pandas.Series.droplevel") and [`DataFrame.droplevel()`](../reference/api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel") are now implemented ([GH 20342](https://github.com/pandas-dev/pandas/issues/20342))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reading from/writing to Google Cloud Storage via the `gcsfs`
    library ([GH 19454](https://github.com/pandas-dev/pandas/issues/19454), [GH 23094](https://github.com/pandas-dev/pandas/issues/23094))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") and [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq
    "pandas.read_gbq") signature and documentation updated to reflect changes from
    the [pandas-gbq library version 0.8.0](https://pandas-gbq.readthedocs.io/en/latest/changelog.html#changelog-0-8-0).
    Adds a `credentials` argument, which enables the use of any kind of [google-auth
    credentials](https://google-auth.readthedocs.io/en/latest/). ([GH 21627](https://github.com/pandas-dev/pandas/issues/21627),
    [GH 22557](https://github.com/pandas-dev/pandas/issues/22557), [GH 23662](https://github.com/pandas-dev/pandas/issues/23662))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method [`HDFStore.walk()`](../reference/api/pandas.HDFStore.walk.html#pandas.HDFStore.walk
    "pandas.HDFStore.walk") will recursively walk the group hierarchy of an HDF5 file
    ([GH 10932](https://github.com/pandas-dev/pandas/issues/10932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    copies cell data across `colspan` and `rowspan`, and it treats all-`th` table
    rows as headers if `header` kwarg is not given and there is no `thead` ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest"), [`Series.nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest"), [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest"), and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now accept the value `"all"` for the `keep` argument.
    This keeps all ties for the nth largest/smallest value ([GH 16818](https://github.com/pandas-dev/pandas/issues/16818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`set_closed()`](../reference/api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed") method to change the existing `closed` value
    ([GH 21670](https://github.com/pandas-dev/pandas/issues/21670))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv"), [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), and [`to_json()`](../reference/api/pandas.Series.to_json.html#pandas.Series.to_json
    "pandas.Series.to_json") now support `compression=''infer''` to infer compression
    based on filename extension ([GH 15008](https://github.com/pandas-dev/pandas/issues/15008)).
    The default compression for `to_csv`, `to_json`, and `to_pickle` methods has been
    updated to `''infer''` ([GH 22004](https://github.com/pandas-dev/pandas/issues/22004)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") now supports writing `TIMESTAMP WITH TIME ZONE` types
    for supported databases. For databases that don’t support timezones, datetime
    data will be stored as timezone unaware local timestamps. See the [Datetime data
    types](../user_guide/io.html#io-sql-datetime-data) for implications ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") now supports iso-formatted timedelta strings ([GH 21877](https://github.com/pandas-dev/pandas/issues/21877))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    now support `Iterable` objects in the constructor ([GH 2193](https://github.com/pandas-dev/pandas/issues/2193))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") has gained the [`DatetimeIndex.timetz`](../reference/api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") attribute. This returns the local time with timezone
    information. ([GH 21358](https://github.com/pandas-dev/pandas/issues/21358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), and [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor") for [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") now support an `ambiguous` argument for handling datetimes
    that are rounded to ambiguous times ([GH 18946](https://github.com/pandas-dev/pandas/issues/18946))
    and a `nonexistent` argument for handling datetimes that are rounded to nonexistent
    times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 22647](https://github.com/pandas-dev/pandas/issues/22647))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") is now iterable similar to `groupby()` ([GH 15314](https://github.com/pandas-dev/pandas/issues/15314)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") and [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") have gained the [`Resampler.quantile()`](../reference/api/pandas.core.resample.Resampler.quantile.html#pandas.core.resample.Resampler.quantile
    "pandas.core.resample.Resampler.quantile") ([GH 15023](https://github.com/pandas-dev/pandas/issues/15023)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") with a [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") will now respect the `base` argument in the same fashion
    as with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). ([GH 23882](https://github.com/pandas-dev/pandas/issues/23882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.api.types.is_list_like()`](../reference/api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like") has gained a keyword `allow_sets` which is `True`
    by default; if `False`, all instances of `set` will not be considered “list-like”
    anymore ([GH 23061](https://github.com/pandas-dev/pandas/issues/23061))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.to_frame()`](../reference/api/pandas.Index.to_frame.html#pandas.Index.to_frame
    "pandas.Index.to_frame") now supports overriding column name(s) ([GH 22580](https://github.com/pandas-dev/pandas/issues/22580)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") now can take a `dtype` parameter as an alternative
    to passing `categories` and `ordered` ([GH 24398](https://github.com/pandas-dev/pandas/issues/24398)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New attribute `__git_version__` will return git commit sha of current build
    ([GH 21295](https://github.com/pandas-dev/pandas/issues/21295)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with Matplotlib 3.0 ([GH 22790](https://github.com/pandas-dev/pandas/issues/22790)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`Interval.overlaps()`](../reference/api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps"), [`arrays.IntervalArray.overlaps()`](../reference/api/pandas.arrays.IntervalArray.overlaps.html#pandas.arrays.IntervalArray.overlaps
    "pandas.arrays.IntervalArray.overlaps"), and [`IntervalIndex.overlaps()`](../reference/api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps") for determining overlaps between interval-like
    objects ([GH 21998](https://github.com/pandas-dev/pandas/issues/21998))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")
    now accepts keyword `infer_nrows` ([GH 15138](https://github.com/pandas-dev/pandas/issues/15138)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now supports writing a `DataFrame` as a directory
    of parquet files partitioned by a subset of the columns when `engine = ''pyarrow''`
    ([GH 23283](https://github.com/pandas-dev/pandas/issues/23283))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"), [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize"), and [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") have gained the `nonexistent` argument for alternative
    handling of nonexistent times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 8917](https://github.com/pandas-dev/pandas/issues/8917), [GH 24466](https://github.com/pandas-dev/pandas/issues/24466))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.difference()`](../reference/api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference"), [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection"), [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union"), and [`Index.symmetric_difference()`](../reference/api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference") now have an optional `sort` parameter to
    control whether the results should be sorted if possible ([GH 17839](https://github.com/pandas-dev/pandas/issues/17839),
    [GH 24471](https://github.com/pandas-dev/pandas/issues/24471))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now accepts `usecols` as a list of column names or callable
    ([GH 18273](https://github.com/pandas-dev/pandas/issues/18273))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.to_flat_index()`](../reference/api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index") has been added to flatten multiple levels into
    a single-level [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` can write mixed
    string columns to Stata strl format ([GH 23633](https://github.com/pandas-dev/pandas/issues/23633))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.between_time()`](../reference/api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time") and [`DataFrame.at_time()`](../reference/api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time") have gained the `axis` parameter ([GH 8839](https://github.com/pandas-dev/pandas/issues/8839))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_records()`](../reference/api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records") now accepts `index_dtypes` and `column_dtypes`
    parameters to allow different data types in stored column and index records ([GH
    18146](https://github.com/pandas-dev/pandas/issues/18146))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`is_overlapping`](../reference/api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") attribute to indicate if the `IntervalIndex`
    contains any overlapping intervals ([GH 23309](https://github.com/pandas-dev/pandas/issues/23309))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") has gained the `method` argument to control SQL insertion
    clause. See the [insertion method](../user_guide/io.html#io-sql-method) section
    in the documentation. ([GH 8953](https://github.com/pandas-dev/pandas/issues/8953))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corrwith()`](../reference/api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith") now supports Spearman’s rank correlation, Kendall’s
    tau as well as callable correlation methods. ([GH 21925](https://github.com/pandas-dev/pandas/issues/21925))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle"), and other export methods now support tilde(~) in
    path argument. ([GH 23473](https://github.com/pandas-dev/pandas/issues/23473))  ##
    Backwards incompatible API changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas 0.24.0 includes a number of API breaking changes.
  prefs: []
  type: TYPE_NORMAL
- en: '### Increased minimum versions for dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 21242](https://github.com/pandas-dev/pandas/issues/21242),
    [GH 18742](https://github.com/pandas-dev/pandas/issues/18742), [GH 23774](https://github.com/pandas-dev/pandas/issues/23774),
    [GH 24767](https://github.com/pandas-dev/pandas/issues/24767)). If installed,
    we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| numpy | 1.12.0 | X |'
  prefs: []
  type: TYPE_TB
- en: '| bottleneck | 1.2.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 0.2.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 2.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| numexpr | 2.6.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.8.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 0.9.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytables | 3.4.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| scipy | 0.18.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 1.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytest (dev) | 3.6 |  |'
  prefs: []
  type: TYPE_TB
- en: 'Additionally we no longer depend on `feather-format` for feather based storage
    and replaced it with references to `pyarrow` ([GH 21639](https://github.com/pandas-dev/pandas/issues/21639)
    and [GH 23053](https://github.com/pandas-dev/pandas/issues/23053)).  ### `os.linesep`
    is used for `line_terminator` of `DataFrame.to_csv`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") now uses `os.linesep()` rather than `''\n''` for the
    default line terminator ([GH 20353](https://github.com/pandas-dev/pandas/issues/20353)).
    This change only affects when running on Windows, where `''\r\n''` was used for
    line terminator even when `''\n''` was passed in `line_terminator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing `line_terminator` explicitly, set the `line terminator` to that character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, the value of `os.linesep` is `'\r\n'`, so if `line_terminator` is
    not set, `'\r\n'` is used for line terminator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: For file objects, specifying `newline` is not sufficient to set the line terminator.
    You must pass in the `line_terminator` explicitly, even in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]  ### Proper handling of `np.nan` in a string data-typed column with
    the Python engine'
  prefs: []
  type: TYPE_NORMAL
- en: There was bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") and [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with the Python engine, where missing values turned to `'nan'`
    with `dtype=str` and `na_filter=True`. Now, these missing values are converted
    to the string missing indicator, `np.nan`. ([GH 20377](https://github.com/pandas-dev/pandas/issues/20377))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how we now instead output `np.nan` itself instead of a stringified form
    of it.  ### Parsing datetime strings with timezone offsets'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, parsing datetime strings with UTC offsets with [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would automatically convert the datetime to UTC without
    timezone localization. This is inconsistent from parsing the same datetime string
    with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    which would preserve the UTC offset in the `tz` attribute. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") preserves the UTC offset in the `tz` attribute when all
    the datetime strings have the same UTC offset ([GH 17697](https://github.com/pandas-dev/pandas/issues/17697),
    [GH 11736](https://github.com/pandas-dev/pandas/issues/11736), [GH 22457](https://github.com/pandas-dev/pandas/issues/22457))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with the same UTC offset will preserve the UTC offset
    in the `tz`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with different UTC offsets will now create an Index
    of `datetime.datetime` objects with different UTC offsets
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Passing `utc=True` will mimic the previous behavior but will correctly indicate
    that the dates have been converted to UTC
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]  ### Parsing mixed-timezones with [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    no longer silently converts mixed-timezone columns to UTC ([GH 24987](https://github.com/pandas-dev/pandas/issues/24987)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, the `dtype` is object; each value in the column is a string.
    To convert the strings to an array of datetimes, the `date_parser` argument
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'See [Parsing datetime strings with timezone offsets](#whatsnew-0240-api-timezone-offset-parsing)
    for more.  ### Time values in `dt.end_time` and `to_timestamp(how=''end'')`'
  prefs: []
  type: TYPE_NORMAL
- en: The time values in [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") objects are now set to ‘23:59:59.999999999’ when calling
    [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time"), [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), [`PeriodIndex.end_time`](../reference/api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time"), [`Period.to_timestamp()`](../reference/api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp") with `how='end'`, or [`PeriodIndex.to_timestamp()`](../reference/api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp") with `how='end'` ([GH 17157](https://github.com/pandas-dev/pandas/issues/17157))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") will now result in a time of ‘23:59:59.999999999’
    as is the case with [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), for example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]  ### Series.unique for timezone-aware data'
  prefs: []
  type: TYPE_NORMAL
- en: The return type of [`Series.unique()`](../reference/api/pandas.Series.unique.html#pandas.Series.unique
    "pandas.Series.unique") for datetime with timezone values has changed from an
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects to a [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]  ### Sparse data structure refactor'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray`, the array backing `SparseSeries` and the columns in a `SparseDataFrame`,
    is now an extension array ([GH 21978](https://github.com/pandas-dev/pandas/issues/21978),
    [GH 19056](https://github.com/pandas-dev/pandas/issues/19056), [GH 22835](https://github.com/pandas-dev/pandas/issues/22835)).
    To conform to this interface and for consistency with the rest of pandas, some
    API breaking changes were made:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray` is no longer a subclass of [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). To convert a `SparseArray` to a NumPy array, use [`numpy.asarray()`](https://numpy.org/doc/stable/reference/generated/numpy.asarray.html#numpy.asarray
    "(in NumPy v1.26)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.dtype` and `SparseSeries.dtype` are now instances of [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype"), rather than `np.dtype`. Access the underlying dtype with
    `SparseDtype.subtype`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.asarray(sparse_array)` now returns a dense array with all the values,
    not just the non-fill-value values ([GH 14167](https://github.com/pandas-dev/pandas/issues/14167))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.take` now matches the API of [`pandas.api.extensions.ExtensionArray.take()`](../reference/api/pandas.api.extensions.ExtensionArray.take.html#pandas.api.extensions.ExtensionArray.take
    "pandas.api.extensions.ExtensionArray.take") ([GH 19506](https://github.com/pandas-dev/pandas/issues/19506)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value of `allow_fill` has changed from `False` to `True`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `out` and `mode` parameters are now longer accepted (previously, this raised
    if they were specified).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a scalar for `indices` is no longer allowed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") with a mix of sparse and dense Series is a Series with sparse
    values, rather than a `SparseSeries`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseDataFrame.combine` and `DataFrame.combine_first` no longer supports
    combining a sparse column with a dense column while preserving the sparse subtype.
    The result will be an object-dtype SparseArray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `SparseArray.fill_value` to a fill value with a different dtype is now
    allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame[column]` is now a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values, rather than a `SparseSeries`, when slicing
    a single column with sparse values ([GH 23559](https://github.com/pandas-dev/pandas/issues/23559)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") is now a `Series` with sparse values, like with other extension
    arrays ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some new warnings are issued for operations that require or are likely to materialize
    a large dense array:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is issued when using fillna with a `method`,
    as a dense array is constructed to create the filled array. Filling with a `value`
    is the efficient way to fill a sparse array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is now issued when concatenating sparse Series
    with differing fill values. The fill value from the first sparse array continues
    to be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these API breaking changes, many [Performance Improvements and
    Bug Fixes have been made](#whatsnew-0240-bug-fixes-sparse).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a `Series.sparse` accessor was added to provide sparse-specific methods
    like [`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]  ### [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") always returns a DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when `sparse=True` was passed to [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies"), the return value could be either a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or a `SparseDataFrame`, depending on whether all or a just
    a subset of the columns were dummy-encoded. Now, a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is always returned ([GH 24284](https://github.com/pandas-dev/pandas/issues/24284)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") returns a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") because the column `A` is not dummy encoded. When just `["B",
    "C"]` are passed to `get_dummies`, then all the columns are dummy-encoded, and
    a `SparseDataFrame` was returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the return type is consistently a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s no difference in memory usage between a `SparseDataFrame` and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values. The memory usage will be the same as in
    the previous version of pandas.  ### Raise ValueError in `DataFrame.to_dict(orient=''index'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") raises `ValueError` when used with `orient='index'`
    and a non-unique index instead of losing data ([GH 22801](https://github.com/pandas-dev/pandas/issues/22801))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]  ### Tick DateOffset normalize restrictions'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `Tick` object (`Day`, `Hour`, `Minute`, `Second`, `Milli`, `Micro`,
    `Nano`) with `normalize=True` is no longer supported. This prevents unexpected
    behavior where addition could fail to be monotone or associative. ([GH 21427](https://github.com/pandas-dev/pandas/issues/21427))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]  ### Period subtraction'
  prefs: []
  type: TYPE_NORMAL
- en: Subtraction of a `Period` from another `Period` will give a `DateOffset`. instead
    of an integer ([GH 21314](https://github.com/pandas-dev/pandas/issues/21314))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, subtraction of a `Period` from a `PeriodIndex` will now return an
    `Index` of `DateOffset` objects instead of an `Int64Index`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]  ### Addition/subtraction of `NaN` from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: Adding or subtracting `NaN` from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column with `timedelta64[ns]` dtype will now raise a `TypeError`
    instead of returning all-`NaT`. This is for compatibility with `TimedeltaIndex`
    and `Series` behavior ([GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]  ### DataFrame comparison operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, the broadcasting behavior of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparison operations (`==`, `!=`, …) was inconsistent with
    the behavior of arithmetic operations (`+`, `-`, …). The behavior of the comparison
    operations has been changed to match the arithmetic operations in these cases.
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880))
  prefs: []
  type: TYPE_NORMAL
- en: 'The affected cases are:'
  prefs: []
  type: TYPE_NORMAL
- en: operating against a 2-dimensional `np.ndarray` with either 1 row or 1 column
    will now broadcast the same way a `np.ndarray` would ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of rows in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now raise `ValueError` instead of operating column-by-column
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of columns in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now operate row-by-row instead of raising `ValueError`
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]  ### DataFrame arithmetic operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    arithmetic operations when operating with 2-dimensional `np.ndarray` objects now
    broadcast in the same way as `np.ndarray` broadcast. ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]  ### Series and Index data-dtype incompatibilities'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` and `Index` constructors now raise when the data is incompatible with
    a passed `dtype=` ([GH 15832](https://github.com/pandas-dev/pandas/issues/15832))'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]  ### Concatenation changes'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") on a `Categorical` of ints with NA values now causes them to
    be processed as objects when concatenating with anything other than another `Categorical`
    of ints ([GH 19214](https://github.com/pandas-dev/pandas/issues/19214))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Datetimelike API changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") with non-`None` `freq` attribute, addition or subtraction
    of integer-dtyped array or `Index` will return an object of the same class ([GH
    19959](https://github.com/pandas-dev/pandas/issues/19959))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` objects are now immutable. Attempting to alter one of these will
    now raise `AttributeError` ([GH 21341](https://github.com/pandas-dev/pandas/issues/21341))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") subtraction of another `PeriodIndex` will now return an
    object-dtype [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    of `DateOffset` objects instead of raising a `TypeError` ([GH 20049](https://github.com/pandas-dev/pandas/issues/20049))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") now returns a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") bins when the input is datetime or timedelta dtype respectively
    and `retbins=True` ([GH 19891](https://github.com/pandas-dev/pandas/issues/19891))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") and [`Timestamp.to_period()`](../reference/api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period") will issue a warning when timezone information will
    be lost ([GH 21333](https://github.com/pandas-dev/pandas/issues/21333))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.tz_convert()` and `PeriodIndex.tz_localize()` have been removed
    ([GH 21781](https://github.com/pandas-dev/pandas/issues/21781))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: A newly constructed empty [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with integer as the `dtype` will now only be cast to `float64`
    if `index` is specified ([GH 22858](https://github.com/pandas-dev/pandas/issues/22858))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.str.cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") will now raise if `others` is a `set` ([GH 23009](https://github.com/pandas-dev/pandas/issues/23009))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing scalar values to [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") will now raise `TypeError` instead of `ValueError` ([GH
    23539](https://github.com/pandas-dev/pandas/issues/23539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_rows` and `max_cols` parameters removed from `HTMLFormatter` since truncation
    is handled by `DataFrameFormatter` ([GH 23818](https://github.com/pandas-dev/pandas/issues/23818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will now raise a `ValueError` if a column with missing values is declared as having
    dtype `bool` ([GH 20591](https://github.com/pandas-dev/pandas/issues/20591))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column order of the resultant [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") from [`MultiIndex.to_frame()`](../reference/api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame") is now guaranteed to match the [`MultiIndex.names`](../reference/api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") order. ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrectly passing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to [`MultiIndex.from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples"), rather than a sequence of tuples, now raises
    a `TypeError` rather than a `ValueError` ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.offsets.generate_range()` argument `time_rule` has been removed; use `offset`
    instead ([GH 24157](https://github.com/pandas-dev/pandas/issues/24157))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 0.23.x, pandas would raise a `ValueError` on a merge of a numeric column
    (e.g. `int` dtyped column) and an `object` dtyped column ([GH 9780](https://github.com/pandas-dev/pandas/issues/9780)).
    We have re-enabled the ability to merge `object` and other dtypes; pandas will
    still raise on a merge between a numeric and an `object` dtyped column that is
    composed only of strings ([GH 21681](https://github.com/pandas-dev/pandas/issues/21681))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a level of a `MultiIndex` with a duplicate name (e.g. in [`get_level_values()`](../reference/api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")) now raises a `ValueError` instead of a
    `KeyError` ([GH 21678](https://github.com/pandas-dev/pandas/issues/21678)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid construction of `IntervalDtype` will now always raise a `TypeError`
    rather than a `ValueError` if the subdtype is invalid ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to reindex a `DataFrame` with a non unique `MultiIndex` now raises a
    `ValueError` instead of an `Exception` ([GH 21770](https://github.com/pandas-dev/pandas/issues/21770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") subtraction
    will attempt to operate element-wise instead of raising `TypeError` ([GH 19369](https://github.com/pandas-dev/pandas/issues/19369))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.io.formats.style.Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") supports a `number-format` property when using
    [`to_excel()`](../reference/api/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel") ([GH 22015](https://github.com/pandas-dev/pandas/issues/22015))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now raise a `ValueError` along with a helpful error message
    instead of a `KeyError` when supplied with an invalid method ([GH 22298](https://github.com/pandas-dev/pandas/issues/22298))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shift()` will now always return a copy, instead of the previous behaviour
    of returning self when shifting by 0 ([GH 22397](https://github.com/pandas-dev/pandas/issues/22397))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.set_index()`](../reference/api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index") now gives a better (and less frequent) KeyError,
    raises a `ValueError` for incorrect types, and will not fail on duplicate column
    names with `drop=True`. ([GH 22484](https://github.com/pandas-dev/pandas/issues/22484))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a single row of a DataFrame with multiple ExtensionArrays of the same
    type now preserves the dtype, rather than coercing to object ([GH 22784](https://github.com/pandas-dev/pandas/issues/22784))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` attribute `_cacheable` and method `_should_cache` have been removed
    ([GH 23118](https://github.com/pandas-dev/pandas/issues/23118))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted"), when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23801](https://github.com/pandas-dev/pandas/issues/23801)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()`, when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()` now raises a `KeyError` rather that a `ValueError`,
    if a searched for key is not found in its categories ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.hasnans()`](../reference/api/pandas.Index.hasnans.html#pandas.Index.hasnans
    "pandas.Index.hasnans") and [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") now always return a python boolean. Previously, a python
    or a numpy boolean could be returned, depending on circumstances ([GH 23294](https://github.com/pandas-dev/pandas/issues/23294)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the arguments of [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") and [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") is rearranged to be consistent with each other.
    ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoricalIndex.reindex()` now raises a `ValueError` if the target index
    is non-unique and not equal to the current index. It previously only raised if
    the target index was not of a categorical dtype ([GH 23963](https://github.com/pandas-dev/pandas/issues/23963)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_list()`](../reference/api/pandas.Series.to_list.html#pandas.Series.to_list
    "pandas.Series.to_list") and [`Index.to_list()`](../reference/api/pandas.Index.to_list.html#pandas.Index.to_list
    "pandas.Index.to_list") are now aliases of `Series.tolist` respectively `Index.tolist`
    ([GH 8826](https://github.com/pandas-dev/pandas/issues/8826))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of `SparseSeries.unstack` is now a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values, rather than a `SparseDataFrame` ([GH 24372](https://github.com/pandas-dev/pandas/issues/24372)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") no longer ignore the dtype precision. Passing a non-nanosecond
    resolution dtype will raise a `ValueError` ([GH 24753](https://github.com/pandas-dev/pandas/issues/24753))  ##
    Extension type changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Equality and hashability**'
  prefs: []
  type: TYPE_NORMAL
- en: pandas now requires that extension dtypes be hashable (i.e. the respective `ExtensionDtype`
    objects; hashability is not a requirement for the values of the corresponding
    `ExtensionArray`). The base class implements a default `__eq__` and `__hash__`.
    If you have a parametrized dtype, you should update the `ExtensionDtype._metadata`
    tuple to match the signature of your `__init__` method. See [`pandas.api.extensions.ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype") for more ([GH 22476](https://github.com/pandas-dev/pandas/issues/22476)).
  prefs: []
  type: TYPE_NORMAL
- en: '**New and changed methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`dropna()` has been added ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat()` has been added ([GH 24349](https://github.com/pandas-dev/pandas/issues/24349))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ExtensionArray` constructor, `_from_sequence` now take the keyword arg
    `copy=False` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.api.extensions.ExtensionArray.shift()`](../reference/api/pandas.api.extensions.ExtensionArray.shift.html#pandas.api.extensions.ExtensionArray.shift
    "pandas.api.extensions.ExtensionArray.shift") added as part of the basic `ExtensionArray`
    interface ([GH 22387](https://github.com/pandas-dev/pandas/issues/22387)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`searchsorted()` has been added ([GH 24350](https://github.com/pandas-dev/pandas/issues/24350))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for reduction operations such as `sum`, `mean` via opt-in base class
    method override ([GH 22762](https://github.com/pandas-dev/pandas/issues/22762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtensionArray.isna()` is allowed to return an `ExtensionArray` ([GH 22325](https://github.com/pandas-dev/pandas/issues/22325)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dtype changes**'
  prefs: []
  type: TYPE_NORMAL
- en: '`ExtensionDtype` has gained the ability to instantiate from string dtypes,
    e.g. `decimal` would instantiate a registered `DecimalDtype`; furthermore the
    `ExtensionDtype` has gained the method `construct_array_type` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `ExtensionDtype._is_numeric` for controlling whether an extension dtype
    is considered numeric ([GH 22290](https://github.com/pandas-dev/pandas/issues/22290)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `pandas.api.types.register_extension_dtype()` to register an extension
    type with pandas ([GH 22664](https://github.com/pandas-dev/pandas/issues/22664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated the `.type` attribute for `PeriodDtype`, `DatetimeTZDtype`, and `IntervalDtype`
    to be instances of the dtype (`Period`, `Timestamp`, and `Interval` respectively)
    ([GH 22938](https://github.com/pandas-dev/pandas/issues/22938))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator support**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Series` based on an `ExtensionArray` now supports arithmetic and comparison
    operators ([GH 19577](https://github.com/pandas-dev/pandas/issues/19577)). There
    are two approaches for providing operator support for an `ExtensionArray`:'
  prefs: []
  type: TYPE_NORMAL
- en: Define each of the operators on your `ExtensionArray` subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use an operator implementation from pandas that depends on operators that are
    already defined on the underlying elements (scalars) of the `ExtensionArray`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the [ExtensionArray Operator Support](../development/extending.html#extending-extension-operator)
    documentation section for details on both ways of adding operator support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other changes**'
  prefs: []
  type: TYPE_NORMAL
- en: A default repr for [`pandas.api.extensions.ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") is now provided ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtensionArray._formatting_values()` is deprecated. Use `ExtensionArray._formatter`
    instead. ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `ExtensionArray` with a boolean dtype now works correctly as a boolean indexer.
    [`pandas.api.types.is_bool_dtype()`](../reference/api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype") now properly considers them boolean ([GH 22326](https://github.com/pandas-dev/pandas/issues/22326))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bug fixes**'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") for `Series` using `ExtensionArray` and integer index ([GH
    21257](https://github.com/pandas-dev/pandas/issues/21257))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift "pandas.Series.shift")
    now dispatches to `ExtensionArray.shift()` ([GH 22386](https://github.com/pandas-dev/pandas/issues/22386))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.combine()`](../reference/api/pandas.Series.combine.html#pandas.Series.combine
    "pandas.Series.combine") works correctly with [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") inside of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") ([GH 20825](https://github.com/pandas-dev/pandas/issues/20825))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.combine()`](../reference/api/pandas.Series.combine.html#pandas.Series.combine
    "pandas.Series.combine") with scalar argument now works for any function type
    ([GH 21248](https://github.com/pandas-dev/pandas/issues/21248))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") and [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") now dispatch to `ExtensionArray.astype()` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a single row of a `DataFrame` with multiple ExtensionArrays of the same
    type now preserves the dtype, rather than coercing to object ([GH 22784](https://github.com/pandas-dev/pandas/issues/22784))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when concatenating multiple `Series` with different extension dtypes not
    casting to object dtype ([GH 22994](https://github.com/pandas-dev/pandas/issues/22994))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series backed by an `ExtensionArray` now work with [`util.hash_pandas_object()`](../reference/api/pandas.util.hash_pandas_object.html#pandas.util.hash_pandas_object
    "pandas.util.hash_pandas_object") ([GH 23066](https://github.com/pandas-dev/pandas/issues/23066))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") no longer converts to object dtype for DataFrames where
    each column has the same extension dtype. The output Series will have the same
    dtype as the columns ([GH 23077](https://github.com/pandas-dev/pandas/issues/23077)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.unstack()`](../reference/api/pandas.Series.unstack.html#pandas.Series.unstack
    "pandas.Series.unstack") and [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") no longer convert extension arrays to object-dtype
    ndarrays. Each column in the output `DataFrame` will now have the same dtype as
    the input ([GH 23077](https://github.com/pandas-dev/pandas/issues/23077)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when grouping `Dataframe.groupby()` and aggregating on `ExtensionArray`
    it was not returning the actual `ExtensionArray` dtype ([GH 23227](https://github.com/pandas-dev/pandas/issues/23227)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in [`pandas.merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    when merging on an extension array-backed column ([GH 23020](https://github.com/pandas-dev/pandas/issues/23020)).  ##
    Deprecations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.labels` has been deprecated and replaced by [`MultiIndex.codes`](../reference/api/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes
    "pandas.MultiIndex.codes"). The functionality is unchanged. The new name better
    reflects the natures of these codes and makes the `MultiIndex` API more similar
    to the API for [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") ([GH 13443](https://github.com/pandas-dev/pandas/issues/13443)).
    As a consequence, other uses of the name `labels` in `MultiIndex` have also been
    deprecated and replaced with `codes`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should initialize a `MultiIndex` instance using a parameter named `codes`
    rather than `labels`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.set_labels` has been deprecated in favor of [`MultiIndex.set_codes()`](../reference/api/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For method [`MultiIndex.copy()`](../reference/api/pandas.MultiIndex.copy.html#pandas.MultiIndex.copy
    "pandas.MultiIndex.copy"), the `labels` parameter has been deprecated and replaced
    by a `codes` parameter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata"), [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata"), `StataReader` and `StataWriter` have deprecated the `encoding`
    argument. The encoding of a Stata dta file is determined by the file type and
    cannot be changed ([GH 21244](https://github.com/pandas-dev/pandas/issues/21244))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.to_hierarchical()` is deprecated and will be removed in a future
    version ([GH 21613](https://github.com/pandas-dev/pandas/issues/21613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.ptp()` is deprecated. Use `numpy.ptp` instead ([GH 21614](https://github.com/pandas-dev/pandas/issues/21614))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.compress()` is deprecated. Use `Series[condition]` instead ([GH 18262](https://github.com/pandas-dev/pandas/issues/18262))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The signature of [`Series.to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv") has been uniformed to that of [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"): the name of the first argument is now `path_or_buf`,
    the order of subsequent arguments has changed, the `header` argument now defaults
    to `True`. ([GH 19715](https://github.com/pandas-dev/pandas/issues/19715))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") has deprecated providing float values for the
    `codes` argument. ([GH 21767](https://github.com/pandas-dev/pandas/issues/21767))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table") is deprecated. Instead, use [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") passing `sep=''\t''` if necessary. This deprecation has been
    removed in 0.25.0\. ([GH 21948](https://github.com/pandas-dev/pandas/issues/21948))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.str.cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") has deprecated using arbitrary list-likes *within* list-likes.
    A list-like container may still contain many `Series`, `Index` or 1-dimensional
    `np.ndarray`, or alternatively, only scalar values. ([GH 21950](https://github.com/pandas-dev/pandas/issues/21950))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrozenNDArray.searchsorted()` has deprecated the `v` parameter in favor of
    `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatetimeIndex.shift()` and `PeriodIndex.shift()` now accept `periods` argument
    instead of `n` for consistency with [`Index.shift()`](../reference/api/pandas.Index.shift.html#pandas.Index.shift
    "pandas.Index.shift") and [`Series.shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift"). Using `n` throws a deprecation warning ([GH 22458](https://github.com/pandas-dev/pandas/issues/22458),
    [GH 22912](https://github.com/pandas-dev/pandas/issues/22912))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `fastpath` keyword of the different Index constructors is deprecated ([GH
    23110](https://github.com/pandas-dev/pandas/issues/23110)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"), [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize"), and [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") have deprecated the `errors` argument in favor of
    the `nonexistent` argument ([GH 8917](https://github.com/pandas-dev/pandas/issues/8917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class `FrozenNDArray` has been deprecated. When unpickling, `FrozenNDArray`
    will be unpickled to `np.ndarray` once this class is removed ([GH 9031](https://github.com/pandas-dev/pandas/issues/9031))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods [`DataFrame.update()`](../reference/api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update") and `Panel.update()` have deprecated the `raise_conflict=False|True`
    keyword in favor of `errors='ignore'|'raise'` ([GH 23585](https://github.com/pandas-dev/pandas/issues/23585))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods [`Series.str.partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") and [`Series.str.rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") have deprecated the `pat` keyword in favor of
    `sep` ([GH 22676](https://github.com/pandas-dev/pandas/issues/22676))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated the `nthreads` keyword of [`pandas.read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") in favor of `use_threads` to reflect the changes in `pyarrow>=0.11.0`.
    ([GH 23053](https://github.com/pandas-dev/pandas/issues/23053))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated accepting `usecols` as an integer. Please
    pass in a list of ints from 0 to `usecols` inclusive instead ([GH 23527](https://github.com/pandas-dev/pandas/issues/23527))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") from data with `datetime64`-dtyped data is deprecated,
    will raise `TypeError` in a future version ([GH 23539](https://github.com/pandas-dev/pandas/issues/23539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") from data with `timedelta64`-dtyped data is deprecated,
    will raise `TypeError` in a future version ([GH 23675](https://github.com/pandas-dev/pandas/issues/23675))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `keep_tz=False` option (the default) of the `keep_tz` keyword of [`DatetimeIndex.to_series()`](../reference/api/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series
    "pandas.DatetimeIndex.to_series") is deprecated ([GH 17832](https://github.com/pandas-dev/pandas/issues/17832)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezone converting a tz-aware `datetime.datetime` or [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") and the `tz` argument is now deprecated. Instead, use [`Timestamp.tz_convert()`](../reference/api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert") ([GH 23579](https://github.com/pandas-dev/pandas/issues/23579))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.api.types.is_period()` is deprecated in favor of `pandas.api.types.is_period_dtype`
    ([GH 23917](https://github.com/pandas-dev/pandas/issues/23917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.api.types.is_datetimetz()` is deprecated in favor of `pandas.api.types.is_datetime64tz`
    ([GH 23917](https://github.com/pandas-dev/pandas/issues/23917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex"), [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"), or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") by passing range arguments `start`, `end`, and `periods`
    is deprecated in favor of [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"), [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), or [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range") ([GH 23919](https://github.com/pandas-dev/pandas/issues/23919))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a string alias like `'datetime64[ns, UTC]'` as the `unit` parameter
    to [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") is deprecated. Use `DatetimeTZDtype.construct_from_string`
    instead ([GH 23990](https://github.com/pandas-dev/pandas/issues/23990)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `skipna` parameter of [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") will switch to `True` by default in a future version
    of pandas ([GH 17066](https://github.com/pandas-dev/pandas/issues/17066), [GH
    24050](https://github.com/pandas-dev/pandas/issues/24050))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") with Categorical data, providing an `other` that is not
    present in the categories is deprecated. Convert the categorical to a different
    dtype or add the `other` to the categories first ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.clip_lower()`, `Series.clip_upper()`, `DataFrame.clip_lower()` and
    `DataFrame.clip_upper()` are deprecated and will be removed in a future version.
    Use `Series.clip(lower=threshold)`, `Series.clip(upper=threshold)` and the equivalent
    `DataFrame` methods ([GH 24203](https://github.com/pandas-dev/pandas/issues/24203))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.nonzero()` is deprecated and will be removed in a future version ([GH
    18262](https://github.com/pandas-dev/pandas/issues/18262))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing an integer to [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") with `timedelta64[ns]` dtypes is deprecated, will raise
    `TypeError` in a future version. Use `obj.fillna(pd.Timedelta(...))` instead ([GH
    24694](https://github.com/pandas-dev/pandas/issues/24694))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.cat.categorical`, `Series.cat.name` and `Series.cat.index` have been
    deprecated. Use the attributes on `Series.cat` or `Series` directly. ([GH 24751](https://github.com/pandas-dev/pandas/issues/24751)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a dtype without a precision like `np.dtype('datetime64')` or `timedelta64`
    to [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"),
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") is now deprecated. Use the nanosecond-precision dtype
    instead ([GH 24753](https://github.com/pandas-dev/pandas/issues/24753)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Integer addition/subtraction with datetimes and timedeltas is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, users could—in some cases—add or subtract integers or integer-dtype
    arrays from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex").
  prefs: []
  type: TYPE_NORMAL
- en: This usage is now deprecated. Instead add or subtract integer multiples of the
    object’s `freq` attribute ([GH 21939](https://github.com/pandas-dev/pandas/issues/21939),
    [GH 23878](https://github.com/pandas-dev/pandas/issues/23878)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]  ### Passing integer data and a timezone to DatetimeIndex'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") when passed integer data and a timezone is changing in
    a future version of pandas. Previously, these were interpreted as wall times in
    the desired timezone. In the future, these will be interpreted as wall times in
    UTC, which are then converted to the desired timezone ([GH 24559](https://github.com/pandas-dev/pandas/issues/24559)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior remains the same, but issues a warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'As the warning message explains, opt in to the future behavior by specifying
    that the integer values are UTC, and then converting to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The old behavior can be retained with by localizing directly to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]  ### Converting timezone-aware Series and Index to NumPy arrays'
  prefs: []
  type: TYPE_NORMAL
- en: The conversion from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with timezone-aware datetime data will change to preserve timezones
    by default ([GH 23569](https://github.com/pandas-dev/pandas/issues/23569)).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy doesn’t have a dedicated dtype for timezone-aware datetimes. In the past,
    converting a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with timezone-aware datatimes would convert to a NumPy
    array by
  prefs: []
  type: TYPE_NORMAL
- en: converting the tz-aware data to UTC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: dropping the timezone-info
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: returning a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") with `datetime64[ns]` dtype
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Future versions of pandas will preserve the timezone information by returning
    an object-dtype NumPy array where each value is a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") with the correct timezone attached
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The default behavior remains the same, but issues a warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The previous or future behavior can be obtained, without any warnings, by specifying
    the `dtype`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '*Future behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Or by using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'All the above applies to a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with tz-aware values as well.  ## Removal of prior version
    deprecations/changes'
  prefs: []
  type: TYPE_NORMAL
- en: The `LongPanel` and `WidePanel` classes have been removed ([GH 10892](https://github.com/pandas-dev/pandas/issues/10892))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.repeat()`](../reference/api/pandas.Series.repeat.html#pandas.Series.repeat
    "pandas.Series.repeat") has renamed the `reps` argument to `repeats` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several private functions were removed from the (non-public) module `pandas.core.common`
    ([GH 22001](https://github.com/pandas-dev/pandas/issues/22001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated module `pandas.core.datetools` ([GH 14105](https://github.com/pandas-dev/pandas/issues/14105),
    [GH 14094](https://github.com/pandas-dev/pandas/issues/14094))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings passed into [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") that refer to both column and index levels will raise
    a `ValueError` ([GH 14432](https://github.com/pandas-dev/pandas/issues/14432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.repeat()`](../reference/api/pandas.Index.repeat.html#pandas.Index.repeat
    "pandas.Index.repeat") and `MultiIndex.repeat()` have renamed the `n` argument
    to `repeats` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Series` constructor and `.astype` method will now raise a `ValueError`
    if timestamp dtypes are passed in without a unit (e.g. `np.datetime64`) for the
    `dtype` parameter ([GH 15987](https://github.com/pandas-dev/pandas/issues/15987))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated `as_indexer` keyword completely from `str.match()`
    ([GH 22356](https://github.com/pandas-dev/pandas/issues/22356), [GH 6581](https://github.com/pandas-dev/pandas/issues/6581))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The modules `pandas.types`, `pandas.computation`, and `pandas.util.decorators`
    have been removed ([GH 16157](https://github.com/pandas-dev/pandas/issues/16157),
    [GH 16250](https://github.com/pandas-dev/pandas/issues/16250))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the `pandas.formats.style` shim for [`pandas.io.formats.style.Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") ([GH 16059](https://github.com/pandas-dev/pandas/issues/16059))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.pnow`, `pandas.match`, `pandas.groupby`, `pd.get_store`, `pd.Expr`,
    and `pd.Term` have been removed ([GH 15538](https://github.com/pandas-dev/pandas/issues/15538),
    [GH 15940](https://github.com/pandas-dev/pandas/issues/15940))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()` and [`Series.searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") have renamed the `v` argument to `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.parser`, `pandas.lib`, and `pandas.tslib` have been removed ([GH 15537](https://github.com/pandas-dev/pandas/issues/15537))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.searchsorted()`](../reference/api/pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted") have renamed the `key` argument to `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.consolidate` and `Series.consolidate` have been removed ([GH 15501](https://github.com/pandas-dev/pandas/issues/15501))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated module `pandas.json` ([GH 19944](https://github.com/pandas-dev/pandas/issues/19944))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module `pandas.tools` has been removed ([GH 15358](https://github.com/pandas-dev/pandas/issues/15358),
    [GH 16005](https://github.com/pandas-dev/pandas/issues/16005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.get_values()` and `SparseArray.to_dense()` have dropped the `fill`
    parameter ([GH 14686](https://github.com/pandas-dev/pandas/issues/14686))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.sortlevel` and `Series.sortlevel` have been removed ([GH 15099](https://github.com/pandas-dev/pandas/issues/15099))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseSeries.to_dense()` has dropped the `sparse_only` parameter ([GH 14686](https://github.com/pandas-dev/pandas/issues/14686))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") and [`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") have renamed the `raise_on_error` argument to `errors`
    ([GH 14967](https://github.com/pandas-dev/pandas/issues/14967))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_sequence`, `is_any_int_dtype`, and `is_floating_dtype` have been removed
    from `pandas.api.types` ([GH 16163](https://github.com/pandas-dev/pandas/issues/16163),
    [GH 16189](https://github.com/pandas-dev/pandas/issues/16189))  ## Performance
    improvements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing Series and DataFrames with an monotonically increasing [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") is now very fast and has speed comparable to slicing
    with an `Int64Index`. The speed increase is both when indexing by label (using
    .loc) and position(.iloc) ([GH 20395](https://github.com/pandas-dev/pandas/issues/20395))
    Slicing a monotonically increasing [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") itself (i.e. `ci[1000:2000]`) shows similar speed improvements
    as above ([GH 21659](https://github.com/pandas-dev/pandas/issues/21659))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`CategoricalIndex.equals()`](../reference/api/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals
    "pandas.CategoricalIndex.equals") when comparing to another [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") ([GH 24023](https://github.com/pandas-dev/pandas/issues/24023))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") in case of numeric dtpyes ([GH 21274](https://github.com/pandas-dev/pandas/issues/21274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `GroupBy.rank()` when dealing with tied rankings ([GH
    21237](https://github.com/pandas-dev/pandas/issues/21237))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DataFrame.set_index()`](../reference/api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index") with columns consisting of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") objects ([GH 21582](https://github.com/pandas-dev/pandas/issues/21582),
    [GH 21606](https://github.com/pandas-dev/pandas/issues/21606))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.at()`](../reference/api/pandas.Series.at.html#pandas.Series.at
    "pandas.Series.at") and `Index.get_value()` for Extension Arrays values (e.g.
    [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical"))
    ([GH 24204](https://github.com/pandas-dev/pandas/issues/24204))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of membership checks in [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") and [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") (i.e. `x in cat`-style checks are much faster). `CategoricalIndex.contains()`
    is likewise much faster ([GH 21369](https://github.com/pandas-dev/pandas/issues/21369),
    [GH 21508](https://github.com/pandas-dev/pandas/issues/21508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`HDFStore.groups()`](../reference/api/pandas.HDFStore.groups.html#pandas.HDFStore.groups
    "pandas.HDFStore.groups") (and dependent functions like [`HDFStore.keys()`](../reference/api/pandas.HDFStore.keys.html#pandas.HDFStore.keys
    "pandas.HDFStore.keys"). (i.e. `x in store` checks are much faster) ([GH 21372](https://github.com/pandas-dev/pandas/issues/21372))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the performance of [`pandas.get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") with `sparse=True` ([GH 21997](https://github.com/pandas-dev/pandas/issues/21997))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `IndexEngine.get_indexer_non_unique()` for sorted, non-unique
    indexes ([GH 9466](https://github.com/pandas-dev/pandas/issues/9466))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `PeriodIndex.unique()` ([GH 23083](https://github.com/pandas-dev/pandas/issues/23083))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") for `Series` objects ([GH 23404](https://github.com/pandas-dev/pandas/issues/23404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DatetimeIndex.normalize()`](../reference/api/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize
    "pandas.DatetimeIndex.normalize") and [`Timestamp.normalize()`](../reference/api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize") for timezone naive or UTC datetimes ([GH 23634](https://github.com/pandas-dev/pandas/issues/23634))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize") and various `DatetimeIndex` attributes with
    dateutil UTC timezone ([GH 23772](https://github.com/pandas-dev/pandas/issues/23772))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a performance regression on Windows with Python 3.7 of [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") ([GH 23516](https://github.com/pandas-dev/pandas/issues/23516))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") constructor for `Series` objects ([GH 23814](https://github.com/pandas-dev/pandas/issues/23814))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") for Categorical data ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of iterating over a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). Using [`DataFrame.itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") now creates iterators without internally allocating
    lists of all elements ([GH 20783](https://github.com/pandas-dev/pandas/issues/20783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") constructor, additionally benefitting `PeriodArray` and `PeriodIndex`
    creation ([GH 24084](https://github.com/pandas-dev/pandas/issues/24084), [GH 24118](https://github.com/pandas-dev/pandas/issues/24118))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improved performance of tz-aware `DatetimeArray` binary operations ([GH 24491](https://github.com/pandas-dev/pandas/issues/24491))  ##
    Bug fixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") where `NaN` values in `codes` were silently converted
    to `0` ([GH 21767](https://github.com/pandas-dev/pandas/issues/21767)). In the
    future this will raise a `ValueError`. Also changes the behavior of `.from_codes([1.1,
    2.0])`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.sort_values()` where `NaN` values were always positioned
    in front regardless of `na_position` value. ([GH 22556](https://github.com/pandas-dev/pandas/issues/22556)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing with a boolean-valued `Categorical`. Now a boolean-valued
    `Categorical` is treated as a boolean mask ([GH 22665](https://github.com/pandas-dev/pandas/issues/22665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") with empty values and boolean categories was raising
    a `ValueError` after a change to dtype coercion ([GH 22702](https://github.com/pandas-dev/pandas/issues/22702)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.take()` with a user-provided `fill_value` not encoding the
    `fill_value`, which could result in a `ValueError`, incorrect results, or a segmentation
    fault ([GH 23296](https://github.com/pandas-dev/pandas/issues/23296)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [`Series.unstack()`](../reference/api/pandas.Series.unstack.html#pandas.Series.unstack
    "pandas.Series.unstack"), specifying a `fill_value` not present in the categories
    now raises a `TypeError` rather than ignoring the `fill_value` ([GH 23284](https://github.com/pandas-dev/pandas/issues/23284))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when resampling [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and aggregating on categorical data, the categorical
    dtype was getting lost. ([GH 23227](https://github.com/pandas-dev/pandas/issues/23227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in many methods of the `.str`-accessor, which always failed on calling the
    `CategoricalIndex.str` constructor ([GH 23555](https://github.com/pandas-dev/pandas/issues/23555),
    [GH 23556](https://github.com/pandas-dev/pandas/issues/23556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") losing the categorical dtype for categorical data ([GH
    24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.apply()` where `NaN` values could be handled unpredictably.
    They now remain unchanged ([GH 24241](https://github.com/pandas-dev/pandas/issues/24241))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") comparison methods incorrectly raising `ValueError` when
    operating against a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 24630](https://github.com/pandas-dev/pandas/issues/24630))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.set_categories()` where setting fewer new categories with
    `rename=True` caused a segmentation fault ([GH 24675](https://github.com/pandas-dev/pandas/issues/24675))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimelike
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed bug where two `DateOffset` objects with different `normalize` attributes
    could evaluate as equal ([GH 21404](https://github.com/pandas-dev/pandas/issues/21404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`Timestamp.resolution()`](../reference/api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") incorrectly returned 1-microsecond `timedelta`
    instead of 1-nanosecond [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") ([GH 21336](https://github.com/pandas-dev/pandas/issues/21336),
    [GH 21365](https://github.com/pandas-dev/pandas/issues/21365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") that did not consistently return an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") when `box=True` was specified ([GH 21864](https://github.com/pandas-dev/pandas/issues/21864))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons where string comparisons incorrectly raises
    `TypeError` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against `timedelta64[ns]` dtyped
    arrays; in some cases `TypeError` was incorrectly raised, in others it incorrectly
    failed to raise ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against object-dtyped arrays
    ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `Timedelta`-like objects ([GH 22005](https://github.com/pandas-dev/pandas/issues/22005),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `DateOffset` objects returning an `object` dtype instead of `datetime64[ns]` dtype
    ([GH 21610](https://github.com/pandas-dev/pandas/issues/21610), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype comparing against `NaT` incorrectly
    ([GH 22242](https://github.com/pandas-dev/pandas/issues/22242), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `Timestamp`-like object
    incorrectly returned `datetime64[ns]` dtype instead of `timedelta64[ns]` dtype
    ([GH 8554](https://github.com/pandas-dev/pandas/issues/8554), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `np.datetime64` object
    with non-nanosecond unit failing to convert to nanoseconds ([GH 18874](https://github.com/pandas-dev/pandas/issues/18874),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparisons against `Timestamp`-like objects failing to raise
    `TypeError` for inequality checks with mismatched types ([GH 8932](https://github.com/pandas-dev/pandas/issues/8932),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with mixed dtypes including `datetime64[ns]` incorrectly raising
    `TypeError` on equality comparisons ([GH 13128](https://github.com/pandas-dev/pandas/issues/13128),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") returning a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") for a single-column `DataFrame` with tz-aware datetime
    values. Now a 2-D [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects is returned ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.eq()`](../reference/api/pandas.DataFrame.eq.html#pandas.DataFrame.eq
    "pandas.DataFrame.eq") comparison against `NaT` incorrectly returning `True` or
    `NaN` ([GH 15697](https://github.com/pandas-dev/pandas/issues/15697), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") subtraction that incorrectly failed to raise `OverflowError`
    ([GH 22492](https://github.com/pandas-dev/pandas/issues/22492), [GH 22508](https://github.com/pandas-dev/pandas/issues/22508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") incorrectly allowing indexing with `Timedelta` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where frequency was being set if original frequency was
    `None` ([GH 22150](https://github.com/pandas-dev/pandas/issues/22150))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in rounding methods of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([`round()`](../reference/api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round"), [`ceil()`](../reference/api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil"), [`floor()`](../reference/api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")) and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")) could give rise to loss of precision ([GH 22591](https://github.com/pandas-dev/pandas/issues/22591))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") argument that would drop the `name` from the result ([GH 21697](https://github.com/pandas-dev/pandas/issues/21697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where adding or subtracting a `timedelta` or `Tick` object
    produced incorrect results ([GH 22988](https://github.com/pandas-dev/pandas/issues/22988))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    repr with period-dtype data missing a space before the data ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") when decrementing a start date to a past end date by a negative
    frequency ([GH 23270](https://github.com/pandas-dev/pandas/issues/23270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.min()`](../reference/api/pandas.Series.min.html#pandas.Series.min
    "pandas.Series.min") which would return `NaN` instead of `NaT` when called on
    a series of `NaT` ([GH 23282](https://github.com/pandas-dev/pandas/issues/23282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") not properly aligning categoricals, so that missing
    values in `self` where not filled by valid values from `other` ([GH 24147](https://github.com/pandas-dev/pandas/issues/24147))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine") with datetimelike values raising a TypeError ([GH
    23079](https://github.com/pandas-dev/pandas/issues/23079))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") with frequency of `Day` or higher where dates sufficiently
    far in the future could wrap around to the past instead of raising `OutOfBoundsDatetime`
    ([GH 14187](https://github.com/pandas-dev/pandas/issues/14187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range") ignoring the frequency of `start` and `end` when those
    are provided as [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    objects ([GH 20535](https://github.com/pandas-dev/pandas/issues/20535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") with attribute `freq.n` greater than 1 where adding a `DateOffset`
    object would return incorrect results ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that interpreted string indices as lists of characters when setting datetimelike
    values ([GH 23451](https://github.com/pandas-dev/pandas/issues/23451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when creating a new column from an ndarray of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects with timezones creating an object-dtype column, rather
    than datetime with timezone ([GH 23932](https://github.com/pandas-dev/pandas/issues/23932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor which would drop the frequency of an input [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 22311](https://github.com/pandas-dev/pandas/issues/22311))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where calling `np.array(dtindex, dtype=object)` would
    incorrectly return an array of `long` objects ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where passing a timezone-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and `dtype=object` would incorrectly raise a `ValueError`
    ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where calling `np.array(dtindex, dtype=object)` on a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would return an array of `datetime` objects instead of
    [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    objects, potentially losing nanosecond portions of the timestamps ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.__setitem__` not allowing setting with another `Categorical`
    when both are unordered and have the same categories, but in a different order
    ([GH 24142](https://github.com/pandas-dev/pandas/issues/24142))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") where using dates with millisecond resolution or higher could
    return incorrect values or the wrong number of values in the index ([GH 24110](https://github.com/pandas-dev/pandas/issues/24110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") from a [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") would incorrectly drop timezone information ([GH 18664](https://github.com/pandas-dev/pandas/issues/18664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would incorrectly lose
    the index’s `freq` attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clarified error message produced when passing an incorrect `freq` argument to
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with `NaT` as the first entry in the passed data ([GH
    11587](https://github.com/pandas-dev/pandas/issues/11587))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `box` and `utc` arguments were ignored when passing
    a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of unit mappings ([GH 23760](https://github.com/pandas-dev/pandas/issues/23760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.dt`](../reference/api/pandas.Series.dt.html#pandas.Series.dt
    "pandas.Series.dt") where the cache would not update properly after an in-place
    operation ([GH 24408](https://github.com/pandas-dev/pandas/issues/24408))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where comparisons against an array-like object with length
    1 failed to raise `ValueError` ([GH 23078](https://github.com/pandas-dev/pandas/issues/23078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex.astype()`, `PeriodIndex.astype()` and `TimedeltaIndex.astype()`
    ignoring the sign of the `dtype` for unsigned integer dtypes ([GH 24405](https://github.com/pandas-dev/pandas/issues/24405)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in [`Series.max()`](../reference/api/pandas.Series.max.html#pandas.Series.max
    "pandas.Series.max") with `datetime64[ns]`-dtype failing to return `NaT` when
    nulls are present and `skipna=False` is passed ([GH 24265](https://github.com/pandas-dev/pandas/issues/24265))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where arrays of `datetime` objects containing both timezone-aware
    and timezone-naive `datetimes` would fail to raise `ValueError` ([GH 24569](https://github.com/pandas-dev/pandas/issues/24569))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with invalid datetime format doesn’t coerce input to `NaT`
    even if `errors='coerce'` ([GH 24763](https://github.com/pandas-dev/pandas/issues/24763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype division by `Timedelta`-like
    scalar incorrectly returning `timedelta64[ns]` dtype instead of `float64` dtype
    ([GH 20088](https://github.com/pandas-dev/pandas/issues/20088), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding a [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with object dtype to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `timedelta64[ns]` dtype incorrectly raising ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in multiplying a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with numeric dtype against a `timedelta` object ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with numeric dtype when adding or subtracting an array or `Series` with `timedelta64`
    dtype ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with numeric dtype when multiplying or dividing an array with dtype `timedelta64`
    ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") incorrectly allowing indexing with `Timestamp` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where subtracting [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") from an object-dtyped array would raise `TypeError` ([GH 21980](https://github.com/pandas-dev/pandas/issues/21980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in adding a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-timedelta64[ns] dtypes to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-integer dtypes returning incorrect results instead
    of raising `TypeError` ([GH 22696](https://github.com/pandas-dev/pandas/issues/22696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding a timezone-aware datetime scalar incorrectly
    returned a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding `np.timedelta64('NaT')` incorrectly returned
    an all-`NaT` [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") instead of an all-`NaT` [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") and [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") have inconsistencies in supported unit string ([GH 21762](https://github.com/pandas-dev/pandas/issues/21762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") division where dividing by another [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") raised `TypeError` instead of returning a `Float64Index`
    ([GH 23829](https://github.com/pandas-dev/pandas/issues/23829), [GH 22631](https://github.com/pandas-dev/pandas/issues/22631))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") comparison operations where comparing against non-`Timedelta`-like
    objects would raise `TypeError` instead of returning all-`False` for `__eq__`
    and all-`True` for `__ne__` ([GH 24056](https://github.com/pandas-dev/pandas/issues/24056))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") comparisons when comparing with a `Tick` object incorrectly
    raising `TypeError` ([GH 24710](https://github.com/pandas-dev/pandas/issues/24710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Index.shift()`](../reference/api/pandas.Index.shift.html#pandas.Index.shift
    "pandas.Index.shift") where an `AssertionError` would raise when shifting across
    DST ([GH 8616](https://github.com/pandas-dev/pandas/issues/8616))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where passing an invalid timezone offset designator
    (`Z`) would not raise a `ValueError` ([GH 8910](https://github.com/pandas-dev/pandas/issues/8910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp.replace()`](../reference/api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace") where replacing at a DST boundary would retain an
    incorrect offset ([GH 7825](https://github.com/pandas-dev/pandas/issues/7825))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") with `datetime64[ns, tz]` data when replacing `NaT` ([GH
    11792](https://github.com/pandas-dev/pandas/issues/11792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") when passing different string date formats with a timezone
    offset would produce different timezone offsets ([GH 12064](https://github.com/pandas-dev/pandas/issues/12064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when comparing a tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would coerce the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to tz-naive ([GH 12601](https://github.com/pandas-dev/pandas/issues/12601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.truncate()`](../reference/api/pandas.Series.truncate.html#pandas.Series.truncate
    "pandas.Series.truncate") with a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would cause a core dump ([GH 9243](https://github.com/pandas-dev/pandas/issues/9243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    constructor which would coerce tz-aware and tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to tz-aware ([GH 13051](https://github.com/pandas-dev/pandas/issues/13051))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with `datetime64[ns, tz]` dtype that did not localize integer data correctly ([GH
    20964](https://github.com/pandas-dev/pandas/issues/20964))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing with an integer and tz would not localize
    correctly ([GH 12619](https://github.com/pandas-dev/pandas/issues/12619))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`DataFrame.describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") and [`Series.describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") on tz-aware datetimes did not show `first` and `last`
    result ([GH 21328](https://github.com/pandas-dev/pandas/issues/21328))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons failing to raise `TypeError` when comparing
    timezone-aware `DatetimeIndex` against `np.datetime64` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` assignment with a timezone-aware scalar ([GH 19843](https://github.com/pandas-dev/pandas/issues/19843))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.asof()`](../reference/api/pandas.DataFrame.asof.html#pandas.DataFrame.asof
    "pandas.DataFrame.asof") that raised a `TypeError` when attempting to compare
    tz-naive and tz-aware timestamps ([GH 21194](https://github.com/pandas-dev/pandas/issues/21194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructed with the `replace` method across DST ([GH 18785](https://github.com/pandas-dev/pandas/issues/18785))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when setting a new value with [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 18308](https://github.com/pandas-dev/pandas/issues/18308),
    [GH 20724](https://github.com/pandas-dev/pandas/issues/20724))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.unique()`](../reference/api/pandas.Index.unique.html#pandas.Index.unique
    "pandas.Index.unique") that did not re-localize tz-aware dates correctly ([GH
    21737](https://github.com/pandas-dev/pandas/issues/21737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a DST transition ([GH 21846](https://github.com/pandas-dev/pandas/issues/21846))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") where an `AmbiguousTimeError` or `NonExistentTimeError`
    would raise if a timezone aware timeseries ended on a DST transition ([GH 19375](https://github.com/pandas-dev/pandas/issues/19375),
    [GH 10117](https://github.com/pandas-dev/pandas/issues/10117))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") and [`Series.drop()`](../reference/api/pandas.Series.drop.html#pandas.Series.drop
    "pandas.Series.drop") when specifying a tz-aware Timestamp key to drop from a
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 21761](https://github.com/pandas-dev/pandas/issues/21761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") constructor where `NaT` and `dateutil.tz.tzlocal` would
    raise an `OutOfBoundsDatetime` error ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize") and [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") with `dateutil.tz.tzlocal` near a DST transition
    that would return an incorrectly localized datetime ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where a `dateutil.tz.tzutc` timezone passed with
    a `datetime.datetime` argument would be converted to a `pytz.UTC` timezone ([GH
    23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when specifying a `unit`
    and `errors='ignore'` ([GH 23758](https://github.com/pandas-dev/pandas/issues/23758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when passing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 24415](https://github.com/pandas-dev/pandas/issues/24415))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any") returns wrong value when `axis=1` and the data is of datetimelike
    type ([GH 23070](https://github.com/pandas-dev/pandas/issues/23070))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") where a timezone aware index was converted to
    UTC first before creating [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") ([GH 22905](https://github.com/pandas-dev/pandas/issues/22905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.tz_localize()`](../reference/api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize"), [`DataFrame.tz_convert()`](../reference/api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert"), [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize"), and [`Series.tz_convert()`](../reference/api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert") where `copy=False` would mutate the original argument
    inplace ([GH 6326](https://github.com/pandas-dev/pandas/issues/6326))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.max()`](../reference/api/pandas.DataFrame.max.html#pandas.DataFrame.max
    "pandas.DataFrame.max") and [`DataFrame.min()`](../reference/api/pandas.DataFrame.min.html#pandas.DataFrame.min
    "pandas.DataFrame.min") with `axis=1` where a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `NaN` would be returned when all columns contained the same
    timezone ([GH 10390](https://github.com/pandas-dev/pandas/issues/10390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offsets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `FY5253` where date offsets could incorrectly raise an `AssertionError`
    in arithmetic operations ([GH 14774](https://github.com/pandas-dev/pandas/issues/14774))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateOffset` where keyword arguments `week` and `milliseconds` were accepted
    and ignored. Passing these will now raise `ValueError` ([GH 19398](https://github.com/pandas-dev/pandas/issues/19398))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding `DateOffset` with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") incorrectly raising `TypeError` ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in comparing `DateOffset` objects with non-DateOffset objects, particularly
    strings, raising `ValueError` instead of returning `False` for equality checks
    and `True` for not-equal checks ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `__rmatmul__` doesn’t support matrix vector multiplication ([GH 21530](https://github.com/pandas-dev/pandas/issues/21530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") fails with read-only array ([GH 12813](https://github.com/pandas-dev/pandas/issues/12813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique
    "pandas.unique") handled signed zeros inconsistently: for some inputs 0.0 and
    -0.0 were treated as equal and for some inputs as different. Now they are treated
    as equal for all inputs ([GH 21866](https://github.com/pandas-dev/pandas/issues/21866))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg"), [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") and [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a list of functions and `axis=1`
    (e.g. `df.apply(['sum', 'mean'], axis=1)`), a `TypeError` was wrongly raised.
    For all three methods such calculation are now done correctly. ([GH 16679](https://github.com/pandas-dev/pandas/issues/16679)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    comparison against datetime-like scalars and arrays ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") multiplication between boolean dtype and integer returning
    `object` dtype instead of integer dtype ([GH 22047](https://github.com/pandas-dev/pandas/issues/22047),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a string argument and additional
    positional or keyword arguments (e.g. `df.apply('sum', min_count=1)`), a `TypeError`
    was wrongly raised ([GH 22376](https://github.com/pandas-dev/pandas/issues/22376))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") to extension dtype may raise `AttributeError` ([GH
    22578](https://github.com/pandas-dev/pandas/issues/22578))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype arithmetic operations with `ndarray`
    with integer dtype incorrectly treating the narray as `timedelta64[ns]` dtype
    ([GH 23114](https://github.com/pandas-dev/pandas/issues/23114))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rpow()`](../reference/api/pandas.Series.rpow.html#pandas.Series.rpow
    "pandas.Series.rpow") with object dtype `NaN` for `1 ** NA` instead of `1` ([GH
    22922](https://github.com/pandas-dev/pandas/issues/22922)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.agg()`](../reference/api/pandas.Series.agg.html#pandas.Series.agg
    "pandas.Series.agg") can now handle numpy NaN-aware methods like [`numpy.nansum()`](https://numpy.org/doc/stable/reference/generated/numpy.nansum.html#numpy.nansum
    "(in NumPy v1.26)") ([GH 19629](https://github.com/pandas-dev/pandas/issues/19629))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rank()`](../reference/api/pandas.Series.rank.html#pandas.Series.rank
    "pandas.Series.rank") and [`DataFrame.rank()`](../reference/api/pandas.DataFrame.rank.html#pandas.DataFrame.rank
    "pandas.DataFrame.rank") when `pct=True` and more than 2^(24) rows are present
    resulted in percentages greater than 1.0 ([GH 18271](https://github.com/pandas-dev/pandas/issues/18271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls such as [`DataFrame.round()`](../reference/api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round") with a non-unique [`CategoricalIndex()`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") now return expected data. Previously, data would be
    improperly duplicated ([GH 21809](https://github.com/pandas-dev/pandas/issues/21809)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `log10`, `floor` and `ceil` to the list of supported functions in [`DataFrame.eval()`](../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") ([GH 24139](https://github.com/pandas-dev/pandas/issues/24139),
    [GH 24353](https://github.com/pandas-dev/pandas/issues/24353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical operations `&, |, ^` between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") will no longer raise `ValueError` ([GH 22092](https://github.com/pandas-dev/pandas/issues/22092))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking PEP 3141 numbers in [`is_scalar()`](../reference/api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar") function returns `True` ([GH 22903](https://github.com/pandas-dev/pandas/issues/22903))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction methods like [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum") now accept the default value of `keepdims=False` when called
    from a NumPy ufunc, rather than raising a `TypeError`. Full support for `keepdims`
    has not been implemented ([GH 24356](https://github.com/pandas-dev/pandas/issues/24356)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") in which column types were unexpectedly converted
    to float ([GH 20699](https://github.com/pandas-dev/pandas/issues/20699))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") in which column types are not preserved and casted to
    float ([GH 24162](https://github.com/pandas-dev/pandas/issues/24162))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") when order of columns of dataframes doesn’t match, result
    observed is wrong in numeric values ([GH 20911](https://github.com/pandas-dev/pandas/issues/20911))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") where converting to an extension dtype when duplicate
    column names are present causes a `RecursionError` ([GH 24704](https://github.com/pandas-dev/pandas/issues/24704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Index.str.partition()` was not nan-safe ([GH 23558](https://github.com/pandas-dev/pandas/issues/23558)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.split()` was not nan-safe ([GH 23677](https://github.com/pandas-dev/pandas/issues/23677)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug [`Series.str.contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") not respecting the `na` argument for a `Categorical`
    dtype `Series` ([GH 22158](https://github.com/pandas-dev/pandas/issues/22158))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.cat()` when the result contained only `NaN` ([GH 24044](https://github.com/pandas-dev/pandas/issues/24044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in the [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") constructor where the `closed` parameter did not always
    override the inferred `closed` ([GH 19370](https://github.com/pandas-dev/pandas/issues/19370))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `IntervalIndex` repr where a trailing comma was missing after the
    list of intervals ([GH 20611](https://github.com/pandas-dev/pandas/issues/20611))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    where scalar arithmetic operations did not retain the `closed` value ([GH 22313](https://github.com/pandas-dev/pandas/issues/22313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") where indexing with datetime-like values raised a `KeyError`
    ([GH 20636](https://github.com/pandas-dev/pandas/issues/20636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalTree` where data containing `NaN` triggered a warning and resulted
    in incorrect indexing queries with [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 23352](https://github.com/pandas-dev/pandas/issues/23352))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.ne()`](../reference/api/pandas.DataFrame.ne.html#pandas.DataFrame.ne
    "pandas.DataFrame.ne") fails if columns contain column name “dtype” ([GH 22383](https://github.com/pandas-dev/pandas/issues/22383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The traceback from a `KeyError` when asking `.loc` for a single missing label
    is now shorter and more clear ([GH 21557](https://github.com/pandas-dev/pandas/issues/21557))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") now emits a `KeyError` when a malformed string is looked
    up, which is consistent with the behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 22803](https://github.com/pandas-dev/pandas/issues/22803))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `.ix` is asked for a missing integer label in a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with a first level of integer type, it now raises a `KeyError`,
    consistently with the case of a flat `Int64Index`, rather than falling back to
    positional indexing ([GH 21593](https://github.com/pandas-dev/pandas/issues/21593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.reindex()`](../reference/api/pandas.Index.reindex.html#pandas.Index.reindex
    "pandas.Index.reindex") when reindexing a tz-naive and tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 8306](https://github.com/pandas-dev/pandas/issues/8306))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") when reindexing an empty series with a `datetime64[ns,
    tz]` dtype ([GH 20869](https://github.com/pandas-dev/pandas/issues/20869))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when setting values with `.loc` and a timezone aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 11365](https://github.com/pandas-dev/pandas/issues/11365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.__getitem__` now accepts dictionaries and dictionary keys as list-likes
    of labels, consistently with `Series.__getitem__` ([GH 21294](https://github.com/pandas-dev/pandas/issues/21294))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `DataFrame[np.nan]` when columns are non-unique ([GH 21428](https://github.com/pandas-dev/pandas/issues/21428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with nanosecond resolution dates and timezones ([GH 11679](https://github.com/pandas-dev/pandas/issues/11679))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where indexing with a Numpy array containing negative values would mutate
    the indexer ([GH 21867](https://github.com/pandas-dev/pandas/issues/21867))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where mixed indexes wouldn’t allow integers for `.at` ([GH 19860](https://github.com/pandas-dev/pandas/issues/19860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.get_loc` now raises `KeyError` when boolean key passed. ([GH
    19087](https://github.com/pandas-dev/pandas/issues/19087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") when indexing with an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 19977](https://github.com/pandas-dev/pandas/issues/19977))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") no
    longer mangles `None`, `NaN` and `NaT`, i.e. they are treated as three different
    keys. However, for numeric Index all three are still coerced to a `NaN` ([GH 22332](https://github.com/pandas-dev/pandas/issues/22332))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `scalar in Index` if scalar is a float while the `Index` is of integer
    dtype ([GH 22085](https://github.com/pandas-dev/pandas/issues/22085))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`MultiIndex.set_levels()`](../reference/api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels") when levels value is not subscriptable ([GH 23273](https://github.com/pandas-dev/pandas/issues/23273))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where setting a timedelta column by `Index` causes it to be casted to double,
    and therefore lose precision ([GH 23511](https://github.com/pandas-dev/pandas/issues/23511))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union") and [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection") where name of the `Index` of the result was not computed
    correctly for certain cases ([GH 9943](https://github.com/pandas-dev/pandas/issues/9943),
    [GH 9862](https://github.com/pandas-dev/pandas/issues/9862))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    slicing with boolean [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") may raise `TypeError` ([GH 22533](https://github.com/pandas-dev/pandas/issues/22533))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodArray.__setitem__` when accepting slice and list-like value ([GH
    23978](https://github.com/pandas-dev/pandas/issues/23978))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"), [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would lose their `freq`
    attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `iat` where using it to assign an incompatible value would create a new
    column ([GH 23236](https://github.com/pandas-dev/pandas/issues/23236))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") where a `ValueError` would raise when one column contained
    a `datetime64[ns, tz]` dtype ([GH 15522](https://github.com/pandas-dev/pandas/issues/15522))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") that could be incorrectly cached and return incorrect
    answers if null elements are introduced after an initial call ([GH 19700](https://github.com/pandas-dev/pandas/issues/19700))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") now treats all NaN-floats as equal also for `np.object_`-dtype.
    This behavior is consistent with the behavior for float64 ([GH 22119](https://github.com/pandas-dev/pandas/issues/22119))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    no longer mangles NaN-floats and the `NaT`-object for `np.object_`-dtype, i.e.
    `NaT` is no longer coerced to a NaN-value and is treated as a different entity.
    ([GH 22295](https://github.com/pandas-dev/pandas/issues/22295))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    and [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    now properly handle numpy masked arrays with hardened masks. Previously, constructing
    a DataFrame or Series from a masked array with a hard mask would create a pandas
    object containing the underlying value, rather than the expected NaN. ([GH 24574](https://github.com/pandas-dev/pandas/issues/24574))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor where `dtype` argument was not honored when handling
    numpy masked record arrays. ([GH 24874](https://github.com/pandas-dev/pandas/issues/24874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `io.formats.style.Styler.applymap()` where `subset=` with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") slice would reduce to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") ([GH 19861](https://github.com/pandas-dev/pandas/issues/19861))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed compatibility for [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles prior to version 0.8.0; compatibility with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles from version 0.13 forward is maintained ([GH 21654](https://github.com/pandas-dev/pandas/issues/21654))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.get_loc_level()`](../reference/api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level") (and as a consequence, `.loc` on a `Series`
    or `DataFrame` with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index) will now raise a `KeyError`, rather than returning
    an empty `slice`, if asked a label which is present in the `levels` but is unused
    ([GH 22221](https://github.com/pandas-dev/pandas/issues/22221))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")
    has gained the [`MultiIndex.from_frame()`](../reference/api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame"), it allows constructing a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") object from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `TypeError` in Python 3 when creating [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") in which some levels have mixed types, e.g. when some labels
    are tuples ([GH 15457](https://github.com/pandas-dev/pandas/issues/15457))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which a column specified with `CategoricalDtype` of boolean
    categories was not being correctly coerced from string values to booleans ([GH
    20498](https://github.com/pandas-dev/pandas/issues/20498))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unicode column names were not being properly recognized
    with Python 2.x ([GH 13253](https://github.com/pandas-dev/pandas/issues/13253))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") when writing timezone aware data (`datetime64[ns, tz]`
    dtype) would raise a `TypeError` ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") where a naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would be written as `TIMESTAMP WITH TIMEZONE` type in
    supported databases, e.g. PostgreSQL ([GH 23510](https://github.com/pandas-dev/pandas/issues/23510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") when `parse_cols` is specified with an empty dataset ([GH
    9208](https://github.com/pandas-dev/pandas/issues/9208))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    no longer ignores all-whitespace `<tr>` within `<thead>` when considering the
    `skiprows` and `header` arguments. Previously, users had to decrease their `header`
    and `skiprows` values on such tables to work around the issue. ([GH 21641](https://github.com/pandas-dev/pandas/issues/21641))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") will correctly show the deprecation warning for previously
    deprecated `sheetname` ([GH 17994](https://github.com/pandas-dev/pandas/issues/17994))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    and [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table") will throw `UnicodeError` and not coredump on badly encoded
    strings ([GH 22748](https://github.com/pandas-dev/pandas/issues/22748))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will correctly parse timezone-aware datetimes ([GH 22256](https://github.com/pandas-dev/pandas/issues/22256))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management was prematurely optimized for the
    C engine when the data was being read in chunks ([GH 23509](https://github.com/pandas-dev/pandas/issues/23509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in unnamed columns were being improperly identified when extracting
    a multi-index ([GH 23687](https://github.com/pandas-dev/pandas/issues/23687))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will parse numbers in sas7bdat-files that have width less than 8 bytes correctly.
    ([GH 21616](https://github.com/pandas-dev/pandas/issues/21616))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with many columns ([GH 22628](https://github.com/pandas-dev/pandas/issues/22628))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with data page types having also bit 7 set
    (so page type is 128 + 256 = 384) ([GH 16615](https://github.com/pandas-dev/pandas/issues/16615))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") in which an incorrect error was raised on an invalid file format.
    ([GH 24548](https://github.com/pandas-dev/pandas/issues/24548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `detect_client_encoding()` where potential `IOError` goes unhandled when
    importing in a mod_wsgi process due to restricted access to stdout. ([GH 21552](https://github.com/pandas-dev/pandas/issues/21552))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` misses truncation indicators (…)
    on truncated DataFrame ([GH 15019](https://github.com/pandas-dev/pandas/issues/15019),
    [GH 22783](https://github.com/pandas-dev/pandas/issues/22783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` when both columns and row index
    are `MultiIndex` ([GH 22579](https://github.com/pandas-dev/pandas/issues/22579))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index_names=False` displaying index name ([GH
    22747](https://github.com/pandas-dev/pandas/issues/22747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `header=False` not displaying row index names
    ([GH 23788](https://github.com/pandas-dev/pandas/issues/23788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `sparsify=False` that caused it to raise `TypeError`
    ([GH 22887](https://github.com/pandas-dev/pandas/issues/22887))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that broke column alignment when `index=False` and
    width of first column’s values is greater than the width of first column’s header
    ([GH 16839](https://github.com/pandas-dev/pandas/issues/16839), [GH 13032](https://github.com/pandas-dev/pandas/issues/13032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that caused representations of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to not take up the whole window ([GH 22984](https://github.com/pandas-dev/pandas/issues/22984))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") where a single level MultiIndex incorrectly wrote a
    tuple. Now just the value of the index is written ([GH 19589](https://github.com/pandas-dev/pandas/issues/19589)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HDFStore` will raise `ValueError` when the `format` kwarg is passed to the
    constructor ([GH 13291](https://github.com/pandas-dev/pandas/issues/13291))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.append()`](../reference/api/pandas.HDFStore.append.html#pandas.HDFStore.append
    "pandas.HDFStore.append") when appending a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with an empty string column and `min_itemsize` < 8 ([GH 12242](https://github.com/pandas-dev/pandas/issues/12242))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory leaks occurred in the C engine when parsing
    `NaN` values due to insufficient cleanup on completion or error ([GH 21353](https://github.com/pandas-dev/pandas/issues/21353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which incorrect error messages were being raised when `skipfooter`
    was passed in along with `nrows`, `iterator`, or `chunksize` ([GH 23711](https://github.com/pandas-dev/pandas/issues/23711))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index names were being improperly handled in the cases when
    they were not provided ([GH 23484](https://github.com/pandas-dev/pandas/issues/23484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unnecessary warnings were being raised when the dialect’s
    values conflicted with the default arguments ([GH 23761](https://github.com/pandas-dev/pandas/issues/23761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") in which the error message was not displaying the valid flavors
    when an invalid one was provided ([GH 23549](https://github.com/pandas-dev/pandas/issues/23549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which extraneous header names were extracted, even though
    none were specified ([GH 11733](https://github.com/pandas-dev/pandas/issues/11733))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which column names were not being properly converted to
    string sometimes in Python 2.x ([GH 23874](https://github.com/pandas-dev/pandas/issues/23874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `index_col=None` was not being respected and parsing
    index columns anyway ([GH 18792](https://github.com/pandas-dev/pandas/issues/18792),
    [GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `usecols` was not being validated for proper column
    names when passed in as a string ([GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") when the resulting dict contains non-Python scalars
    in the case of numeric data ([GH 23753](https://github.com/pandas-dev/pandas/issues/23753))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string"), [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html"), [`DataFrame.to_latex()`](../reference/api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex") will correctly format output when a string is passed
    as the `float_format` argument ([GH 21625](https://github.com/pandas-dev/pandas/issues/21625),
    [GH 22270](https://github.com/pandas-dev/pandas/issues/22270))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused it to raise `OverflowError` when trying to use
    ‘inf’ as `na_value` with integer index column ([GH 17128](https://github.com/pandas-dev/pandas/issues/17128))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused the C engine on Python 3.6+ on Windows to improperly
    read CSV filenames with accented or special characters ([GH 15086](https://github.com/pandas-dev/pandas/issues/15086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf
    "pandas.read_fwf") in which the compression type of a file was not being properly
    inferred ([GH 22199](https://github.com/pandas-dev/pandas/issues/22199))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pandas.io.json.json_normalize()` that caused it to raise `TypeError`
    when two consecutive elements of `record_path` are dicts ([GH 22706](https://github.com/pandas-dev/pandas/issues/22706))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata"), `pandas.io.stata.StataWriter` and `pandas.io.stata.StataWriter117`
    where a exception would leave a partially written and invalid dta file ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` that produced
    invalid files when using strLs with non-ASCII characters ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `HDFStore` that caused it to raise `ValueError` when reading a Dataframe
    in Python 3 from fixed format written in Python 2 ([GH 24510](https://github.com/pandas-dev/pandas/issues/24510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") and more generally in the floating `repr` formatter.
    Zeros were not trimmed if `inf` was present in a columns while it was the case
    with NA values. Zeros are now trimmed as in the presence of NA ([GH 24861](https://github.com/pandas-dev/pandas/issues/24861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `repr` when truncating the number of columns and having a wide last
    column ([GH 24849](https://github.com/pandas-dev/pandas/issues/24849)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") and [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin") caused x-axis label and ticklabels to disappear
    when colorbar was on in IPython inline backend ([GH 10611](https://github.com/pandas-dev/pandas/issues/10611),
    [GH 10678](https://github.com/pandas-dev/pandas/issues/10678), and [GH 20455](https://github.com/pandas-dev/pandas/issues/20455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in plotting a Series with datetimes using `matplotlib.axes.Axes.scatter()`
    ([GH 22039](https://github.com/pandas-dev/pandas/issues/22039))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") caused bars to use multiple colors instead of a single
    one ([GH 20585](https://github.com/pandas-dev/pandas/issues/20585))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in validating color parameter caused extra color to be appended to the given
    color array. This happened to multiple plotting functions using matplotlib. ([GH
    20726](https://github.com/pandas-dev/pandas/issues/20726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Rolling.min()` and `Rolling.max()` with `closed='left'`, a datetime-like
    index and only one entry in the series leading to segfault ([GH 24718](https://github.com/pandas-dev/pandas/issues/24718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.first()` and `GroupBy.last()` with `as_index=False` leading
    to the loss of timezone information ([GH 15884](https://github.com/pandas-dev/pandas/issues/15884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateFrame.resample()` when downsampling across a DST boundary ([GH 8531](https://github.com/pandas-dev/pandas/issues/8531))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in date anchoring for `DateFrame.resample()` with offset `Day` when n >
    1 ([GH 24127](https://github.com/pandas-dev/pandas/issues/24127))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where `ValueError` is wrongly raised when calling `SeriesGroupBy.count()`
    method of a `SeriesGroupBy` when the grouping variable only contains NaNs and
    numpy version < 1.13 ([GH 21956](https://github.com/pandas-dev/pandas/issues/21956)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple bugs in `Rolling.min()` with `closed='left'` and a datetime-like index
    leading to incorrect results and also segfault. ([GH 21704](https://github.com/pandas-dev/pandas/issues/21704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.apply()`](../reference/api/pandas.core.resample.Resampler.apply.html#pandas.core.resample.Resampler.apply
    "pandas.core.resample.Resampler.apply") when passing positional arguments to applied
    func ([GH 14615](https://github.com/pandas-dev/pandas/issues/14615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when passing `numpy.timedelta64` to `loffset` kwarg
    ([GH 7687](https://github.com/pandas-dev/pandas/issues/7687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.asfreq()`](../reference/api/pandas.core.resample.Resampler.asfreq.html#pandas.core.resample.Resampler.asfreq
    "pandas.core.resample.Resampler.asfreq") when frequency of `TimedeltaIndex` is
    a subperiod of a new frequency ([GH 13022](https://github.com/pandas-dev/pandas/issues/13022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`SeriesGroupBy.mean()`](../reference/api/pandas.core.groupby.SeriesGroupBy.mean.html#pandas.core.groupby.SeriesGroupBy.mean
    "pandas.core.groupby.SeriesGroupBy.mean") when values were integral but could
    not fit inside of int64, overflowing instead. ([GH 22487](https://github.com/pandas-dev/pandas/issues/22487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RollingGroupby.agg()` and `ExpandingGroupby.agg()` now support multiple aggregation
    functions as parameters ([GH 15072](https://github.com/pandas-dev/pandas/issues/15072))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when resampling by a weekly offset (`'W'`) across a
    DST transition ([GH 9119](https://github.com/pandas-dev/pandas/issues/9119), [GH
    21459](https://github.com/pandas-dev/pandas/issues/21459))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") in which the `axis` argument was not being respected
    during aggregations ([GH 23372](https://github.com/pandas-dev/pandas/issues/23372))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.transform()` which caused missing values when the input function
    can accept a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but renames it ([GH 23455](https://github.com/pandas-dev/pandas/issues/23455)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.nth()` where column order was not always preserved ([GH 20760](https://github.com/pandas-dev/pandas/issues/20760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.rank()` with `method='dense'` and `pct=True` when a group has
    only one member would raise a `ZeroDivisionError` ([GH 23666](https://github.com/pandas-dev/pandas/issues/23666)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling `GroupBy.rank()` with empty groups and `pct=True` was raising a `ZeroDivisionError`
    ([GH 22519](https://github.com/pandas-dev/pandas/issues/22519))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") when resampling `NaT` in `TimeDeltaIndex` ([GH 13223](https://github.com/pandas-dev/pandas/issues/13223)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") did not respect the `observed` argument when selecting
    a column and instead always used `observed=False` ([GH 23970](https://github.com/pandas-dev/pandas/issues/23970))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SeriesGroupBy.pct_change()` or `DataFrameGroupBy.pct_change()` would
    previously work across groups when calculating the percent change, where it now
    correctly works per group ([GH 21200](https://github.com/pandas-dev/pandas/issues/21200),
    [GH 21235](https://github.com/pandas-dev/pandas/issues/21235)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug preventing hash table creation with very large number (2^32) of rows ([GH
    22805](https://github.com/pandas-dev/pandas/issues/22805))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in groupby when grouping on categorical causes `ValueError` and incorrect
    grouping if `observed=True` and `nan` is present in categorical column ([GH 24740](https://github.com/pandas-dev/pandas/issues/24740),
    [GH 21151](https://github.com/pandas-dev/pandas/issues/21151)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining resampled DataFrames with timezone aware index ([GH
    13783](https://github.com/pandas-dev/pandas/issues/13783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining only `Series` the `names` argument of `concat` is
    no longer ignored ([GH 23490](https://github.com/pandas-dev/pandas/issues/23490))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") with `datetime64[ns, tz]` dtype which would return
    tz-naive result ([GH 21469](https://github.com/pandas-dev/pandas/issues/21469))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") and [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with `datetime64[ns, tz]` dtype ([GH 21546](https://github.com/pandas-dev/pandas/issues/21546))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with an empty DataFrame and empty `cond` having non-bool
    dtype ([GH 21947](https://github.com/pandas-dev/pandas/issues/21947))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.mask()`](../reference/api/pandas.Series.mask.html#pandas.Series.mask
    "pandas.Series.mask") and [`DataFrame.mask()`](../reference/api/pandas.DataFrame.mask.html#pandas.DataFrame.mask
    "pandas.DataFrame.mask") with `list` conditionals ([GH 21891](https://github.com/pandas-dev/pandas/issues/21891))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises RecursionError when converting OutOfBounds
    `datetime64[ns, tz]` ([GH 20380](https://github.com/pandas-dev/pandas/issues/20380))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GroupBy.rank()` now raises a `ValueError` when an invalid value is passed
    for argument `na_option` ([GH 22124](https://github.com/pandas-dev/pandas/issues/22124))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") with Unicode attributes in Python 2 ([GH 22084](https://github.com/pandas-dev/pandas/issues/22084))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises `RecursionError` when replacing empty lists
    ([GH 22083](https://github.com/pandas-dev/pandas/issues/22083))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") when dict is used as the `to_replace` value and one
    key in the dict is another key’s value, the results were inconsistent between
    using integer key and using string key ([GH 20656](https://github.com/pandas-dev/pandas/issues/20656))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop_duplicates()`](../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates") for empty `DataFrame` which incorrectly raises
    an error ([GH 20516](https://github.com/pandas-dev/pandas/issues/20516))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long") when a string is passed to the stubnames argument and a
    column name is a substring of that stubname ([GH 22468](https://github.com/pandas-dev/pandas/issues/22468))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    when merging `datetime64[ns, tz]` data that contained a DST transition ([GH 18885](https://github.com/pandas-dev/pandas/issues/18885))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") when merging on float values within defined tolerance ([GH
    22981](https://github.com/pandas-dev/pandas/issues/22981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when concatenating a multicolumn DataFrame with tz-aware data
    against a DataFrame with a different number of columns ([GH 22796](https://github.com/pandas-dev/pandas/issues/22796))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where confusing error message raised when attempting to merge
    with missing values ([GH 23189](https://github.com/pandas-dev/pandas/issues/23189))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") and [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") for dataframes that have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") for columns ([GH 23033](https://github.com/pandas-dev/pandas/issues/23033)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    when passing column names that are not present in `DataFrame` ([GH 23575](https://github.com/pandas-dev/pandas/issues/23575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.append()` with a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a dateutil timezone would raise a `TypeError` ([GH 23682](https://github.com/pandas-dev/pandas/issues/23682))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    construction when passing no data and `dtype=str` ([GH 22477](https://github.com/pandas-dev/pandas/issues/22477))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") with
    `bins` as an overlapping `IntervalIndex` where multiple bins were returned per
    item instead of raising a `ValueError` ([GH 23980](https://github.com/pandas-dev/pandas/issues/23980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining `Series` datetimetz with `Series` category would
    lose timezone ([GH 23816](https://github.com/pandas-dev/pandas/issues/23816))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") when joining on partial MultiIndex would drop names ([GH
    20452](https://github.com/pandas-dev/pandas/issues/20452)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now returns the correct n values when keep != ‘all’
    also when tied on the first columns ([GH 22752](https://github.com/pandas-dev/pandas/issues/22752))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a DataFrame with an index argument that wasn’t already an instance
    of [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") was
    broken ([GH 22227](https://github.com/pandas-dev/pandas/issues/22227)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") prevented list subclasses to be used to construction ([GH
    21226](https://github.com/pandas-dev/pandas/issues/21226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") and [`DataFrame.pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") returning a misleading error message when the
    resulting DataFrame has more elements than int32 can handle. Now, the error message
    is improved, pointing towards the actual problem ([GH 20601](https://github.com/pandas-dev/pandas/issues/20601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") where a `ValueError` was raised when unstacking timezone
    aware values ([GH 18338](https://github.com/pandas-dev/pandas/issues/18338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") where timezone aware values were converted to timezone
    naive values ([GH 19420](https://github.com/pandas-dev/pandas/issues/19420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where a `TypeError` was raised when `by_col` were timezone
    aware values ([GH 21184](https://github.com/pandas-dev/pandas/issues/21184))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug showing an incorrect shape when throwing error during `DataFrame` construction.
    ([GH 20742](https://github.com/pandas-dev/pandas/issues/20742))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Updating a boolean, datetime, or timedelta column to be Sparse now works ([GH
    22367](https://github.com/pandas-dev/pandas/issues/22367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.to_sparse()` with Series already holding sparse data not constructing
    properly ([GH 22389](https://github.com/pandas-dev/pandas/issues/22389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a `sparse_index` to the SparseArray constructor no longer defaults
    the na-value to `np.nan` for all dtypes. The correct na_value for `data.dtype`
    is now used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nbytes` under-reporting its memory usage by not including
    the size of its sparse index.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift") for non-NA `fill_value`, as values are no longer converted
    to a dense array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` not including `fill_value` in the groups for non-NA
    `fill_value` when grouping by a sparse column ([GH 5078](https://github.com/pandas-dev/pandas/issues/5078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in unary inversion operator (`~`) on a `SparseSeries` with boolean values.
    The performance of this has also been improved ([GH 22835](https://github.com/pandas-dev/pandas/issues/22835))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArary.unique()` not returning the unique values ([GH 19595](https://github.com/pandas-dev/pandas/issues/19595))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nonzero()` and `SparseDataFrame.dropna()` returning shifted/incorrect
    results ([GH 21172](https://github.com/pandas-dev/pandas/issues/21172))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where dtypes would lose sparseness ([GH 23744](https://github.com/pandas-dev/pandas/issues/23744))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    when concatenating a list of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with all-sparse values changing the `fill_value` and converting
    to a dense Series ([GH 24371](https://github.com/pandas-dev/pandas/issues/24371))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now takes a `text_color_threshold`
    parameter to automatically lighten the text color based on the luminance of the
    background color. This improves readability with dark background colors without
    the need to limit the background colormap range. ([GH 21258](https://github.com/pandas-dev/pandas/issues/21258))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now also supports tablewise
    application (in addition to rowwise and columnwise) with `axis=None` ([GH 15204](https://github.com/pandas-dev/pandas/issues/15204))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bar()`](../reference/api/pandas.io.formats.style.Styler.bar.html#pandas.io.formats.style.Styler.bar
    "pandas.io.formats.style.Styler.bar") now also supports tablewise application
    (in addition to rowwise and columnwise) with `axis=None` and setting clipping
    range with `vmin` and `vmax` ([GH 21548](https://github.com/pandas-dev/pandas/issues/21548)
    and [GH 21526](https://github.com/pandas-dev/pandas/issues/21526)). `NaN` values
    are also handled properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building pandas for development now requires `cython >= 0.28.2` ([GH 21688](https://github.com/pandas-dev/pandas/issues/21688))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing pandas now requires `hypothesis>=3.58`. You can find [the Hypothesis
    docs here](https://hypothesis.readthedocs.io/en/latest/index.html), and a pandas-specific
    introduction [in the contributing guide](../development/contributing_codebase.html#using-hypothesis).
    ([GH 22280](https://github.com/pandas-dev/pandas/issues/22280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building pandas on macOS now targets minimum macOS 10.9 if run on macOS 10.9
    or above ([GH 23424](https://github.com/pandas-dev/pandas/issues/23424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bug where C variables were declared with external linkage causing import errors
    if certain other C libraries were imported before pandas. ([GH 24113](https://github.com/pandas-dev/pandas/issues/24113))  ##
    Contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A total of 337 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: AJ Dyka +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJ Pryor, Ph.D +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aaron Critchley
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Hooper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam J. Stewart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Kim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Klimont +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addison Lynch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Hogue +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Radu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Rychyk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Strick van Linschoten +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Volkov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Buchkovsky
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Hess +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Ponomaroff +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allison Browne +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aly Sivji
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Gross +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Spott +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aniket uttam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anjali2019 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anjana S +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Antti Kaihola +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anudeep Tubati +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arjun Sharma +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Armin Varshokar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artem Bogachev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArtinSarraf +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barry Fitzgerald +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bart Aelterman +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben James +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben Nelson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benjamin Grove +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benjamin Rowell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benoit Paquet +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boris Lau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brett Naul
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brian Choi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C.A.M. Gerlach +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carl Johan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chalmer Lowe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chang She
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charles David +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cheuk Ting Ho
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Roberts +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher Whelan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chu Qing Hao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Da Cheezy Mobsta +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Damini Satya
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Himmelstein
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Saxton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Darcy Meyer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataOmbudsman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Arcos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Krych
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dean Langsam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diego Argueta +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diego Torres +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dobatymo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doug Latornell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dr. Irv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dylan Dmitri Gray +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Boxer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Chea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik Nilsson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabian Haase +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabian Retkowski
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabien Aulaire +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fakabbir Amin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fei Phoon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fernando Margueirat +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Florian Müller +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fábio Rosado +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabe Fernando
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabriel Reid +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin Rajaiah
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gioia Ballin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gjelt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gosuke Shibahara +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graham Inggs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillaume Gay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillaume Lemaitre +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hannah Ferchland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haochen Wu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hubert +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HubertKl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HyunTruth +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iain Barr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignacio Vergara Kausel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Irv Lustig +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IsvenC +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jacopo Rota
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakob Jarmar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Bourbeau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Myatt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Winegar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Rudolph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jared Groves +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jason Kiley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javad Noorbakhsh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jay Offerdahl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeongmin Yu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeremy Schendel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jerod Estapa +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jesper Dramsch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jim Jeon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joe Jevnik
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Nothman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Ostblom +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jordi Contestí
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jorge López Fueyo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jose Quinones +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jose Rivera-Rubio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Josh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Justin Zheng +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaiqi Dong +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kalyan Gokhale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kang Yoosam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karl Dunkle Werner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karmanya Aggarwal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Markham +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kimi Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Koustav Samaddar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Krishna +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kristian Holsheimer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ksenia Gueletina +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kyle Prestel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LJ +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LeakedMemory +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Li Jin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licht Takeuchi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luca Donini +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luciano Viola +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mak Sze Chun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marc Garcia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marius Potgieter +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark Sikora +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markus Meier +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marlene Silva Marchena +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Babka +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MatanCohe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mateusz Woś +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathew Topper +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Boggess +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Cooper +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Williams +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Gilbert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Roeschke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Max Kanter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Odintsov
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Silverstein +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael-J-Ward +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mickaël Schoentgen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miguel Sánchez de León Peque +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ming Li
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitch Negus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monson Shao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moonsoo Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mortada Mehyar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Myles Braithwaite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nehil Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicholas Musolino +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Dickreuter +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikhil Kumar Mengani +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikoleta Glynatsi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ondrej Kokes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pablo Ambrosio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pamela Wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parfait G +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick Park +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Ganssle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Reidy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul van Mulbregt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phillip Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piyush Aggarwal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prabakaran Kumaresshan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulkit Maloo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pyry Kovanen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rajib Mitra +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redonnet Louis +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rhys Parry +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rick +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roei.r +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RomainSa +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roman Imankulov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roman Yurchak +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruijing Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan Nazareth +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rüdiger Busche +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEUNG HOON, SHIN +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sandrine Pataut +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sangwoong Yoon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Santosh Kumar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saurav Chakravorty +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scott McAllister +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sean Chan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadi Akiki +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shengpu Tang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shirish Kadam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Hawkins +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Riddell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simone Basso
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soyoun(Rose) Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Srinivas Reddy Thatiparthy (శ్రీనివాస్ రెడ్డి తాటిపర్తి) +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefaan Lippens +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefano Cianciulli
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefano Miccoli +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Childs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Pascoe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Baker +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Cook +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Dower +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stéphan Taljaard +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sumin Byeon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sören +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tamas Nagy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tanya Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tarbo Fukazawa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thein Oo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thiago Cordeiro da Fonseca +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thierry Moisan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thiviyan Thanapalasingam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas Lentali +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim D. Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim Swast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomasz Kluczkowski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tony Tao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triple0 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troels Nielsen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuhin Mahmud +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uddeshya Singh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uwe L. Korn +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vadym Barda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Varad Gunjal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victor Maryama +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victor Villas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vincent La
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vitória Helena +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vu Le
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vyom Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weiwen Gu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wenhuan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wes Turner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wil Tan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: William Ayd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yeojin Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yitzhak Andrade +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuecheng Wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuliya Dovzhenko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yury Bayda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zac Hatfield-Dodds +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aberres +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aeltanawy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ailchau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alimcmaster1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alphaCTzo7G +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amphy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: araraonline +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: azure-pipelines[bot] +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: benarthur91 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bk521234 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cgangwar11 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cxl923cc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dahlbaek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dannyhyunkim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: darke-spirits +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: david-liu-brattle-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: davidmvalente +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deflatSOCO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: doosik_bae +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dylanchase +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eduardo naufel schettino +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: euri10 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: evangelineliu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fengyqf +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fjdiod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fl4p +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fleimgruber +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: h-vetinari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: harisbal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: henriqueribeiro +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: himanshu awasthi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hongshaoyang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: igorfassen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jalazbe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jbrockmendel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jh-wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justinchan23 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: louispotok
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: marcosrullan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: miker985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nicolab100 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nprad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nsuresh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ottiP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pajachiet +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raguiar2 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ratijas +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: realead +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: robbuckley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: saurav2608 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sideeye +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ssikdar1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: svenharris +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syutbai +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testvinder +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thatneat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tmnhat2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tomascassidy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tomneep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: topper-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vkk800 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: winlu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ym-pett +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: yrhooke +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ywpark1 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zertrin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zhezherun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Optional integer NA support'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has gained the ability to hold integer dtypes with missing values. This
    long requested feature is enabled through the use of [extension types](../development/extending.html#extending-extension-types).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IntegerArray is currently experimental. Its API or implementation may change
    without warning.
  prefs: []
  type: TYPE_NORMAL
- en: We can construct a `Series` with the specified dtype. The dtype string `Int64`
    is a pandas `ExtensionDtype`. Specifying a list or array using the traditional
    missing value marker of `np.nan` will infer to integer dtype. The display of the
    `Series` will also use the `NaN` to indicate missing values in string outputs.
    ([GH 20700](https://github.com/pandas-dev/pandas/issues/20700), [GH 20747](https://github.com/pandas-dev/pandas/issues/20747),
    [GH 22441](https://github.com/pandas-dev/pandas/issues/22441), [GH 21789](https://github.com/pandas-dev/pandas/issues/21789),
    [GH 22346](https://github.com/pandas-dev/pandas/issues/22346))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Operations on these dtypes will propagate `NaN` as other pandas operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can operate as part of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can be merged, reshaped, and casted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Reduction and groupby operations such as `sum` work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The Integer NA support currently uses the capitalized dtype version, e.g. `Int8`
    as compared to the traditional `int8`. This may be changed at a future date.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Nullable integer data type](../user_guide/integer_na.html#integer-na)
    for more.  ### Accessing the values in a Series or Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") and `Index.array` have been added for extracting the array
    backing a `Series` or `Index`. ([GH 19954](https://github.com/pandas-dev/pandas/issues/19954),
    [GH 23623](https://github.com/pandas-dev/pandas/issues/23623))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Historically, this would have been done with `series.values`, but with `.values`
    it was unclear whether the returned value would be the actual array, some transformation
    of it, or one of pandas custom arrays (like `Categorical`). For example, with
    [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex"),
    `.values` generates a new ndarray of period objects each time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: If you need an actual NumPy array, use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") or `Index.to_numpy()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: For Series and Indexes backed by normal NumPy arrays, [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will return a new `arrays.PandasArray`, which is a thin
    (no-copy) wrapper around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). `PandasArray` isn’t especially useful on its own, but it
    does provide the same interface as any extension array defined in pandas or by
    a third-party library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: We haven’t removed or deprecated [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") or [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values"), but we highly recommend and using `.array` or `.to_numpy()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.  ### `pandas.array`: a
    new top-level method for creating arrays'
  prefs: []
  type: TYPE_NORMAL
- en: A new top-level method [`array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") has been added for creating 1-dimensional arrays ([GH 22860](https://github.com/pandas-dev/pandas/issues/22860)).
    This can be used to create any [extension array](../development/extending.html#extending-extension-types),
    including extension arrays registered by [3rd party libraries](https://pandas.pydata.org/community/ecosystem.html).
    See the [dtypes docs](../user_guide/basics.html#basics-dtypes) for more on extension
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Passing data for which there isn’t dedicated extension type (e.g. float, integer,
    etc.) will return a new `arrays.PandasArray`, which is just a thin (no-copy) wrapper
    around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") that satisfies the pandas extension array interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: On their own, a `PandasArray` isn’t a very useful object. But if you need write
    low-level code that works generically for any [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), `PandasArray` satisfies that need.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that by default, if no `dtype` is specified, the dtype of the returned
    array is inferred from the data. In particular, note that the first example of
    `[1, 2, np.nan]` would have returned a floating-point array, since `NaN` is a
    float.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]  ### Storing Interval and Period data in Series and DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    and [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    data may now be stored in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), in addition to an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") like previously ([GH 19453](https://github.com/pandas-dev/pandas/issues/19453),
    [GH 22862](https://github.com/pandas-dev/pandas/issues/22862)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'For periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Previously, these would be cast to a NumPy array with object dtype. In general,
    this should result in better performance when storing an array of intervals or
    periods in a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") to extract the underlying array of intervals or periods
    from the `Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: These return an instance of [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") or [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"), the new extension arrays that back interval and
    period data.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compatibility, [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") continues to return a NumPy array of objects for Interval
    and Period data. We recommend using [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") when you need the array of data stored in the `Series`,
    and [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") when you know you need a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: 'See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.  ### Joining with two
    multi-indexes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") and [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") can now be used to join multi-indexed `Dataframe` instances
    on the overlapping index levels ([GH 6360](https://github.com/pandas-dev/pandas/issues/6360))'
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merge, join, and concatenate](../user_guide/merging.html#merging-join-with-two-multi-indexes)
    documentation section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: For earlier versions this can be done using the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]  ### Function `read_html` enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    previously ignored `colspan` and `rowspan` attributes. Now it understands them,
    treating them as sequences of cells with the same value. ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: New `Styler.pipe()` method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") class has gained a [`pipe()`](../reference/api/pandas.io.formats.style.Styler.pipe.html#pandas.io.formats.style.Styler.pipe
    "pandas.io.formats.style.Styler.pipe") method. This provides a convenient way
    to apply users’ predefined styling functions, and can help reduce “boilerplate”
    when using DataFrame styling functionality repeatedly within a notebook. ([GH
    23229](https://github.com/pandas-dev/pandas/issues/23229))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Similar methods already exist for other classes in pandas, including [`DataFrame.pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe"), `GroupBy.pipe()`, and [`Resampler.pipe()`](../reference/api/pandas.core.resample.Resampler.pipe.html#pandas.core.resample.Resampler.pipe
    "pandas.core.resample.Resampler.pipe").
  prefs: []
  type: TYPE_NORMAL
- en: '### Renaming names in a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") now supports `index` and `columns` arguments and
    [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") supports `index` argument ([GH 19978](https://github.com/pandas-dev/pandas/issues/19978)).'
  prefs: []
  type: TYPE_NORMAL
- en: This change allows a dictionary to be passed so that some of the names of a
    `MultiIndex` can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'See the [Advanced documentation on renaming](../user_guide/advanced.html#advanced-index-names)
    for more details.  ### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    now directly allows merge between objects of type `DataFrame` and named `Series`,
    without the need to convert the `Series` object into a `DataFrame` beforehand
    ([GH 21220](https://github.com/pandas-dev/pandas/issues/21220))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcelWriter` now accepts `mode` as a keyword argument, enabling append to
    existing workbooks when using the `openpyxl` engine ([GH 3441](https://github.com/pandas-dev/pandas/issues/3441))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrozenList` has gained the `.union()` and `.difference()` methods. This functionality
    greatly simplifies groupby’s that rely on explicitly excluding certain columns.
    See [Splitting an object into groups](../user_guide/groupby.html#groupby-split)
    for more information ([GH 15475](https://github.com/pandas-dev/pandas/issues/15475),
    [GH 15506](https://github.com/pandas-dev/pandas/issues/15506)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now accepts `index` as an argument, allowing the
    user to override the engine’s default behavior to include or omit the dataframe’s
    indexes from the resulting Parquet file. ([GH 20768](https://github.com/pandas-dev/pandas/issues/20768))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") now accepts `columns` as an argument, allowing the user
    to specify which columns should be read. ([GH 24025](https://github.com/pandas-dev/pandas/issues/24025))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now accept a callable for generic calculation methods of
    correlation, e.g. histogram intersection ([GH 22684](https://github.com/pandas-dev/pandas/issues/22684))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") now accepts `decimal` as an argument, allowing the
    user to specify which decimal separator should be used in the output. ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now accepts `render_links` as an argument, allowing
    the user to generate HTML with links to any URLs that appear in the DataFrame.
    See the [section on writing HTML](../user_guide/io.html#io-html) in the IO docs
    for example usage. ([GH 2679](https://github.com/pandas-dev/pandas/issues/2679))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") now supports pandas extension types as an argument to `dtype`,
    allowing the user to use pandas extension types when reading CSVs. ([GH 23228](https://github.com/pandas-dev/pandas/issues/23228))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`shift()`](../reference/api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift") method now accepts `fill_value` as an argument, allowing
    the user to specify a value which will be used instead of NA/NaT in the empty
    periods. ([GH 15486](https://github.com/pandas-dev/pandas/issues/15486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now supports the `%Z` and `%z` directive when passed into
    `format` ([GH 13486](https://github.com/pandas-dev/pandas/issues/13486))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.mode()`](../reference/api/pandas.Series.mode.html#pandas.Series.mode
    "pandas.Series.mode") and [`DataFrame.mode()`](../reference/api/pandas.DataFrame.mode.html#pandas.DataFrame.mode
    "pandas.DataFrame.mode") now support the `dropna` parameter which can be used
    to specify whether `NaN`/`NaT` values should be considered ([GH 17534](https://github.com/pandas-dev/pandas/issues/17534))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") and [`Series.to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv") now support the `compression` keyword when a file handle
    is passed. ([GH 21227](https://github.com/pandas-dev/pandas/issues/21227))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.droplevel()`](../reference/api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel") is now implemented also for flat indexes, for compatibility
    with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") ([GH 21115](https://github.com/pandas-dev/pandas/issues/21115))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.droplevel()`](../reference/api/pandas.Series.droplevel.html#pandas.Series.droplevel
    "pandas.Series.droplevel") and [`DataFrame.droplevel()`](../reference/api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel") are now implemented ([GH 20342](https://github.com/pandas-dev/pandas/issues/20342))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reading from/writing to Google Cloud Storage via the `gcsfs`
    library ([GH 19454](https://github.com/pandas-dev/pandas/issues/19454), [GH 23094](https://github.com/pandas-dev/pandas/issues/23094))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") and [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq
    "pandas.read_gbq") signature and documentation updated to reflect changes from
    the [pandas-gbq library version 0.8.0](https://pandas-gbq.readthedocs.io/en/latest/changelog.html#changelog-0-8-0).
    Adds a `credentials` argument, which enables the use of any kind of [google-auth
    credentials](https://google-auth.readthedocs.io/en/latest/). ([GH 21627](https://github.com/pandas-dev/pandas/issues/21627),
    [GH 22557](https://github.com/pandas-dev/pandas/issues/22557), [GH 23662](https://github.com/pandas-dev/pandas/issues/23662))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method [`HDFStore.walk()`](../reference/api/pandas.HDFStore.walk.html#pandas.HDFStore.walk
    "pandas.HDFStore.walk") will recursively walk the group hierarchy of an HDF5 file
    ([GH 10932](https://github.com/pandas-dev/pandas/issues/10932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    copies cell data across `colspan` and `rowspan`, and it treats all-`th` table
    rows as headers if `header` kwarg is not given and there is no `thead` ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest"), [`Series.nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest"), [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest"), and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now accept the value `"all"` for the `keep` argument.
    This keeps all ties for the nth largest/smallest value ([GH 16818](https://github.com/pandas-dev/pandas/issues/16818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`set_closed()`](../reference/api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed") method to change the existing `closed` value
    ([GH 21670](https://github.com/pandas-dev/pandas/issues/21670))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv"), [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), and [`to_json()`](../reference/api/pandas.Series.to_json.html#pandas.Series.to_json
    "pandas.Series.to_json") now support `compression=''infer''` to infer compression
    based on filename extension ([GH 15008](https://github.com/pandas-dev/pandas/issues/15008)).
    The default compression for `to_csv`, `to_json`, and `to_pickle` methods has been
    updated to `''infer''` ([GH 22004](https://github.com/pandas-dev/pandas/issues/22004)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") now supports writing `TIMESTAMP WITH TIME ZONE` types
    for supported databases. For databases that don’t support timezones, datetime
    data will be stored as timezone unaware local timestamps. See the [Datetime data
    types](../user_guide/io.html#io-sql-datetime-data) for implications ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") now supports iso-formatted timedelta strings ([GH 21877](https://github.com/pandas-dev/pandas/issues/21877))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    now support `Iterable` objects in the constructor ([GH 2193](https://github.com/pandas-dev/pandas/issues/2193))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") has gained the [`DatetimeIndex.timetz`](../reference/api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") attribute. This returns the local time with timezone
    information. ([GH 21358](https://github.com/pandas-dev/pandas/issues/21358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), and [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor") for [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") now support an `ambiguous` argument for handling datetimes
    that are rounded to ambiguous times ([GH 18946](https://github.com/pandas-dev/pandas/issues/18946))
    and a `nonexistent` argument for handling datetimes that are rounded to nonexistent
    times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 22647](https://github.com/pandas-dev/pandas/issues/22647))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") is now iterable similar to `groupby()` ([GH 15314](https://github.com/pandas-dev/pandas/issues/15314)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") and [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") have gained the [`Resampler.quantile()`](../reference/api/pandas.core.resample.Resampler.quantile.html#pandas.core.resample.Resampler.quantile
    "pandas.core.resample.Resampler.quantile") ([GH 15023](https://github.com/pandas-dev/pandas/issues/15023)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") with a [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") will now respect the `base` argument in the same fashion
    as with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). ([GH 23882](https://github.com/pandas-dev/pandas/issues/23882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.api.types.is_list_like()`](../reference/api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like") has gained a keyword `allow_sets` which is `True`
    by default; if `False`, all instances of `set` will not be considered “list-like”
    anymore ([GH 23061](https://github.com/pandas-dev/pandas/issues/23061))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.to_frame()`](../reference/api/pandas.Index.to_frame.html#pandas.Index.to_frame
    "pandas.Index.to_frame") now supports overriding column name(s) ([GH 22580](https://github.com/pandas-dev/pandas/issues/22580)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") now can take a `dtype` parameter as an alternative
    to passing `categories` and `ordered` ([GH 24398](https://github.com/pandas-dev/pandas/issues/24398)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New attribute `__git_version__` will return git commit sha of current build
    ([GH 21295](https://github.com/pandas-dev/pandas/issues/21295)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with Matplotlib 3.0 ([GH 22790](https://github.com/pandas-dev/pandas/issues/22790)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`Interval.overlaps()`](../reference/api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps"), [`arrays.IntervalArray.overlaps()`](../reference/api/pandas.arrays.IntervalArray.overlaps.html#pandas.arrays.IntervalArray.overlaps
    "pandas.arrays.IntervalArray.overlaps"), and [`IntervalIndex.overlaps()`](../reference/api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps") for determining overlaps between interval-like
    objects ([GH 21998](https://github.com/pandas-dev/pandas/issues/21998))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")
    now accepts keyword `infer_nrows` ([GH 15138](https://github.com/pandas-dev/pandas/issues/15138)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now supports writing a `DataFrame` as a directory
    of parquet files partitioned by a subset of the columns when `engine = ''pyarrow''`
    ([GH 23283](https://github.com/pandas-dev/pandas/issues/23283))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"), [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize"), and [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") have gained the `nonexistent` argument for alternative
    handling of nonexistent times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 8917](https://github.com/pandas-dev/pandas/issues/8917), [GH 24466](https://github.com/pandas-dev/pandas/issues/24466))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.difference()`](../reference/api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference"), [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection"), [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union"), and [`Index.symmetric_difference()`](../reference/api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference") now have an optional `sort` parameter to
    control whether the results should be sorted if possible ([GH 17839](https://github.com/pandas-dev/pandas/issues/17839),
    [GH 24471](https://github.com/pandas-dev/pandas/issues/24471))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now accepts `usecols` as a list of column names or callable
    ([GH 18273](https://github.com/pandas-dev/pandas/issues/18273))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.to_flat_index()`](../reference/api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index") has been added to flatten multiple levels into
    a single-level [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` can write mixed
    string columns to Stata strl format ([GH 23633](https://github.com/pandas-dev/pandas/issues/23633))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.between_time()`](../reference/api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time") and [`DataFrame.at_time()`](../reference/api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time") have gained the `axis` parameter ([GH 8839](https://github.com/pandas-dev/pandas/issues/8839))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_records()`](../reference/api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records") now accepts `index_dtypes` and `column_dtypes`
    parameters to allow different data types in stored column and index records ([GH
    18146](https://github.com/pandas-dev/pandas/issues/18146))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`is_overlapping`](../reference/api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") attribute to indicate if the `IntervalIndex`
    contains any overlapping intervals ([GH 23309](https://github.com/pandas-dev/pandas/issues/23309))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") has gained the `method` argument to control SQL insertion
    clause. See the [insertion method](../user_guide/io.html#io-sql-method) section
    in the documentation. ([GH 8953](https://github.com/pandas-dev/pandas/issues/8953))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corrwith()`](../reference/api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith") now supports Spearman’s rank correlation, Kendall’s
    tau as well as callable correlation methods. ([GH 21925](https://github.com/pandas-dev/pandas/issues/21925))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle"), and other export methods now support tilde(~) in
    path argument. ([GH 23473](https://github.com/pandas-dev/pandas/issues/23473))  ###
    Optional integer NA support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas has gained the ability to hold integer dtypes with missing values. This
    long requested feature is enabled through the use of [extension types](../development/extending.html#extending-extension-types).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IntegerArray is currently experimental. Its API or implementation may change
    without warning.
  prefs: []
  type: TYPE_NORMAL
- en: We can construct a `Series` with the specified dtype. The dtype string `Int64`
    is a pandas `ExtensionDtype`. Specifying a list or array using the traditional
    missing value marker of `np.nan` will infer to integer dtype. The display of the
    `Series` will also use the `NaN` to indicate missing values in string outputs.
    ([GH 20700](https://github.com/pandas-dev/pandas/issues/20700), [GH 20747](https://github.com/pandas-dev/pandas/issues/20747),
    [GH 22441](https://github.com/pandas-dev/pandas/issues/22441), [GH 21789](https://github.com/pandas-dev/pandas/issues/21789),
    [GH 22346](https://github.com/pandas-dev/pandas/issues/22346))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Operations on these dtypes will propagate `NaN` as other pandas operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can operate as part of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can be merged, reshaped, and casted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Reduction and groupby operations such as `sum` work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The Integer NA support currently uses the capitalized dtype version, e.g. `Int8`
    as compared to the traditional `int8`. This may be changed at a future date.
  prefs: []
  type: TYPE_NORMAL
- en: See [Nullable integer data type](../user_guide/integer_na.html#integer-na) for
    more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Accessing the values in a Series or Index'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") and `Index.array` have been added for extracting the array
    backing a `Series` or `Index`. ([GH 19954](https://github.com/pandas-dev/pandas/issues/19954),
    [GH 23623](https://github.com/pandas-dev/pandas/issues/23623))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Historically, this would have been done with `series.values`, but with `.values`
    it was unclear whether the returned value would be the actual array, some transformation
    of it, or one of pandas custom arrays (like `Categorical`). For example, with
    [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex"),
    `.values` generates a new ndarray of period objects each time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: If you need an actual NumPy array, use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") or `Index.to_numpy()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: For Series and Indexes backed by normal NumPy arrays, [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will return a new `arrays.PandasArray`, which is a thin
    (no-copy) wrapper around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). `PandasArray` isn’t especially useful on its own, but it
    does provide the same interface as any extension array defined in pandas or by
    a third-party library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: We haven’t removed or deprecated [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") or [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values"), but we highly recommend and using `.array` or `.to_numpy()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### `pandas.array`: a new top-level method for creating arrays'
  prefs: []
  type: TYPE_NORMAL
- en: A new top-level method [`array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") has been added for creating 1-dimensional arrays ([GH 22860](https://github.com/pandas-dev/pandas/issues/22860)).
    This can be used to create any [extension array](../development/extending.html#extending-extension-types),
    including extension arrays registered by [3rd party libraries](https://pandas.pydata.org/community/ecosystem.html).
    See the [dtypes docs](../user_guide/basics.html#basics-dtypes) for more on extension
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Passing data for which there isn’t dedicated extension type (e.g. float, integer,
    etc.) will return a new `arrays.PandasArray`, which is just a thin (no-copy) wrapper
    around a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") that satisfies the pandas extension array interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: On their own, a `PandasArray` isn’t a very useful object. But if you need write
    low-level code that works generically for any [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), `PandasArray` satisfies that need.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that by default, if no `dtype` is specified, the dtype of the returned
    array is inferred from the data. In particular, note that the first example of
    `[1, 2, np.nan]` would have returned a floating-point array, since `NaN` is a
    float.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '### Storing Interval and Period data in Series and DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    and [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    data may now be stored in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), in addition to an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") like previously ([GH 19453](https://github.com/pandas-dev/pandas/issues/19453),
    [GH 22862](https://github.com/pandas-dev/pandas/issues/22862)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'For periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Previously, these would be cast to a NumPy array with object dtype. In general,
    this should result in better performance when storing an array of intervals or
    periods in a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") to extract the underlying array of intervals or periods
    from the `Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: These return an instance of [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") or [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"), the new extension arrays that back interval and
    period data.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compatibility, [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") continues to return a NumPy array of objects for Interval
    and Period data. We recommend using [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") when you need the array of data stored in the `Series`,
    and [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") when you know you need a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: See [Dtypes](../user_guide/basics.html#basics-dtypes) and [Attributes and Underlying
    Data](../user_guide/basics.html#basics-attrs) for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Joining with two multi-indexes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") and [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") can now be used to join multi-indexed `Dataframe` instances
    on the overlapping index levels ([GH 6360](https://github.com/pandas-dev/pandas/issues/6360))'
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merge, join, and concatenate](../user_guide/merging.html#merging-join-with-two-multi-indexes)
    documentation section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: For earlier versions this can be done using the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '### Function `read_html` enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    previously ignored `colspan` and `rowspan` attributes. Now it understands them,
    treating them as sequences of cells with the same value. ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: New `Styler.pipe()` method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") class has gained a [`pipe()`](../reference/api/pandas.io.formats.style.Styler.pipe.html#pandas.io.formats.style.Styler.pipe
    "pandas.io.formats.style.Styler.pipe") method. This provides a convenient way
    to apply users’ predefined styling functions, and can help reduce “boilerplate”
    when using DataFrame styling functionality repeatedly within a notebook. ([GH
    23229](https://github.com/pandas-dev/pandas/issues/23229))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Similar methods already exist for other classes in pandas, including [`DataFrame.pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe"), `GroupBy.pipe()`, and [`Resampler.pipe()`](../reference/api/pandas.core.resample.Resampler.pipe.html#pandas.core.resample.Resampler.pipe
    "pandas.core.resample.Resampler.pipe").
  prefs: []
  type: TYPE_NORMAL
- en: '### Renaming names in a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") now supports `index` and `columns` arguments and
    [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") supports `index` argument ([GH 19978](https://github.com/pandas-dev/pandas/issues/19978)).'
  prefs: []
  type: TYPE_NORMAL
- en: This change allows a dictionary to be passed so that some of the names of a
    `MultiIndex` can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See the [Advanced documentation on renaming](../user_guide/advanced.html#advanced-index-names)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    now directly allows merge between objects of type `DataFrame` and named `Series`,
    without the need to convert the `Series` object into a `DataFrame` beforehand
    ([GH 21220](https://github.com/pandas-dev/pandas/issues/21220))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExcelWriter` now accepts `mode` as a keyword argument, enabling append to
    existing workbooks when using the `openpyxl` engine ([GH 3441](https://github.com/pandas-dev/pandas/issues/3441))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrozenList` has gained the `.union()` and `.difference()` methods. This functionality
    greatly simplifies groupby’s that rely on explicitly excluding certain columns.
    See [Splitting an object into groups](../user_guide/groupby.html#groupby-split)
    for more information ([GH 15475](https://github.com/pandas-dev/pandas/issues/15475),
    [GH 15506](https://github.com/pandas-dev/pandas/issues/15506)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now accepts `index` as an argument, allowing the
    user to override the engine’s default behavior to include or omit the dataframe’s
    indexes from the resulting Parquet file. ([GH 20768](https://github.com/pandas-dev/pandas/issues/20768))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") now accepts `columns` as an argument, allowing the user
    to specify which columns should be read. ([GH 24025](https://github.com/pandas-dev/pandas/issues/24025))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now accept a callable for generic calculation methods of
    correlation, e.g. histogram intersection ([GH 22684](https://github.com/pandas-dev/pandas/issues/22684))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") now accepts `decimal` as an argument, allowing the
    user to specify which decimal separator should be used in the output. ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now accepts `render_links` as an argument, allowing
    the user to generate HTML with links to any URLs that appear in the DataFrame.
    See the [section on writing HTML](../user_guide/io.html#io-html) in the IO docs
    for example usage. ([GH 2679](https://github.com/pandas-dev/pandas/issues/2679))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") now supports pandas extension types as an argument to `dtype`,
    allowing the user to use pandas extension types when reading CSVs. ([GH 23228](https://github.com/pandas-dev/pandas/issues/23228))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`shift()`](../reference/api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift") method now accepts `fill_value` as an argument, allowing
    the user to specify a value which will be used instead of NA/NaT in the empty
    periods. ([GH 15486](https://github.com/pandas-dev/pandas/issues/15486))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now supports the `%Z` and `%z` directive when passed into
    `format` ([GH 13486](https://github.com/pandas-dev/pandas/issues/13486))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.mode()`](../reference/api/pandas.Series.mode.html#pandas.Series.mode
    "pandas.Series.mode") and [`DataFrame.mode()`](../reference/api/pandas.DataFrame.mode.html#pandas.DataFrame.mode
    "pandas.DataFrame.mode") now support the `dropna` parameter which can be used
    to specify whether `NaN`/`NaT` values should be considered ([GH 17534](https://github.com/pandas-dev/pandas/issues/17534))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") and [`Series.to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv") now support the `compression` keyword when a file handle
    is passed. ([GH 21227](https://github.com/pandas-dev/pandas/issues/21227))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.droplevel()`](../reference/api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel") is now implemented also for flat indexes, for compatibility
    with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") ([GH 21115](https://github.com/pandas-dev/pandas/issues/21115))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.droplevel()`](../reference/api/pandas.Series.droplevel.html#pandas.Series.droplevel
    "pandas.Series.droplevel") and [`DataFrame.droplevel()`](../reference/api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel") are now implemented ([GH 20342](https://github.com/pandas-dev/pandas/issues/20342))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for reading from/writing to Google Cloud Storage via the `gcsfs`
    library ([GH 19454](https://github.com/pandas-dev/pandas/issues/19454), [GH 23094](https://github.com/pandas-dev/pandas/issues/23094))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") and [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq
    "pandas.read_gbq") signature and documentation updated to reflect changes from
    the [pandas-gbq library version 0.8.0](https://pandas-gbq.readthedocs.io/en/latest/changelog.html#changelog-0-8-0).
    Adds a `credentials` argument, which enables the use of any kind of [google-auth
    credentials](https://google-auth.readthedocs.io/en/latest/). ([GH 21627](https://github.com/pandas-dev/pandas/issues/21627),
    [GH 22557](https://github.com/pandas-dev/pandas/issues/22557), [GH 23662](https://github.com/pandas-dev/pandas/issues/23662))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method [`HDFStore.walk()`](../reference/api/pandas.HDFStore.walk.html#pandas.HDFStore.walk
    "pandas.HDFStore.walk") will recursively walk the group hierarchy of an HDF5 file
    ([GH 10932](https://github.com/pandas-dev/pandas/issues/10932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    copies cell data across `colspan` and `rowspan`, and it treats all-`th` table
    rows as headers if `header` kwarg is not given and there is no `thead` ([GH 17054](https://github.com/pandas-dev/pandas/issues/17054))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest"), [`Series.nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest"), [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest"), and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now accept the value `"all"` for the `keep` argument.
    This keeps all ties for the nth largest/smallest value ([GH 16818](https://github.com/pandas-dev/pandas/issues/16818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`set_closed()`](../reference/api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed") method to change the existing `closed` value
    ([GH 21670](https://github.com/pandas-dev/pandas/issues/21670))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv"), [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), and [`to_json()`](../reference/api/pandas.Series.to_json.html#pandas.Series.to_json
    "pandas.Series.to_json") now support `compression=''infer''` to infer compression
    based on filename extension ([GH 15008](https://github.com/pandas-dev/pandas/issues/15008)).
    The default compression for `to_csv`, `to_json`, and `to_pickle` methods has been
    updated to `''infer''` ([GH 22004](https://github.com/pandas-dev/pandas/issues/22004)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") now supports writing `TIMESTAMP WITH TIME ZONE` types
    for supported databases. For databases that don’t support timezones, datetime
    data will be stored as timezone unaware local timestamps. See the [Datetime data
    types](../user_guide/io.html#io-sql-datetime-data) for implications ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") now supports iso-formatted timedelta strings ([GH 21877](https://github.com/pandas-dev/pandas/issues/21877))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    now support `Iterable` objects in the constructor ([GH 2193](https://github.com/pandas-dev/pandas/issues/2193))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") has gained the [`DatetimeIndex.timetz`](../reference/api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") attribute. This returns the local time with timezone
    information. ([GH 21358](https://github.com/pandas-dev/pandas/issues/21358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), and [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor") for [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") now support an `ambiguous` argument for handling datetimes
    that are rounded to ambiguous times ([GH 18946](https://github.com/pandas-dev/pandas/issues/18946))
    and a `nonexistent` argument for handling datetimes that are rounded to nonexistent
    times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 22647](https://github.com/pandas-dev/pandas/issues/22647))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") is now iterable similar to `groupby()` ([GH 15314](https://github.com/pandas-dev/pandas/issues/15314)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") and [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") have gained the [`Resampler.quantile()`](../reference/api/pandas.core.resample.Resampler.quantile.html#pandas.core.resample.Resampler.quantile
    "pandas.core.resample.Resampler.quantile") ([GH 15023](https://github.com/pandas-dev/pandas/issues/15023)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") with a [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") will now respect the `base` argument in the same fashion
    as with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). ([GH 23882](https://github.com/pandas-dev/pandas/issues/23882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.api.types.is_list_like()`](../reference/api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like") has gained a keyword `allow_sets` which is `True`
    by default; if `False`, all instances of `set` will not be considered “list-like”
    anymore ([GH 23061](https://github.com/pandas-dev/pandas/issues/23061))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.to_frame()`](../reference/api/pandas.Index.to_frame.html#pandas.Index.to_frame
    "pandas.Index.to_frame") now supports overriding column name(s) ([GH 22580](https://github.com/pandas-dev/pandas/issues/22580)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") now can take a `dtype` parameter as an alternative
    to passing `categories` and `ordered` ([GH 24398](https://github.com/pandas-dev/pandas/issues/24398)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New attribute `__git_version__` will return git commit sha of current build
    ([GH 21295](https://github.com/pandas-dev/pandas/issues/21295)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with Matplotlib 3.0 ([GH 22790](https://github.com/pandas-dev/pandas/issues/22790)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`Interval.overlaps()`](../reference/api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps"), [`arrays.IntervalArray.overlaps()`](../reference/api/pandas.arrays.IntervalArray.overlaps.html#pandas.arrays.IntervalArray.overlaps
    "pandas.arrays.IntervalArray.overlaps"), and [`IntervalIndex.overlaps()`](../reference/api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps") for determining overlaps between interval-like
    objects ([GH 21998](https://github.com/pandas-dev/pandas/issues/21998))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")
    now accepts keyword `infer_nrows` ([GH 15138](https://github.com/pandas-dev/pandas/issues/15138)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") now supports writing a `DataFrame` as a directory
    of parquet files partitioned by a subset of the columns when `engine = ''pyarrow''`
    ([GH 23283](https://github.com/pandas-dev/pandas/issues/23283))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"), [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize"), and [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") have gained the `nonexistent` argument for alternative
    handling of nonexistent times. See [Nonexistent times when localizing](../user_guide/timeseries.html#timeseries-timezone-nonexistent)
    ([GH 8917](https://github.com/pandas-dev/pandas/issues/8917), [GH 24466](https://github.com/pandas-dev/pandas/issues/24466))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.difference()`](../reference/api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference"), [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection"), [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union"), and [`Index.symmetric_difference()`](../reference/api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference") now have an optional `sort` parameter to
    control whether the results should be sorted if possible ([GH 17839](https://github.com/pandas-dev/pandas/issues/17839),
    [GH 24471](https://github.com/pandas-dev/pandas/issues/24471))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now accepts `usecols` as a list of column names or callable
    ([GH 18273](https://github.com/pandas-dev/pandas/issues/18273))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.to_flat_index()`](../reference/api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index") has been added to flatten multiple levels into
    a single-level [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` can write mixed
    string columns to Stata strl format ([GH 23633](https://github.com/pandas-dev/pandas/issues/23633))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.between_time()`](../reference/api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time") and [`DataFrame.at_time()`](../reference/api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time") have gained the `axis` parameter ([GH 8839](https://github.com/pandas-dev/pandas/issues/8839))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_records()`](../reference/api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records") now accepts `index_dtypes` and `column_dtypes`
    parameters to allow different data types in stored column and index records ([GH
    18146](https://github.com/pandas-dev/pandas/issues/18146))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") has gained the [`is_overlapping`](../reference/api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") attribute to indicate if the `IntervalIndex`
    contains any overlapping intervals ([GH 23309](https://github.com/pandas-dev/pandas/issues/23309))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") has gained the `method` argument to control SQL insertion
    clause. See the [insertion method](../user_guide/io.html#io-sql-method) section
    in the documentation. ([GH 8953](https://github.com/pandas-dev/pandas/issues/8953))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corrwith()`](../reference/api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith") now supports Spearman’s rank correlation, Kendall’s
    tau as well as callable correlation methods. ([GH 21925](https://github.com/pandas-dev/pandas/issues/21925))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json"), [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle"), and other export methods now support tilde(~) in
    path argument. ([GH 23473](https://github.com/pandas-dev/pandas/issues/23473))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Backwards incompatible API changes'
  prefs: []
  type: TYPE_NORMAL
- en: pandas 0.24.0 includes a number of API breaking changes.
  prefs: []
  type: TYPE_NORMAL
- en: '### Increased minimum versions for dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 21242](https://github.com/pandas-dev/pandas/issues/21242),
    [GH 18742](https://github.com/pandas-dev/pandas/issues/18742), [GH 23774](https://github.com/pandas-dev/pandas/issues/23774),
    [GH 24767](https://github.com/pandas-dev/pandas/issues/24767)). If installed,
    we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| numpy | 1.12.0 | X |'
  prefs: []
  type: TYPE_TB
- en: '| bottleneck | 1.2.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 0.2.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 2.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| numexpr | 2.6.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.8.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 0.9.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytables | 3.4.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| scipy | 0.18.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 1.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytest (dev) | 3.6 |  |'
  prefs: []
  type: TYPE_TB
- en: 'Additionally we no longer depend on `feather-format` for feather based storage
    and replaced it with references to `pyarrow` ([GH 21639](https://github.com/pandas-dev/pandas/issues/21639)
    and [GH 23053](https://github.com/pandas-dev/pandas/issues/23053)).  ### `os.linesep`
    is used for `line_terminator` of `DataFrame.to_csv`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") now uses `os.linesep()` rather than `''\n''` for the
    default line terminator ([GH 20353](https://github.com/pandas-dev/pandas/issues/20353)).
    This change only affects when running on Windows, where `''\r\n''` was used for
    line terminator even when `''\n''` was passed in `line_terminator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing `line_terminator` explicitly, set the `line terminator` to that character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, the value of `os.linesep` is `'\r\n'`, so if `line_terminator` is
    not set, `'\r\n'` is used for line terminator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: For file objects, specifying `newline` is not sufficient to set the line terminator.
    You must pass in the `line_terminator` explicitly, even in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]  ### Proper handling of `np.nan` in a string data-typed column with
    the Python engine'
  prefs: []
  type: TYPE_NORMAL
- en: There was bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") and [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with the Python engine, where missing values turned to `'nan'`
    with `dtype=str` and `na_filter=True`. Now, these missing values are converted
    to the string missing indicator, `np.nan`. ([GH 20377](https://github.com/pandas-dev/pandas/issues/20377))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how we now instead output `np.nan` itself instead of a stringified form
    of it.  ### Parsing datetime strings with timezone offsets'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, parsing datetime strings with UTC offsets with [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would automatically convert the datetime to UTC without
    timezone localization. This is inconsistent from parsing the same datetime string
    with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    which would preserve the UTC offset in the `tz` attribute. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") preserves the UTC offset in the `tz` attribute when all
    the datetime strings have the same UTC offset ([GH 17697](https://github.com/pandas-dev/pandas/issues/17697),
    [GH 11736](https://github.com/pandas-dev/pandas/issues/11736), [GH 22457](https://github.com/pandas-dev/pandas/issues/22457))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with the same UTC offset will preserve the UTC offset
    in the `tz`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with different UTC offsets will now create an Index
    of `datetime.datetime` objects with different UTC offsets
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Passing `utc=True` will mimic the previous behavior but will correctly indicate
    that the dates have been converted to UTC
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]  ### Parsing mixed-timezones with [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    no longer silently converts mixed-timezone columns to UTC ([GH 24987](https://github.com/pandas-dev/pandas/issues/24987)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, the `dtype` is object; each value in the column is a string.
    To convert the strings to an array of datetimes, the `date_parser` argument
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'See [Parsing datetime strings with timezone offsets](#whatsnew-0240-api-timezone-offset-parsing)
    for more.  ### Time values in `dt.end_time` and `to_timestamp(how=''end'')`'
  prefs: []
  type: TYPE_NORMAL
- en: The time values in [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") objects are now set to ‘23:59:59.999999999’ when calling
    [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time"), [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), [`PeriodIndex.end_time`](../reference/api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time"), [`Period.to_timestamp()`](../reference/api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp") with `how='end'`, or [`PeriodIndex.to_timestamp()`](../reference/api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp") with `how='end'` ([GH 17157](https://github.com/pandas-dev/pandas/issues/17157))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") will now result in a time of ‘23:59:59.999999999’
    as is the case with [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), for example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]  ### Series.unique for timezone-aware data'
  prefs: []
  type: TYPE_NORMAL
- en: The return type of [`Series.unique()`](../reference/api/pandas.Series.unique.html#pandas.Series.unique
    "pandas.Series.unique") for datetime with timezone values has changed from an
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects to a [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]  ### Sparse data structure refactor'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray`, the array backing `SparseSeries` and the columns in a `SparseDataFrame`,
    is now an extension array ([GH 21978](https://github.com/pandas-dev/pandas/issues/21978),
    [GH 19056](https://github.com/pandas-dev/pandas/issues/19056), [GH 22835](https://github.com/pandas-dev/pandas/issues/22835)).
    To conform to this interface and for consistency with the rest of pandas, some
    API breaking changes were made:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray` is no longer a subclass of [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). To convert a `SparseArray` to a NumPy array, use [`numpy.asarray()`](https://numpy.org/doc/stable/reference/generated/numpy.asarray.html#numpy.asarray
    "(in NumPy v1.26)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.dtype` and `SparseSeries.dtype` are now instances of [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype"), rather than `np.dtype`. Access the underlying dtype with
    `SparseDtype.subtype`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.asarray(sparse_array)` now returns a dense array with all the values,
    not just the non-fill-value values ([GH 14167](https://github.com/pandas-dev/pandas/issues/14167))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.take` now matches the API of [`pandas.api.extensions.ExtensionArray.take()`](../reference/api/pandas.api.extensions.ExtensionArray.take.html#pandas.api.extensions.ExtensionArray.take
    "pandas.api.extensions.ExtensionArray.take") ([GH 19506](https://github.com/pandas-dev/pandas/issues/19506)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value of `allow_fill` has changed from `False` to `True`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `out` and `mode` parameters are now longer accepted (previously, this raised
    if they were specified).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a scalar for `indices` is no longer allowed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") with a mix of sparse and dense Series is a Series with sparse
    values, rather than a `SparseSeries`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseDataFrame.combine` and `DataFrame.combine_first` no longer supports
    combining a sparse column with a dense column while preserving the sparse subtype.
    The result will be an object-dtype SparseArray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `SparseArray.fill_value` to a fill value with a different dtype is now
    allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame[column]` is now a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values, rather than a `SparseSeries`, when slicing
    a single column with sparse values ([GH 23559](https://github.com/pandas-dev/pandas/issues/23559)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") is now a `Series` with sparse values, like with other extension
    arrays ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some new warnings are issued for operations that require or are likely to materialize
    a large dense array:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is issued when using fillna with a `method`,
    as a dense array is constructed to create the filled array. Filling with a `value`
    is the efficient way to fill a sparse array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is now issued when concatenating sparse Series
    with differing fill values. The fill value from the first sparse array continues
    to be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these API breaking changes, many [Performance Improvements and
    Bug Fixes have been made](#whatsnew-0240-bug-fixes-sparse).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a `Series.sparse` accessor was added to provide sparse-specific methods
    like [`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]  ### [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") always returns a DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when `sparse=True` was passed to [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies"), the return value could be either a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or a `SparseDataFrame`, depending on whether all or a just
    a subset of the columns were dummy-encoded. Now, a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is always returned ([GH 24284](https://github.com/pandas-dev/pandas/issues/24284)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") returns a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") because the column `A` is not dummy encoded. When just `["B",
    "C"]` are passed to `get_dummies`, then all the columns are dummy-encoded, and
    a `SparseDataFrame` was returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the return type is consistently a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s no difference in memory usage between a `SparseDataFrame` and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values. The memory usage will be the same as in
    the previous version of pandas.  ### Raise ValueError in `DataFrame.to_dict(orient=''index'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") raises `ValueError` when used with `orient='index'`
    and a non-unique index instead of losing data ([GH 22801](https://github.com/pandas-dev/pandas/issues/22801))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]  ### Tick DateOffset normalize restrictions'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `Tick` object (`Day`, `Hour`, `Minute`, `Second`, `Milli`, `Micro`,
    `Nano`) with `normalize=True` is no longer supported. This prevents unexpected
    behavior where addition could fail to be monotone or associative. ([GH 21427](https://github.com/pandas-dev/pandas/issues/21427))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]  ### Period subtraction'
  prefs: []
  type: TYPE_NORMAL
- en: Subtraction of a `Period` from another `Period` will give a `DateOffset`. instead
    of an integer ([GH 21314](https://github.com/pandas-dev/pandas/issues/21314))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, subtraction of a `Period` from a `PeriodIndex` will now return an
    `Index` of `DateOffset` objects instead of an `Int64Index`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]  ### Addition/subtraction of `NaN` from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: Adding or subtracting `NaN` from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column with `timedelta64[ns]` dtype will now raise a `TypeError`
    instead of returning all-`NaT`. This is for compatibility with `TimedeltaIndex`
    and `Series` behavior ([GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]  ### DataFrame comparison operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, the broadcasting behavior of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparison operations (`==`, `!=`, …) was inconsistent with
    the behavior of arithmetic operations (`+`, `-`, …). The behavior of the comparison
    operations has been changed to match the arithmetic operations in these cases.
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880))
  prefs: []
  type: TYPE_NORMAL
- en: 'The affected cases are:'
  prefs: []
  type: TYPE_NORMAL
- en: operating against a 2-dimensional `np.ndarray` with either 1 row or 1 column
    will now broadcast the same way a `np.ndarray` would ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of rows in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now raise `ValueError` instead of operating column-by-column
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of columns in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now operate row-by-row instead of raising `ValueError`
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]  ### DataFrame arithmetic operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    arithmetic operations when operating with 2-dimensional `np.ndarray` objects now
    broadcast in the same way as `np.ndarray` broadcast. ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]  ### Series and Index data-dtype incompatibilities'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` and `Index` constructors now raise when the data is incompatible with
    a passed `dtype=` ([GH 15832](https://github.com/pandas-dev/pandas/issues/15832))'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]  ### Concatenation changes'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") on a `Categorical` of ints with NA values now causes them to
    be processed as objects when concatenating with anything other than another `Categorical`
    of ints ([GH 19214](https://github.com/pandas-dev/pandas/issues/19214))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Datetimelike API changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") with non-`None` `freq` attribute, addition or subtraction
    of integer-dtyped array or `Index` will return an object of the same class ([GH
    19959](https://github.com/pandas-dev/pandas/issues/19959))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` objects are now immutable. Attempting to alter one of these will
    now raise `AttributeError` ([GH 21341](https://github.com/pandas-dev/pandas/issues/21341))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") subtraction of another `PeriodIndex` will now return an
    object-dtype [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    of `DateOffset` objects instead of raising a `TypeError` ([GH 20049](https://github.com/pandas-dev/pandas/issues/20049))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") now returns a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") bins when the input is datetime or timedelta dtype respectively
    and `retbins=True` ([GH 19891](https://github.com/pandas-dev/pandas/issues/19891))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") and [`Timestamp.to_period()`](../reference/api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period") will issue a warning when timezone information will
    be lost ([GH 21333](https://github.com/pandas-dev/pandas/issues/21333))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.tz_convert()` and `PeriodIndex.tz_localize()` have been removed
    ([GH 21781](https://github.com/pandas-dev/pandas/issues/21781))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: A newly constructed empty [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with integer as the `dtype` will now only be cast to `float64`
    if `index` is specified ([GH 22858](https://github.com/pandas-dev/pandas/issues/22858))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.str.cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") will now raise if `others` is a `set` ([GH 23009](https://github.com/pandas-dev/pandas/issues/23009))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing scalar values to [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") will now raise `TypeError` instead of `ValueError` ([GH
    23539](https://github.com/pandas-dev/pandas/issues/23539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_rows` and `max_cols` parameters removed from `HTMLFormatter` since truncation
    is handled by `DataFrameFormatter` ([GH 23818](https://github.com/pandas-dev/pandas/issues/23818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will now raise a `ValueError` if a column with missing values is declared as having
    dtype `bool` ([GH 20591](https://github.com/pandas-dev/pandas/issues/20591))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column order of the resultant [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") from [`MultiIndex.to_frame()`](../reference/api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame") is now guaranteed to match the [`MultiIndex.names`](../reference/api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") order. ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrectly passing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to [`MultiIndex.from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples"), rather than a sequence of tuples, now raises
    a `TypeError` rather than a `ValueError` ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.offsets.generate_range()` argument `time_rule` has been removed; use `offset`
    instead ([GH 24157](https://github.com/pandas-dev/pandas/issues/24157))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 0.23.x, pandas would raise a `ValueError` on a merge of a numeric column
    (e.g. `int` dtyped column) and an `object` dtyped column ([GH 9780](https://github.com/pandas-dev/pandas/issues/9780)).
    We have re-enabled the ability to merge `object` and other dtypes; pandas will
    still raise on a merge between a numeric and an `object` dtyped column that is
    composed only of strings ([GH 21681](https://github.com/pandas-dev/pandas/issues/21681))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a level of a `MultiIndex` with a duplicate name (e.g. in [`get_level_values()`](../reference/api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")) now raises a `ValueError` instead of a
    `KeyError` ([GH 21678](https://github.com/pandas-dev/pandas/issues/21678)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid construction of `IntervalDtype` will now always raise a `TypeError`
    rather than a `ValueError` if the subdtype is invalid ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to reindex a `DataFrame` with a non unique `MultiIndex` now raises a
    `ValueError` instead of an `Exception` ([GH 21770](https://github.com/pandas-dev/pandas/issues/21770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") subtraction
    will attempt to operate element-wise instead of raising `TypeError` ([GH 19369](https://github.com/pandas-dev/pandas/issues/19369))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.io.formats.style.Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") supports a `number-format` property when using
    [`to_excel()`](../reference/api/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel") ([GH 22015](https://github.com/pandas-dev/pandas/issues/22015))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now raise a `ValueError` along with a helpful error message
    instead of a `KeyError` when supplied with an invalid method ([GH 22298](https://github.com/pandas-dev/pandas/issues/22298))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shift()` will now always return a copy, instead of the previous behaviour
    of returning self when shifting by 0 ([GH 22397](https://github.com/pandas-dev/pandas/issues/22397))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.set_index()`](../reference/api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index") now gives a better (and less frequent) KeyError,
    raises a `ValueError` for incorrect types, and will not fail on duplicate column
    names with `drop=True`. ([GH 22484](https://github.com/pandas-dev/pandas/issues/22484))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a single row of a DataFrame with multiple ExtensionArrays of the same
    type now preserves the dtype, rather than coercing to object ([GH 22784](https://github.com/pandas-dev/pandas/issues/22784))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` attribute `_cacheable` and method `_should_cache` have been removed
    ([GH 23118](https://github.com/pandas-dev/pandas/issues/23118))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted"), when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23801](https://github.com/pandas-dev/pandas/issues/23801)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()`, when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()` now raises a `KeyError` rather that a `ValueError`,
    if a searched for key is not found in its categories ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.hasnans()`](../reference/api/pandas.Index.hasnans.html#pandas.Index.hasnans
    "pandas.Index.hasnans") and [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") now always return a python boolean. Previously, a python
    or a numpy boolean could be returned, depending on circumstances ([GH 23294](https://github.com/pandas-dev/pandas/issues/23294)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the arguments of [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") and [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") is rearranged to be consistent with each other.
    ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoricalIndex.reindex()` now raises a `ValueError` if the target index
    is non-unique and not equal to the current index. It previously only raised if
    the target index was not of a categorical dtype ([GH 23963](https://github.com/pandas-dev/pandas/issues/23963)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_list()`](../reference/api/pandas.Series.to_list.html#pandas.Series.to_list
    "pandas.Series.to_list") and [`Index.to_list()`](../reference/api/pandas.Index.to_list.html#pandas.Index.to_list
    "pandas.Index.to_list") are now aliases of `Series.tolist` respectively `Index.tolist`
    ([GH 8826](https://github.com/pandas-dev/pandas/issues/8826))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of `SparseSeries.unstack` is now a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values, rather than a `SparseDataFrame` ([GH 24372](https://github.com/pandas-dev/pandas/issues/24372)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") no longer ignore the dtype precision. Passing a non-nanosecond
    resolution dtype will raise a `ValueError` ([GH 24753](https://github.com/pandas-dev/pandas/issues/24753))  ###
    Increased minimum versions for dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 21242](https://github.com/pandas-dev/pandas/issues/21242),
    [GH 18742](https://github.com/pandas-dev/pandas/issues/18742), [GH 23774](https://github.com/pandas-dev/pandas/issues/23774),
    [GH 24767](https://github.com/pandas-dev/pandas/issues/24767)). If installed,
    we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| numpy | 1.12.0 | X |'
  prefs: []
  type: TYPE_TB
- en: '| bottleneck | 1.2.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 0.2.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 2.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| numexpr | 2.6.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.8.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 0.9.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytables | 3.4.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| scipy | 0.18.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 1.0.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| pytest (dev) | 3.6 |  |'
  prefs: []
  type: TYPE_TB
- en: Additionally we no longer depend on `feather-format` for feather based storage
    and replaced it with references to `pyarrow` ([GH 21639](https://github.com/pandas-dev/pandas/issues/21639)
    and [GH 23053](https://github.com/pandas-dev/pandas/issues/23053)).
  prefs: []
  type: TYPE_NORMAL
- en: '### `os.linesep` is used for `line_terminator` of `DataFrame.to_csv`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") now uses `os.linesep()` rather than `''\n''` for the
    default line terminator ([GH 20353](https://github.com/pandas-dev/pandas/issues/20353)).
    This change only affects when running on Windows, where `''\r\n''` was used for
    line terminator even when `''\n''` was passed in `line_terminator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior* on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing `line_terminator` explicitly, set the `line terminator` to that character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, the value of `os.linesep` is `'\r\n'`, so if `line_terminator` is
    not set, `'\r\n'` is used for line terminator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: For file objects, specifying `newline` is not sufficient to set the line terminator.
    You must pass in the `line_terminator` explicitly, even in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '### Proper handling of `np.nan` in a string data-typed column with the Python
    engine'
  prefs: []
  type: TYPE_NORMAL
- en: There was bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") and [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with the Python engine, where missing values turned to `'nan'`
    with `dtype=str` and `na_filter=True`. Now, these missing values are converted
    to the string missing indicator, `np.nan`. ([GH 20377](https://github.com/pandas-dev/pandas/issues/20377))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we now instead output `np.nan` itself instead of a stringified form
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: '### Parsing datetime strings with timezone offsets'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, parsing datetime strings with UTC offsets with [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would automatically convert the datetime to UTC without
    timezone localization. This is inconsistent from parsing the same datetime string
    with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    which would preserve the UTC offset in the `tz` attribute. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") preserves the UTC offset in the `tz` attribute when all
    the datetime strings have the same UTC offset ([GH 17697](https://github.com/pandas-dev/pandas/issues/17697),
    [GH 11736](https://github.com/pandas-dev/pandas/issues/11736), [GH 22457](https://github.com/pandas-dev/pandas/issues/22457))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with the same UTC offset will preserve the UTC offset
    in the `tz`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Parsing datetime strings with different UTC offsets will now create an Index
    of `datetime.datetime` objects with different UTC offsets
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Passing `utc=True` will mimic the previous behavior but will correctly indicate
    that the dates have been converted to UTC
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '### Parsing mixed-timezones with [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    no longer silently converts mixed-timezone columns to UTC ([GH 24987](https://github.com/pandas-dev/pandas/issues/24987)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, the `dtype` is object; each value in the column is a string.
    To convert the strings to an array of datetimes, the `date_parser` argument
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: See [Parsing datetime strings with timezone offsets](#whatsnew-0240-api-timezone-offset-parsing)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Time values in `dt.end_time` and `to_timestamp(how=''end'')`'
  prefs: []
  type: TYPE_NORMAL
- en: The time values in [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") objects are now set to ‘23:59:59.999999999’ when calling
    [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time"), [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), [`PeriodIndex.end_time`](../reference/api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time"), [`Period.to_timestamp()`](../reference/api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp") with `how='end'`, or [`PeriodIndex.to_timestamp()`](../reference/api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp") with `how='end'` ([GH 17157](https://github.com/pandas-dev/pandas/issues/17157))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Series.dt.end_time`](../reference/api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") will now result in a time of ‘23:59:59.999999999’
    as is the case with [`Period.end_time`](../reference/api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time"), for example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '### Series.unique for timezone-aware data'
  prefs: []
  type: TYPE_NORMAL
- en: The return type of [`Series.unique()`](../reference/api/pandas.Series.unique.html#pandas.Series.unique
    "pandas.Series.unique") for datetime with timezone values has changed from an
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects to a [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '### Sparse data structure refactor'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray`, the array backing `SparseSeries` and the columns in a `SparseDataFrame`,
    is now an extension array ([GH 21978](https://github.com/pandas-dev/pandas/issues/21978),
    [GH 19056](https://github.com/pandas-dev/pandas/issues/19056), [GH 22835](https://github.com/pandas-dev/pandas/issues/22835)).
    To conform to this interface and for consistency with the rest of pandas, some
    API breaking changes were made:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SparseArray` is no longer a subclass of [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). To convert a `SparseArray` to a NumPy array, use [`numpy.asarray()`](https://numpy.org/doc/stable/reference/generated/numpy.asarray.html#numpy.asarray
    "(in NumPy v1.26)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.dtype` and `SparseSeries.dtype` are now instances of [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype"), rather than `np.dtype`. Access the underlying dtype with
    `SparseDtype.subtype`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.asarray(sparse_array)` now returns a dense array with all the values,
    not just the non-fill-value values ([GH 14167](https://github.com/pandas-dev/pandas/issues/14167))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.take` now matches the API of [`pandas.api.extensions.ExtensionArray.take()`](../reference/api/pandas.api.extensions.ExtensionArray.take.html#pandas.api.extensions.ExtensionArray.take
    "pandas.api.extensions.ExtensionArray.take") ([GH 19506](https://github.com/pandas-dev/pandas/issues/19506)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value of `allow_fill` has changed from `False` to `True`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `out` and `mode` parameters are now longer accepted (previously, this raised
    if they were specified).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a scalar for `indices` is no longer allowed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") with a mix of sparse and dense Series is a Series with sparse
    values, rather than a `SparseSeries`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseDataFrame.combine` and `DataFrame.combine_first` no longer supports
    combining a sparse column with a dense column while preserving the sparse subtype.
    The result will be an object-dtype SparseArray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `SparseArray.fill_value` to a fill value with a different dtype is now
    allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame[column]` is now a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values, rather than a `SparseSeries`, when slicing
    a single column with sparse values ([GH 23559](https://github.com/pandas-dev/pandas/issues/23559)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") is now a `Series` with sparse values, like with other extension
    arrays ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some new warnings are issued for operations that require or are likely to materialize
    a large dense array:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is issued when using fillna with a `method`,
    as a dense array is constructed to create the filled array. Filling with a `value`
    is the efficient way to fill a sparse array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`errors.PerformanceWarning`](../reference/api/pandas.errors.PerformanceWarning.html#pandas.errors.PerformanceWarning
    "pandas.errors.PerformanceWarning") is now issued when concatenating sparse Series
    with differing fill values. The fill value from the first sparse array continues
    to be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these API breaking changes, many [Performance Improvements and
    Bug Fixes have been made](#whatsnew-0240-bug-fixes-sparse).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a `Series.sparse` accessor was added to provide sparse-specific methods
    like [`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '### [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") always returns a DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when `sparse=True` was passed to [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies"), the return value could be either a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or a `SparseDataFrame`, depending on whether all or a just
    a subset of the columns were dummy-encoded. Now, a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is always returned ([GH 24284](https://github.com/pandas-dev/pandas/issues/24284)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: The first [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") returns a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") because the column `A` is not dummy encoded. When just `["B",
    "C"]` are passed to `get_dummies`, then all the columns are dummy-encoded, and
    a `SparseDataFrame` was returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the return type is consistently a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There’s no difference in memory usage between a `SparseDataFrame` and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values. The memory usage will be the same as in
    the previous version of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '### Raise ValueError in `DataFrame.to_dict(orient=''index'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") raises `ValueError` when used with `orient='index'`
    and a non-unique index instead of losing data ([GH 22801](https://github.com/pandas-dev/pandas/issues/22801))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '### Tick DateOffset normalize restrictions'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `Tick` object (`Day`, `Hour`, `Minute`, `Second`, `Milli`, `Micro`,
    `Nano`) with `normalize=True` is no longer supported. This prevents unexpected
    behavior where addition could fail to be monotone or associative. ([GH 21427](https://github.com/pandas-dev/pandas/issues/21427))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '### Period subtraction'
  prefs: []
  type: TYPE_NORMAL
- en: Subtraction of a `Period` from another `Period` will give a `DateOffset`. instead
    of an integer ([GH 21314](https://github.com/pandas-dev/pandas/issues/21314))
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, subtraction of a `Period` from a `PeriodIndex` will now return an
    `Index` of `DateOffset` objects instead of an `Int64Index`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '### Addition/subtraction of `NaN` from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: Adding or subtracting `NaN` from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column with `timedelta64[ns]` dtype will now raise a `TypeError`
    instead of returning all-`NaT`. This is for compatibility with `TimedeltaIndex`
    and `Series` behavior ([GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '### DataFrame comparison operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, the broadcasting behavior of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparison operations (`==`, `!=`, …) was inconsistent with
    the behavior of arithmetic operations (`+`, `-`, …). The behavior of the comparison
    operations has been changed to match the arithmetic operations in these cases.
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880))
  prefs: []
  type: TYPE_NORMAL
- en: 'The affected cases are:'
  prefs: []
  type: TYPE_NORMAL
- en: operating against a 2-dimensional `np.ndarray` with either 1 row or 1 column
    will now broadcast the same way a `np.ndarray` would ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of rows in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now raise `ValueError` instead of operating column-by-column
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list or tuple with length matching the number of columns in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will now operate row-by-row instead of raising `ValueError`
    ([GH 22880](https://github.com/pandas-dev/pandas/issues/22880)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '### DataFrame arithmetic operations broadcasting changes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    arithmetic operations when operating with 2-dimensional `np.ndarray` objects now
    broadcast in the same way as `np.ndarray` broadcast. ([GH 23000](https://github.com/pandas-dev/pandas/issues/23000))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '### Series and Index data-dtype incompatibilities'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` and `Index` constructors now raise when the data is incompatible with
    a passed `dtype=` ([GH 15832](https://github.com/pandas-dev/pandas/issues/15832))'
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '### Concatenation changes'
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") on a `Categorical` of ints with NA values now causes them to
    be processed as objects when concatenating with anything other than another `Categorical`
    of ints ([GH 19214](https://github.com/pandas-dev/pandas/issues/19214))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Datetimelike API changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") with non-`None` `freq` attribute, addition or subtraction
    of integer-dtyped array or `Index` will return an object of the same class ([GH
    19959](https://github.com/pandas-dev/pandas/issues/19959))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` objects are now immutable. Attempting to alter one of these will
    now raise `AttributeError` ([GH 21341](https://github.com/pandas-dev/pandas/issues/21341))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") subtraction of another `PeriodIndex` will now return an
    object-dtype [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    of `DateOffset` objects instead of raising a `TypeError` ([GH 20049](https://github.com/pandas-dev/pandas/issues/20049))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") now returns a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") bins when the input is datetime or timedelta dtype respectively
    and `retbins=True` ([GH 19891](https://github.com/pandas-dev/pandas/issues/19891))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") and [`Timestamp.to_period()`](../reference/api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period") will issue a warning when timezone information will
    be lost ([GH 21333](https://github.com/pandas-dev/pandas/issues/21333))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.tz_convert()` and `PeriodIndex.tz_localize()` have been removed
    ([GH 21781](https://github.com/pandas-dev/pandas/issues/21781))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: A newly constructed empty [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with integer as the `dtype` will now only be cast to `float64`
    if `index` is specified ([GH 22858](https://github.com/pandas-dev/pandas/issues/22858))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.str.cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") will now raise if `others` is a `set` ([GH 23009](https://github.com/pandas-dev/pandas/issues/23009))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing scalar values to [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") will now raise `TypeError` instead of `ValueError` ([GH
    23539](https://github.com/pandas-dev/pandas/issues/23539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_rows` and `max_cols` parameters removed from `HTMLFormatter` since truncation
    is handled by `DataFrameFormatter` ([GH 23818](https://github.com/pandas-dev/pandas/issues/23818))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will now raise a `ValueError` if a column with missing values is declared as having
    dtype `bool` ([GH 20591](https://github.com/pandas-dev/pandas/issues/20591))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column order of the resultant [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") from [`MultiIndex.to_frame()`](../reference/api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame") is now guaranteed to match the [`MultiIndex.names`](../reference/api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") order. ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrectly passing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to [`MultiIndex.from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples"), rather than a sequence of tuples, now raises
    a `TypeError` rather than a `ValueError` ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.offsets.generate_range()` argument `time_rule` has been removed; use `offset`
    instead ([GH 24157](https://github.com/pandas-dev/pandas/issues/24157))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 0.23.x, pandas would raise a `ValueError` on a merge of a numeric column
    (e.g. `int` dtyped column) and an `object` dtyped column ([GH 9780](https://github.com/pandas-dev/pandas/issues/9780)).
    We have re-enabled the ability to merge `object` and other dtypes; pandas will
    still raise on a merge between a numeric and an `object` dtyped column that is
    composed only of strings ([GH 21681](https://github.com/pandas-dev/pandas/issues/21681))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a level of a `MultiIndex` with a duplicate name (e.g. in [`get_level_values()`](../reference/api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")) now raises a `ValueError` instead of a
    `KeyError` ([GH 21678](https://github.com/pandas-dev/pandas/issues/21678)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid construction of `IntervalDtype` will now always raise a `TypeError`
    rather than a `ValueError` if the subdtype is invalid ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to reindex a `DataFrame` with a non unique `MultiIndex` now raises a
    `ValueError` instead of an `Exception` ([GH 21770](https://github.com/pandas-dev/pandas/issues/21770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") subtraction
    will attempt to operate element-wise instead of raising `TypeError` ([GH 19369](https://github.com/pandas-dev/pandas/issues/19369))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.io.formats.style.Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") supports a `number-format` property when using
    [`to_excel()`](../reference/api/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel") ([GH 22015](https://github.com/pandas-dev/pandas/issues/22015))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.corr()`](../reference/api/pandas.DataFrame.corr.html#pandas.DataFrame.corr
    "pandas.DataFrame.corr") and [`Series.corr()`](../reference/api/pandas.Series.corr.html#pandas.Series.corr
    "pandas.Series.corr") now raise a `ValueError` along with a helpful error message
    instead of a `KeyError` when supplied with an invalid method ([GH 22298](https://github.com/pandas-dev/pandas/issues/22298))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shift()` will now always return a copy, instead of the previous behaviour
    of returning self when shifting by 0 ([GH 22397](https://github.com/pandas-dev/pandas/issues/22397))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.set_index()`](../reference/api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index") now gives a better (and less frequent) KeyError,
    raises a `ValueError` for incorrect types, and will not fail on duplicate column
    names with `drop=True`. ([GH 22484](https://github.com/pandas-dev/pandas/issues/22484))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a single row of a DataFrame with multiple ExtensionArrays of the same
    type now preserves the dtype, rather than coercing to object ([GH 22784](https://github.com/pandas-dev/pandas/issues/22784))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset` attribute `_cacheable` and method `_should_cache` have been removed
    ([GH 23118](https://github.com/pandas-dev/pandas/issues/23118))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted"), when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23801](https://github.com/pandas-dev/pandas/issues/23801)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()`, when supplied a scalar value to search for, now
    returns a scalar instead of an array ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()` now raises a `KeyError` rather that a `ValueError`,
    if a searched for key is not found in its categories ([GH 23466](https://github.com/pandas-dev/pandas/issues/23466)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.hasnans()`](../reference/api/pandas.Index.hasnans.html#pandas.Index.hasnans
    "pandas.Index.hasnans") and [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") now always return a python boolean. Previously, a python
    or a numpy boolean could be returned, depending on circumstances ([GH 23294](https://github.com/pandas-dev/pandas/issues/23294)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the arguments of [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") and [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") is rearranged to be consistent with each other.
    ([GH 23614](https://github.com/pandas-dev/pandas/issues/23614))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoricalIndex.reindex()` now raises a `ValueError` if the target index
    is non-unique and not equal to the current index. It previously only raised if
    the target index was not of a categorical dtype ([GH 23963](https://github.com/pandas-dev/pandas/issues/23963)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_list()`](../reference/api/pandas.Series.to_list.html#pandas.Series.to_list
    "pandas.Series.to_list") and [`Index.to_list()`](../reference/api/pandas.Index.to_list.html#pandas.Index.to_list
    "pandas.Index.to_list") are now aliases of `Series.tolist` respectively `Index.tolist`
    ([GH 8826](https://github.com/pandas-dev/pandas/issues/8826))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of `SparseSeries.unstack` is now a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values, rather than a `SparseDataFrame` ([GH 24372](https://github.com/pandas-dev/pandas/issues/24372)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") no longer ignore the dtype precision. Passing a non-nanosecond
    resolution dtype will raise a `ValueError` ([GH 24753](https://github.com/pandas-dev/pandas/issues/24753))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Extension type changes'
  prefs: []
  type: TYPE_NORMAL
- en: '**Equality and hashability**'
  prefs: []
  type: TYPE_NORMAL
- en: pandas now requires that extension dtypes be hashable (i.e. the respective `ExtensionDtype`
    objects; hashability is not a requirement for the values of the corresponding
    `ExtensionArray`). The base class implements a default `__eq__` and `__hash__`.
    If you have a parametrized dtype, you should update the `ExtensionDtype._metadata`
    tuple to match the signature of your `__init__` method. See [`pandas.api.extensions.ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype") for more ([GH 22476](https://github.com/pandas-dev/pandas/issues/22476)).
  prefs: []
  type: TYPE_NORMAL
- en: '**New and changed methods**'
  prefs: []
  type: TYPE_NORMAL
- en: '`dropna()` has been added ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat()` has been added ([GH 24349](https://github.com/pandas-dev/pandas/issues/24349))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ExtensionArray` constructor, `_from_sequence` now take the keyword arg
    `copy=False` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.api.extensions.ExtensionArray.shift()`](../reference/api/pandas.api.extensions.ExtensionArray.shift.html#pandas.api.extensions.ExtensionArray.shift
    "pandas.api.extensions.ExtensionArray.shift") added as part of the basic `ExtensionArray`
    interface ([GH 22387](https://github.com/pandas-dev/pandas/issues/22387)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`searchsorted()` has been added ([GH 24350](https://github.com/pandas-dev/pandas/issues/24350))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for reduction operations such as `sum`, `mean` via opt-in base class
    method override ([GH 22762](https://github.com/pandas-dev/pandas/issues/22762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtensionArray.isna()` is allowed to return an `ExtensionArray` ([GH 22325](https://github.com/pandas-dev/pandas/issues/22325)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dtype changes**'
  prefs: []
  type: TYPE_NORMAL
- en: '`ExtensionDtype` has gained the ability to instantiate from string dtypes,
    e.g. `decimal` would instantiate a registered `DecimalDtype`; furthermore the
    `ExtensionDtype` has gained the method `construct_array_type` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `ExtensionDtype._is_numeric` for controlling whether an extension dtype
    is considered numeric ([GH 22290](https://github.com/pandas-dev/pandas/issues/22290)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `pandas.api.types.register_extension_dtype()` to register an extension
    type with pandas ([GH 22664](https://github.com/pandas-dev/pandas/issues/22664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated the `.type` attribute for `PeriodDtype`, `DatetimeTZDtype`, and `IntervalDtype`
    to be instances of the dtype (`Period`, `Timestamp`, and `Interval` respectively)
    ([GH 22938](https://github.com/pandas-dev/pandas/issues/22938))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator support**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Series` based on an `ExtensionArray` now supports arithmetic and comparison
    operators ([GH 19577](https://github.com/pandas-dev/pandas/issues/19577)). There
    are two approaches for providing operator support for an `ExtensionArray`:'
  prefs: []
  type: TYPE_NORMAL
- en: Define each of the operators on your `ExtensionArray` subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use an operator implementation from pandas that depends on operators that are
    already defined on the underlying elements (scalars) of the `ExtensionArray`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the [ExtensionArray Operator Support](../development/extending.html#extending-extension-operator)
    documentation section for details on both ways of adding operator support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other changes**'
  prefs: []
  type: TYPE_NORMAL
- en: A default repr for [`pandas.api.extensions.ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") is now provided ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtensionArray._formatting_values()` is deprecated. Use `ExtensionArray._formatter`
    instead. ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `ExtensionArray` with a boolean dtype now works correctly as a boolean indexer.
    [`pandas.api.types.is_bool_dtype()`](../reference/api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype") now properly considers them boolean ([GH 22326](https://github.com/pandas-dev/pandas/issues/22326))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bug fixes**'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") for `Series` using `ExtensionArray` and integer index ([GH
    21257](https://github.com/pandas-dev/pandas/issues/21257))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift "pandas.Series.shift")
    now dispatches to `ExtensionArray.shift()` ([GH 22386](https://github.com/pandas-dev/pandas/issues/22386))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.combine()`](../reference/api/pandas.Series.combine.html#pandas.Series.combine
    "pandas.Series.combine") works correctly with [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") inside of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") ([GH 20825](https://github.com/pandas-dev/pandas/issues/20825))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.combine()`](../reference/api/pandas.Series.combine.html#pandas.Series.combine
    "pandas.Series.combine") with scalar argument now works for any function type
    ([GH 21248](https://github.com/pandas-dev/pandas/issues/21248))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") and [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") now dispatch to `ExtensionArray.astype()` ([GH 21185](https://github.com/pandas-dev/pandas/issues/21185)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a single row of a `DataFrame` with multiple ExtensionArrays of the same
    type now preserves the dtype, rather than coercing to object ([GH 22784](https://github.com/pandas-dev/pandas/issues/22784))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when concatenating multiple `Series` with different extension dtypes not
    casting to object dtype ([GH 22994](https://github.com/pandas-dev/pandas/issues/22994))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series backed by an `ExtensionArray` now work with [`util.hash_pandas_object()`](../reference/api/pandas.util.hash_pandas_object.html#pandas.util.hash_pandas_object
    "pandas.util.hash_pandas_object") ([GH 23066](https://github.com/pandas-dev/pandas/issues/23066))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") no longer converts to object dtype for DataFrames where
    each column has the same extension dtype. The output Series will have the same
    dtype as the columns ([GH 23077](https://github.com/pandas-dev/pandas/issues/23077)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.unstack()`](../reference/api/pandas.Series.unstack.html#pandas.Series.unstack
    "pandas.Series.unstack") and [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") no longer convert extension arrays to object-dtype
    ndarrays. Each column in the output `DataFrame` will now have the same dtype as
    the input ([GH 23077](https://github.com/pandas-dev/pandas/issues/23077)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when grouping `Dataframe.groupby()` and aggregating on `ExtensionArray`
    it was not returning the actual `ExtensionArray` dtype ([GH 23227](https://github.com/pandas-dev/pandas/issues/23227)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    when merging on an extension array-backed column ([GH 23020](https://github.com/pandas-dev/pandas/issues/23020)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Deprecations'
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiIndex.labels` has been deprecated and replaced by [`MultiIndex.codes`](../reference/api/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes
    "pandas.MultiIndex.codes"). The functionality is unchanged. The new name better
    reflects the natures of these codes and makes the `MultiIndex` API more similar
    to the API for [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") ([GH 13443](https://github.com/pandas-dev/pandas/issues/13443)).
    As a consequence, other uses of the name `labels` in `MultiIndex` have also been
    deprecated and replaced with `codes`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should initialize a `MultiIndex` instance using a parameter named `codes`
    rather than `labels`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.set_labels` has been deprecated in favor of [`MultiIndex.set_codes()`](../reference/api/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For method [`MultiIndex.copy()`](../reference/api/pandas.MultiIndex.copy.html#pandas.MultiIndex.copy
    "pandas.MultiIndex.copy"), the `labels` parameter has been deprecated and replaced
    by a `codes` parameter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata"), [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata"), `StataReader` and `StataWriter` have deprecated the `encoding`
    argument. The encoding of a Stata dta file is determined by the file type and
    cannot be changed ([GH 21244](https://github.com/pandas-dev/pandas/issues/21244))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.to_hierarchical()` is deprecated and will be removed in a future
    version ([GH 21613](https://github.com/pandas-dev/pandas/issues/21613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.ptp()` is deprecated. Use `numpy.ptp` instead ([GH 21614](https://github.com/pandas-dev/pandas/issues/21614))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.compress()` is deprecated. Use `Series[condition]` instead ([GH 18262](https://github.com/pandas-dev/pandas/issues/18262))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The signature of [`Series.to_csv()`](../reference/api/pandas.Series.to_csv.html#pandas.Series.to_csv
    "pandas.Series.to_csv") has been uniformed to that of [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"): the name of the first argument is now `path_or_buf`,
    the order of subsequent arguments has changed, the `header` argument now defaults
    to `True`. ([GH 19715](https://github.com/pandas-dev/pandas/issues/19715))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") has deprecated providing float values for the
    `codes` argument. ([GH 21767](https://github.com/pandas-dev/pandas/issues/21767))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table") is deprecated. Instead, use [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") passing `sep=''\t''` if necessary. This deprecation has been
    removed in 0.25.0\. ([GH 21948](https://github.com/pandas-dev/pandas/issues/21948))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.str.cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") has deprecated using arbitrary list-likes *within* list-likes.
    A list-like container may still contain many `Series`, `Index` or 1-dimensional
    `np.ndarray`, or alternatively, only scalar values. ([GH 21950](https://github.com/pandas-dev/pandas/issues/21950))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrozenNDArray.searchsorted()` has deprecated the `v` parameter in favor of
    `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatetimeIndex.shift()` and `PeriodIndex.shift()` now accept `periods` argument
    instead of `n` for consistency with [`Index.shift()`](../reference/api/pandas.Index.shift.html#pandas.Index.shift
    "pandas.Index.shift") and [`Series.shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift"). Using `n` throws a deprecation warning ([GH 22458](https://github.com/pandas-dev/pandas/issues/22458),
    [GH 22912](https://github.com/pandas-dev/pandas/issues/22912))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `fastpath` keyword of the different Index constructors is deprecated ([GH
    23110](https://github.com/pandas-dev/pandas/issues/23110)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"), [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize"), and [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") have deprecated the `errors` argument in favor of
    the `nonexistent` argument ([GH 8917](https://github.com/pandas-dev/pandas/issues/8917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class `FrozenNDArray` has been deprecated. When unpickling, `FrozenNDArray`
    will be unpickled to `np.ndarray` once this class is removed ([GH 9031](https://github.com/pandas-dev/pandas/issues/9031))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods [`DataFrame.update()`](../reference/api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update") and `Panel.update()` have deprecated the `raise_conflict=False|True`
    keyword in favor of `errors='ignore'|'raise'` ([GH 23585](https://github.com/pandas-dev/pandas/issues/23585))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods [`Series.str.partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") and [`Series.str.rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") have deprecated the `pat` keyword in favor of
    `sep` ([GH 22676](https://github.com/pandas-dev/pandas/issues/22676))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated the `nthreads` keyword of [`pandas.read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") in favor of `use_threads` to reflect the changes in `pyarrow>=0.11.0`.
    ([GH 23053](https://github.com/pandas-dev/pandas/issues/23053))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pandas.read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated accepting `usecols` as an integer. Please
    pass in a list of ints from 0 to `usecols` inclusive instead ([GH 23527](https://github.com/pandas-dev/pandas/issues/23527))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") from data with `datetime64`-dtyped data is deprecated,
    will raise `TypeError` in a future version ([GH 23539](https://github.com/pandas-dev/pandas/issues/23539))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") from data with `timedelta64`-dtyped data is deprecated,
    will raise `TypeError` in a future version ([GH 23675](https://github.com/pandas-dev/pandas/issues/23675))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `keep_tz=False` option (the default) of the `keep_tz` keyword of [`DatetimeIndex.to_series()`](../reference/api/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series
    "pandas.DatetimeIndex.to_series") is deprecated ([GH 17832](https://github.com/pandas-dev/pandas/issues/17832)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezone converting a tz-aware `datetime.datetime` or [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") and the `tz` argument is now deprecated. Instead, use [`Timestamp.tz_convert()`](../reference/api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert") ([GH 23579](https://github.com/pandas-dev/pandas/issues/23579))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.api.types.is_period()` is deprecated in favor of `pandas.api.types.is_period_dtype`
    ([GH 23917](https://github.com/pandas-dev/pandas/issues/23917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.api.types.is_datetimetz()` is deprecated in favor of `pandas.api.types.is_datetime64tz`
    ([GH 23917](https://github.com/pandas-dev/pandas/issues/23917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex"), [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"), or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") by passing range arguments `start`, `end`, and `periods`
    is deprecated in favor of [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"), [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), or [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range") ([GH 23919](https://github.com/pandas-dev/pandas/issues/23919))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a string alias like `'datetime64[ns, UTC]'` as the `unit` parameter
    to [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") is deprecated. Use `DatetimeTZDtype.construct_from_string`
    instead ([GH 23990](https://github.com/pandas-dev/pandas/issues/23990)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `skipna` parameter of [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") will switch to `True` by default in a future version
    of pandas ([GH 17066](https://github.com/pandas-dev/pandas/issues/17066), [GH
    24050](https://github.com/pandas-dev/pandas/issues/24050))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") with Categorical data, providing an `other` that is not
    present in the categories is deprecated. Convert the categorical to a different
    dtype or add the `other` to the categories first ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.clip_lower()`, `Series.clip_upper()`, `DataFrame.clip_lower()` and
    `DataFrame.clip_upper()` are deprecated and will be removed in a future version.
    Use `Series.clip(lower=threshold)`, `Series.clip(upper=threshold)` and the equivalent
    `DataFrame` methods ([GH 24203](https://github.com/pandas-dev/pandas/issues/24203))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.nonzero()` is deprecated and will be removed in a future version ([GH
    18262](https://github.com/pandas-dev/pandas/issues/18262))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing an integer to [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") with `timedelta64[ns]` dtypes is deprecated, will raise
    `TypeError` in a future version. Use `obj.fillna(pd.Timedelta(...))` instead ([GH
    24694](https://github.com/pandas-dev/pandas/issues/24694))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.cat.categorical`, `Series.cat.name` and `Series.cat.index` have been
    deprecated. Use the attributes on `Series.cat` or `Series` directly. ([GH 24751](https://github.com/pandas-dev/pandas/issues/24751)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a dtype without a precision like `np.dtype('datetime64')` or `timedelta64`
    to [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"),
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") is now deprecated. Use the nanosecond-precision dtype
    instead ([GH 24753](https://github.com/pandas-dev/pandas/issues/24753)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Integer addition/subtraction with datetimes and timedeltas is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, users could—in some cases—add or subtract integers or integer-dtype
    arrays from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex").
  prefs: []
  type: TYPE_NORMAL
- en: This usage is now deprecated. Instead add or subtract integer multiples of the
    object’s `freq` attribute ([GH 21939](https://github.com/pandas-dev/pandas/issues/21939),
    [GH 23878](https://github.com/pandas-dev/pandas/issues/23878)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]  ### Passing integer data and a timezone to DatetimeIndex'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") when passed integer data and a timezone is changing in
    a future version of pandas. Previously, these were interpreted as wall times in
    the desired timezone. In the future, these will be interpreted as wall times in
    UTC, which are then converted to the desired timezone ([GH 24559](https://github.com/pandas-dev/pandas/issues/24559)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior remains the same, but issues a warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'As the warning message explains, opt in to the future behavior by specifying
    that the integer values are UTC, and then converting to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'The old behavior can be retained with by localizing directly to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]  ### Converting timezone-aware Series and Index to NumPy arrays'
  prefs: []
  type: TYPE_NORMAL
- en: The conversion from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with timezone-aware datetime data will change to preserve timezones
    by default ([GH 23569](https://github.com/pandas-dev/pandas/issues/23569)).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy doesn’t have a dedicated dtype for timezone-aware datetimes. In the past,
    converting a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with timezone-aware datatimes would convert to a NumPy
    array by
  prefs: []
  type: TYPE_NORMAL
- en: converting the tz-aware data to UTC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: dropping the timezone-info
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: returning a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") with `datetime64[ns]` dtype
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Future versions of pandas will preserve the timezone information by returning
    an object-dtype NumPy array where each value is a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") with the correct timezone attached
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: The default behavior remains the same, but issues a warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: The previous or future behavior can be obtained, without any warnings, by specifying
    the `dtype`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '*Future behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Or by using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'All the above applies to a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with tz-aware values as well.  ### Integer addition/subtraction
    with datetimes and timedeltas is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, users could—in some cases—add or subtract integers or integer-dtype
    arrays from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex").
  prefs: []
  type: TYPE_NORMAL
- en: This usage is now deprecated. Instead add or subtract integer multiples of the
    object’s `freq` attribute ([GH 21939](https://github.com/pandas-dev/pandas/issues/21939),
    [GH 23878](https://github.com/pandas-dev/pandas/issues/23878)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '*New behavior*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '### Passing integer data and a timezone to DatetimeIndex'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") when passed integer data and a timezone is changing in
    a future version of pandas. Previously, these were interpreted as wall times in
    the desired timezone. In the future, these will be interpreted as wall times in
    UTC, which are then converted to the desired timezone ([GH 24559](https://github.com/pandas-dev/pandas/issues/24559)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior remains the same, but issues a warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'As the warning message explains, opt in to the future behavior by specifying
    that the integer values are UTC, and then converting to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: 'The old behavior can be retained with by localizing directly to the final timezone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '### Converting timezone-aware Series and Index to NumPy arrays'
  prefs: []
  type: TYPE_NORMAL
- en: The conversion from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with timezone-aware datetime data will change to preserve timezones
    by default ([GH 23569](https://github.com/pandas-dev/pandas/issues/23569)).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy doesn’t have a dedicated dtype for timezone-aware datetimes. In the past,
    converting a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with timezone-aware datatimes would convert to a NumPy
    array by
  prefs: []
  type: TYPE_NORMAL
- en: converting the tz-aware data to UTC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: dropping the timezone-info
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: returning a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") with `datetime64[ns]` dtype
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Future versions of pandas will preserve the timezone information by returning
    an object-dtype NumPy array where each value is a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") with the correct timezone attached
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: The default behavior remains the same, but issues a warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: The previous or future behavior can be obtained, without any warnings, by specifying
    the `dtype`
  prefs: []
  type: TYPE_NORMAL
- en: '*Previous behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '*Future behavior*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Or by using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: All the above applies to a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with tz-aware values as well.
  prefs: []
  type: TYPE_NORMAL
- en: '## Removal of prior version deprecations/changes'
  prefs: []
  type: TYPE_NORMAL
- en: The `LongPanel` and `WidePanel` classes have been removed ([GH 10892](https://github.com/pandas-dev/pandas/issues/10892))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.repeat()`](../reference/api/pandas.Series.repeat.html#pandas.Series.repeat
    "pandas.Series.repeat") has renamed the `reps` argument to `repeats` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several private functions were removed from the (non-public) module `pandas.core.common`
    ([GH 22001](https://github.com/pandas-dev/pandas/issues/22001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated module `pandas.core.datetools` ([GH 14105](https://github.com/pandas-dev/pandas/issues/14105),
    [GH 14094](https://github.com/pandas-dev/pandas/issues/14094))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings passed into [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") that refer to both column and index levels will raise
    a `ValueError` ([GH 14432](https://github.com/pandas-dev/pandas/issues/14432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.repeat()`](../reference/api/pandas.Index.repeat.html#pandas.Index.repeat
    "pandas.Index.repeat") and `MultiIndex.repeat()` have renamed the `n` argument
    to `repeats` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Series` constructor and `.astype` method will now raise a `ValueError`
    if timestamp dtypes are passed in without a unit (e.g. `np.datetime64`) for the
    `dtype` parameter ([GH 15987](https://github.com/pandas-dev/pandas/issues/15987))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated `as_indexer` keyword completely from `str.match()`
    ([GH 22356](https://github.com/pandas-dev/pandas/issues/22356), [GH 6581](https://github.com/pandas-dev/pandas/issues/6581))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The modules `pandas.types`, `pandas.computation`, and `pandas.util.decorators`
    have been removed ([GH 16157](https://github.com/pandas-dev/pandas/issues/16157),
    [GH 16250](https://github.com/pandas-dev/pandas/issues/16250))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the `pandas.formats.style` shim for [`pandas.io.formats.style.Styler`](../reference/api/pandas.io.formats.style.Styler.html#pandas.io.formats.style.Styler
    "pandas.io.formats.style.Styler") ([GH 16059](https://github.com/pandas-dev/pandas/issues/16059))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.pnow`, `pandas.match`, `pandas.groupby`, `pd.get_store`, `pd.Expr`,
    and `pd.Term` have been removed ([GH 15538](https://github.com/pandas-dev/pandas/issues/15538),
    [GH 15940](https://github.com/pandas-dev/pandas/issues/15940))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.searchsorted()` and [`Series.searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") have renamed the `v` argument to `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.parser`, `pandas.lib`, and `pandas.tslib` have been removed ([GH 15537](https://github.com/pandas-dev/pandas/issues/15537))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.searchsorted()`](../reference/api/pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted") have renamed the `key` argument to `value` ([GH 14645](https://github.com/pandas-dev/pandas/issues/14645))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.consolidate` and `Series.consolidate` have been removed ([GH 15501](https://github.com/pandas-dev/pandas/issues/15501))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated module `pandas.json` ([GH 19944](https://github.com/pandas-dev/pandas/issues/19944))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module `pandas.tools` has been removed ([GH 15358](https://github.com/pandas-dev/pandas/issues/15358),
    [GH 16005](https://github.com/pandas-dev/pandas/issues/16005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.get_values()` and `SparseArray.to_dense()` have dropped the `fill`
    parameter ([GH 14686](https://github.com/pandas-dev/pandas/issues/14686))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.sortlevel` and `Series.sortlevel` have been removed ([GH 15099](https://github.com/pandas-dev/pandas/issues/15099))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseSeries.to_dense()` has dropped the `sparse_only` parameter ([GH 14686](https://github.com/pandas-dev/pandas/issues/14686))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") and [`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") have renamed the `raise_on_error` argument to `errors`
    ([GH 14967](https://github.com/pandas-dev/pandas/issues/14967))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_sequence`, `is_any_int_dtype`, and `is_floating_dtype` have been removed
    from `pandas.api.types` ([GH 16163](https://github.com/pandas-dev/pandas/issues/16163),
    [GH 16189](https://github.com/pandas-dev/pandas/issues/16189))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Performance improvements'
  prefs: []
  type: TYPE_NORMAL
- en: Slicing Series and DataFrames with an monotonically increasing [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") is now very fast and has speed comparable to slicing
    with an `Int64Index`. The speed increase is both when indexing by label (using
    .loc) and position(.iloc) ([GH 20395](https://github.com/pandas-dev/pandas/issues/20395))
    Slicing a monotonically increasing [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") itself (i.e. `ci[1000:2000]`) shows similar speed improvements
    as above ([GH 21659](https://github.com/pandas-dev/pandas/issues/21659))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`CategoricalIndex.equals()`](../reference/api/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals
    "pandas.CategoricalIndex.equals") when comparing to another [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") ([GH 24023](https://github.com/pandas-dev/pandas/issues/24023))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") in case of numeric dtpyes ([GH 21274](https://github.com/pandas-dev/pandas/issues/21274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `GroupBy.rank()` when dealing with tied rankings ([GH
    21237](https://github.com/pandas-dev/pandas/issues/21237))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DataFrame.set_index()`](../reference/api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index") with columns consisting of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") objects ([GH 21582](https://github.com/pandas-dev/pandas/issues/21582),
    [GH 21606](https://github.com/pandas-dev/pandas/issues/21606))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.at()`](../reference/api/pandas.Series.at.html#pandas.Series.at
    "pandas.Series.at") and `Index.get_value()` for Extension Arrays values (e.g.
    [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical"))
    ([GH 24204](https://github.com/pandas-dev/pandas/issues/24204))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of membership checks in [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") and [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") (i.e. `x in cat`-style checks are much faster). `CategoricalIndex.contains()`
    is likewise much faster ([GH 21369](https://github.com/pandas-dev/pandas/issues/21369),
    [GH 21508](https://github.com/pandas-dev/pandas/issues/21508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`HDFStore.groups()`](../reference/api/pandas.HDFStore.groups.html#pandas.HDFStore.groups
    "pandas.HDFStore.groups") (and dependent functions like [`HDFStore.keys()`](../reference/api/pandas.HDFStore.keys.html#pandas.HDFStore.keys
    "pandas.HDFStore.keys"). (i.e. `x in store` checks are much faster) ([GH 21372](https://github.com/pandas-dev/pandas/issues/21372))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the performance of [`pandas.get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") with `sparse=True` ([GH 21997](https://github.com/pandas-dev/pandas/issues/21997))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `IndexEngine.get_indexer_non_unique()` for sorted, non-unique
    indexes ([GH 9466](https://github.com/pandas-dev/pandas/issues/9466))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `PeriodIndex.unique()` ([GH 23083](https://github.com/pandas-dev/pandas/issues/23083))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") for `Series` objects ([GH 23404](https://github.com/pandas-dev/pandas/issues/23404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DatetimeIndex.normalize()`](../reference/api/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize
    "pandas.DatetimeIndex.normalize") and [`Timestamp.normalize()`](../reference/api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize") for timezone naive or UTC datetimes ([GH 23634](https://github.com/pandas-dev/pandas/issues/23634))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize") and various `DatetimeIndex` attributes with
    dateutil UTC timezone ([GH 23772](https://github.com/pandas-dev/pandas/issues/23772))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a performance regression on Windows with Python 3.7 of [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") ([GH 23516](https://github.com/pandas-dev/pandas/issues/23516))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") constructor for `Series` objects ([GH 23814](https://github.com/pandas-dev/pandas/issues/23814))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") for Categorical data ([GH 24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of iterating over a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). Using [`DataFrame.itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") now creates iterators without internally allocating
    lists of all elements ([GH 20783](https://github.com/pandas-dev/pandas/issues/20783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") constructor, additionally benefitting `PeriodArray` and `PeriodIndex`
    creation ([GH 24084](https://github.com/pandas-dev/pandas/issues/24084), [GH 24118](https://github.com/pandas-dev/pandas/issues/24118))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of tz-aware `DatetimeArray` binary operations ([GH 24491](https://github.com/pandas-dev/pandas/issues/24491))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Bug fixes'
  prefs: []
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") where `NaN` values in `codes` were silently converted
    to `0` ([GH 21767](https://github.com/pandas-dev/pandas/issues/21767)). In the
    future this will raise a `ValueError`. Also changes the behavior of `.from_codes([1.1,
    2.0])`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.sort_values()` where `NaN` values were always positioned
    in front regardless of `na_position` value. ([GH 22556](https://github.com/pandas-dev/pandas/issues/22556)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing with a boolean-valued `Categorical`. Now a boolean-valued
    `Categorical` is treated as a boolean mask ([GH 22665](https://github.com/pandas-dev/pandas/issues/22665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") with empty values and boolean categories was raising
    a `ValueError` after a change to dtype coercion ([GH 22702](https://github.com/pandas-dev/pandas/issues/22702)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.take()` with a user-provided `fill_value` not encoding the
    `fill_value`, which could result in a `ValueError`, incorrect results, or a segmentation
    fault ([GH 23296](https://github.com/pandas-dev/pandas/issues/23296)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [`Series.unstack()`](../reference/api/pandas.Series.unstack.html#pandas.Series.unstack
    "pandas.Series.unstack"), specifying a `fill_value` not present in the categories
    now raises a `TypeError` rather than ignoring the `fill_value` ([GH 23284](https://github.com/pandas-dev/pandas/issues/23284))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when resampling [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and aggregating on categorical data, the categorical
    dtype was getting lost. ([GH 23227](https://github.com/pandas-dev/pandas/issues/23227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in many methods of the `.str`-accessor, which always failed on calling the
    `CategoricalIndex.str` constructor ([GH 23555](https://github.com/pandas-dev/pandas/issues/23555),
    [GH 23556](https://github.com/pandas-dev/pandas/issues/23556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") losing the categorical dtype for categorical data ([GH
    24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.apply()` where `NaN` values could be handled unpredictably.
    They now remain unchanged ([GH 24241](https://github.com/pandas-dev/pandas/issues/24241))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") comparison methods incorrectly raising `ValueError` when
    operating against a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 24630](https://github.com/pandas-dev/pandas/issues/24630))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.set_categories()` where setting fewer new categories with
    `rename=True` caused a segmentation fault ([GH 24675](https://github.com/pandas-dev/pandas/issues/24675))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimelike
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed bug where two `DateOffset` objects with different `normalize` attributes
    could evaluate as equal ([GH 21404](https://github.com/pandas-dev/pandas/issues/21404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`Timestamp.resolution()`](../reference/api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") incorrectly returned 1-microsecond `timedelta`
    instead of 1-nanosecond [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") ([GH 21336](https://github.com/pandas-dev/pandas/issues/21336),
    [GH 21365](https://github.com/pandas-dev/pandas/issues/21365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") that did not consistently return an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") when `box=True` was specified ([GH 21864](https://github.com/pandas-dev/pandas/issues/21864))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons where string comparisons incorrectly raises
    `TypeError` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against `timedelta64[ns]` dtyped
    arrays; in some cases `TypeError` was incorrectly raised, in others it incorrectly
    failed to raise ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against object-dtyped arrays
    ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `Timedelta`-like objects ([GH 22005](https://github.com/pandas-dev/pandas/issues/22005),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `DateOffset` objects returning an `object` dtype instead of `datetime64[ns]` dtype
    ([GH 21610](https://github.com/pandas-dev/pandas/issues/21610), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype comparing against `NaT` incorrectly
    ([GH 22242](https://github.com/pandas-dev/pandas/issues/22242), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `Timestamp`-like object
    incorrectly returned `datetime64[ns]` dtype instead of `timedelta64[ns]` dtype
    ([GH 8554](https://github.com/pandas-dev/pandas/issues/8554), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `np.datetime64` object
    with non-nanosecond unit failing to convert to nanoseconds ([GH 18874](https://github.com/pandas-dev/pandas/issues/18874),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparisons against `Timestamp`-like objects failing to raise
    `TypeError` for inequality checks with mismatched types ([GH 8932](https://github.com/pandas-dev/pandas/issues/8932),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with mixed dtypes including `datetime64[ns]` incorrectly raising
    `TypeError` on equality comparisons ([GH 13128](https://github.com/pandas-dev/pandas/issues/13128),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") returning a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") for a single-column `DataFrame` with tz-aware datetime
    values. Now a 2-D [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects is returned ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.eq()`](../reference/api/pandas.DataFrame.eq.html#pandas.DataFrame.eq
    "pandas.DataFrame.eq") comparison against `NaT` incorrectly returning `True` or
    `NaN` ([GH 15697](https://github.com/pandas-dev/pandas/issues/15697), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") subtraction that incorrectly failed to raise `OverflowError`
    ([GH 22492](https://github.com/pandas-dev/pandas/issues/22492), [GH 22508](https://github.com/pandas-dev/pandas/issues/22508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") incorrectly allowing indexing with `Timedelta` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where frequency was being set if original frequency was
    `None` ([GH 22150](https://github.com/pandas-dev/pandas/issues/22150))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in rounding methods of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([`round()`](../reference/api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round"), [`ceil()`](../reference/api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil"), [`floor()`](../reference/api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")) and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")) could give rise to loss of precision ([GH 22591](https://github.com/pandas-dev/pandas/issues/22591))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") argument that would drop the `name` from the result ([GH 21697](https://github.com/pandas-dev/pandas/issues/21697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where adding or subtracting a `timedelta` or `Tick` object
    produced incorrect results ([GH 22988](https://github.com/pandas-dev/pandas/issues/22988))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    repr with period-dtype data missing a space before the data ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") when decrementing a start date to a past end date by a negative
    frequency ([GH 23270](https://github.com/pandas-dev/pandas/issues/23270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.min()`](../reference/api/pandas.Series.min.html#pandas.Series.min
    "pandas.Series.min") which would return `NaN` instead of `NaT` when called on
    a series of `NaT` ([GH 23282](https://github.com/pandas-dev/pandas/issues/23282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") not properly aligning categoricals, so that missing
    values in `self` where not filled by valid values from `other` ([GH 24147](https://github.com/pandas-dev/pandas/issues/24147))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine") with datetimelike values raising a TypeError ([GH
    23079](https://github.com/pandas-dev/pandas/issues/23079))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") with frequency of `Day` or higher where dates sufficiently
    far in the future could wrap around to the past instead of raising `OutOfBoundsDatetime`
    ([GH 14187](https://github.com/pandas-dev/pandas/issues/14187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range") ignoring the frequency of `start` and `end` when those
    are provided as [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    objects ([GH 20535](https://github.com/pandas-dev/pandas/issues/20535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") with attribute `freq.n` greater than 1 where adding a `DateOffset`
    object would return incorrect results ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that interpreted string indices as lists of characters when setting datetimelike
    values ([GH 23451](https://github.com/pandas-dev/pandas/issues/23451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when creating a new column from an ndarray of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects with timezones creating an object-dtype column, rather
    than datetime with timezone ([GH 23932](https://github.com/pandas-dev/pandas/issues/23932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor which would drop the frequency of an input [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 22311](https://github.com/pandas-dev/pandas/issues/22311))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where calling `np.array(dtindex, dtype=object)` would
    incorrectly return an array of `long` objects ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where passing a timezone-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and `dtype=object` would incorrectly raise a `ValueError`
    ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where calling `np.array(dtindex, dtype=object)` on a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would return an array of `datetime` objects instead of
    [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    objects, potentially losing nanosecond portions of the timestamps ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.__setitem__` not allowing setting with another `Categorical`
    when both are unordered and have the same categories, but in a different order
    ([GH 24142](https://github.com/pandas-dev/pandas/issues/24142))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") where using dates with millisecond resolution or higher could
    return incorrect values or the wrong number of values in the index ([GH 24110](https://github.com/pandas-dev/pandas/issues/24110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") from a [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") would incorrectly drop timezone information ([GH 18664](https://github.com/pandas-dev/pandas/issues/18664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would incorrectly lose
    the index’s `freq` attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clarified error message produced when passing an incorrect `freq` argument to
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with `NaT` as the first entry in the passed data ([GH
    11587](https://github.com/pandas-dev/pandas/issues/11587))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `box` and `utc` arguments were ignored when passing
    a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of unit mappings ([GH 23760](https://github.com/pandas-dev/pandas/issues/23760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.dt`](../reference/api/pandas.Series.dt.html#pandas.Series.dt
    "pandas.Series.dt") where the cache would not update properly after an in-place
    operation ([GH 24408](https://github.com/pandas-dev/pandas/issues/24408))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where comparisons against an array-like object with length
    1 failed to raise `ValueError` ([GH 23078](https://github.com/pandas-dev/pandas/issues/23078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex.astype()`, `PeriodIndex.astype()` and `TimedeltaIndex.astype()`
    ignoring the sign of the `dtype` for unsigned integer dtypes ([GH 24405](https://github.com/pandas-dev/pandas/issues/24405)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in [`Series.max()`](../reference/api/pandas.Series.max.html#pandas.Series.max
    "pandas.Series.max") with `datetime64[ns]`-dtype failing to return `NaT` when
    nulls are present and `skipna=False` is passed ([GH 24265](https://github.com/pandas-dev/pandas/issues/24265))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where arrays of `datetime` objects containing both timezone-aware
    and timezone-naive `datetimes` would fail to raise `ValueError` ([GH 24569](https://github.com/pandas-dev/pandas/issues/24569))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with invalid datetime format doesn’t coerce input to `NaT`
    even if `errors='coerce'` ([GH 24763](https://github.com/pandas-dev/pandas/issues/24763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype division by `Timedelta`-like
    scalar incorrectly returning `timedelta64[ns]` dtype instead of `float64` dtype
    ([GH 20088](https://github.com/pandas-dev/pandas/issues/20088), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding a [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with object dtype to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `timedelta64[ns]` dtype incorrectly raising ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in multiplying a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with numeric dtype against a `timedelta` object ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with numeric dtype when adding or subtracting an array or `Series` with `timedelta64`
    dtype ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with numeric dtype when multiplying or dividing an array with dtype `timedelta64`
    ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") incorrectly allowing indexing with `Timestamp` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where subtracting [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") from an object-dtyped array would raise `TypeError` ([GH 21980](https://github.com/pandas-dev/pandas/issues/21980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in adding a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-timedelta64[ns] dtypes to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-integer dtypes returning incorrect results instead
    of raising `TypeError` ([GH 22696](https://github.com/pandas-dev/pandas/issues/22696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding a timezone-aware datetime scalar incorrectly
    returned a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding `np.timedelta64('NaT')` incorrectly returned
    an all-`NaT` [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") instead of an all-`NaT` [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") and [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") have inconsistencies in supported unit string ([GH 21762](https://github.com/pandas-dev/pandas/issues/21762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") division where dividing by another [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") raised `TypeError` instead of returning a `Float64Index`
    ([GH 23829](https://github.com/pandas-dev/pandas/issues/23829), [GH 22631](https://github.com/pandas-dev/pandas/issues/22631))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") comparison operations where comparing against non-`Timedelta`-like
    objects would raise `TypeError` instead of returning all-`False` for `__eq__`
    and all-`True` for `__ne__` ([GH 24056](https://github.com/pandas-dev/pandas/issues/24056))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") comparisons when comparing with a `Tick` object incorrectly
    raising `TypeError` ([GH 24710](https://github.com/pandas-dev/pandas/issues/24710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Index.shift()`](../reference/api/pandas.Index.shift.html#pandas.Index.shift
    "pandas.Index.shift") where an `AssertionError` would raise when shifting across
    DST ([GH 8616](https://github.com/pandas-dev/pandas/issues/8616))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where passing an invalid timezone offset designator
    (`Z`) would not raise a `ValueError` ([GH 8910](https://github.com/pandas-dev/pandas/issues/8910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp.replace()`](../reference/api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace") where replacing at a DST boundary would retain an
    incorrect offset ([GH 7825](https://github.com/pandas-dev/pandas/issues/7825))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") with `datetime64[ns, tz]` data when replacing `NaT` ([GH
    11792](https://github.com/pandas-dev/pandas/issues/11792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") when passing different string date formats with a timezone
    offset would produce different timezone offsets ([GH 12064](https://github.com/pandas-dev/pandas/issues/12064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when comparing a tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would coerce the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to tz-naive ([GH 12601](https://github.com/pandas-dev/pandas/issues/12601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.truncate()`](../reference/api/pandas.Series.truncate.html#pandas.Series.truncate
    "pandas.Series.truncate") with a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would cause a core dump ([GH 9243](https://github.com/pandas-dev/pandas/issues/9243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    constructor which would coerce tz-aware and tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to tz-aware ([GH 13051](https://github.com/pandas-dev/pandas/issues/13051))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with `datetime64[ns, tz]` dtype that did not localize integer data correctly ([GH
    20964](https://github.com/pandas-dev/pandas/issues/20964))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing with an integer and tz would not localize
    correctly ([GH 12619](https://github.com/pandas-dev/pandas/issues/12619))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`DataFrame.describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") and [`Series.describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") on tz-aware datetimes did not show `first` and `last`
    result ([GH 21328](https://github.com/pandas-dev/pandas/issues/21328))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons failing to raise `TypeError` when comparing
    timezone-aware `DatetimeIndex` against `np.datetime64` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` assignment with a timezone-aware scalar ([GH 19843](https://github.com/pandas-dev/pandas/issues/19843))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.asof()`](../reference/api/pandas.DataFrame.asof.html#pandas.DataFrame.asof
    "pandas.DataFrame.asof") that raised a `TypeError` when attempting to compare
    tz-naive and tz-aware timestamps ([GH 21194](https://github.com/pandas-dev/pandas/issues/21194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructed with the `replace` method across DST ([GH 18785](https://github.com/pandas-dev/pandas/issues/18785))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when setting a new value with [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 18308](https://github.com/pandas-dev/pandas/issues/18308),
    [GH 20724](https://github.com/pandas-dev/pandas/issues/20724))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.unique()`](../reference/api/pandas.Index.unique.html#pandas.Index.unique
    "pandas.Index.unique") that did not re-localize tz-aware dates correctly ([GH
    21737](https://github.com/pandas-dev/pandas/issues/21737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a DST transition ([GH 21846](https://github.com/pandas-dev/pandas/issues/21846))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") where an `AmbiguousTimeError` or `NonExistentTimeError`
    would raise if a timezone aware timeseries ended on a DST transition ([GH 19375](https://github.com/pandas-dev/pandas/issues/19375),
    [GH 10117](https://github.com/pandas-dev/pandas/issues/10117))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") and [`Series.drop()`](../reference/api/pandas.Series.drop.html#pandas.Series.drop
    "pandas.Series.drop") when specifying a tz-aware Timestamp key to drop from a
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 21761](https://github.com/pandas-dev/pandas/issues/21761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") constructor where `NaT` and `dateutil.tz.tzlocal` would
    raise an `OutOfBoundsDatetime` error ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize") and [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") with `dateutil.tz.tzlocal` near a DST transition
    that would return an incorrectly localized datetime ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where a `dateutil.tz.tzutc` timezone passed with
    a `datetime.datetime` argument would be converted to a `pytz.UTC` timezone ([GH
    23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when specifying a `unit`
    and `errors='ignore'` ([GH 23758](https://github.com/pandas-dev/pandas/issues/23758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when passing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 24415](https://github.com/pandas-dev/pandas/issues/24415))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any") returns wrong value when `axis=1` and the data is of datetimelike
    type ([GH 23070](https://github.com/pandas-dev/pandas/issues/23070))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") where a timezone aware index was converted to
    UTC first before creating [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") ([GH 22905](https://github.com/pandas-dev/pandas/issues/22905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.tz_localize()`](../reference/api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize"), [`DataFrame.tz_convert()`](../reference/api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert"), [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize"), and [`Series.tz_convert()`](../reference/api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert") where `copy=False` would mutate the original argument
    inplace ([GH 6326](https://github.com/pandas-dev/pandas/issues/6326))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.max()`](../reference/api/pandas.DataFrame.max.html#pandas.DataFrame.max
    "pandas.DataFrame.max") and [`DataFrame.min()`](../reference/api/pandas.DataFrame.min.html#pandas.DataFrame.min
    "pandas.DataFrame.min") with `axis=1` where a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `NaN` would be returned when all columns contained the same
    timezone ([GH 10390](https://github.com/pandas-dev/pandas/issues/10390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offsets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `FY5253` where date offsets could incorrectly raise an `AssertionError`
    in arithmetic operations ([GH 14774](https://github.com/pandas-dev/pandas/issues/14774))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateOffset` where keyword arguments `week` and `milliseconds` were accepted
    and ignored. Passing these will now raise `ValueError` ([GH 19398](https://github.com/pandas-dev/pandas/issues/19398))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding `DateOffset` with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") incorrectly raising `TypeError` ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in comparing `DateOffset` objects with non-DateOffset objects, particularly
    strings, raising `ValueError` instead of returning `False` for equality checks
    and `True` for not-equal checks ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `__rmatmul__` doesn’t support matrix vector multiplication ([GH 21530](https://github.com/pandas-dev/pandas/issues/21530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") fails with read-only array ([GH 12813](https://github.com/pandas-dev/pandas/issues/12813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique
    "pandas.unique") handled signed zeros inconsistently: for some inputs 0.0 and
    -0.0 were treated as equal and for some inputs as different. Now they are treated
    as equal for all inputs ([GH 21866](https://github.com/pandas-dev/pandas/issues/21866))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg"), [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") and [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a list of functions and `axis=1`
    (e.g. `df.apply(['sum', 'mean'], axis=1)`), a `TypeError` was wrongly raised.
    For all three methods such calculation are now done correctly. ([GH 16679](https://github.com/pandas-dev/pandas/issues/16679)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    comparison against datetime-like scalars and arrays ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") multiplication between boolean dtype and integer returning
    `object` dtype instead of integer dtype ([GH 22047](https://github.com/pandas-dev/pandas/issues/22047),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a string argument and additional
    positional or keyword arguments (e.g. `df.apply('sum', min_count=1)`), a `TypeError`
    was wrongly raised ([GH 22376](https://github.com/pandas-dev/pandas/issues/22376))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") to extension dtype may raise `AttributeError` ([GH
    22578](https://github.com/pandas-dev/pandas/issues/22578))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype arithmetic operations with `ndarray`
    with integer dtype incorrectly treating the narray as `timedelta64[ns]` dtype
    ([GH 23114](https://github.com/pandas-dev/pandas/issues/23114))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rpow()`](../reference/api/pandas.Series.rpow.html#pandas.Series.rpow
    "pandas.Series.rpow") with object dtype `NaN` for `1 ** NA` instead of `1` ([GH
    22922](https://github.com/pandas-dev/pandas/issues/22922)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.agg()`](../reference/api/pandas.Series.agg.html#pandas.Series.agg
    "pandas.Series.agg") can now handle numpy NaN-aware methods like [`numpy.nansum()`](https://numpy.org/doc/stable/reference/generated/numpy.nansum.html#numpy.nansum
    "(in NumPy v1.26)") ([GH 19629](https://github.com/pandas-dev/pandas/issues/19629))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rank()`](../reference/api/pandas.Series.rank.html#pandas.Series.rank
    "pandas.Series.rank") and [`DataFrame.rank()`](../reference/api/pandas.DataFrame.rank.html#pandas.DataFrame.rank
    "pandas.DataFrame.rank") when `pct=True` and more than 2^(24) rows are present
    resulted in percentages greater than 1.0 ([GH 18271](https://github.com/pandas-dev/pandas/issues/18271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls such as [`DataFrame.round()`](../reference/api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round") with a non-unique [`CategoricalIndex()`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") now return expected data. Previously, data would be
    improperly duplicated ([GH 21809](https://github.com/pandas-dev/pandas/issues/21809)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `log10`, `floor` and `ceil` to the list of supported functions in [`DataFrame.eval()`](../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") ([GH 24139](https://github.com/pandas-dev/pandas/issues/24139),
    [GH 24353](https://github.com/pandas-dev/pandas/issues/24353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical operations `&, |, ^` between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") will no longer raise `ValueError` ([GH 22092](https://github.com/pandas-dev/pandas/issues/22092))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking PEP 3141 numbers in [`is_scalar()`](../reference/api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar") function returns `True` ([GH 22903](https://github.com/pandas-dev/pandas/issues/22903))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction methods like [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum") now accept the default value of `keepdims=False` when called
    from a NumPy ufunc, rather than raising a `TypeError`. Full support for `keepdims`
    has not been implemented ([GH 24356](https://github.com/pandas-dev/pandas/issues/24356)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") in which column types were unexpectedly converted
    to float ([GH 20699](https://github.com/pandas-dev/pandas/issues/20699))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") in which column types are not preserved and casted to
    float ([GH 24162](https://github.com/pandas-dev/pandas/issues/24162))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") when order of columns of dataframes doesn’t match, result
    observed is wrong in numeric values ([GH 20911](https://github.com/pandas-dev/pandas/issues/20911))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") where converting to an extension dtype when duplicate
    column names are present causes a `RecursionError` ([GH 24704](https://github.com/pandas-dev/pandas/issues/24704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Index.str.partition()` was not nan-safe ([GH 23558](https://github.com/pandas-dev/pandas/issues/23558)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.split()` was not nan-safe ([GH 23677](https://github.com/pandas-dev/pandas/issues/23677)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug [`Series.str.contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") not respecting the `na` argument for a `Categorical`
    dtype `Series` ([GH 22158](https://github.com/pandas-dev/pandas/issues/22158))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.cat()` when the result contained only `NaN` ([GH 24044](https://github.com/pandas-dev/pandas/issues/24044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in the [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") constructor where the `closed` parameter did not always
    override the inferred `closed` ([GH 19370](https://github.com/pandas-dev/pandas/issues/19370))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `IntervalIndex` repr where a trailing comma was missing after the
    list of intervals ([GH 20611](https://github.com/pandas-dev/pandas/issues/20611))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    where scalar arithmetic operations did not retain the `closed` value ([GH 22313](https://github.com/pandas-dev/pandas/issues/22313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") where indexing with datetime-like values raised a `KeyError`
    ([GH 20636](https://github.com/pandas-dev/pandas/issues/20636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalTree` where data containing `NaN` triggered a warning and resulted
    in incorrect indexing queries with [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 23352](https://github.com/pandas-dev/pandas/issues/23352))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.ne()`](../reference/api/pandas.DataFrame.ne.html#pandas.DataFrame.ne
    "pandas.DataFrame.ne") fails if columns contain column name “dtype” ([GH 22383](https://github.com/pandas-dev/pandas/issues/22383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The traceback from a `KeyError` when asking `.loc` for a single missing label
    is now shorter and more clear ([GH 21557](https://github.com/pandas-dev/pandas/issues/21557))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") now emits a `KeyError` when a malformed string is looked
    up, which is consistent with the behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 22803](https://github.com/pandas-dev/pandas/issues/22803))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `.ix` is asked for a missing integer label in a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with a first level of integer type, it now raises a `KeyError`,
    consistently with the case of a flat `Int64Index`, rather than falling back to
    positional indexing ([GH 21593](https://github.com/pandas-dev/pandas/issues/21593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.reindex()`](../reference/api/pandas.Index.reindex.html#pandas.Index.reindex
    "pandas.Index.reindex") when reindexing a tz-naive and tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 8306](https://github.com/pandas-dev/pandas/issues/8306))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") when reindexing an empty series with a `datetime64[ns,
    tz]` dtype ([GH 20869](https://github.com/pandas-dev/pandas/issues/20869))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when setting values with `.loc` and a timezone aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 11365](https://github.com/pandas-dev/pandas/issues/11365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.__getitem__` now accepts dictionaries and dictionary keys as list-likes
    of labels, consistently with `Series.__getitem__` ([GH 21294](https://github.com/pandas-dev/pandas/issues/21294))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `DataFrame[np.nan]` when columns are non-unique ([GH 21428](https://github.com/pandas-dev/pandas/issues/21428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with nanosecond resolution dates and timezones ([GH 11679](https://github.com/pandas-dev/pandas/issues/11679))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where indexing with a Numpy array containing negative values would mutate
    the indexer ([GH 21867](https://github.com/pandas-dev/pandas/issues/21867))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where mixed indexes wouldn’t allow integers for `.at` ([GH 19860](https://github.com/pandas-dev/pandas/issues/19860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.get_loc` now raises `KeyError` when boolean key passed. ([GH
    19087](https://github.com/pandas-dev/pandas/issues/19087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") when indexing with an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 19977](https://github.com/pandas-dev/pandas/issues/19977))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") no
    longer mangles `None`, `NaN` and `NaT`, i.e. they are treated as three different
    keys. However, for numeric Index all three are still coerced to a `NaN` ([GH 22332](https://github.com/pandas-dev/pandas/issues/22332))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `scalar in Index` if scalar is a float while the `Index` is of integer
    dtype ([GH 22085](https://github.com/pandas-dev/pandas/issues/22085))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`MultiIndex.set_levels()`](../reference/api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels") when levels value is not subscriptable ([GH 23273](https://github.com/pandas-dev/pandas/issues/23273))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where setting a timedelta column by `Index` causes it to be casted to double,
    and therefore lose precision ([GH 23511](https://github.com/pandas-dev/pandas/issues/23511))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union") and [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection") where name of the `Index` of the result was not computed
    correctly for certain cases ([GH 9943](https://github.com/pandas-dev/pandas/issues/9943),
    [GH 9862](https://github.com/pandas-dev/pandas/issues/9862))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    slicing with boolean [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") may raise `TypeError` ([GH 22533](https://github.com/pandas-dev/pandas/issues/22533))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodArray.__setitem__` when accepting slice and list-like value ([GH
    23978](https://github.com/pandas-dev/pandas/issues/23978))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"), [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would lose their `freq`
    attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `iat` where using it to assign an incompatible value would create a new
    column ([GH 23236](https://github.com/pandas-dev/pandas/issues/23236))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") where a `ValueError` would raise when one column contained
    a `datetime64[ns, tz]` dtype ([GH 15522](https://github.com/pandas-dev/pandas/issues/15522))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") that could be incorrectly cached and return incorrect
    answers if null elements are introduced after an initial call ([GH 19700](https://github.com/pandas-dev/pandas/issues/19700))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") now treats all NaN-floats as equal also for `np.object_`-dtype.
    This behavior is consistent with the behavior for float64 ([GH 22119](https://github.com/pandas-dev/pandas/issues/22119))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    no longer mangles NaN-floats and the `NaT`-object for `np.object_`-dtype, i.e.
    `NaT` is no longer coerced to a NaN-value and is treated as a different entity.
    ([GH 22295](https://github.com/pandas-dev/pandas/issues/22295))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    and [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    now properly handle numpy masked arrays with hardened masks. Previously, constructing
    a DataFrame or Series from a masked array with a hard mask would create a pandas
    object containing the underlying value, rather than the expected NaN. ([GH 24574](https://github.com/pandas-dev/pandas/issues/24574))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor where `dtype` argument was not honored when handling
    numpy masked record arrays. ([GH 24874](https://github.com/pandas-dev/pandas/issues/24874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `io.formats.style.Styler.applymap()` where `subset=` with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") slice would reduce to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") ([GH 19861](https://github.com/pandas-dev/pandas/issues/19861))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed compatibility for [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles prior to version 0.8.0; compatibility with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles from version 0.13 forward is maintained ([GH 21654](https://github.com/pandas-dev/pandas/issues/21654))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.get_loc_level()`](../reference/api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level") (and as a consequence, `.loc` on a `Series`
    or `DataFrame` with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index) will now raise a `KeyError`, rather than returning
    an empty `slice`, if asked a label which is present in the `levels` but is unused
    ([GH 22221](https://github.com/pandas-dev/pandas/issues/22221))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")
    has gained the [`MultiIndex.from_frame()`](../reference/api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame"), it allows constructing a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") object from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `TypeError` in Python 3 when creating [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") in which some levels have mixed types, e.g. when some labels
    are tuples ([GH 15457](https://github.com/pandas-dev/pandas/issues/15457))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which a column specified with `CategoricalDtype` of boolean
    categories was not being correctly coerced from string values to booleans ([GH
    20498](https://github.com/pandas-dev/pandas/issues/20498))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unicode column names were not being properly recognized
    with Python 2.x ([GH 13253](https://github.com/pandas-dev/pandas/issues/13253))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") when writing timezone aware data (`datetime64[ns, tz]`
    dtype) would raise a `TypeError` ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") where a naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would be written as `TIMESTAMP WITH TIMEZONE` type in
    supported databases, e.g. PostgreSQL ([GH 23510](https://github.com/pandas-dev/pandas/issues/23510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") when `parse_cols` is specified with an empty dataset ([GH
    9208](https://github.com/pandas-dev/pandas/issues/9208))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    no longer ignores all-whitespace `<tr>` within `<thead>` when considering the
    `skiprows` and `header` arguments. Previously, users had to decrease their `header`
    and `skiprows` values on such tables to work around the issue. ([GH 21641](https://github.com/pandas-dev/pandas/issues/21641))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") will correctly show the deprecation warning for previously
    deprecated `sheetname` ([GH 17994](https://github.com/pandas-dev/pandas/issues/17994))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    and [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table") will throw `UnicodeError` and not coredump on badly encoded
    strings ([GH 22748](https://github.com/pandas-dev/pandas/issues/22748))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will correctly parse timezone-aware datetimes ([GH 22256](https://github.com/pandas-dev/pandas/issues/22256))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management was prematurely optimized for the
    C engine when the data was being read in chunks ([GH 23509](https://github.com/pandas-dev/pandas/issues/23509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in unnamed columns were being improperly identified when extracting
    a multi-index ([GH 23687](https://github.com/pandas-dev/pandas/issues/23687))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will parse numbers in sas7bdat-files that have width less than 8 bytes correctly.
    ([GH 21616](https://github.com/pandas-dev/pandas/issues/21616))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with many columns ([GH 22628](https://github.com/pandas-dev/pandas/issues/22628))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with data page types having also bit 7 set
    (so page type is 128 + 256 = 384) ([GH 16615](https://github.com/pandas-dev/pandas/issues/16615))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") in which an incorrect error was raised on an invalid file format.
    ([GH 24548](https://github.com/pandas-dev/pandas/issues/24548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `detect_client_encoding()` where potential `IOError` goes unhandled when
    importing in a mod_wsgi process due to restricted access to stdout. ([GH 21552](https://github.com/pandas-dev/pandas/issues/21552))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` misses truncation indicators (…)
    on truncated DataFrame ([GH 15019](https://github.com/pandas-dev/pandas/issues/15019),
    [GH 22783](https://github.com/pandas-dev/pandas/issues/22783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` when both columns and row index
    are `MultiIndex` ([GH 22579](https://github.com/pandas-dev/pandas/issues/22579))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index_names=False` displaying index name ([GH
    22747](https://github.com/pandas-dev/pandas/issues/22747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `header=False` not displaying row index names
    ([GH 23788](https://github.com/pandas-dev/pandas/issues/23788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `sparsify=False` that caused it to raise `TypeError`
    ([GH 22887](https://github.com/pandas-dev/pandas/issues/22887))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that broke column alignment when `index=False` and
    width of first column’s values is greater than the width of first column’s header
    ([GH 16839](https://github.com/pandas-dev/pandas/issues/16839), [GH 13032](https://github.com/pandas-dev/pandas/issues/13032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that caused representations of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to not take up the whole window ([GH 22984](https://github.com/pandas-dev/pandas/issues/22984))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") where a single level MultiIndex incorrectly wrote a
    tuple. Now just the value of the index is written ([GH 19589](https://github.com/pandas-dev/pandas/issues/19589)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HDFStore` will raise `ValueError` when the `format` kwarg is passed to the
    constructor ([GH 13291](https://github.com/pandas-dev/pandas/issues/13291))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.append()`](../reference/api/pandas.HDFStore.append.html#pandas.HDFStore.append
    "pandas.HDFStore.append") when appending a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with an empty string column and `min_itemsize` < 8 ([GH 12242](https://github.com/pandas-dev/pandas/issues/12242))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory leaks occurred in the C engine when parsing
    `NaN` values due to insufficient cleanup on completion or error ([GH 21353](https://github.com/pandas-dev/pandas/issues/21353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which incorrect error messages were being raised when `skipfooter`
    was passed in along with `nrows`, `iterator`, or `chunksize` ([GH 23711](https://github.com/pandas-dev/pandas/issues/23711))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index names were being improperly handled in the cases when
    they were not provided ([GH 23484](https://github.com/pandas-dev/pandas/issues/23484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unnecessary warnings were being raised when the dialect’s
    values conflicted with the default arguments ([GH 23761](https://github.com/pandas-dev/pandas/issues/23761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") in which the error message was not displaying the valid flavors
    when an invalid one was provided ([GH 23549](https://github.com/pandas-dev/pandas/issues/23549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which extraneous header names were extracted, even though
    none were specified ([GH 11733](https://github.com/pandas-dev/pandas/issues/11733))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which column names were not being properly converted to
    string sometimes in Python 2.x ([GH 23874](https://github.com/pandas-dev/pandas/issues/23874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `index_col=None` was not being respected and parsing
    index columns anyway ([GH 18792](https://github.com/pandas-dev/pandas/issues/18792),
    [GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `usecols` was not being validated for proper column
    names when passed in as a string ([GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") when the resulting dict contains non-Python scalars
    in the case of numeric data ([GH 23753](https://github.com/pandas-dev/pandas/issues/23753))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string"), [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html"), [`DataFrame.to_latex()`](../reference/api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex") will correctly format output when a string is passed
    as the `float_format` argument ([GH 21625](https://github.com/pandas-dev/pandas/issues/21625),
    [GH 22270](https://github.com/pandas-dev/pandas/issues/22270))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused it to raise `OverflowError` when trying to use
    ‘inf’ as `na_value` with integer index column ([GH 17128](https://github.com/pandas-dev/pandas/issues/17128))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused the C engine on Python 3.6+ on Windows to improperly
    read CSV filenames with accented or special characters ([GH 15086](https://github.com/pandas-dev/pandas/issues/15086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf
    "pandas.read_fwf") in which the compression type of a file was not being properly
    inferred ([GH 22199](https://github.com/pandas-dev/pandas/issues/22199))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pandas.io.json.json_normalize()` that caused it to raise `TypeError`
    when two consecutive elements of `record_path` are dicts ([GH 22706](https://github.com/pandas-dev/pandas/issues/22706))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata"), `pandas.io.stata.StataWriter` and `pandas.io.stata.StataWriter117`
    where a exception would leave a partially written and invalid dta file ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` that produced
    invalid files when using strLs with non-ASCII characters ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `HDFStore` that caused it to raise `ValueError` when reading a Dataframe
    in Python 3 from fixed format written in Python 2 ([GH 24510](https://github.com/pandas-dev/pandas/issues/24510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") and more generally in the floating `repr` formatter.
    Zeros were not trimmed if `inf` was present in a columns while it was the case
    with NA values. Zeros are now trimmed as in the presence of NA ([GH 24861](https://github.com/pandas-dev/pandas/issues/24861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `repr` when truncating the number of columns and having a wide last
    column ([GH 24849](https://github.com/pandas-dev/pandas/issues/24849)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") and [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin") caused x-axis label and ticklabels to disappear
    when colorbar was on in IPython inline backend ([GH 10611](https://github.com/pandas-dev/pandas/issues/10611),
    [GH 10678](https://github.com/pandas-dev/pandas/issues/10678), and [GH 20455](https://github.com/pandas-dev/pandas/issues/20455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in plotting a Series with datetimes using `matplotlib.axes.Axes.scatter()`
    ([GH 22039](https://github.com/pandas-dev/pandas/issues/22039))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") caused bars to use multiple colors instead of a single
    one ([GH 20585](https://github.com/pandas-dev/pandas/issues/20585))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in validating color parameter caused extra color to be appended to the given
    color array. This happened to multiple plotting functions using matplotlib. ([GH
    20726](https://github.com/pandas-dev/pandas/issues/20726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Rolling.min()` and `Rolling.max()` with `closed='left'`, a datetime-like
    index and only one entry in the series leading to segfault ([GH 24718](https://github.com/pandas-dev/pandas/issues/24718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.first()` and `GroupBy.last()` with `as_index=False` leading
    to the loss of timezone information ([GH 15884](https://github.com/pandas-dev/pandas/issues/15884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateFrame.resample()` when downsampling across a DST boundary ([GH 8531](https://github.com/pandas-dev/pandas/issues/8531))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in date anchoring for `DateFrame.resample()` with offset `Day` when n >
    1 ([GH 24127](https://github.com/pandas-dev/pandas/issues/24127))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where `ValueError` is wrongly raised when calling `SeriesGroupBy.count()`
    method of a `SeriesGroupBy` when the grouping variable only contains NaNs and
    numpy version < 1.13 ([GH 21956](https://github.com/pandas-dev/pandas/issues/21956)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple bugs in `Rolling.min()` with `closed='left'` and a datetime-like index
    leading to incorrect results and also segfault. ([GH 21704](https://github.com/pandas-dev/pandas/issues/21704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.apply()`](../reference/api/pandas.core.resample.Resampler.apply.html#pandas.core.resample.Resampler.apply
    "pandas.core.resample.Resampler.apply") when passing positional arguments to applied
    func ([GH 14615](https://github.com/pandas-dev/pandas/issues/14615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when passing `numpy.timedelta64` to `loffset` kwarg
    ([GH 7687](https://github.com/pandas-dev/pandas/issues/7687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.asfreq()`](../reference/api/pandas.core.resample.Resampler.asfreq.html#pandas.core.resample.Resampler.asfreq
    "pandas.core.resample.Resampler.asfreq") when frequency of `TimedeltaIndex` is
    a subperiod of a new frequency ([GH 13022](https://github.com/pandas-dev/pandas/issues/13022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`SeriesGroupBy.mean()`](../reference/api/pandas.core.groupby.SeriesGroupBy.mean.html#pandas.core.groupby.SeriesGroupBy.mean
    "pandas.core.groupby.SeriesGroupBy.mean") when values were integral but could
    not fit inside of int64, overflowing instead. ([GH 22487](https://github.com/pandas-dev/pandas/issues/22487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RollingGroupby.agg()` and `ExpandingGroupby.agg()` now support multiple aggregation
    functions as parameters ([GH 15072](https://github.com/pandas-dev/pandas/issues/15072))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when resampling by a weekly offset (`'W'`) across a
    DST transition ([GH 9119](https://github.com/pandas-dev/pandas/issues/9119), [GH
    21459](https://github.com/pandas-dev/pandas/issues/21459))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") in which the `axis` argument was not being respected
    during aggregations ([GH 23372](https://github.com/pandas-dev/pandas/issues/23372))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.transform()` which caused missing values when the input function
    can accept a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but renames it ([GH 23455](https://github.com/pandas-dev/pandas/issues/23455)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.nth()` where column order was not always preserved ([GH 20760](https://github.com/pandas-dev/pandas/issues/20760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.rank()` with `method='dense'` and `pct=True` when a group has
    only one member would raise a `ZeroDivisionError` ([GH 23666](https://github.com/pandas-dev/pandas/issues/23666)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling `GroupBy.rank()` with empty groups and `pct=True` was raising a `ZeroDivisionError`
    ([GH 22519](https://github.com/pandas-dev/pandas/issues/22519))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") when resampling `NaT` in `TimeDeltaIndex` ([GH 13223](https://github.com/pandas-dev/pandas/issues/13223)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") did not respect the `observed` argument when selecting
    a column and instead always used `observed=False` ([GH 23970](https://github.com/pandas-dev/pandas/issues/23970))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SeriesGroupBy.pct_change()` or `DataFrameGroupBy.pct_change()` would
    previously work across groups when calculating the percent change, where it now
    correctly works per group ([GH 21200](https://github.com/pandas-dev/pandas/issues/21200),
    [GH 21235](https://github.com/pandas-dev/pandas/issues/21235)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug preventing hash table creation with very large number (2^32) of rows ([GH
    22805](https://github.com/pandas-dev/pandas/issues/22805))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in groupby when grouping on categorical causes `ValueError` and incorrect
    grouping if `observed=True` and `nan` is present in categorical column ([GH 24740](https://github.com/pandas-dev/pandas/issues/24740),
    [GH 21151](https://github.com/pandas-dev/pandas/issues/21151)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining resampled DataFrames with timezone aware index ([GH
    13783](https://github.com/pandas-dev/pandas/issues/13783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining only `Series` the `names` argument of `concat` is
    no longer ignored ([GH 23490](https://github.com/pandas-dev/pandas/issues/23490))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") with `datetime64[ns, tz]` dtype which would return
    tz-naive result ([GH 21469](https://github.com/pandas-dev/pandas/issues/21469))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") and [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with `datetime64[ns, tz]` dtype ([GH 21546](https://github.com/pandas-dev/pandas/issues/21546))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with an empty DataFrame and empty `cond` having non-bool
    dtype ([GH 21947](https://github.com/pandas-dev/pandas/issues/21947))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.mask()`](../reference/api/pandas.Series.mask.html#pandas.Series.mask
    "pandas.Series.mask") and [`DataFrame.mask()`](../reference/api/pandas.DataFrame.mask.html#pandas.DataFrame.mask
    "pandas.DataFrame.mask") with `list` conditionals ([GH 21891](https://github.com/pandas-dev/pandas/issues/21891))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises RecursionError when converting OutOfBounds
    `datetime64[ns, tz]` ([GH 20380](https://github.com/pandas-dev/pandas/issues/20380))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GroupBy.rank()` now raises a `ValueError` when an invalid value is passed
    for argument `na_option` ([GH 22124](https://github.com/pandas-dev/pandas/issues/22124))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") with Unicode attributes in Python 2 ([GH 22084](https://github.com/pandas-dev/pandas/issues/22084))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises `RecursionError` when replacing empty lists
    ([GH 22083](https://github.com/pandas-dev/pandas/issues/22083))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") when dict is used as the `to_replace` value and one
    key in the dict is another key’s value, the results were inconsistent between
    using integer key and using string key ([GH 20656](https://github.com/pandas-dev/pandas/issues/20656))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop_duplicates()`](../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates") for empty `DataFrame` which incorrectly raises
    an error ([GH 20516](https://github.com/pandas-dev/pandas/issues/20516))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long") when a string is passed to the stubnames argument and a
    column name is a substring of that stubname ([GH 22468](https://github.com/pandas-dev/pandas/issues/22468))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    when merging `datetime64[ns, tz]` data that contained a DST transition ([GH 18885](https://github.com/pandas-dev/pandas/issues/18885))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") when merging on float values within defined tolerance ([GH
    22981](https://github.com/pandas-dev/pandas/issues/22981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when concatenating a multicolumn DataFrame with tz-aware data
    against a DataFrame with a different number of columns ([GH 22796](https://github.com/pandas-dev/pandas/issues/22796))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where confusing error message raised when attempting to merge
    with missing values ([GH 23189](https://github.com/pandas-dev/pandas/issues/23189))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") and [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") for dataframes that have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") for columns ([GH 23033](https://github.com/pandas-dev/pandas/issues/23033)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    when passing column names that are not present in `DataFrame` ([GH 23575](https://github.com/pandas-dev/pandas/issues/23575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.append()` with a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a dateutil timezone would raise a `TypeError` ([GH 23682](https://github.com/pandas-dev/pandas/issues/23682))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    construction when passing no data and `dtype=str` ([GH 22477](https://github.com/pandas-dev/pandas/issues/22477))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") with
    `bins` as an overlapping `IntervalIndex` where multiple bins were returned per
    item instead of raising a `ValueError` ([GH 23980](https://github.com/pandas-dev/pandas/issues/23980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining `Series` datetimetz with `Series` category would
    lose timezone ([GH 23816](https://github.com/pandas-dev/pandas/issues/23816))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") when joining on partial MultiIndex would drop names ([GH
    20452](https://github.com/pandas-dev/pandas/issues/20452)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now returns the correct n values when keep != ‘all’
    also when tied on the first columns ([GH 22752](https://github.com/pandas-dev/pandas/issues/22752))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a DataFrame with an index argument that wasn’t already an instance
    of [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") was
    broken ([GH 22227](https://github.com/pandas-dev/pandas/issues/22227)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") prevented list subclasses to be used to construction ([GH
    21226](https://github.com/pandas-dev/pandas/issues/21226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") and [`DataFrame.pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") returning a misleading error message when the
    resulting DataFrame has more elements than int32 can handle. Now, the error message
    is improved, pointing towards the actual problem ([GH 20601](https://github.com/pandas-dev/pandas/issues/20601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") where a `ValueError` was raised when unstacking timezone
    aware values ([GH 18338](https://github.com/pandas-dev/pandas/issues/18338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") where timezone aware values were converted to timezone
    naive values ([GH 19420](https://github.com/pandas-dev/pandas/issues/19420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where a `TypeError` was raised when `by_col` were timezone
    aware values ([GH 21184](https://github.com/pandas-dev/pandas/issues/21184))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug showing an incorrect shape when throwing error during `DataFrame` construction.
    ([GH 20742](https://github.com/pandas-dev/pandas/issues/20742))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Updating a boolean, datetime, or timedelta column to be Sparse now works ([GH
    22367](https://github.com/pandas-dev/pandas/issues/22367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.to_sparse()` with Series already holding sparse data not constructing
    properly ([GH 22389](https://github.com/pandas-dev/pandas/issues/22389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a `sparse_index` to the SparseArray constructor no longer defaults
    the na-value to `np.nan` for all dtypes. The correct na_value for `data.dtype`
    is now used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nbytes` under-reporting its memory usage by not including
    the size of its sparse index.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift") for non-NA `fill_value`, as values are no longer converted
    to a dense array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` not including `fill_value` in the groups for non-NA
    `fill_value` when grouping by a sparse column ([GH 5078](https://github.com/pandas-dev/pandas/issues/5078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in unary inversion operator (`~`) on a `SparseSeries` with boolean values.
    The performance of this has also been improved ([GH 22835](https://github.com/pandas-dev/pandas/issues/22835))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArary.unique()` not returning the unique values ([GH 19595](https://github.com/pandas-dev/pandas/issues/19595))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nonzero()` and `SparseDataFrame.dropna()` returning shifted/incorrect
    results ([GH 21172](https://github.com/pandas-dev/pandas/issues/21172))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where dtypes would lose sparseness ([GH 23744](https://github.com/pandas-dev/pandas/issues/23744))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    when concatenating a list of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with all-sparse values changing the `fill_value` and converting
    to a dense Series ([GH 24371](https://github.com/pandas-dev/pandas/issues/24371))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now takes a `text_color_threshold`
    parameter to automatically lighten the text color based on the luminance of the
    background color. This improves readability with dark background colors without
    the need to limit the background colormap range. ([GH 21258](https://github.com/pandas-dev/pandas/issues/21258))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now also supports tablewise
    application (in addition to rowwise and columnwise) with `axis=None` ([GH 15204](https://github.com/pandas-dev/pandas/issues/15204))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bar()`](../reference/api/pandas.io.formats.style.Styler.bar.html#pandas.io.formats.style.Styler.bar
    "pandas.io.formats.style.Styler.bar") now also supports tablewise application
    (in addition to rowwise and columnwise) with `axis=None` and setting clipping
    range with `vmin` and `vmax` ([GH 21548](https://github.com/pandas-dev/pandas/issues/21548)
    and [GH 21526](https://github.com/pandas-dev/pandas/issues/21526)). `NaN` values
    are also handled properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building pandas for development now requires `cython >= 0.28.2` ([GH 21688](https://github.com/pandas-dev/pandas/issues/21688))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing pandas now requires `hypothesis>=3.58`. You can find [the Hypothesis
    docs here](https://hypothesis.readthedocs.io/en/latest/index.html), and a pandas-specific
    introduction [in the contributing guide](../development/contributing_codebase.html#using-hypothesis).
    ([GH 22280](https://github.com/pandas-dev/pandas/issues/22280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building pandas on macOS now targets minimum macOS 10.9 if run on macOS 10.9
    or above ([GH 23424](https://github.com/pandas-dev/pandas/issues/23424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug where C variables were declared with external linkage causing import errors
    if certain other C libraries were imported before pandas. ([GH 24113](https://github.com/pandas-dev/pandas/issues/24113))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Categorical.from_codes()`](../reference/api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") where `NaN` values in `codes` were silently converted
    to `0` ([GH 21767](https://github.com/pandas-dev/pandas/issues/21767)). In the
    future this will raise a `ValueError`. Also changes the behavior of `.from_codes([1.1,
    2.0])`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.sort_values()` where `NaN` values were always positioned
    in front regardless of `na_position` value. ([GH 22556](https://github.com/pandas-dev/pandas/issues/22556)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing with a boolean-valued `Categorical`. Now a boolean-valued
    `Categorical` is treated as a boolean mask ([GH 22665](https://github.com/pandas-dev/pandas/issues/22665))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") with empty values and boolean categories was raising
    a `ValueError` after a change to dtype coercion ([GH 22702](https://github.com/pandas-dev/pandas/issues/22702)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.take()` with a user-provided `fill_value` not encoding the
    `fill_value`, which could result in a `ValueError`, incorrect results, or a segmentation
    fault ([GH 23296](https://github.com/pandas-dev/pandas/issues/23296)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [`Series.unstack()`](../reference/api/pandas.Series.unstack.html#pandas.Series.unstack
    "pandas.Series.unstack"), specifying a `fill_value` not present in the categories
    now raises a `TypeError` rather than ignoring the `fill_value` ([GH 23284](https://github.com/pandas-dev/pandas/issues/23284))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when resampling [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and aggregating on categorical data, the categorical
    dtype was getting lost. ([GH 23227](https://github.com/pandas-dev/pandas/issues/23227))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in many methods of the `.str`-accessor, which always failed on calling the
    `CategoricalIndex.str` constructor ([GH 23555](https://github.com/pandas-dev/pandas/issues/23555),
    [GH 23556](https://github.com/pandas-dev/pandas/issues/23556))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") losing the categorical dtype for categorical data ([GH
    24077](https://github.com/pandas-dev/pandas/issues/24077))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.apply()` where `NaN` values could be handled unpredictably.
    They now remain unchanged ([GH 24241](https://github.com/pandas-dev/pandas/issues/24241))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") comparison methods incorrectly raising `ValueError` when
    operating against a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 24630](https://github.com/pandas-dev/pandas/issues/24630))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.set_categories()` where setting fewer new categories with
    `rename=True` caused a segmentation fault ([GH 24675](https://github.com/pandas-dev/pandas/issues/24675))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetimelike
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed bug where two `DateOffset` objects with different `normalize` attributes
    could evaluate as equal ([GH 21404](https://github.com/pandas-dev/pandas/issues/21404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`Timestamp.resolution()`](../reference/api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") incorrectly returned 1-microsecond `timedelta`
    instead of 1-nanosecond [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") ([GH 21336](https://github.com/pandas-dev/pandas/issues/21336),
    [GH 21365](https://github.com/pandas-dev/pandas/issues/21365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") that did not consistently return an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") when `box=True` was specified ([GH 21864](https://github.com/pandas-dev/pandas/issues/21864))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons where string comparisons incorrectly raises
    `TypeError` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against `timedelta64[ns]` dtyped
    arrays; in some cases `TypeError` was incorrectly raised, in others it incorrectly
    failed to raise ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons when comparing against object-dtyped arrays
    ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `Timedelta`-like objects ([GH 22005](https://github.com/pandas-dev/pandas/issues/22005),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype addition and subtraction with
    `DateOffset` objects returning an `object` dtype instead of `datetime64[ns]` dtype
    ([GH 21610](https://github.com/pandas-dev/pandas/issues/21610), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype comparing against `NaT` incorrectly
    ([GH 22242](https://github.com/pandas-dev/pandas/issues/22242), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `Timestamp`-like object
    incorrectly returned `datetime64[ns]` dtype instead of `timedelta64[ns]` dtype
    ([GH 8554](https://github.com/pandas-dev/pandas/issues/8554), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `datetime64[ns]` dtype subtracting `np.datetime64` object
    with non-nanosecond unit failing to convert to nanoseconds ([GH 18874](https://github.com/pandas-dev/pandas/issues/18874),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") comparisons against `Timestamp`-like objects failing to raise
    `TypeError` for inequality checks with mismatched types ([GH 8932](https://github.com/pandas-dev/pandas/issues/8932),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with mixed dtypes including `datetime64[ns]` incorrectly raising
    `TypeError` on equality comparisons ([GH 13128](https://github.com/pandas-dev/pandas/issues/13128),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") returning a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") for a single-column `DataFrame` with tz-aware datetime
    values. Now a 2-D [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects is returned ([GH 24024](https://github.com/pandas-dev/pandas/issues/24024))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.eq()`](../reference/api/pandas.DataFrame.eq.html#pandas.DataFrame.eq
    "pandas.DataFrame.eq") comparison against `NaT` incorrectly returning `True` or
    `NaN` ([GH 15697](https://github.com/pandas-dev/pandas/issues/15697), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") subtraction that incorrectly failed to raise `OverflowError`
    ([GH 22492](https://github.com/pandas-dev/pandas/issues/22492), [GH 22508](https://github.com/pandas-dev/pandas/issues/22508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") incorrectly allowing indexing with `Timedelta` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where frequency was being set if original frequency was
    `None` ([GH 22150](https://github.com/pandas-dev/pandas/issues/22150))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in rounding methods of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([`round()`](../reference/api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round"), [`ceil()`](../reference/api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil"), [`floor()`](../reference/api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")) and [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([`round()`](../reference/api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round"), [`ceil()`](../reference/api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil
    "pandas.Timestamp.ceil"), [`floor()`](../reference/api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")) could give rise to loss of precision ([GH 22591](https://github.com/pandas-dev/pandas/issues/22591))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with an [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") argument that would drop the `name` from the result ([GH 21697](https://github.com/pandas-dev/pandas/issues/21697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where adding or subtracting a `timedelta` or `Tick` object
    produced incorrect results ([GH 22988](https://github.com/pandas-dev/pandas/issues/22988))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    repr with period-dtype data missing a space before the data ([GH 23601](https://github.com/pandas-dev/pandas/issues/23601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") when decrementing a start date to a past end date by a negative
    frequency ([GH 23270](https://github.com/pandas-dev/pandas/issues/23270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.min()`](../reference/api/pandas.Series.min.html#pandas.Series.min
    "pandas.Series.min") which would return `NaN` instead of `NaT` when called on
    a series of `NaT` ([GH 23282](https://github.com/pandas-dev/pandas/issues/23282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") not properly aligning categoricals, so that missing
    values in `self` where not filled by valid values from `other` ([GH 24147](https://github.com/pandas-dev/pandas/issues/24147))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine") with datetimelike values raising a TypeError ([GH
    23079](https://github.com/pandas-dev/pandas/issues/23079))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") with frequency of `Day` or higher where dates sufficiently
    far in the future could wrap around to the past instead of raising `OutOfBoundsDatetime`
    ([GH 14187](https://github.com/pandas-dev/pandas/issues/14187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range") ignoring the frequency of `start` and `end` when those
    are provided as [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    objects ([GH 20535](https://github.com/pandas-dev/pandas/issues/20535)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") with attribute `freq.n` greater than 1 where adding a `DateOffset`
    object would return incorrect results ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that interpreted string indices as lists of characters when setting datetimelike
    values ([GH 23451](https://github.com/pandas-dev/pandas/issues/23451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when creating a new column from an ndarray of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects with timezones creating an object-dtype column, rather
    than datetime with timezone ([GH 23932](https://github.com/pandas-dev/pandas/issues/23932))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor which would drop the frequency of an input [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 22311](https://github.com/pandas-dev/pandas/issues/22311))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where calling `np.array(dtindex, dtype=object)` would
    incorrectly return an array of `long` objects ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where passing a timezone-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and `dtype=object` would incorrectly raise a `ValueError`
    ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    where calling `np.array(dtindex, dtype=object)` on a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would return an array of `datetime` objects instead of
    [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    objects, potentially losing nanosecond portions of the timestamps ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.__setitem__` not allowing setting with another `Categorical`
    when both are unordered and have the same categories, but in a different order
    ([GH 24142](https://github.com/pandas-dev/pandas/issues/24142))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") where using dates with millisecond resolution or higher could
    return incorrect values or the wrong number of values in the index ([GH 24110](https://github.com/pandas-dev/pandas/issues/24110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") from a [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") would incorrectly drop timezone information ([GH 18664](https://github.com/pandas-dev/pandas/issues/18664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would incorrectly lose
    the index’s `freq` attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clarified error message produced when passing an incorrect `freq` argument to
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with `NaT` as the first entry in the passed data ([GH
    11587](https://github.com/pandas-dev/pandas/issues/11587))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `box` and `utc` arguments were ignored when passing
    a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of unit mappings ([GH 23760](https://github.com/pandas-dev/pandas/issues/23760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.dt`](../reference/api/pandas.Series.dt.html#pandas.Series.dt
    "pandas.Series.dt") where the cache would not update properly after an in-place
    operation ([GH 24408](https://github.com/pandas-dev/pandas/issues/24408))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") where comparisons against an array-like object with length
    1 failed to raise `ValueError` ([GH 23078](https://github.com/pandas-dev/pandas/issues/23078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex.astype()`, `PeriodIndex.astype()` and `TimedeltaIndex.astype()`
    ignoring the sign of the `dtype` for unsigned integer dtypes ([GH 24405](https://github.com/pandas-dev/pandas/issues/24405)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in [`Series.max()`](../reference/api/pandas.Series.max.html#pandas.Series.max
    "pandas.Series.max") with `datetime64[ns]`-dtype failing to return `NaT` when
    nulls are present and `skipna=False` is passed ([GH 24265](https://github.com/pandas-dev/pandas/issues/24265))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where arrays of `datetime` objects containing both timezone-aware
    and timezone-naive `datetimes` would fail to raise `ValueError` ([GH 24569](https://github.com/pandas-dev/pandas/issues/24569))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") with invalid datetime format doesn’t coerce input to `NaT`
    even if `errors='coerce'` ([GH 24763](https://github.com/pandas-dev/pandas/issues/24763))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype division by `Timedelta`-like
    scalar incorrectly returning `timedelta64[ns]` dtype instead of `float64` dtype
    ([GH 20088](https://github.com/pandas-dev/pandas/issues/20088), [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding a [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with object dtype to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `timedelta64[ns]` dtype incorrectly raising ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in multiplying a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with numeric dtype against a `timedelta` object ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with numeric dtype when adding or subtracting an array or `Series` with `timedelta64`
    dtype ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with numeric dtype when multiplying or dividing an array with dtype `timedelta64`
    ([GH 22390](https://github.com/pandas-dev/pandas/issues/22390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") incorrectly allowing indexing with `Timestamp` object
    ([GH 20464](https://github.com/pandas-dev/pandas/issues/20464))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where subtracting [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") from an object-dtyped array would raise `TypeError` ([GH 21980](https://github.com/pandas-dev/pandas/issues/21980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in adding a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-timedelta64[ns] dtypes to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with all-integer dtypes returning incorrect results instead
    of raising `TypeError` ([GH 22696](https://github.com/pandas-dev/pandas/issues/22696))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding a timezone-aware datetime scalar incorrectly
    returned a timezone-naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where adding `np.timedelta64('NaT')` incorrectly returned
    an all-`NaT` [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") instead of an all-`NaT` [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") and [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") have inconsistencies in supported unit string ([GH 21762](https://github.com/pandas-dev/pandas/issues/21762))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") division where dividing by another [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") raised `TypeError` instead of returning a `Float64Index`
    ([GH 23829](https://github.com/pandas-dev/pandas/issues/23829), [GH 22631](https://github.com/pandas-dev/pandas/issues/22631))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") comparison operations where comparing against non-`Timedelta`-like
    objects would raise `TypeError` instead of returning all-`False` for `__eq__`
    and all-`True` for `__ne__` ([GH 24056](https://github.com/pandas-dev/pandas/issues/24056))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") comparisons when comparing with a `Tick` object incorrectly
    raising `TypeError` ([GH 24710](https://github.com/pandas-dev/pandas/issues/24710))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timezones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Index.shift()`](../reference/api/pandas.Index.shift.html#pandas.Index.shift
    "pandas.Index.shift") where an `AssertionError` would raise when shifting across
    DST ([GH 8616](https://github.com/pandas-dev/pandas/issues/8616))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where passing an invalid timezone offset designator
    (`Z`) would not raise a `ValueError` ([GH 8910](https://github.com/pandas-dev/pandas/issues/8910))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp.replace()`](../reference/api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace") where replacing at a DST boundary would retain an
    incorrect offset ([GH 7825](https://github.com/pandas-dev/pandas/issues/7825))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") with `datetime64[ns, tz]` data when replacing `NaT` ([GH
    11792](https://github.com/pandas-dev/pandas/issues/11792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") when passing different string date formats with a timezone
    offset would produce different timezone offsets ([GH 12064](https://github.com/pandas-dev/pandas/issues/12064))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when comparing a tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would coerce the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") to tz-naive ([GH 12601](https://github.com/pandas-dev/pandas/issues/12601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.truncate()`](../reference/api/pandas.Series.truncate.html#pandas.Series.truncate
    "pandas.Series.truncate") with a tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") which would cause a core dump ([GH 9243](https://github.com/pandas-dev/pandas/issues/9243))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    constructor which would coerce tz-aware and tz-naive [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") to tz-aware ([GH 13051](https://github.com/pandas-dev/pandas/issues/13051))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    with `datetime64[ns, tz]` dtype that did not localize integer data correctly ([GH
    20964](https://github.com/pandas-dev/pandas/issues/20964))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") where constructing with an integer and tz would not localize
    correctly ([GH 12619](https://github.com/pandas-dev/pandas/issues/12619))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`DataFrame.describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") and [`Series.describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") on tz-aware datetimes did not show `first` and `last`
    result ([GH 21328](https://github.com/pandas-dev/pandas/issues/21328))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") comparisons failing to raise `TypeError` when comparing
    timezone-aware `DatetimeIndex` against `np.datetime64` ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` assignment with a timezone-aware scalar ([GH 19843](https://github.com/pandas-dev/pandas/issues/19843))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.asof()`](../reference/api/pandas.DataFrame.asof.html#pandas.DataFrame.asof
    "pandas.DataFrame.asof") that raised a `TypeError` when attempting to compare
    tz-naive and tz-aware timestamps ([GH 21194](https://github.com/pandas-dev/pandas/issues/21194))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when constructing a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructed with the `replace` method across DST ([GH 18785](https://github.com/pandas-dev/pandas/issues/18785))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when setting a new value with [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") with a [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 18308](https://github.com/pandas-dev/pandas/issues/18308),
    [GH 20724](https://github.com/pandas-dev/pandas/issues/20724))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.unique()`](../reference/api/pandas.Index.unique.html#pandas.Index.unique
    "pandas.Index.unique") that did not re-localize tz-aware dates correctly ([GH
    21737](https://github.com/pandas-dev/pandas/issues/21737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a DST transition ([GH 21846](https://github.com/pandas-dev/pandas/issues/21846))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") where an `AmbiguousTimeError` or `NonExistentTimeError`
    would raise if a timezone aware timeseries ended on a DST transition ([GH 19375](https://github.com/pandas-dev/pandas/issues/19375),
    [GH 10117](https://github.com/pandas-dev/pandas/issues/10117))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") and [`Series.drop()`](../reference/api/pandas.Series.drop.html#pandas.Series.drop
    "pandas.Series.drop") when specifying a tz-aware Timestamp key to drop from a
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with a DST transition ([GH 21761](https://github.com/pandas-dev/pandas/issues/21761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") constructor where `NaT` and `dateutil.tz.tzlocal` would
    raise an `OutOfBoundsDatetime` error ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.tz_localize()`](../reference/api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize") and [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") with `dateutil.tz.tzlocal` near a DST transition
    that would return an incorrectly localized datetime ([GH 23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") constructor where a `dateutil.tz.tzutc` timezone passed with
    a `datetime.datetime` argument would be converted to a `pytz.UTC` timezone ([GH
    23807](https://github.com/pandas-dev/pandas/issues/23807))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when specifying a `unit`
    and `errors='ignore'` ([GH 23758](https://github.com/pandas-dev/pandas/issues/23758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") where `utc=True` was not respected when passing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") ([GH 24415](https://github.com/pandas-dev/pandas/issues/24415))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any") returns wrong value when `axis=1` and the data is of datetimelike
    type ([GH 23070](https://github.com/pandas-dev/pandas/issues/23070))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex.to_period()`](../reference/api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period") where a timezone aware index was converted to
    UTC first before creating [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") ([GH 22905](https://github.com/pandas-dev/pandas/issues/22905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.tz_localize()`](../reference/api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize"), [`DataFrame.tz_convert()`](../reference/api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert"), [`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize"), and [`Series.tz_convert()`](../reference/api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert") where `copy=False` would mutate the original argument
    inplace ([GH 6326](https://github.com/pandas-dev/pandas/issues/6326))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.max()`](../reference/api/pandas.DataFrame.max.html#pandas.DataFrame.max
    "pandas.DataFrame.max") and [`DataFrame.min()`](../reference/api/pandas.DataFrame.min.html#pandas.DataFrame.min
    "pandas.DataFrame.min") with `axis=1` where a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with `NaN` would be returned when all columns contained the same
    timezone ([GH 10390](https://github.com/pandas-dev/pandas/issues/10390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offsets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `FY5253` where date offsets could incorrectly raise an `AssertionError`
    in arithmetic operations ([GH 14774](https://github.com/pandas-dev/pandas/issues/14774))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateOffset` where keyword arguments `week` and `milliseconds` were accepted
    and ignored. Passing these will now raise `ValueError` ([GH 19398](https://github.com/pandas-dev/pandas/issues/19398))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in adding `DateOffset` with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") incorrectly raising `TypeError` ([GH 23215](https://github.com/pandas-dev/pandas/issues/23215))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in comparing `DateOffset` objects with non-DateOffset objects, particularly
    strings, raising `ValueError` instead of returning `False` for equality checks
    and `True` for not-equal checks ([GH 23524](https://github.com/pandas-dev/pandas/issues/23524))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `__rmatmul__` doesn’t support matrix vector multiplication ([GH 21530](https://github.com/pandas-dev/pandas/issues/21530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") fails with read-only array ([GH 12813](https://github.com/pandas-dev/pandas/issues/12813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique
    "pandas.unique") handled signed zeros inconsistently: for some inputs 0.0 and
    -0.0 were treated as equal and for some inputs as different. Now they are treated
    as equal for all inputs ([GH 21866](https://github.com/pandas-dev/pandas/issues/21866))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg"), [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") and [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a list of functions and `axis=1`
    (e.g. `df.apply(['sum', 'mean'], axis=1)`), a `TypeError` was wrongly raised.
    For all three methods such calculation are now done correctly. ([GH 16679](https://github.com/pandas-dev/pandas/issues/16679)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    comparison against datetime-like scalars and arrays ([GH 22074](https://github.com/pandas-dev/pandas/issues/22074))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") multiplication between boolean dtype and integer returning
    `object` dtype instead of integer dtype ([GH 22047](https://github.com/pandas-dev/pandas/issues/22047),
    [GH 22163](https://github.com/pandas-dev/pandas/issues/22163))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where, when supplied with a string argument and additional
    positional or keyword arguments (e.g. `df.apply('sum', min_count=1)`), a `TypeError`
    was wrongly raised ([GH 22376](https://github.com/pandas-dev/pandas/issues/22376))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") to extension dtype may raise `AttributeError` ([GH
    22578](https://github.com/pandas-dev/pandas/issues/22578))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with `timedelta64[ns]` dtype arithmetic operations with `ndarray`
    with integer dtype incorrectly treating the narray as `timedelta64[ns]` dtype
    ([GH 23114](https://github.com/pandas-dev/pandas/issues/23114))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rpow()`](../reference/api/pandas.Series.rpow.html#pandas.Series.rpow
    "pandas.Series.rpow") with object dtype `NaN` for `1 ** NA` instead of `1` ([GH
    22922](https://github.com/pandas-dev/pandas/issues/22922)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.agg()`](../reference/api/pandas.Series.agg.html#pandas.Series.agg
    "pandas.Series.agg") can now handle numpy NaN-aware methods like [`numpy.nansum()`](https://numpy.org/doc/stable/reference/generated/numpy.nansum.html#numpy.nansum
    "(in NumPy v1.26)") ([GH 19629](https://github.com/pandas-dev/pandas/issues/19629))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rank()`](../reference/api/pandas.Series.rank.html#pandas.Series.rank
    "pandas.Series.rank") and [`DataFrame.rank()`](../reference/api/pandas.DataFrame.rank.html#pandas.DataFrame.rank
    "pandas.DataFrame.rank") when `pct=True` and more than 2^(24) rows are present
    resulted in percentages greater than 1.0 ([GH 18271](https://github.com/pandas-dev/pandas/issues/18271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls such as [`DataFrame.round()`](../reference/api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round") with a non-unique [`CategoricalIndex()`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") now return expected data. Previously, data would be
    improperly duplicated ([GH 21809](https://github.com/pandas-dev/pandas/issues/21809)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `log10`, `floor` and `ceil` to the list of supported functions in [`DataFrame.eval()`](../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") ([GH 24139](https://github.com/pandas-dev/pandas/issues/24139),
    [GH 24353](https://github.com/pandas-dev/pandas/issues/24353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical operations `&, |, ^` between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") will no longer raise `ValueError` ([GH 22092](https://github.com/pandas-dev/pandas/issues/22092))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking PEP 3141 numbers in [`is_scalar()`](../reference/api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar") function returns `True` ([GH 22903](https://github.com/pandas-dev/pandas/issues/22903))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction methods like [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum") now accept the default value of `keepdims=False` when called
    from a NumPy ufunc, rather than raising a `TypeError`. Full support for `keepdims`
    has not been implemented ([GH 24356](https://github.com/pandas-dev/pandas/issues/24356)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") in which column types were unexpectedly converted
    to float ([GH 20699](https://github.com/pandas-dev/pandas/issues/20699))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") in which column types are not preserved and casted to
    float ([GH 24162](https://github.com/pandas-dev/pandas/issues/24162))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") when order of columns of dataframes doesn’t match, result
    observed is wrong in numeric values ([GH 20911](https://github.com/pandas-dev/pandas/issues/20911))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") where converting to an extension dtype when duplicate
    column names are present causes a `RecursionError` ([GH 24704](https://github.com/pandas-dev/pandas/issues/24704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Index.str.partition()` was not nan-safe ([GH 23558](https://github.com/pandas-dev/pandas/issues/23558)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.split()` was not nan-safe ([GH 23677](https://github.com/pandas-dev/pandas/issues/23677)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug [`Series.str.contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") not respecting the `na` argument for a `Categorical`
    dtype `Series` ([GH 22158](https://github.com/pandas-dev/pandas/issues/22158))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.str.cat()` when the result contained only `NaN` ([GH 24044](https://github.com/pandas-dev/pandas/issues/24044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in the [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") constructor where the `closed` parameter did not always
    override the inferred `closed` ([GH 19370](https://github.com/pandas-dev/pandas/issues/19370))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `IntervalIndex` repr where a trailing comma was missing after the
    list of intervals ([GH 20611](https://github.com/pandas-dev/pandas/issues/20611))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    where scalar arithmetic operations did not retain the `closed` value ([GH 22313](https://github.com/pandas-dev/pandas/issues/22313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") where indexing with datetime-like values raised a `KeyError`
    ([GH 20636](https://github.com/pandas-dev/pandas/issues/20636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalTree` where data containing `NaN` triggered a warning and resulted
    in incorrect indexing queries with [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 23352](https://github.com/pandas-dev/pandas/issues/23352))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.ne()`](../reference/api/pandas.DataFrame.ne.html#pandas.DataFrame.ne
    "pandas.DataFrame.ne") fails if columns contain column name “dtype” ([GH 22383](https://github.com/pandas-dev/pandas/issues/22383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The traceback from a `KeyError` when asking `.loc` for a single missing label
    is now shorter and more clear ([GH 21557](https://github.com/pandas-dev/pandas/issues/21557))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") now emits a `KeyError` when a malformed string is looked
    up, which is consistent with the behavior of [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 22803](https://github.com/pandas-dev/pandas/issues/22803))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `.ix` is asked for a missing integer label in a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with a first level of integer type, it now raises a `KeyError`,
    consistently with the case of a flat `Int64Index`, rather than falling back to
    positional indexing ([GH 21593](https://github.com/pandas-dev/pandas/issues/21593))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.reindex()`](../reference/api/pandas.Index.reindex.html#pandas.Index.reindex
    "pandas.Index.reindex") when reindexing a tz-naive and tz-aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 8306](https://github.com/pandas-dev/pandas/issues/8306))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") when reindexing an empty series with a `datetime64[ns,
    tz]` dtype ([GH 20869](https://github.com/pandas-dev/pandas/issues/20869))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") when setting values with `.loc` and a timezone aware [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") ([GH 11365](https://github.com/pandas-dev/pandas/issues/11365))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.__getitem__` now accepts dictionaries and dictionary keys as list-likes
    of labels, consistently with `Series.__getitem__` ([GH 21294](https://github.com/pandas-dev/pandas/issues/21294))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `DataFrame[np.nan]` when columns are non-unique ([GH 21428](https://github.com/pandas-dev/pandas/issues/21428))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when indexing [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with nanosecond resolution dates and timezones ([GH 11679](https://github.com/pandas-dev/pandas/issues/11679))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where indexing with a Numpy array containing negative values would mutate
    the indexer ([GH 21867](https://github.com/pandas-dev/pandas/issues/21867))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where mixed indexes wouldn’t allow integers for `.at` ([GH 19860](https://github.com/pandas-dev/pandas/issues/19860))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.get_loc` now raises `KeyError` when boolean key passed. ([GH
    19087](https://github.com/pandas-dev/pandas/issues/19087))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") when indexing with an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex") ([GH 19977](https://github.com/pandas-dev/pandas/issues/19977))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") no
    longer mangles `None`, `NaN` and `NaT`, i.e. they are treated as three different
    keys. However, for numeric Index all three are still coerced to a `NaN` ([GH 22332](https://github.com/pandas-dev/pandas/issues/22332))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `scalar in Index` if scalar is a float while the `Index` is of integer
    dtype ([GH 22085](https://github.com/pandas-dev/pandas/issues/22085))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`MultiIndex.set_levels()`](../reference/api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels") when levels value is not subscriptable ([GH 23273](https://github.com/pandas-dev/pandas/issues/23273))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where setting a timedelta column by `Index` causes it to be casted to double,
    and therefore lose precision ([GH 23511](https://github.com/pandas-dev/pandas/issues/23511))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index.union()`](../reference/api/pandas.Index.union.html#pandas.Index.union
    "pandas.Index.union") and [`Index.intersection()`](../reference/api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection") where name of the `Index` of the result was not computed
    correctly for certain cases ([GH 9943](https://github.com/pandas-dev/pandas/issues/9943),
    [GH 9862](https://github.com/pandas-dev/pandas/issues/9862))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    slicing with boolean [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") may raise `TypeError` ([GH 22533](https://github.com/pandas-dev/pandas/issues/22533))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodArray.__setitem__` when accepting slice and list-like value ([GH
    23978](https://github.com/pandas-dev/pandas/issues/23978))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"), [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") where indexing with `Ellipsis` would lose their `freq`
    attribute ([GH 21282](https://github.com/pandas-dev/pandas/issues/21282))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `iat` where using it to assign an incompatible value would create a new
    column ([GH 23236](https://github.com/pandas-dev/pandas/issues/23236))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") where a `ValueError` would raise when one column contained
    a `datetime64[ns, tz]` dtype ([GH 15522](https://github.com/pandas-dev/pandas/issues/15522))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.hasnans()`](../reference/api/pandas.Series.hasnans.html#pandas.Series.hasnans
    "pandas.Series.hasnans") that could be incorrectly cached and return incorrect
    answers if null elements are introduced after an initial call ([GH 19700](https://github.com/pandas-dev/pandas/issues/19700))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") now treats all NaN-floats as equal also for `np.object_`-dtype.
    This behavior is consistent with the behavior for float64 ([GH 22119](https://github.com/pandas-dev/pandas/issues/22119))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    no longer mangles NaN-floats and the `NaT`-object for `np.object_`-dtype, i.e.
    `NaT` is no longer coerced to a NaN-value and is treated as a different entity.
    ([GH 22295](https://github.com/pandas-dev/pandas/issues/22295))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    and [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    now properly handle numpy masked arrays with hardened masks. Previously, constructing
    a DataFrame or Series from a masked array with a hard mask would create a pandas
    object containing the underlying value, rather than the expected NaN. ([GH 24574](https://github.com/pandas-dev/pandas/issues/24574))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor where `dtype` argument was not honored when handling
    numpy masked record arrays. ([GH 24874](https://github.com/pandas-dev/pandas/issues/24874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `io.formats.style.Styler.applymap()` where `subset=` with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") slice would reduce to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") ([GH 19861](https://github.com/pandas-dev/pandas/issues/19861))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed compatibility for [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles prior to version 0.8.0; compatibility with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") pickles from version 0.13 forward is maintained ([GH 21654](https://github.com/pandas-dev/pandas/issues/21654))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex.get_loc_level()`](../reference/api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level") (and as a consequence, `.loc` on a `Series`
    or `DataFrame` with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index) will now raise a `KeyError`, rather than returning
    an empty `slice`, if asked a label which is present in the `levels` but is unused
    ([GH 22221](https://github.com/pandas-dev/pandas/issues/22221))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")
    has gained the [`MultiIndex.from_frame()`](../reference/api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame"), it allows constructing a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") object from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") ([GH 22420](https://github.com/pandas-dev/pandas/issues/22420))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `TypeError` in Python 3 when creating [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") in which some levels have mixed types, e.g. when some labels
    are tuples ([GH 15457](https://github.com/pandas-dev/pandas/issues/15457))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which a column specified with `CategoricalDtype` of boolean
    categories was not being correctly coerced from string values to booleans ([GH
    20498](https://github.com/pandas-dev/pandas/issues/20498))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unicode column names were not being properly recognized
    with Python 2.x ([GH 13253](https://github.com/pandas-dev/pandas/issues/13253))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") when writing timezone aware data (`datetime64[ns, tz]`
    dtype) would raise a `TypeError` ([GH 9086](https://github.com/pandas-dev/pandas/issues/9086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_sql()`](../reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql") where a naive [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") would be written as `TIMESTAMP WITH TIMEZONE` type in
    supported databases, e.g. PostgreSQL ([GH 23510](https://github.com/pandas-dev/pandas/issues/23510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") when `parse_cols` is specified with an empty dataset ([GH
    9208](https://github.com/pandas-dev/pandas/issues/9208))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    no longer ignores all-whitespace `<tr>` within `<thead>` when considering the
    `skiprows` and `header` arguments. Previously, users had to decrease their `header`
    and `skiprows` values on such tables to work around the issue. ([GH 21641](https://github.com/pandas-dev/pandas/issues/21641))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") will correctly show the deprecation warning for previously
    deprecated `sheetname` ([GH 17994](https://github.com/pandas-dev/pandas/issues/17994))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    and [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table") will throw `UnicodeError` and not coredump on badly encoded
    strings ([GH 22748](https://github.com/pandas-dev/pandas/issues/22748))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    will correctly parse timezone-aware datetimes ([GH 22256](https://github.com/pandas-dev/pandas/issues/22256))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management was prematurely optimized for the
    C engine when the data was being read in chunks ([GH 23509](https://github.com/pandas-dev/pandas/issues/23509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in unnamed columns were being improperly identified when extracting
    a multi-index ([GH 23687](https://github.com/pandas-dev/pandas/issues/23687))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will parse numbers in sas7bdat-files that have width less than 8 bytes correctly.
    ([GH 21616](https://github.com/pandas-dev/pandas/issues/21616))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with many columns ([GH 22628](https://github.com/pandas-dev/pandas/issues/22628))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    will correctly parse sas7bdat files with data page types having also bit 7 set
    (so page type is 128 + 256 = 384) ([GH 16615](https://github.com/pandas-dev/pandas/issues/16615))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") in which an incorrect error was raised on an invalid file format.
    ([GH 24548](https://github.com/pandas-dev/pandas/issues/24548))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `detect_client_encoding()` where potential `IOError` goes unhandled when
    importing in a mod_wsgi process due to restricted access to stdout. ([GH 21552](https://github.com/pandas-dev/pandas/issues/21552))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` misses truncation indicators (…)
    on truncated DataFrame ([GH 15019](https://github.com/pandas-dev/pandas/issues/15019),
    [GH 22783](https://github.com/pandas-dev/pandas/issues/22783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index=False` when both columns and row index
    are `MultiIndex` ([GH 22579](https://github.com/pandas-dev/pandas/issues/22579))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `index_names=False` displaying index name ([GH
    22747](https://github.com/pandas-dev/pandas/issues/22747))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `header=False` not displaying row index names
    ([GH 23788](https://github.com/pandas-dev/pandas/issues/23788))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `sparsify=False` that caused it to raise `TypeError`
    ([GH 22887](https://github.com/pandas-dev/pandas/issues/22887))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that broke column alignment when `index=False` and
    width of first column’s values is greater than the width of first column’s header
    ([GH 16839](https://github.com/pandas-dev/pandas/issues/16839), [GH 13032](https://github.com/pandas-dev/pandas/issues/13032))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") that caused representations of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to not take up the whole window ([GH 22984](https://github.com/pandas-dev/pandas/issues/22984))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") where a single level MultiIndex incorrectly wrote a
    tuple. Now just the value of the index is written ([GH 19589](https://github.com/pandas-dev/pandas/issues/19589)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HDFStore` will raise `ValueError` when the `format` kwarg is passed to the
    constructor ([GH 13291](https://github.com/pandas-dev/pandas/issues/13291))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.append()`](../reference/api/pandas.HDFStore.append.html#pandas.HDFStore.append
    "pandas.HDFStore.append") when appending a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with an empty string column and `min_itemsize` < 8 ([GH 12242](https://github.com/pandas-dev/pandas/issues/12242))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory leaks occurred in the C engine when parsing
    `NaN` values due to insufficient cleanup on completion or error ([GH 21353](https://github.com/pandas-dev/pandas/issues/21353))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which incorrect error messages were being raised when `skipfooter`
    was passed in along with `nrows`, `iterator`, or `chunksize` ([GH 23711](https://github.com/pandas-dev/pandas/issues/23711))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") index names were being improperly handled in the cases when
    they were not provided ([GH 23484](https://github.com/pandas-dev/pandas/issues/23484))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which unnecessary warnings were being raised when the dialect’s
    values conflicted with the default arguments ([GH 23761](https://github.com/pandas-dev/pandas/issues/23761))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") in which the error message was not displaying the valid flavors
    when an invalid one was provided ([GH 23549](https://github.com/pandas-dev/pandas/issues/23549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which extraneous header names were extracted, even though
    none were specified ([GH 11733](https://github.com/pandas-dev/pandas/issues/11733))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which column names were not being properly converted to
    string sometimes in Python 2.x ([GH 23874](https://github.com/pandas-dev/pandas/issues/23874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `index_col=None` was not being respected and parsing
    index columns anyway ([GH 18792](https://github.com/pandas-dev/pandas/issues/18792),
    [GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") in which `usecols` was not being validated for proper column
    names when passed in as a string ([GH 20480](https://github.com/pandas-dev/pandas/issues/20480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") when the resulting dict contains non-Python scalars
    in the case of numeric data ([GH 23753](https://github.com/pandas-dev/pandas/issues/23753))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string"), [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html"), [`DataFrame.to_latex()`](../reference/api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex") will correctly format output when a string is passed
    as the `float_format` argument ([GH 21625](https://github.com/pandas-dev/pandas/issues/21625),
    [GH 22270](https://github.com/pandas-dev/pandas/issues/22270))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused it to raise `OverflowError` when trying to use
    ‘inf’ as `na_value` with integer index column ([GH 17128](https://github.com/pandas-dev/pandas/issues/17128))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") that caused the C engine on Python 3.6+ on Windows to improperly
    read CSV filenames with accented or special characters ([GH 15086](https://github.com/pandas-dev/pandas/issues/15086))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_fwf()`](../reference/api/pandas.read_fwf.html#pandas.read_fwf
    "pandas.read_fwf") in which the compression type of a file was not being properly
    inferred ([GH 22199](https://github.com/pandas-dev/pandas/issues/22199))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pandas.io.json.json_normalize()` that caused it to raise `TypeError`
    when two consecutive elements of `record_path` are dicts ([GH 22706](https://github.com/pandas-dev/pandas/issues/22706))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata"), `pandas.io.stata.StataWriter` and `pandas.io.stata.StataWriter117`
    where a exception would leave a partially written and invalid dta file ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_stata()`](../reference/api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata") and `pandas.io.stata.StataWriter117` that produced
    invalid files when using strLs with non-ASCII characters ([GH 23573](https://github.com/pandas-dev/pandas/issues/23573))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `HDFStore` that caused it to raise `ValueError` when reading a Dataframe
    in Python 3 from fixed format written in Python 2 ([GH 24510](https://github.com/pandas-dev/pandas/issues/24510))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") and more generally in the floating `repr` formatter.
    Zeros were not trimmed if `inf` was present in a columns while it was the case
    with NA values. Zeros are now trimmed as in the presence of NA ([GH 24861](https://github.com/pandas-dev/pandas/issues/24861)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the `repr` when truncating the number of columns and having a wide last
    column ([GH 24849](https://github.com/pandas-dev/pandas/issues/24849)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") and [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin") caused x-axis label and ticklabels to disappear
    when colorbar was on in IPython inline backend ([GH 10611](https://github.com/pandas-dev/pandas/issues/10611),
    [GH 10678](https://github.com/pandas-dev/pandas/issues/10678), and [GH 20455](https://github.com/pandas-dev/pandas/issues/20455))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in plotting a Series with datetimes using `matplotlib.axes.Axes.scatter()`
    ([GH 22039](https://github.com/pandas-dev/pandas/issues/22039))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") caused bars to use multiple colors instead of a single
    one ([GH 20585](https://github.com/pandas-dev/pandas/issues/20585))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in validating color parameter caused extra color to be appended to the given
    color array. This happened to multiple plotting functions using matplotlib. ([GH
    20726](https://github.com/pandas-dev/pandas/issues/20726))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `Rolling.min()` and `Rolling.max()` with `closed='left'`, a datetime-like
    index and only one entry in the series leading to segfault ([GH 24718](https://github.com/pandas-dev/pandas/issues/24718))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.first()` and `GroupBy.last()` with `as_index=False` leading
    to the loss of timezone information ([GH 15884](https://github.com/pandas-dev/pandas/issues/15884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DateFrame.resample()` when downsampling across a DST boundary ([GH 8531](https://github.com/pandas-dev/pandas/issues/8531))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in date anchoring for `DateFrame.resample()` with offset `Day` when n >
    1 ([GH 24127](https://github.com/pandas-dev/pandas/issues/24127))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where `ValueError` is wrongly raised when calling `SeriesGroupBy.count()`
    method of a `SeriesGroupBy` when the grouping variable only contains NaNs and
    numpy version < 1.13 ([GH 21956](https://github.com/pandas-dev/pandas/issues/21956)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple bugs in `Rolling.min()` with `closed='left'` and a datetime-like index
    leading to incorrect results and also segfault. ([GH 21704](https://github.com/pandas-dev/pandas/issues/21704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.apply()`](../reference/api/pandas.core.resample.Resampler.apply.html#pandas.core.resample.Resampler.apply
    "pandas.core.resample.Resampler.apply") when passing positional arguments to applied
    func ([GH 14615](https://github.com/pandas-dev/pandas/issues/14615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when passing `numpy.timedelta64` to `loffset` kwarg
    ([GH 7687](https://github.com/pandas-dev/pandas/issues/7687)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Resampler.asfreq()`](../reference/api/pandas.core.resample.Resampler.asfreq.html#pandas.core.resample.Resampler.asfreq
    "pandas.core.resample.Resampler.asfreq") when frequency of `TimedeltaIndex` is
    a subperiod of a new frequency ([GH 13022](https://github.com/pandas-dev/pandas/issues/13022)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`SeriesGroupBy.mean()`](../reference/api/pandas.core.groupby.SeriesGroupBy.mean.html#pandas.core.groupby.SeriesGroupBy.mean
    "pandas.core.groupby.SeriesGroupBy.mean") when values were integral but could
    not fit inside of int64, overflowing instead. ([GH 22487](https://github.com/pandas-dev/pandas/issues/22487))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RollingGroupby.agg()` and `ExpandingGroupby.agg()` now support multiple aggregation
    functions as parameters ([GH 15072](https://github.com/pandas-dev/pandas/issues/15072))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") and [`Series.resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") when resampling by a weekly offset (`'W'`) across a
    DST transition ([GH 9119](https://github.com/pandas-dev/pandas/issues/9119), [GH
    21459](https://github.com/pandas-dev/pandas/issues/21459))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") in which the `axis` argument was not being respected
    during aggregations ([GH 23372](https://github.com/pandas-dev/pandas/issues/23372))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.transform()` which caused missing values when the input function
    can accept a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but renames it ([GH 23455](https://github.com/pandas-dev/pandas/issues/23455)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.nth()` where column order was not always preserved ([GH 20760](https://github.com/pandas-dev/pandas/issues/20760))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `GroupBy.rank()` with `method='dense'` and `pct=True` when a group has
    only one member would raise a `ZeroDivisionError` ([GH 23666](https://github.com/pandas-dev/pandas/issues/23666)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling `GroupBy.rank()` with empty groups and `pct=True` was raising a `ZeroDivisionError`
    ([GH 22519](https://github.com/pandas-dev/pandas/issues/22519))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.resample()`](../reference/api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample") when resampling `NaT` in `TimeDeltaIndex` ([GH 13223](https://github.com/pandas-dev/pandas/issues/13223)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") did not respect the `observed` argument when selecting
    a column and instead always used `observed=False` ([GH 23970](https://github.com/pandas-dev/pandas/issues/23970))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SeriesGroupBy.pct_change()` or `DataFrameGroupBy.pct_change()` would
    previously work across groups when calculating the percent change, where it now
    correctly works per group ([GH 21200](https://github.com/pandas-dev/pandas/issues/21200),
    [GH 21235](https://github.com/pandas-dev/pandas/issues/21235)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug preventing hash table creation with very large number (2^32) of rows ([GH
    22805](https://github.com/pandas-dev/pandas/issues/22805))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in groupby when grouping on categorical causes `ValueError` and incorrect
    grouping if `observed=True` and `nan` is present in categorical column ([GH 24740](https://github.com/pandas-dev/pandas/issues/24740),
    [GH 21151](https://github.com/pandas-dev/pandas/issues/21151)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining resampled DataFrames with timezone aware index ([GH
    13783](https://github.com/pandas-dev/pandas/issues/13783))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining only `Series` the `names` argument of `concat` is
    no longer ignored ([GH 23490](https://github.com/pandas-dev/pandas/issues/23490))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.combine_first()`](../reference/api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first") with `datetime64[ns, tz]` dtype which would return
    tz-naive result ([GH 21469](https://github.com/pandas-dev/pandas/issues/21469))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where") and [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with `datetime64[ns, tz]` dtype ([GH 21546](https://github.com/pandas-dev/pandas/issues/21546))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") with an empty DataFrame and empty `cond` having non-bool
    dtype ([GH 21947](https://github.com/pandas-dev/pandas/issues/21947))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.mask()`](../reference/api/pandas.Series.mask.html#pandas.Series.mask
    "pandas.Series.mask") and [`DataFrame.mask()`](../reference/api/pandas.DataFrame.mask.html#pandas.DataFrame.mask
    "pandas.DataFrame.mask") with `list` conditionals ([GH 21891](https://github.com/pandas-dev/pandas/issues/21891))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises RecursionError when converting OutOfBounds
    `datetime64[ns, tz]` ([GH 20380](https://github.com/pandas-dev/pandas/issues/20380))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GroupBy.rank()` now raises a `ValueError` when an invalid value is passed
    for argument `na_option` ([GH 22124](https://github.com/pandas-dev/pandas/issues/22124))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") with Unicode attributes in Python 2 ([GH 22084](https://github.com/pandas-dev/pandas/issues/22084))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") raises `RecursionError` when replacing empty lists
    ([GH 22083](https://github.com/pandas-dev/pandas/issues/22083))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") when dict is used as the `to_replace` value and one
    key in the dict is another key’s value, the results were inconsistent between
    using integer key and using string key ([GH 20656](https://github.com/pandas-dev/pandas/issues/20656))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop_duplicates()`](../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates") for empty `DataFrame` which incorrectly raises
    an error ([GH 20516](https://github.com/pandas-dev/pandas/issues/20516))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long") when a string is passed to the stubnames argument and a
    column name is a substring of that stubname ([GH 22468](https://github.com/pandas-dev/pandas/issues/22468))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    when merging `datetime64[ns, tz]` data that contained a DST transition ([GH 18885](https://github.com/pandas-dev/pandas/issues/18885))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") when merging on float values within defined tolerance ([GH
    22981](https://github.com/pandas-dev/pandas/issues/22981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when concatenating a multicolumn DataFrame with tz-aware data
    against a DataFrame with a different number of columns ([GH 22796](https://github.com/pandas-dev/pandas/issues/22796))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where confusing error message raised when attempting to merge
    with missing values ([GH 23189](https://github.com/pandas-dev/pandas/issues/23189))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") and [`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") for dataframes that have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") for columns ([GH 23033](https://github.com/pandas-dev/pandas/issues/23033)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    when passing column names that are not present in `DataFrame` ([GH 23575](https://github.com/pandas-dev/pandas/issues/23575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.append()` with a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with a dateutil timezone would raise a `TypeError` ([GH 23682](https://github.com/pandas-dev/pandas/issues/23682))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    construction when passing no data and `dtype=str` ([GH 22477](https://github.com/pandas-dev/pandas/issues/22477))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") with
    `bins` as an overlapping `IntervalIndex` where multiple bins were returned per
    item instead of raising a `ValueError` ([GH 23980](https://github.com/pandas-dev/pandas/issues/23980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pandas.concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") when joining `Series` datetimetz with `Series` category would
    lose timezone ([GH 23816](https://github.com/pandas-dev/pandas/issues/23816))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") when joining on partial MultiIndex would drop names ([GH
    20452](https://github.com/pandas-dev/pandas/issues/20452)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.nlargest()`](../reference/api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest") and [`DataFrame.nsmallest()`](../reference/api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest") now returns the correct n values when keep != ‘all’
    also when tied on the first columns ([GH 22752](https://github.com/pandas-dev/pandas/issues/22752))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing a DataFrame with an index argument that wasn’t already an instance
    of [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") was
    broken ([GH 22227](https://github.com/pandas-dev/pandas/issues/22227)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") prevented list subclasses to be used to construction ([GH
    21226](https://github.com/pandas-dev/pandas/issues/21226))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") and [`DataFrame.pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") returning a misleading error message when the
    resulting DataFrame has more elements than int32 can handle. Now, the error message
    is improved, pointing towards the actual problem ([GH 20601](https://github.com/pandas-dev/pandas/issues/20601))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") where a `ValueError` was raised when unstacking timezone
    aware values ([GH 18338](https://github.com/pandas-dev/pandas/issues/18338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") where timezone aware values were converted to timezone
    naive values ([GH 19420](https://github.com/pandas-dev/pandas/issues/19420))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") where a `TypeError` was raised when `by_col` were timezone
    aware values ([GH 21184](https://github.com/pandas-dev/pandas/issues/21184))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug showing an incorrect shape when throwing error during `DataFrame` construction.
    ([GH 20742](https://github.com/pandas-dev/pandas/issues/20742))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Updating a boolean, datetime, or timedelta column to be Sparse now works ([GH
    22367](https://github.com/pandas-dev/pandas/issues/22367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.to_sparse()` with Series already holding sparse data not constructing
    properly ([GH 22389](https://github.com/pandas-dev/pandas/issues/22389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a `sparse_index` to the SparseArray constructor no longer defaults
    the na-value to `np.nan` for all dtypes. The correct na_value for `data.dtype`
    is now used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nbytes` under-reporting its memory usage by not including
    the size of its sparse index.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Series.shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift") for non-NA `fill_value`, as values are no longer converted
    to a dense array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` not including `fill_value` in the groups for non-NA
    `fill_value` when grouping by a sparse column ([GH 5078](https://github.com/pandas-dev/pandas/issues/5078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in unary inversion operator (`~`) on a `SparseSeries` with boolean values.
    The performance of this has also been improved ([GH 22835](https://github.com/pandas-dev/pandas/issues/22835))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArary.unique()` not returning the unique values ([GH 19595](https://github.com/pandas-dev/pandas/issues/19595))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray.nonzero()` and `SparseDataFrame.dropna()` returning shifted/incorrect
    results ([GH 21172](https://github.com/pandas-dev/pandas/issues/21172))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") where dtypes would lose sparseness ([GH 23744](https://github.com/pandas-dev/pandas/issues/23744))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    when concatenating a list of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with all-sparse values changing the `fill_value` and converting
    to a dense Series ([GH 24371](https://github.com/pandas-dev/pandas/issues/24371))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now takes a `text_color_threshold`
    parameter to automatically lighten the text color based on the luminance of the
    background color. This improves readability with dark background colors without
    the need to limit the background colormap range. ([GH 21258](https://github.com/pandas-dev/pandas/issues/21258))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`background_gradient()`](../reference/api/pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient") now also supports tablewise
    application (in addition to rowwise and columnwise) with `axis=None` ([GH 15204](https://github.com/pandas-dev/pandas/issues/15204))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bar()`](../reference/api/pandas.io.formats.style.Styler.bar.html#pandas.io.formats.style.Styler.bar
    "pandas.io.formats.style.Styler.bar") now also supports tablewise application
    (in addition to rowwise and columnwise) with `axis=None` and setting clipping
    range with `vmin` and `vmax` ([GH 21548](https://github.com/pandas-dev/pandas/issues/21548)
    and [GH 21526](https://github.com/pandas-dev/pandas/issues/21526)). `NaN` values
    are also handled properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building pandas for development now requires `cython >= 0.28.2` ([GH 21688](https://github.com/pandas-dev/pandas/issues/21688))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing pandas now requires `hypothesis>=3.58`. You can find [the Hypothesis
    docs here](https://hypothesis.readthedocs.io/en/latest/index.html), and a pandas-specific
    introduction [in the contributing guide](../development/contributing_codebase.html#using-hypothesis).
    ([GH 22280](https://github.com/pandas-dev/pandas/issues/22280))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building pandas on macOS now targets minimum macOS 10.9 if run on macOS 10.9
    or above ([GH 23424](https://github.com/pandas-dev/pandas/issues/23424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug where C variables were declared with external linkage causing import errors
    if certain other C libraries were imported before pandas. ([GH 24113](https://github.com/pandas-dev/pandas/issues/24113))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Contributors'
  prefs: []
  type: TYPE_NORMAL
- en: A total of 337 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: AJ Dyka +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJ Pryor, Ph.D +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aaron Critchley
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Hooper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam J. Stewart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Kim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Klimont +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addison Lynch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Hogue +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Radu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Rychyk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Strick van Linschoten +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Volkov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Buchkovsky
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Hess +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Ponomaroff +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allison Browne +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aly Sivji
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Gross +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Spott +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aniket uttam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anjali2019 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anjana S +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Antti Kaihola +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anudeep Tubati +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arjun Sharma +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Armin Varshokar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artem Bogachev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArtinSarraf +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barry Fitzgerald +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bart Aelterman +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben James +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben Nelson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benjamin Grove +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benjamin Rowell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benoit Paquet +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boris Lau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brett Naul
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brian Choi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C.A.M. Gerlach +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carl Johan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chalmer Lowe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chang She
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charles David +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cheuk Ting Ho
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Roberts +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher Whelan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chu Qing Hao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Da Cheezy Mobsta +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Damini Satya
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Himmelstein
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Saxton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Darcy Meyer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataOmbudsman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Arcos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Krych
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dean Langsam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diego Argueta +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diego Torres +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dobatymo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doug Latornell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dr. Irv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dylan Dmitri Gray +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Boxer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Chea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik Nilsson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabian Haase +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabian Retkowski
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabien Aulaire +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fakabbir Amin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fei Phoon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fernando Margueirat +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Florian Müller +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fábio Rosado +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabe Fernando
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabriel Reid +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin Rajaiah
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gioia Ballin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gjelt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gosuke Shibahara +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graham Inggs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillaume Gay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillaume Lemaitre +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hannah Ferchland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haochen Wu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hubert +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HubertKl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HyunTruth +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iain Barr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignacio Vergara Kausel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Irv Lustig +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IsvenC +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jacopo Rota
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jakob Jarmar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Bourbeau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Myatt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: James Winegar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Rudolph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jared Groves +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jason Kiley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javad Noorbakhsh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jay Offerdahl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeongmin Yu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeremy Schendel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jerod Estapa +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jesper Dramsch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jim Jeon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joe Jevnik
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Nothman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Ostblom +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jordi Contestí
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jorge López Fueyo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jose Quinones +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jose Rivera-Rubio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Josh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Justin Zheng +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kaiqi Dong +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kalyan Gokhale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kang Yoosam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karl Dunkle Werner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karmanya Aggarwal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Markham +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kimi Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Koustav Samaddar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Krishna +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kristian Holsheimer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ksenia Gueletina +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kyle Prestel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LJ +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LeakedMemory +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Li Jin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licht Takeuchi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luca Donini +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luciano Viola +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mak Sze Chun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marc Garcia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marius Potgieter +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark Sikora +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markus Meier +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marlene Silva Marchena +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Babka +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MatanCohe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mateusz Woś +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathew Topper +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Boggess +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Cooper +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Williams +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Gilbert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Roeschke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Max Kanter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Odintsov
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Silverstein +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael-J-Ward +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mickaël Schoentgen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miguel Sánchez de León Peque +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ming Li
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitch Negus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monson Shao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moonsoo Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mortada Mehyar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Myles Braithwaite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nehil Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicholas Musolino +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Dickreuter +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikhil Kumar Mengani +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikoleta Glynatsi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ondrej Kokes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pablo Ambrosio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pamela Wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parfait G +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick Park +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Ganssle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Reidy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul van Mulbregt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phillip Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piyush Aggarwal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prabakaran Kumaresshan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulkit Maloo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pyry Kovanen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rajib Mitra +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redonnet Louis +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rhys Parry +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rick +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roei.r +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RomainSa +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roman Imankulov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roman Yurchak +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruijing Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan Nazareth +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rüdiger Busche +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEUNG HOON, SHIN +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sandrine Pataut +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sangwoong Yoon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Santosh Kumar +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saurav Chakravorty +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scott McAllister +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sean Chan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadi Akiki +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shengpu Tang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shirish Kadam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Hawkins +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Riddell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simone Basso
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soyoun(Rose) Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Srinivas Reddy Thatiparthy (శ్రీనివాస్ రెడ్డి తాటిపర్తి) +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefaan Lippens +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefano Cianciulli
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefano Miccoli +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Childs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Pascoe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Baker +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Cook +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Dower +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stéphan Taljaard +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sumin Byeon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sören +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tamas Nagy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tanya Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tarbo Fukazawa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thein Oo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thiago Cordeiro da Fonseca +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thierry Moisan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thiviyan Thanapalasingam +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas Lentali +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim D. Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim Swast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomasz Kluczkowski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tony Tao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triple0 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troels Nielsen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuhin Mahmud +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uddeshya Singh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uwe L. Korn +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vadym Barda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Varad Gunjal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victor Maryama +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victor Villas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vincent La
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vitória Helena +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vu Le
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vyom Jain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weiwen Gu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wenhuan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wes Turner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wil Tan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: William Ayd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yeojin Kim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yitzhak Andrade +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuecheng Wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuliya Dovzhenko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yury Bayda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zac Hatfield-Dodds +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aberres +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aeltanawy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ailchau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alimcmaster1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alphaCTzo7G +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: amphy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: araraonline +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: azure-pipelines[bot] +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: benarthur91 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bk521234 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cgangwar11 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cxl923cc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dahlbaek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dannyhyunkim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: darke-spirits +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: david-liu-brattle-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: davidmvalente +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deflatSOCO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: doosik_bae +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dylanchase +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eduardo naufel schettino +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: euri10 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: evangelineliu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fengyqf +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fjdiod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fl4p +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fleimgruber +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: h-vetinari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: harisbal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: henriqueribeiro +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: himanshu awasthi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hongshaoyang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: igorfassen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jalazbe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jbrockmendel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jh-wu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justinchan23 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: louispotok
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: marcosrullan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: miker985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nicolab100 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nprad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nsuresh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ottiP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pajachiet +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raguiar2 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ratijas +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: realead +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: robbuckley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: saurav2608 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sideeye +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ssikdar1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: svenharris +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syutbai +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testvinder +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: thatneat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tmnhat2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tomascassidy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tomneep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: topper-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vkk800 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: winlu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ym-pett +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: yrhooke +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ywpark1 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zertrin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zhezherun +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
