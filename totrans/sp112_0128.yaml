- en: scipy.integrate.dblquad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a double integral.
  prefs: []
  type: TYPE_NORMAL
- en: Return the double (definite) integral of `func(y, x)` from `x = a..b` and `y
    = gfun(x)..hfun(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Python function or method of at least two variables: y must be the first
    argument and x the second argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'The limits of integration in x: *a* < *b*'
  prefs: []
  type: TYPE_NORMAL
- en: '**gfun**callable or float'
  prefs: []
  type: TYPE_NORMAL
- en: The lower boundary curve in y which is a function taking a single floating point
    argument (x) and returning a floating point result or a float indicating a constant
    boundary curve.
  prefs: []
  type: TYPE_NORMAL
- en: '**hfun**callable or float'
  prefs: []
  type: TYPE_NORMAL
- en: The upper boundary curve in y (same requirements as *gfun*).
  prefs: []
  type: TYPE_NORMAL
- en: '**args**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments to pass to *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsabs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute tolerance passed directly to the inner 1-D quadrature integration.
    Default is 1.49e-8\. `dblquad` tries to obtain an accuracy of `abs(i-result) <=
    max(epsabs, epsrel*abs(i))` where `i` = inner integral of `func(y, x)` from `gfun(x)`
    to `hfun(x)`, and `result` is the numerical approximation. See *epsrel* below.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsrel**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative tolerance of the inner 1-D integrals. Default is 1.49e-8. If `epsabs
    <= 0`, *epsrel* must be greater than both 5e-29 and `50 * (machine epsilon)`.
    See *epsabs* above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**float'
  prefs: []
  type: TYPE_NORMAL
- en: The resultant integral.
  prefs: []
  type: TYPE_NORMAL
- en: '**abserr**float'
  prefs: []
  type: TYPE_NORMAL
- en: An estimate of the error.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")'
  prefs: []
  type: TYPE_NORMAL
- en: single integral
  prefs: []
  type: TYPE_NORMAL
- en: '[`tplquad`](scipy.integrate.tplquad.html#scipy.integrate.tplquad "scipy.integrate.tplquad")'
  prefs: []
  type: TYPE_NORMAL
- en: triple integral
  prefs: []
  type: TYPE_NORMAL
- en: '[`nquad`](scipy.integrate.nquad.html#scipy.integrate.nquad "scipy.integrate.nquad")'
  prefs: []
  type: TYPE_NORMAL
- en: N-dimensional integrals
  prefs: []
  type: TYPE_NORMAL
- en: '[`fixed_quad`](scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad "scipy.integrate.fixed_quad")'
  prefs: []
  type: TYPE_NORMAL
- en: fixed-order Gaussian quadrature
  prefs: []
  type: TYPE_NORMAL
- en: '[`quadrature`](scipy.integrate.quadrature.html#scipy.integrate.quadrature "scipy.integrate.quadrature")'
  prefs: []
  type: TYPE_NORMAL
- en: adaptive Gaussian quadrature
  prefs: []
  type: TYPE_NORMAL
- en: '[`odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")'
  prefs: []
  type: TYPE_NORMAL
- en: ODE integrator
  prefs: []
  type: TYPE_NORMAL
- en: '[`ode`](scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")'
  prefs: []
  type: TYPE_NORMAL
- en: ODE integrator
  prefs: []
  type: TYPE_NORMAL
- en: '[`simpson`](scipy.integrate.simpson.html#scipy.integrate.simpson "scipy.integrate.simpson")'
  prefs: []
  type: TYPE_NORMAL
- en: integrator for sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`romb`](scipy.integrate.romb.html#scipy.integrate.romb "scipy.integrate.romb")'
  prefs: []
  type: TYPE_NORMAL
- en: integrator for sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.special`](../special.html#module-scipy.special "scipy.special")'
  prefs: []
  type: TYPE_NORMAL
- en: for coefficients and roots of orthogonal polynomials
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For valid results, the integral must converge; behavior for divergent integrals
    is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Details of QUADPACK level routines**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")
    calls routines from the FORTRAN library QUADPACK. This section provides details
    on the conditions for each routine to be called and a short description of each
    routine. For each level of integration, `qagse` is used for finite limits or `qagie`
    is used if either limit (or both!) are infinite. The following provides a short
    description from [[1]](#rce0052b3f8ed-1) for each routine.'
  prefs: []
  type: TYPE_NORMAL
- en: qagse
  prefs: []
  type: TYPE_NORMAL
- en: is an integrator based on globally adaptive interval subdivision in connection
    with extrapolation, which will eliminate the effects of integrand singularities
    of several types.
  prefs: []
  type: TYPE_NORMAL
- en: qagie
  prefs: []
  type: TYPE_NORMAL
- en: handles integration over infinite intervals. The infinite range is mapped onto
    a finite interval and subsequently the same strategy as in `QAGS` is applied.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Piessens, Robert; de Doncker-Kapenga, Elise; Überhuber, Christoph W.; Kahaner,
    David (1983). QUADPACK: A subroutine package for automatic integration. Springer-Verlag.
    ISBN 978-3-540-12553-2.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Compute the double integral of `x * y**2` over the box `x` ranging from 0 to
    2 and `y` ranging from 0 to 1. That is, \(\int^{x=2}_{x=0} \int^{y=1}_{y=0} x
    y^2 \,dy \,dx\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Calculate \(\int^{x=\pi/4}_{x=0} \int^{y=\cos(x)}_{y=\sin(x)} 1 \,dy \,dx\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calculate \(\int^{x=1}_{x=0} \int^{y=2-x}_{y=x} a x y \,dy \,dx\) for \(a=1,
    3\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Compute the two-dimensional Gaussian Integral, which is the integral of the
    Gaussian function \(f(x,y) = e^{-(x^{2} + y^{2})}\), over \((-\infty,+\infty)\).
    That is, compute the integral \(\iint^{+\infty}_{-\infty} e^{-(x^{2} + y^{2})}
    \,dy\,dx\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
