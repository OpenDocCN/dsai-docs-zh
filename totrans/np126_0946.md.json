["```py\n>>> from numpy.polynomial import Polynomial as P\n>>> p = P([1,2,3])\n>>> p\nPolynomial([1., 2., 3.], domain=[-1,  1], window=[-1,  1], symbol='x') \n```", "```py\n>>> p.coef\narray([1., 2., 3.])\n>>> p.domain\narray([-1,  1])\n>>> p.window\narray([-1,  1]) \n```", "```py\n>>> print(p)\n1.0 + 2.0\u00b7x + 3.0\u00b7x\u00b2 \n```", "```py\n>>> np.polynomial.set_default_printstyle('ascii')\n>>> print(p)\n1.0 + 2.0 x + 3.0 x**2 \n```", "```py\n>>> print(f\"{p:unicode}\")\n1.0 + 2.0\u00b7x + 3.0\u00b7x\u00b2 \n```", "```py\n>>> p + p\nPolynomial([2., 4., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p - p\nPolynomial([0.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p * p\nPolynomial([ 1.,   4.,  10.,  12.,   9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p**2\nPolynomial([ 1.,   4., 10., 12.,  9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p // P([-1, 1])\nPolynomial([5.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p % P([-1, 1])\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> quo, rem = divmod(p, P([-1, 1]))\n>>> quo\nPolynomial([5.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> rem\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> x = np.arange(5)\n>>> p(x)\narray([  1.,   6.,  17.,  34.,  57.])\n>>> x = np.arange(6).reshape(3,2)\n>>> p(x)\narray([[ 1.,   6.],\n [17.,  34.],\n [57.,  86.]]) \n```", "```py\n>>> p(p)\nPolynomial([ 6., 16., 36., 36., 27.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.roots()\narray([-0.33333333-0.47140452j, -0.33333333+0.47140452j]) \n```", "```py\n>>> p + [1, 2, 3]\nPolynomial([2., 4., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> [1, 2, 3] * p\nPolynomial([ 1.,  4., 10., 12.,  9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p / 2\nPolynomial([0.5, 1\\. , 1.5], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Chebyshev as T\n>>> p + P([1], domain=[0,1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 213, in __add__\nTypeError: Domains differ\n>>> p + P([1], window=[0,1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 215, in __add__\nTypeError: Windows differ\n>>> p + T([1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 211, in __add__\nTypeError: Polynomial types differ \n```", "```py\n>>> p(T([0, 1]))\nChebyshev([2.5, 2\\. , 1.5], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Polynomial as P\n>>> p = P([2, 6])\n>>> p.integ()\nPolynomial([0., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.integ(2)\nPolynomial([0., 0., 1., 1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.integ(lbnd=-1)\nPolynomial([-1.,  2.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.integ(lbnd=-1, k=1)\nPolynomial([0., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p = P([1, 2, 3])\n>>> p.deriv(1)\nPolynomial([2., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.deriv(2)\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Polynomial as P\n>>> from numpy.polynomial import Chebyshev as T\n>>> p = P.fromroots([1, 2, 3])\n>>> p\nPolynomial([-6., 11., -6.,  1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.convert(kind=T)\nChebyshev([-9\\.  , 11.75, -3\\.  ,  0.25], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.convert(kind=T, domain=[0, 1])\nChebyshev([-2.4375 ,  2.96875, -0.5625 ,  0.03125], domain=[0.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.convert(kind=P, domain=[0, 1])\nPolynomial([-1.875,  2.875, -1.125,  0.125], domain=[0.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> P.basis(3)\nPolynomial([0., 0., 0., 1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> T.cast(p)\nChebyshev([-9\\.  , 11.75, -3\\. ,  0.25], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> x = np.linspace(-1, 1, 100)\n>>> for i in range(6):\n...     ax = plt.plot(x, T.basis(i)(x), lw=2, label=f\"$T_{i}$\")\n...\n>>> plt.legend(loc=\"upper left\")\n>>> plt.show() \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> x = np.linspace(-2, 2, 100)\n>>> for i in range(6):\n...     ax = plt.plot(x, T.basis(i)(x), lw=2, label=f\"$T_{i}$\")\n...\n>>> plt.legend(loc=\"lower right\")\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> np.random.seed(11)\n>>> x = np.linspace(0, 2*np.pi, 20)\n>>> y = np.sin(x) + np.random.normal(scale=.1, size=x.shape)\n>>> p = T.fit(x, y, 5)\n>>> plt.plot(x, y, 'o')\n>>> xx, yy = p.linspace()\n>>> plt.plot(xx, yy, lw=2)\n>>> p.domain\narray([0\\.        ,  6.28318531])\n>>> p.window\narray([-1.,  1.])\n>>> plt.show() \n```", "```py\n>>> from numpy.polynomial import Polynomial as P\n>>> p = P([1,2,3])\n>>> p\nPolynomial([1., 2., 3.], domain=[-1,  1], window=[-1,  1], symbol='x') \n```", "```py\n>>> p.coef\narray([1., 2., 3.])\n>>> p.domain\narray([-1,  1])\n>>> p.window\narray([-1,  1]) \n```", "```py\n>>> print(p)\n1.0 + 2.0\u00b7x + 3.0\u00b7x\u00b2 \n```", "```py\n>>> np.polynomial.set_default_printstyle('ascii')\n>>> print(p)\n1.0 + 2.0 x + 3.0 x**2 \n```", "```py\n>>> print(f\"{p:unicode}\")\n1.0 + 2.0\u00b7x + 3.0\u00b7x\u00b2 \n```", "```py\n>>> p + p\nPolynomial([2., 4., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p - p\nPolynomial([0.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p * p\nPolynomial([ 1.,   4.,  10.,  12.,   9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p**2\nPolynomial([ 1.,   4., 10., 12.,  9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p // P([-1, 1])\nPolynomial([5.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p % P([-1, 1])\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> quo, rem = divmod(p, P([-1, 1]))\n>>> quo\nPolynomial([5.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> rem\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> x = np.arange(5)\n>>> p(x)\narray([  1.,   6.,  17.,  34.,  57.])\n>>> x = np.arange(6).reshape(3,2)\n>>> p(x)\narray([[ 1.,   6.],\n [17.,  34.],\n [57.,  86.]]) \n```", "```py\n>>> p(p)\nPolynomial([ 6., 16., 36., 36., 27.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.roots()\narray([-0.33333333-0.47140452j, -0.33333333+0.47140452j]) \n```", "```py\n>>> p + [1, 2, 3]\nPolynomial([2., 4., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> [1, 2, 3] * p\nPolynomial([ 1.,  4., 10., 12.,  9.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p / 2\nPolynomial([0.5, 1\\. , 1.5], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Chebyshev as T\n>>> p + P([1], domain=[0,1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 213, in __add__\nTypeError: Domains differ\n>>> p + P([1], window=[0,1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 215, in __add__\nTypeError: Windows differ\n>>> p + T([1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 211, in __add__\nTypeError: Polynomial types differ \n```", "```py\n>>> p(T([0, 1]))\nChebyshev([2.5, 2\\. , 1.5], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Polynomial as P\n>>> p = P([2, 6])\n>>> p.integ()\nPolynomial([0., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.integ(2)\nPolynomial([0., 0., 1., 1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.integ(lbnd=-1)\nPolynomial([-1.,  2.,  3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.integ(lbnd=-1, k=1)\nPolynomial([0., 2., 3.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p = P([1, 2, 3])\n>>> p.deriv(1)\nPolynomial([2., 6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.deriv(2)\nPolynomial([6.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> from numpy.polynomial import Polynomial as P\n>>> from numpy.polynomial import Chebyshev as T\n>>> p = P.fromroots([1, 2, 3])\n>>> p\nPolynomial([-6., 11., -6.,  1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.convert(kind=T)\nChebyshev([-9\\.  , 11.75, -3\\.  ,  0.25], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> p.convert(kind=T, domain=[0, 1])\nChebyshev([-2.4375 ,  2.96875, -0.5625 ,  0.03125], domain=[0.,  1.], window=[-1.,  1.], symbol='x')\n>>> p.convert(kind=P, domain=[0, 1])\nPolynomial([-1.875,  2.875, -1.125,  0.125], domain=[0.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> P.basis(3)\nPolynomial([0., 0., 0., 1.], domain=[-1.,  1.], window=[-1.,  1.], symbol='x')\n>>> T.cast(p)\nChebyshev([-9\\.  , 11.75, -3\\. ,  0.25], domain=[-1.,  1.], window=[-1.,  1.], symbol='x') \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> x = np.linspace(-1, 1, 100)\n>>> for i in range(6):\n...     ax = plt.plot(x, T.basis(i)(x), lw=2, label=f\"$T_{i}$\")\n...\n>>> plt.legend(loc=\"upper left\")\n>>> plt.show() \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> x = np.linspace(-2, 2, 100)\n>>> for i in range(6):\n...     ax = plt.plot(x, T.basis(i)(x), lw=2, label=f\"$T_{i}$\")\n...\n>>> plt.legend(loc=\"lower right\")\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from numpy.polynomial import Chebyshev as T\n>>> np.random.seed(11)\n>>> x = np.linspace(0, 2*np.pi, 20)\n>>> y = np.sin(x) + np.random.normal(scale=.1, size=x.shape)\n>>> p = T.fit(x, y, 5)\n>>> plt.plot(x, y, 'o')\n>>> xx, yy = p.linspace()\n>>> plt.plot(xx, yy, lw=2)\n>>> p.domain\narray([0\\.        ,  6.28318531])\n>>> p.window\narray([-1.,  1.])\n>>> plt.show() \n```"]