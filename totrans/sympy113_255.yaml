- en: Miscellaneous
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/utilities/misc.html](https://docs.sympy.org/latest/modules/utilities/misc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Miscellaneous stuff that does not really fit anywhere else.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert the argument to a builtin integer.
  prefs: []
  type: TYPE_NORMAL
- en: The return value is guaranteed to be equal to the input. ValueError is raised
    if the input has a non-integral value. When `strict` is True, this uses [__index__](https://docs.python.org/3/reference/datamodel.html#object.__index__)
    and when it is False it uses `int`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The function is primarily concerned with sanitizing input for functions that
    need to work with builtin integers, so anything that is unambiguously an integer
    should be returned as an int:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Floats, being of limited precision, are not assumed to be exact and will raise
    an error unless the `strict` flag is False. This precision issue becomes apparent
    for large floating point numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Input that might be a complex representation of an integer value is also rejected
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Print `*args` if SYMPY_DEBUG is True, else do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If SYMPY_DEBUG is True, it will print a nice execution tree with arguments and
    results of all decorated functions, else do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Print `string%args` if SYMPY_DEBUG is True, else do nothing. This is intended
    for debug messages using formatted strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Strips leading and trailing empty lines from a copy of `s`, then dedents, fills
    and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: Empty line stripping serves to deal with docstrings like this one that start
    with a newline after the initial triple quote, inserting an empty line at the
    beginning of the string.
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword arguments will be passed to `textwrap.fill()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`strlines`](#sympy.utilities.misc.strlines "sympy.utilities.misc.strlines"),
    [`rawlines`](#sympy.utilities.misc.rawlines "sympy.utilities.misc.rawlines")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Try to find ‘executable’ in the directories listed in ‘path’ (a string listing
    directories separated by ‘os.pathsep’; defaults to os.environ[‘PATH’]). Returns
    the complete filename or None if not found
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return function name of \(x\) (if defined) else the \(type(x)\). If short is
    True and there is a shorter alias for the result, return the alias.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return ordinal number string of num, e.g. 1 becomes 1st.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Return a cut-and-pastable string that, when printed, is equivalent to the input.
    Use this when there is more than one line in the string. The string returned is
    formatted so it can be indented nicely within tests; in some cases it is wrapped
    in the dedent function which has to be imported from textwrap.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: because there are characters in the examples below that need to be escaped
    because they are themselves within a triple quoted docstring, expressions below
    look more complicated than they would be if they were printed in an interpreter
    window.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`filldedent`](#sympy.utilities.misc.filldedent "sympy.utilities.misc.filldedent"),
    [`strlines`](#sympy.utilities.misc.strlines "sympy.utilities.misc.strlines")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return `string` with all keys in `reps` replaced with their corresponding values,
    longer strings first, irrespective of the order they are given. `reps` may be
    passed as tuples or a single mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no guarantee that a unique answer will be obtained if keys in a mapping
    overlap (i.e. are the same length and have some identical sequence at the beginning/end):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1073](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/questions/6116978/how-to-replace-multiple-substrings-of-a-string](https://stackoverflow.com/questions/6116978/how-to-replace-multiple-substrings-of-a-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Return a cut-and-pastable string that, when printed, is equivalent to the input.
    The lines will be surrounded by parentheses and no line will be longer than c
    (default 64) characters. If the line contains newlines characters, the \(rawlines\)
    result will be returned. If `short` is True (default is False) then if there is
    one line it will be returned without bounding parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`filldedent`](#sympy.utilities.misc.filldedent "sympy.utilities.misc.filldedent"),
    [`rawlines`](#sympy.utilities.misc.rawlines "sympy.utilities.misc.rawlines")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Return `s` where characters have been replaced or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs: []
  type: TYPE_NORMAL
- en: 'translate(s, None, deletechars):'
  prefs: []
  type: TYPE_NORMAL
- en: all characters in `deletechars` are deleted
  prefs: []
  type: TYPE_NORMAL
- en: 'translate(s, map [,deletechars]):'
  prefs: []
  type: TYPE_NORMAL
- en: all characters in `deletechars` (if provided) are deleted then the replacements
    defined by map are made; if the keys of map are strings then the longer ones are
    handled first. Multicharacter deletions should have a value of ‘’.
  prefs: []
  type: TYPE_NORMAL
- en: translate(s, oldchars, newchars, deletechars)
  prefs: []
  type: TYPE_NORMAL
- en: all characters in `deletechars` are deleted then each character in `oldchars`
    is replaced with the corresponding character in `newchars`
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no guarantee that a unique answer will be obtained if keys in a mapping
    overlap are the same length and have some identical sequences at the beginning/end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
