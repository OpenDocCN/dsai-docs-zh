- en: Printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/printing.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/printing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As we have already seen, SymPy can pretty print its output using Unicode characters.
    This is a short introduction to the most common printing options available in
    SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: Printers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several printers available in SymPy. The most common ones are
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: srepr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASCII pretty printer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode pretty printer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LaTeX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MathML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these, there are also “printers” that can output SymPy objects
    to code, such as C, Fortran, Javascript, Theano, and Python. These are not discussed
    in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Pretty Printing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If all you want is the best pretty printing, use the `init_printing()` function.
    This will automatically enable the best printer available in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you plan to work in an interactive calculator-type session, the `init_session()`
    function will automatically import everything in SymPy, create some common Symbols,
    setup plotting, and run `init_printing()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'In any case, this is what will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: In the IPython QTConsole, if \(\mathrm{\LaTeX}\) is installed, it will enable
    a printer that uses \(\mathrm{\LaTeX}\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![../../_images/ipythonqtconsole.png](../Images/ea9d1c7784b2ce880580a24a7b5ecd9f.png)](../../_images/ipythonqtconsole.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If \(\mathrm{\LaTeX}\) is not installed, but Matplotlib is installed, it will
    use the Matplotlib rendering engine. If Matplotlib is not installed, it uses the
    Unicode pretty printer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the IPython notebook, it will use MathJax to render \(\mathrm{\LaTeX}\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![../../_images/ipythonnotebook.png](../Images/39391bbf9025565160f7bb21124285b5.png)](../../_images/ipythonnotebook.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In an IPython console session, or a regular Python session, it will use the
    Unicode pretty printer if the terminal supports Unicode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![../../_images/consoleunicode.png](../Images/b4f6d3ae345b57e040e8e56b7e5feda7.png)](../../_images/consoleunicode.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a terminal that does not support Unicode, the ASCII pretty printer is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![../../_images/consoleascii.png](../Images/731c67b0d3efe06f981291aee1696fdc.png)](../../_images/consoleascii.png)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To explicitly not use \(\mathrm{\LaTeX}\), pass `use_latex=False` to `init_printing()`
    or `init_session()`. To explicitly not use Unicode, pass `use_unicode=False`.
  prefs: []
  type: TYPE_NORMAL
- en: Printing Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to automatic printing, you can explicitly use any one of the printers
    by calling the appropriate function.
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get a string form of an expression, use `str(expr)`. This is also the form
    that is produced by `print(expr)`. String forms are designed to be easy to read,
    but in a form that is correct Python syntax so that it can be copied and pasted.
    The `str()` form of an expression will usually look exactly the same as the expression
    as you would enter it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: srepr
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The srepr form of an expression is designed to show the exact form of an expression.
    It will be discussed more in the [Advanced Expression Manipulation](manipulation.html#tutorial-manipulation)
    section. To get it, use `srepr()` [[1]](#srepr-fn).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The srepr form is mostly useful for understanding how an expression is built
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: ASCII Pretty Printer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ASCII pretty printer is accessed from `pprint()`. If the terminal does not
    support Unicode, the ASCII printer is used by default. Otherwise, you must pass
    `use_unicode=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`pprint()` prints the output to the screen. If you want the string form, use
    `pretty()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Unicode Pretty Printer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Unicode pretty printer is also accessed from `pprint()` and `pretty()`.
    If the terminal supports Unicode, it is used automatically. If `pprint()` is not
    able to detect that the terminal supports unicode, you can pass `use_unicode=True`
    to force it to use Unicode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '### \(\mathrm{\LaTeX}\)'
  prefs: []
  type: TYPE_NORMAL
- en: To get the \(\mathrm{\LaTeX}\) form of an expression, use `latex()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `latex()` function has many options to change the formatting of different
    things. See [`its documentation`](../../modules/printing.html#sympy.printing.latex.latex
    "sympy.printing.latex.latex") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: MathML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is also a printer to MathML, called `print_mathml()`. It must be imported
    from `sympy.printing.mathml`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`print_mathml()` prints the output. If you want the string, use the function
    `mathml()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Dot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dotprint()` function in `sympy.printing.dot` prints output to dot format,
    which can be rendered with Graphviz. See the [Advanced Expression Manipulation](manipulation.html#tutorial-manipulation)
    section for some examples of the output of this printer.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of the raw output of the `dotprint()` function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Footnotes
  prefs: []
  type: TYPE_NORMAL
