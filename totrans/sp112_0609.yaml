- en: scipy.signal.impulse2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.impulse2.html#scipy.signal.impulse2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.impulse2.html#scipy.signal.impulse2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Impulse response of a single-input, continuous-time linear system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.11.0: Function [`impulse2`](#scipy.signal.impulse2
    "scipy.signal.impulse2") is deprecated in favor of the faster [`impulse`](scipy.signal.impulse.html#scipy.signal.impulse
    "scipy.signal.impulse") function. [`impulse2`](#scipy.signal.impulse2 "scipy.signal.impulse2")
    will be removed in SciPy 1.13.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system**an instance of the LTI class or a tuple of array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 'describing the system. The following gives the number of elements in the tuple
    and the interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 (instance of [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"))
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 2 (num, den)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 3 (zeros, poles, gain)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 4 (A, B, C, D)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X0**1-D array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial condition of the state vector. Default: 0 (the zero vector).'
  prefs: []
  type: TYPE_NORMAL
- en: '**T**1-D array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The time steps at which the input is defined and at which the output is desired.
    If *T* is not given, the function will generate a set of time samples automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**N**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of time points to compute. Default: 100.'
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**various types'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword arguments are passed on to the function [`scipy.signal.lsim2`](scipy.signal.lsim2.html#scipy.signal.lsim2
    "scipy.signal.lsim2"), which in turn passes them on to [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint"); see the latter’s documentation for information about
    these arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**T**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The time values for the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**yout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The output response of the system.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`impulse`](scipy.signal.impulse.html#scipy.signal.impulse "scipy.signal.impulse"),
    [`lsim2`](scipy.signal.lsim2.html#scipy.signal.lsim2 "scipy.signal.lsim2"), [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The solution is generated by calling [`scipy.signal.lsim2`](scipy.signal.lsim2.html#scipy.signal.lsim2
    "scipy.signal.lsim2"), which uses the differential equation solver [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint").
  prefs: []
  type: TYPE_NORMAL
- en: As [`impulse2`](#scipy.signal.impulse2 "scipy.signal.impulse2") is now deprecated,
    users are advised to switch to the faster and more accurate [`impulse`](scipy.signal.impulse.html#scipy.signal.impulse
    "scipy.signal.impulse") function. Keyword arguments for [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") are not supported in [`impulse`](scipy.signal.impulse.html#scipy.signal.impulse
    "scipy.signal.impulse"), but not needed in general.
  prefs: []
  type: TYPE_NORMAL
- en: If (num, den) is passed in for `system`, coefficients for both the numerator
    and denominator should be specified in descending exponent order (e.g. `s^2 +
    3s + 5` would be represented as `[1, 3, 5]`).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute the impulse response of a second order system with a repeated root:
    `x''''(t) + 2*x''(t) + x(t) = u(t)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-impulse2-1.png](../Images/fc460689dc0ed44f3e29e018b2177825.png)'
  prefs: []
  type: TYPE_IMG
