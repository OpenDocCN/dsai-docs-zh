["```py\npre-commit install \n```", "```py\npre-commit run --files <files you have modified>\npre-commit run --from-ref=upstream/main --to-ref=HEAD --all-files \n```", "```py\npre-commit run --hook-stage manual --all-files \n```", "```py\nfrom pandas.util._decorators import deprecate\n\ndeprecate('old_func', 'new_func', '1.1.0') \n```", "```py\nimport warnings\nfrom pandas.util._exceptions import find_stack_level\n\ndef old_func():\n  \"\"\"Summary of the function.\n\n .. deprecated:: 1.1.0\n Use new_func instead.\n \"\"\"\n    warnings.warn(\n        'Use new_func instead.',\n        FutureWarning,\n        stacklevel=find_stack_level(),\n    )\n    new_func()\n\ndef new_func():\n    pass \n```", "```py\nclass SomeClass1:\n    str = None \n```", "```py\nstr_type = str\n\nclass SomeClass2:\n    str: str_type = None \n```", "```py\nfrom typing import cast\n\nfrom pandas.core.dtypes.common import is_number\n\ndef cannot_infer_bad(obj: Union[str, int, float]):\n\n    if is_number(obj):\n        ...\n    else:  # Reasonably only str objects would reach this but...\n        obj = cast(str, obj)  # Mypy complains without this!\n        return obj.upper() \n```", "```py\ndef cannot_infer_good(obj: Union[str, int, float]):\n\n    if isinstance(obj, str):\n        return obj.upper()\n    else:\n        ... \n```", "```py\nfrom pandas._typing import Dtype\n\ndef as_type(dtype: Dtype) -> ...:\n    ... \n```", "```py\npre-commit  run  --hook-stage  manual  --all-files  mypy\npre-commit  run  --hook-stage  manual  --all-files  pyright\npre-commit  run  --hook-stage  manual  --all-files  pyright_reportGeneralTypeIssues\n# the following might fail if the installed pandas version does not correspond to your local git version\npre-commit  run  --hook-stage  manual  --all-files  stubtest \n```", "```py\npython -c \"import pandas; import pathlib; (pathlib.Path(pandas.__path__[0]) / 'py.typed').touch()\" \n```", "```py\n        import pandas as pd\n        import pandas._testing as tm\n\n        def test_getitem_listlike_of_ints():\n            ser = pd.Series(range(5))\n\n            result = ser[[3, 4]]\n            expected = pd.Series([2, 3])\n            tm.assert_series_equal(result, expected)\n\n            result = ser.loc[[3, 4]]\n            tm.assert_series_equal(result, expected) \n        ```", "```py\nclass TestReallyCoolFeature:\n    def test_cool_feature_aspect(self):\n        pass \n```", "```py\ndef test_really_cool_feature():\n    pass \n```", "```py\ndef test_xfail(request):\n    mark = pytest.mark.xfail(raises=TypeError, reason=\"Indicate why here\")\n    request.applymarker(mark) \n```", "```py\nwith tm.assert_produces_warning(DeprecationWarning):\n    pd.deprecated_function() \n```", "```py\nwith tm.assert_produces_warning(False):\n    pd.no_warning_function() \n```", "```py\n@pytest.mark.filterwarnings(\"ignore:msg:category\")\ndef test_thing(self):\n    pass \n```", "```py\nwith pytest.raises(ValueError, match=\"an error\"):\n    raise ValueError(\"an error\") \n```", "```py\nwith tm.ensure_clean('my_file_path') as path:\n    # do something with the path \n```", "```py\n@pytest.mark.network\n@pytest.mark.single_cpu\ndef test_network(httpserver):\n    httpserver.serve_content(content=\"content\")\n    result = pd.read_html(httpserver.url) \n```", "```py\nimport pytest\nimport numpy as np\nimport pandas as pd\n\n@pytest.mark.parametrize('dtype', ['int8', 'int16', 'int32', 'int64'])\ndef test_dtypes(dtype):\n    assert str(np.dtype(dtype)) == dtype\n\n@pytest.mark.parametrize(\n    'dtype', ['float32', pytest.param('int16', marks=pytest.mark.skip),\n              pytest.param('int32', marks=pytest.mark.xfail(\n                  reason='to show how it works'))])\ndef test_mark(dtype):\n    assert str(np.dtype(dtype)) == 'float32'\n\n@pytest.fixture\ndef series():\n    return pd.Series([1, 2, 3])\n\n@pytest.fixture(params=['int8', 'int16', 'int32', 'int64'])\ndef dtype(request):\n    return request.param\n\ndef test_series(series, dtype):\n    # GH <issue_number>\n    result = series.astype(dtype)\n    assert result.dtype == dtype\n\n    expected = pd.Series([1, 2, 3], dtype=dtype)\n    tm.assert_series_equal(result, expected) \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntester.py::test_dtypes[int8]  PASSED\ntester.py::test_dtypes[int16]  PASSED\ntester.py::test_dtypes[int32]  PASSED\ntester.py::test_dtypes[int64]  PASSED\ntester.py::test_mark[float32]  PASSED\ntester.py::test_mark[int16]  SKIPPED\ntester.py::test_mark[int32]  xfail\ntester.py::test_series[int8]  PASSED\ntester.py::test_series[int16]  PASSED\ntester.py::test_series[int32]  PASSED\ntester.py::test_series[int64]  PASSED \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v  -k  int8\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntest_cool_feature.py::test_dtypes[int8]  PASSED\ntest_cool_feature.py::test_series[int8]  PASSED \n```", "```py\nimport json\nfrom hypothesis import given, strategies as st\n\nany_json_value = st.deferred(lambda: st.one_of(\n    st.none(), st.booleans(), st.floats(allow_nan=False), st.text(),\n    st.lists(any_json_value), st.dictionaries(st.text(), any_json_value)\n))\n\n@given(value=any_json_value)\ndef test_json_roundtrip(value):\n    result = json.loads(json.dumps(value))\n    assert value == result \n```", "```py\npytest pandas \n```", "```py\npytest pandas/path/to/test.py -k regex_matching_test_name \n```", "```py\npytest pandas/tests/[test-module].py\npytest pandas/tests/[test-module].py::[TestClass]\npytest pandas/tests/[test-module].py::[TestClass]::[test_method] \n```", "```py\n# Utilize 4 cores\npytest  -n  4  pandas\n\n# Utilizes all available cores\npytest  -n  auto  pandas \n```", "```py\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\nset  PYTHONHASHSEED=314159265\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\nexport  PYTHONHASHSEED=314159265\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\npd.test() \n```", "```py\npip install git+https://github.com/airspeed-velocity/asv \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD \n```", "```py\nasv continuous -f 1.1 -E virtualenv upstream/main HEAD \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD -b ^groupby \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD -b groupby.GroupByMethods \n```", "```py\nasv run -e -E existing \n```", "```py\nasv run -e -E existing:python3.6 \n```", "```py\n.. versionadded:: 2.1.0 \n```", "```py\npre-commit install \n```", "```py\npre-commit run --files <files you have modified>\npre-commit run --from-ref=upstream/main --to-ref=HEAD --all-files \n```", "```py\npre-commit run --hook-stage manual --all-files \n```", "```py\nfrom pandas.util._decorators import deprecate\n\ndeprecate('old_func', 'new_func', '1.1.0') \n```", "```py\nimport warnings\nfrom pandas.util._exceptions import find_stack_level\n\ndef old_func():\n  \"\"\"Summary of the function.\n\n .. deprecated:: 1.1.0\n Use new_func instead.\n \"\"\"\n    warnings.warn(\n        'Use new_func instead.',\n        FutureWarning,\n        stacklevel=find_stack_level(),\n    )\n    new_func()\n\ndef new_func():\n    pass \n```", "```py\nclass SomeClass1:\n    str = None \n```", "```py\nstr_type = str\n\nclass SomeClass2:\n    str: str_type = None \n```", "```py\nfrom typing import cast\n\nfrom pandas.core.dtypes.common import is_number\n\ndef cannot_infer_bad(obj: Union[str, int, float]):\n\n    if is_number(obj):\n        ...\n    else:  # Reasonably only str objects would reach this but...\n        obj = cast(str, obj)  # Mypy complains without this!\n        return obj.upper() \n```", "```py\ndef cannot_infer_good(obj: Union[str, int, float]):\n\n    if isinstance(obj, str):\n        return obj.upper()\n    else:\n        ... \n```", "```py\nfrom pandas._typing import Dtype\n\ndef as_type(dtype: Dtype) -> ...:\n    ... \n```", "```py\npre-commit  run  --hook-stage  manual  --all-files  mypy\npre-commit  run  --hook-stage  manual  --all-files  pyright\npre-commit  run  --hook-stage  manual  --all-files  pyright_reportGeneralTypeIssues\n# the following might fail if the installed pandas version does not correspond to your local git version\npre-commit  run  --hook-stage  manual  --all-files  stubtest \n```", "```py\npython -c \"import pandas; import pathlib; (pathlib.Path(pandas.__path__[0]) / 'py.typed').touch()\" \n```", "```py\nclass SomeClass1:\n    str = None \n```", "```py\nstr_type = str\n\nclass SomeClass2:\n    str: str_type = None \n```", "```py\nfrom typing import cast\n\nfrom pandas.core.dtypes.common import is_number\n\ndef cannot_infer_bad(obj: Union[str, int, float]):\n\n    if is_number(obj):\n        ...\n    else:  # Reasonably only str objects would reach this but...\n        obj = cast(str, obj)  # Mypy complains without this!\n        return obj.upper() \n```", "```py\ndef cannot_infer_good(obj: Union[str, int, float]):\n\n    if isinstance(obj, str):\n        return obj.upper()\n    else:\n        ... \n```", "```py\nfrom pandas._typing import Dtype\n\ndef as_type(dtype: Dtype) -> ...:\n    ... \n```", "```py\npre-commit  run  --hook-stage  manual  --all-files  mypy\npre-commit  run  --hook-stage  manual  --all-files  pyright\npre-commit  run  --hook-stage  manual  --all-files  pyright_reportGeneralTypeIssues\n# the following might fail if the installed pandas version does not correspond to your local git version\npre-commit  run  --hook-stage  manual  --all-files  stubtest \n```", "```py\npython -c \"import pandas; import pathlib; (pathlib.Path(pandas.__path__[0]) / 'py.typed').touch()\" \n```", "```py\n        import pandas as pd\n        import pandas._testing as tm\n\n        def test_getitem_listlike_of_ints():\n            ser = pd.Series(range(5))\n\n            result = ser[[3, 4]]\n            expected = pd.Series([2, 3])\n            tm.assert_series_equal(result, expected)\n\n            result = ser.loc[[3, 4]]\n            tm.assert_series_equal(result, expected) \n        ```", "```py\nclass TestReallyCoolFeature:\n    def test_cool_feature_aspect(self):\n        pass \n```", "```py\ndef test_really_cool_feature():\n    pass \n```", "```py\ndef test_xfail(request):\n    mark = pytest.mark.xfail(raises=TypeError, reason=\"Indicate why here\")\n    request.applymarker(mark) \n```", "```py\nwith tm.assert_produces_warning(DeprecationWarning):\n    pd.deprecated_function() \n```", "```py\nwith tm.assert_produces_warning(False):\n    pd.no_warning_function() \n```", "```py\n@pytest.mark.filterwarnings(\"ignore:msg:category\")\ndef test_thing(self):\n    pass \n```", "```py\nwith pytest.raises(ValueError, match=\"an error\"):\n    raise ValueError(\"an error\") \n```", "```py\nwith tm.ensure_clean('my_file_path') as path:\n    # do something with the path \n```", "```py\n@pytest.mark.network\n@pytest.mark.single_cpu\ndef test_network(httpserver):\n    httpserver.serve_content(content=\"content\")\n    result = pd.read_html(httpserver.url) \n```", "```py\nimport pytest\nimport numpy as np\nimport pandas as pd\n\n@pytest.mark.parametrize('dtype', ['int8', 'int16', 'int32', 'int64'])\ndef test_dtypes(dtype):\n    assert str(np.dtype(dtype)) == dtype\n\n@pytest.mark.parametrize(\n    'dtype', ['float32', pytest.param('int16', marks=pytest.mark.skip),\n              pytest.param('int32', marks=pytest.mark.xfail(\n                  reason='to show how it works'))])\ndef test_mark(dtype):\n    assert str(np.dtype(dtype)) == 'float32'\n\n@pytest.fixture\ndef series():\n    return pd.Series([1, 2, 3])\n\n@pytest.fixture(params=['int8', 'int16', 'int32', 'int64'])\ndef dtype(request):\n    return request.param\n\ndef test_series(series, dtype):\n    # GH <issue_number>\n    result = series.astype(dtype)\n    assert result.dtype == dtype\n\n    expected = pd.Series([1, 2, 3], dtype=dtype)\n    tm.assert_series_equal(result, expected) \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntester.py::test_dtypes[int8]  PASSED\ntester.py::test_dtypes[int16]  PASSED\ntester.py::test_dtypes[int32]  PASSED\ntester.py::test_dtypes[int64]  PASSED\ntester.py::test_mark[float32]  PASSED\ntester.py::test_mark[int16]  SKIPPED\ntester.py::test_mark[int32]  xfail\ntester.py::test_series[int8]  PASSED\ntester.py::test_series[int16]  PASSED\ntester.py::test_series[int32]  PASSED\ntester.py::test_series[int64]  PASSED \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v  -k  int8\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntest_cool_feature.py::test_dtypes[int8]  PASSED\ntest_cool_feature.py::test_series[int8]  PASSED \n```", "```py\nimport json\nfrom hypothesis import given, strategies as st\n\nany_json_value = st.deferred(lambda: st.one_of(\n    st.none(), st.booleans(), st.floats(allow_nan=False), st.text(),\n    st.lists(any_json_value), st.dictionaries(st.text(), any_json_value)\n))\n\n@given(value=any_json_value)\ndef test_json_roundtrip(value):\n    result = json.loads(json.dumps(value))\n    assert value == result \n```", "```py\n        import pandas as pd\n        import pandas._testing as tm\n\n        def test_getitem_listlike_of_ints():\n            ser = pd.Series(range(5))\n\n            result = ser[[3, 4]]\n            expected = pd.Series([2, 3])\n            tm.assert_series_equal(result, expected)\n\n            result = ser.loc[[3, 4]]\n            tm.assert_series_equal(result, expected) \n        ```", "```py\nclass TestReallyCoolFeature:\n    def test_cool_feature_aspect(self):\n        pass \n```", "```py\ndef test_really_cool_feature():\n    pass \n```", "```py\ndef test_xfail(request):\n    mark = pytest.mark.xfail(raises=TypeError, reason=\"Indicate why here\")\n    request.applymarker(mark) \n```", "```py\nwith tm.assert_produces_warning(DeprecationWarning):\n    pd.deprecated_function() \n```", "```py\nwith tm.assert_produces_warning(False):\n    pd.no_warning_function() \n```", "```py\n@pytest.mark.filterwarnings(\"ignore:msg:category\")\ndef test_thing(self):\n    pass \n```", "```py\nwith pytest.raises(ValueError, match=\"an error\"):\n    raise ValueError(\"an error\") \n```", "```py\nwith tm.ensure_clean('my_file_path') as path:\n    # do something with the path \n```", "```py\n@pytest.mark.network\n@pytest.mark.single_cpu\ndef test_network(httpserver):\n    httpserver.serve_content(content=\"content\")\n    result = pd.read_html(httpserver.url) \n```", "```py\nimport pytest\nimport numpy as np\nimport pandas as pd\n\n@pytest.mark.parametrize('dtype', ['int8', 'int16', 'int32', 'int64'])\ndef test_dtypes(dtype):\n    assert str(np.dtype(dtype)) == dtype\n\n@pytest.mark.parametrize(\n    'dtype', ['float32', pytest.param('int16', marks=pytest.mark.skip),\n              pytest.param('int32', marks=pytest.mark.xfail(\n                  reason='to show how it works'))])\ndef test_mark(dtype):\n    assert str(np.dtype(dtype)) == 'float32'\n\n@pytest.fixture\ndef series():\n    return pd.Series([1, 2, 3])\n\n@pytest.fixture(params=['int8', 'int16', 'int32', 'int64'])\ndef dtype(request):\n    return request.param\n\ndef test_series(series, dtype):\n    # GH <issue_number>\n    result = series.astype(dtype)\n    assert result.dtype == dtype\n\n    expected = pd.Series([1, 2, 3], dtype=dtype)\n    tm.assert_series_equal(result, expected) \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntester.py::test_dtypes[int8]  PASSED\ntester.py::test_dtypes[int16]  PASSED\ntester.py::test_dtypes[int32]  PASSED\ntester.py::test_dtypes[int64]  PASSED\ntester.py::test_mark[float32]  PASSED\ntester.py::test_mark[int16]  SKIPPED\ntester.py::test_mark[int32]  xfail\ntester.py::test_series[int8]  PASSED\ntester.py::test_series[int16]  PASSED\ntester.py::test_series[int32]  PASSED\ntester.py::test_series[int64]  PASSED \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v  -k  int8\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntest_cool_feature.py::test_dtypes[int8]  PASSED\ntest_cool_feature.py::test_series[int8]  PASSED \n```", "```py\nclass TestReallyCoolFeature:\n    def test_cool_feature_aspect(self):\n        pass \n```", "```py\ndef test_really_cool_feature():\n    pass \n```", "```py\ndef test_xfail(request):\n    mark = pytest.mark.xfail(raises=TypeError, reason=\"Indicate why here\")\n    request.applymarker(mark) \n```", "```py\nwith tm.assert_produces_warning(DeprecationWarning):\n    pd.deprecated_function() \n```", "```py\nwith tm.assert_produces_warning(False):\n    pd.no_warning_function() \n```", "```py\n@pytest.mark.filterwarnings(\"ignore:msg:category\")\ndef test_thing(self):\n    pass \n```", "```py\nwith pytest.raises(ValueError, match=\"an error\"):\n    raise ValueError(\"an error\") \n```", "```py\nwith tm.ensure_clean('my_file_path') as path:\n    # do something with the path \n```", "```py\n@pytest.mark.network\n@pytest.mark.single_cpu\ndef test_network(httpserver):\n    httpserver.serve_content(content=\"content\")\n    result = pd.read_html(httpserver.url) \n```", "```py\nimport pytest\nimport numpy as np\nimport pandas as pd\n\n@pytest.mark.parametrize('dtype', ['int8', 'int16', 'int32', 'int64'])\ndef test_dtypes(dtype):\n    assert str(np.dtype(dtype)) == dtype\n\n@pytest.mark.parametrize(\n    'dtype', ['float32', pytest.param('int16', marks=pytest.mark.skip),\n              pytest.param('int32', marks=pytest.mark.xfail(\n                  reason='to show how it works'))])\ndef test_mark(dtype):\n    assert str(np.dtype(dtype)) == 'float32'\n\n@pytest.fixture\ndef series():\n    return pd.Series([1, 2, 3])\n\n@pytest.fixture(params=['int8', 'int16', 'int32', 'int64'])\ndef dtype(request):\n    return request.param\n\ndef test_series(series, dtype):\n    # GH <issue_number>\n    result = series.astype(dtype)\n    assert result.dtype == dtype\n\n    expected = pd.Series([1, 2, 3], dtype=dtype)\n    tm.assert_series_equal(result, expected) \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntester.py::test_dtypes[int8]  PASSED\ntester.py::test_dtypes[int16]  PASSED\ntester.py::test_dtypes[int32]  PASSED\ntester.py::test_dtypes[int64]  PASSED\ntester.py::test_mark[float32]  PASSED\ntester.py::test_mark[int16]  SKIPPED\ntester.py::test_mark[int32]  xfail\ntester.py::test_series[int8]  PASSED\ntester.py::test_series[int16]  PASSED\ntester.py::test_series[int32]  PASSED\ntester.py::test_series[int64]  PASSED \n```", "```py\n((pandas)  bash-3.2$  pytest  test_cool_feature.py  -v  -k  int8\n===========================  test  session  starts  ===========================\nplatform  darwin  --  Python  3.6.2,  pytest-3.6.0,  py-1.4.31,  pluggy-0.4.0\ncollected  11  items\n\ntest_cool_feature.py::test_dtypes[int8]  PASSED\ntest_cool_feature.py::test_series[int8]  PASSED \n```", "```py\nimport json\nfrom hypothesis import given, strategies as st\n\nany_json_value = st.deferred(lambda: st.one_of(\n    st.none(), st.booleans(), st.floats(allow_nan=False), st.text(),\n    st.lists(any_json_value), st.dictionaries(st.text(), any_json_value)\n))\n\n@given(value=any_json_value)\ndef test_json_roundtrip(value):\n    result = json.loads(json.dumps(value))\n    assert value == result \n```", "```py\npytest pandas \n```", "```py\npytest pandas/path/to/test.py -k regex_matching_test_name \n```", "```py\npytest pandas/tests/[test-module].py\npytest pandas/tests/[test-module].py::[TestClass]\npytest pandas/tests/[test-module].py::[TestClass]::[test_method] \n```", "```py\n# Utilize 4 cores\npytest  -n  4  pandas\n\n# Utilizes all available cores\npytest  -n  auto  pandas \n```", "```py\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\nset  PYTHONHASHSEED=314159265\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\nexport  PYTHONHASHSEED=314159265\npytest  pandas  -n  4  -m  \"not slow and not network and not db and not single_cpu\"  -r  sxX \n```", "```py\npd.test() \n```", "```py\npip install git+https://github.com/airspeed-velocity/asv \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD \n```", "```py\nasv continuous -f 1.1 -E virtualenv upstream/main HEAD \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD -b ^groupby \n```", "```py\nasv continuous -f 1.1 upstream/main HEAD -b groupby.GroupByMethods \n```", "```py\nasv run -e -E existing \n```", "```py\nasv run -e -E existing:python3.6 \n```", "```py\n.. versionadded:: 2.1.0 \n```"]