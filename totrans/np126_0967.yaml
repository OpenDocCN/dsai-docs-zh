- en: Set routines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合操作
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.set.html](https://numpy.org/doc/1.26/reference/routines.set.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.set.html](https://numpy.org/doc/1.26/reference/routines.set.html)
- en: '| [`lib.arraysetops`](generated/numpy.lib.arraysetops.html#module-numpy.lib.arraysetops
    "numpy.lib.arraysetops") | Set operations for arrays based on sorting. |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| [`lib.arraysetops`](generated/numpy.lib.arraysetops.html#module-numpy.lib.arraysetops
    "numpy.lib.arraysetops") | 基于排序的数组的集合操作。'
- en: Making proper sets
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建适当的集合
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | 查找数组的唯一元素。'
- en: Boolean operations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔运算
- en: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | Test whether each element of a 1-D array is also present in a second array.
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | 测试1-D数组的每个元素是否也存在于第二个数组中。'
- en: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | Find the intersection of two arrays. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | 找到两个数组的交集。'
- en: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | Calculates `element in test_elements`, broadcasting over *element* only. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | 计算`element in test_elements`，只对*element*进行广播。'
- en: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | Find the set difference of two arrays. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | 找到两个数组的集合差异。'
- en: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | Find the set exclusive-or of two arrays. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | 找到两个数组的集合异或。'
- en: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | Find the union of two arrays. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | 找到两个数组的并集。'
- en: Making proper sets
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建适当的集合
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | 查找数组的唯一元素。'
- en: Boolean operations
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔运算
- en: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | Test whether each element of a 1-D array is also present in a second array.
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | 测试1-D数组的每个元素是否也存在于第二个数组中。'
- en: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | Find the intersection of two arrays. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | 找到两个数组的交集。'
- en: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | Calculates `element in test_elements`, broadcasting over *element* only. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | 计算`element in test_elements`，只对*element*进行广播。'
- en: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | Find the set difference of two arrays. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | 找到两个数组的集合差异。'
- en: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | Find the set exclusive-or of two arrays. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | 找到两个数组的集合异或。'
- en: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | Find the union of two arrays. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | 找到两个数组的并集。'
