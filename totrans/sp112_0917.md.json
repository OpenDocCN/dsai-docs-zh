["```py\nscipy.special.pseudo_huber(delta, r, out=None) = <ufunc 'pseudo_huber'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import pseudo_huber, huber\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> pseudo_huber(1., 2.)\n1.2360679774997898 \n```", "```py\n>>> pseudo_huber([1., 2., 4.], 3.)\narray([2.16227766, 3.21110255, 4\\.        ]) \n```", "```py\n>>> pseudo_huber(2., np.array([1., 1.5, 3., 4.]))\narray([0.47213595, 1\\.        , 3.21110255, 4.94427191]) \n```", "```py\n>>> r = np.array([1., 2.5, 8., 10.])\n>>> deltas = np.array([[1.], [5.], [9.]])\n>>> print(r.shape, deltas.shape)\n(4,) (3, 1) \n```", "```py\n>>> pseudo_huber(deltas, r)\narray([[ 0.41421356,  1.6925824 ,  7.06225775,  9.04987562],\n [ 0.49509757,  2.95084972, 22.16990566, 30.90169944],\n [ 0.49846624,  3.06693762, 27.37435121, 40.08261642]]) \n```", "```py\n>>> x = np.linspace(-4, 4, 500)\n>>> deltas = [1, 2, 3]\n>>> linestyles = [\"dashed\", \"dotted\", \"dashdot\"]\n>>> fig, ax = plt.subplots()\n>>> combined_plot_parameters = list(zip(deltas, linestyles))\n>>> for delta, style in combined_plot_parameters:\n...     ax.plot(x, pseudo_huber(delta, x), label=f\"$\\delta={delta}$\",\n...             ls=style)\n>>> ax.legend(loc=\"upper center\")\n>>> ax.set_xlabel(\"$x$\")\n>>> ax.set_title(\"Pseudo-Huber loss function $h_{\\delta}(x)$\")\n>>> ax.set_xlim(-4, 4)\n>>> ax.set_ylim(0, 8)\n>>> plt.show() \n```", "```py\n>>> def huber_grad(delta, x):\n...     grad = np.copy(x)\n...     linear_area = np.argwhere(np.abs(x) > delta)\n...     grad[linear_area]=delta*np.sign(x[linear_area])\n...     return grad\n>>> def pseudo_huber_grad(delta, x):\n...     return x* (1+(x/delta)**2)**(-0.5)\n>>> x=np.linspace(-3, 3, 500)\n>>> delta = 1.\n>>> fig, ax = plt.subplots(figsize=(7, 7))\n>>> ax.plot(x, huber(delta, x), label=\"Huber\", ls=\"dashed\")\n>>> ax.plot(x, huber_grad(delta, x), label=\"Huber Gradient\", ls=\"dashdot\")\n>>> ax.plot(x, pseudo_huber(delta, x), label=\"Pseudo-Huber\", ls=\"dotted\")\n>>> ax.plot(x, pseudo_huber_grad(delta, x), label=\"Pseudo-Huber Gradient\",\n...         ls=\"solid\")\n>>> ax.legend(loc=\"upper center\")\n>>> plt.show() \n```"]