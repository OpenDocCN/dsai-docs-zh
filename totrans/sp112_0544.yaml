- en: scipy.signal.upfirdn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.upfirdn.html#scipy.signal.upfirdn](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.upfirdn.html#scipy.signal.upfirdn)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Upsample, FIR filter, and downsample.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**h**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D FIR (finite-impulse response) filter coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input signal array.
  prefs: []
  type: TYPE_NORMAL
- en: '**up**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Upsampling rate. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**down**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Downsampling rate. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the input data array along which to apply the linear filter. The
    filter is applied to each subarray along this axis. Default is -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The signal extension mode to use. The set `{"constant", "symmetric", "reflect",
    "edge", "wrap"}` correspond to modes provided by [`numpy.pad`](https://numpy.org/devdocs/reference/generated/numpy.pad.html#numpy.pad
    "(in NumPy v2.0.dev0)"). `"smooth"` implements a smooth extension by extending
    based on the slope of the last 2 points at each end of the array. `"antireflect"`
    and `"antisymmetric"` are anti-symmetric versions of `"reflect"` and `"symmetric"`.
    The mode *“line”* extends the signal based on a linear trend defined by the first
    and last points along the `axis`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The constant value to use when `mode == "constant"`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The output signal array. Dimensions will be the same as *x* except for along
    *axis*, which will change size according to the *h*, *up*, and *down* parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm is an implementation of the block diagram shown on page 129 of
    the Vaidyanathan text [[1]](#re6603cbac110-1) (Figure 4.3-8d).
  prefs: []
  type: TYPE_NORMAL
- en: The direct approach of upsampling by factor of P with zero insertion, FIR filtering
    of length `N`, and downsampling by factor of Q is O(N*Q) per output sample. The
    polyphase implementation used here is O(N/P).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.18.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. P. Vaidyanathan, Multirate Systems and Filter Banks, Prentice Hall, 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply a single filter to multiple signals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply along the last dimension of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply along the 0th dimension of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
