- en: numpy.dot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.dot.html](https://numpy.org/doc/1.26/reference/generated/numpy.dot.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Dot product of two arrays. Specifically,
  prefs: []
  type: TYPE_NORMAL
- en: If both *a* and *b* are 1-D arrays, it is inner product of vectors (without
    complex conjugation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both *a* and *b* are 2-D arrays, it is matrix multiplication, but using [`matmul`](numpy.matmul.html#numpy.matmul
    "numpy.matmul") or `a @ b` is preferred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If either *a* or *b* is 0-D (scalar), it is equivalent to [`multiply`](numpy.multiply.html#numpy.multiply
    "numpy.multiply") and using `numpy.multiply(a, b)` or `a * b` is preferred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *a* is an N-D array and *b* is a 1-D array, it is a sum product over the
    last axis of *a* and *b*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If *a* is an N-D array and *b* is an M-D array (where `M>=2`), it is a sum
    product over the last axis of *a* and the second-to-last axis of *b*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It uses an optimized BLAS library when possible (see [`numpy.linalg`](../routines.linalg.html#module-numpy.linalg
    "numpy.linalg")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: First argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Second argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Output argument. This must have the exact kind that would be returned if it
    was not used. In particular, it must have the right type, must be C-contiguous,
    and its dtype must be the dtype that would be returned for *dot(a,b)*. This is
    a performance feature. Therefore, if these conditions are not met, an exception
    is raised, instead of attempting to be flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**output**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the dot product of *a* and *b*. If *a* and *b* are both scalars or both
    1-D arrays then a scalar is returned; otherwise an array is returned. If *out*
    is given, then it is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If the last dimension of *a* is not the same size as the second-to-last dimension
    of *b*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vdot`](numpy.vdot.html#numpy.vdot "numpy.vdot")'
  prefs: []
  type: TYPE_NORMAL
- en: Complex-conjugating dot product.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tensordot`](numpy.tensordot.html#numpy.tensordot "numpy.tensordot")'
  prefs: []
  type: TYPE_NORMAL
- en: Sum products over arbitrary axes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`einsum`](numpy.einsum.html#numpy.einsum "numpy.einsum")'
  prefs: []
  type: TYPE_NORMAL
- en: Einstein summation convention.
  prefs: []
  type: TYPE_NORMAL
- en: '[`matmul`](numpy.matmul.html#numpy.matmul "numpy.matmul")'
  prefs: []
  type: TYPE_NORMAL
- en: ‘@’ operator as method with out parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[`linalg.multi_dot`](numpy.linalg.multi_dot.html#numpy.linalg.multi_dot "numpy.linalg.multi_dot")'
  prefs: []
  type: TYPE_NORMAL
- en: Chained dot product.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Neither argument is complex-conjugated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For 2-D arrays it is the matrix product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
