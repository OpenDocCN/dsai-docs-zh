- en: System (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/api/system.html](https://docs.sympy.org/latest/modules/physics/mechanics/api/system.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: SymbolicSystem is a class that contains all the information about a system in
    a symbolic format such as the equations of motions and the bodies and loads in
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways that the equations of motion can be described for Symbolic
    System:'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Explicit form where the kinematics and dynamics are combined'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x’ = F_1(x, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[2] Implicit form where the kinematics and dynamics are combined'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: M_2(x, p) x’ = F_2(x, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[3] Implicit form where the kinematics and dynamics are separate'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: M_3(q, p) u’ = F_3(q, u, t, r, p) q’ = G(q, u, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: 'x : states, e.g. [q, u] t : time r : specified (exogenous) inputs p : constants
    q : generalized coordinates u : generalized speeds F_1 : right hand side of the
    combined equations in explicit form F_2 : right hand side of the combined equations
    in implicit form F_3 : right hand side of the dynamical equations in implicit
    form M_2 : mass matrix of the combined equations in implicit form M_3 : mass matrix
    of the dynamical equations in implicit form G : right hand side of the kinematical
    differential equations'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coord_states** : ordered iterable of functions of time'
  prefs: []
  type: TYPE_NORMAL
- en: This input will either be a collection of the coordinates or states of the system
    depending on whether or not the speeds are also given. If speeds are specified
    this input will be assumed to be the coordinates otherwise this input will be
    assumed to be the states.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: right_hand_sideMatrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This variable is the right hand side of the equations of motion in any of the
    forms. The specific form will be assumed depending on whether a mass matrix or
    coordinate derivatives are given.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: speedsordered iterable of functions of time, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a collection of the generalized speeds of the system. If given it will
    be assumed that the first argument (coord_states) will represent the generalized
    coordinates of the system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: mass_matrixMatrix, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The matrix of the implicit forms of the equations of motion (forms [2] and [3]).
    The distinction between the forms is determined by whether or not the coordinate
    derivatives are passed in. If they are given form [3] will be assumed otherwise
    form [2] is assumed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: coordinate_derivativesMatrix, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The right hand side of the kinematical equations in explicit form. If given
    it will be assumed that the equations of motion are being entered in form [3].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: alg_conIterable, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The indexes of the rows in the equations of motion that contain algebraic constraints
    instead of differential equations. If the equations are input in form [3], it
    will be assumed the indexes are referencing the mass_matrix/right_hand_side combination
    and not the coordinate_derivatives.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: output_eqnsDictionary, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Any output equations that are desired to be tracked are stored in a dictionary
    where the key corresponds to the name given for the specific equation and the
    value is the equation itself in symbolic form
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: coord_idxsIterable, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If coord_states corresponds to the states rather than the coordinates this variable
    will tell SymbolicSystem which indexes of the states correspond to generalized
    coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: speed_idxsIterable, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If coord_states corresponds to the states rather than the coordinates this variable
    will tell SymbolicSystem which indexes of the states correspond to generalized
    speeds.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: bodiesiterable of Body/Rigidbody objects, optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Iterable containing the bodies of the system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: loadsiterable of load instances (described below), optional
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Iterable containing the loads of the system where forces are given by (point
    of application, force vector) and torques are given by (reference frame acting
    upon, torque vector). Ex [(point, force), (ref_frame, torque)]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As a simple example, the dynamics of a simple pendulum will be input into a
    SymbolicSystem object manually. First some imports will be needed and then symbols
    will be set up for the length of the pendulum (l), mass at the end of the pendulum
    (m), and a constant for gravity (g).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The system will be defined by an angle of theta from the vertical and a generalized
    speed of omega will be used where omega = theta_dot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now the equations of motion are ready to be formed and passed to the SymbolicSystem
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'm : number of generalized speeds n : number of generalized coordinates o :
    number of states'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| coordinates | (Matrix, shape(n, 1)) This is a matrix containing the generalized
    coordinates of the system |'
  prefs: []
  type: TYPE_TB
- en: '| speeds | (Matrix, shape(m, 1)) This is a matrix containing the generalized
    speeds of the system |'
  prefs: []
  type: TYPE_TB
- en: '| states | (Matrix, shape(o, 1)) This is a matrix containing the state variables
    of the system |'
  prefs: []
  type: TYPE_TB
- en: '| alg_con | (List) This list contains the indices of the algebraic constraints
    in the combined equations of motion. The presence of these constraints requires
    that a DAE solver be used instead of an ODE solver. If the system is given in
    form [3] the alg_con variable will be adjusted such that it is a representation
    of the combined kinematics and dynamics thus make sure it always matches the mass
    matrix entered. |'
  prefs: []
  type: TYPE_TB
- en: '| dyn_implicit_mat | (Matrix, shape(m, m)) This is the M matrix in form [3]
    of the equations of motion (the mass matrix or generalized inertia matrix of the
    dynamical equations of motion in implicit form). |'
  prefs: []
  type: TYPE_TB
- en: '| dyn_implicit_rhs | (Matrix, shape(m, 1)) This is the F vector in form [3]
    of the equations of motion (the right hand side of the dynamical equations of
    motion in implicit form). |'
  prefs: []
  type: TYPE_TB
- en: '| comb_implicit_mat | (Matrix, shape(o, o)) This is the M matrix in form [2]
    of the equations of motion. This matrix contains a block diagonal structure where
    the top left block (the first rows) represent the matrix in the implicit form
    of the kinematical equations and the bottom right block (the last rows) represent
    the matrix in the implicit form of the dynamical equations. |'
  prefs: []
  type: TYPE_TB
- en: '| comb_implicit_rhs | (Matrix, shape(o, 1)) This is the F vector in form [2]
    of the equations of motion. The top part of the vector represents the right hand
    side of the implicit form of the kinemaical equations and the bottom of the vector
    represents the right hand side of the implicit form of the dynamical equations
    of motion. |'
  prefs: []
  type: TYPE_TB
- en: '| comb_explicit_rhs | (Matrix, shape(o, 1)) This vector represents the right
    hand side of the combined equations of motion in explicit form (form [1] from
    above). |'
  prefs: []
  type: TYPE_TB
- en: '| kin_explicit_rhs | (Matrix, shape(m, 1)) This is the right hand side of the
    explicit form of the kinematical equations of motion as can be seen in form [3]
    (the G matrix). |'
  prefs: []
  type: TYPE_TB
- en: '| output_eqns | (Dictionary) If output equations were given they are stored
    in a dictionary where the key corresponds to the name given for the specific equation
    and the value is the equation itself in symbolic form |'
  prefs: []
  type: TYPE_TB
- en: '| bodies | (Tuple) If the bodies in the system were given they are stored in
    a tuple for future access |'
  prefs: []
  type: TYPE_TB
- en: '| loads | (Tuple) If the loads in the system were given they are stored in
    a tuple for future access. This includes forces and torques where forces are given
    by (point of application, force vector) and torques are given by (reference frame
    acted upon, torque vector). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list with the indices of the rows containing algebraic constraints
    in the combined form of the equations of motion
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns the bodies in the system
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the right hand side of the equations of motion in explicit form, x’
    = F, where the kinematical equations are included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix, M, corresponding to the equations of motion in implicit
    form (form [2]), M x’ = F, where the kinematical equations are included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the column matrix, F, corresponding to the equations of motion in implicit
    form (form [2]), M x’ = F, where the kinematical equations are included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If the explicit right hand side of the combined equations of motion is to provided
    upon initialization, this method will calculate it. This calculation can potentially
    take awhile to compute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns a column matrix containing all of the symbols in the system that do
    not depend on time
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Returns the column matrix of the generalized coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix, M, corresponding to the dynamic equations in implicit form,
    M x’ = F, where the kinematical equations are not included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Returns the column matrix, F, corresponding to the dynamic equations in implicit
    form, M x’ = F, where the kinematical equations are not included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns a column matrix containing all of the symbols in the system that depend
    on time
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Returns the right hand side of the kinematical equations in explicit form, q’
    = G
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the loads in the system
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns the column matrix of generalized speeds
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Returns the column matrix of the state variables
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Class to define a multibody system and form its equations of motion.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A `System` instance stores the different objects associated with a model, including
    bodies, joints, constraints, and other relevant information. With all the relationships
    between components defined, the `System` can be used to form the equations of
    motion using a backend, such as `KanesMethod`. The `System` has been designed
    to be compatible with third-party libraries for greater flexibility and integration
    with other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: In the example below a cart with a pendulum is created. The cart moves along
    the x axis of the rail and the pendulum rotates about the z axis. The length of
    the pendulum is `l` with the pendulum represented as a particle. To move the cart
    a time dependent force `F` is applied to the cart.
  prefs: []
  type: TYPE_NORMAL
- en: We first need to import some functions and create some of our variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create bodies. It is also useful to create a frame for locating
    the particle with respect to the pin joint later on, as a particle does not have
    a body-fixed frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Initialize the system, with the rail as the Newtonian reference. The body is
    also automatically added to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Create the joints, while immediately also adding them to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: While adding the joints, the associated generalized coordinates, generalized
    speeds, kinematic differential equations and bodies are also added to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With the kinematics established, we can now apply gravity and the cart force
    `F`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: With the entire system defined, we can now form the equations of motion. Before
    forming the equations of motion, one can also run some checks that will try to
    identify some common errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The complexity of the above example can be increased if we add a constraint
    to prevent the particle from moving in the horizontal (x) direction. This can
    be done by adding a holonomic constraint. After which we should also redefine
    what our (in)dependent generalized coordinates and speeds are.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: With the updated system the equations of motion can be formed again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| frame | (ReferenceFrame) Inertial reference frame of the system. |'
  prefs: []
  type: TYPE_TB
- en: '| fixed_point | (Point) A fixed point in the inertial reference frame. |'
  prefs: []
  type: TYPE_TB
- en: '| x | (Vector) Unit vector fixed in the inertial reference frame. |'
  prefs: []
  type: TYPE_TB
- en: '| y | (Vector) Unit vector fixed in the inertial reference frame. |'
  prefs: []
  type: TYPE_TB
- en: '| z | (Vector) Unit vector fixed in the inertial reference frame. |'
  prefs: []
  type: TYPE_TB
- en: '| q | (ImmutableMatrix) Matrix of all the generalized coordinates, i.e. the
    independent generalized coordinates stacked upon the dependent. |'
  prefs: []
  type: TYPE_TB
- en: '| u | (ImmutableMatrix) Matrix of all the generalized speeds, i.e. the independent
    generealized speeds stacked upon the dependent. |'
  prefs: []
  type: TYPE_TB
- en: '| q_ind | (ImmutableMatrix) Matrix of the independent generalized coordinates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| q_dep | (ImmutableMatrix) Matrix of the dependent generalized coordinates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| u_ind | (ImmutableMatrix) Matrix of the independent generalized speeds. |'
  prefs: []
  type: TYPE_TB
- en: '| u_dep | (ImmutableMatrix) Matrix of the dependent generalized speeds. |'
  prefs: []
  type: TYPE_TB
- en: '| u_aux | (ImmutableMatrix) Matrix of auxiliary generalized speeds. |'
  prefs: []
  type: TYPE_TB
- en: '| kdes | (ImmutableMatrix) Matrix of the kinematical differential equations
    as expressions equated to the zero matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| bodies | (tuple of BodyBase subclasses) Tuple of all bodies that make up
    the system. |'
  prefs: []
  type: TYPE_TB
- en: '| joints | (tuple of Joint) Tuple of all joints that connect bodies in the
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| loads | (tuple of LoadBase subclasses) Tuple of all loads that have been
    applied to the system. |'
  prefs: []
  type: TYPE_TB
- en: '| actuators | (tuple of ActuatorBase subclasses) Tuple of all actuators present
    in the system. |'
  prefs: []
  type: TYPE_TB
- en: '| holonomic_constraints | (ImmutableMatrix) Matrix with the holonomic constraints
    as expressions equated to the zero matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| nonholonomic_constraints | (ImmutableMatrix) Matrix with the nonholonomic
    constraints as expressions equated to the zero matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| velocity_constraints | (ImmutableMatrix) Matrix with the velocity constraints
    as expressions equated to the zero matrix. These are by default derived as the
    time derivatives of the holonomic constraints extended with the nonholonomic constraints.
    |'
  prefs: []
  type: TYPE_TB
- en: '| eom_method | (subclass of KanesMethod or LagrangesMethod) Backend for forming
    the equations of motion. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tuple of actuators present in the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Add actuator(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***actuators** : subclass of ActuatorBase'
  prefs: []
  type: TYPE_NORMAL
- en: One or more actuators.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Add auxiliary speed(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***speeds** : dynamicsymbols'
  prefs: []
  type: TYPE_NORMAL
- en: One or more auxiliary speeds to be added to the system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Add body(ies) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bodies** : Particle or RigidBody'
  prefs: []
  type: TYPE_NORMAL
- en: One or more bodies.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Add generalized coordinate(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***coordinates** : dynamicsymbols'
  prefs: []
  type: TYPE_NORMAL
- en: One or more generalized coordinates to be added to the system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**independent** : bool or list of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean whether a coordinate is dependent or independent. The default is True,
    so the coordinates are added as independent by default.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Add holonomic constraint(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***constraints** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: One or more holonomic constraints, which are expressions that should be zero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Add joint(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***joints** : subclass of Joint'
  prefs: []
  type: TYPE_NORMAL
- en: One or more joints.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This methods adds one or more joints to the system including its associated
    objects, i.e. generalized coordinates, generalized speeds, kinematic differential
    equations and the bodies.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For the generalized coordinates, generalized speeds and bodies it is checked
    whether they are already known by the system instance. If they are, then they
    are not added. The kinematic differential equations are however always added to
    the system, so you should not also manually add those on beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Add kinematic differential equation(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***kdes** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: One or more kinematic differential equations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Add load(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***loads** : Force or Torque'
  prefs: []
  type: TYPE_NORMAL
- en: One or more loads.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Add nonholonomic constraint(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***constraints** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: One or more nonholonomic constraints, which are expressions that should be zero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Add generalized speed(s) to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***speeds** : dynamicsymbols'
  prefs: []
  type: TYPE_NORMAL
- en: One or more generalized speeds to be added to the system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**independent** : bool or list of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean whether a speed is dependent or independent. The default is True, so
    the speeds are added as independent by default.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Apply uniform gravity to all bodies in the system by adding loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**acceleration** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The acceleration due to gravity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Tuple of all bodies that have been added to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Backend for forming the equations of motion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Fixed point in the inertial reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The forcing vector of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The forcing vector of the system, augmented by the kinematic differential equations
    in explicit or implicit form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Form the equations of motion of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eom_method** : subclass of KanesMethod or LagrangesMethod'
  prefs: []
  type: TYPE_NORMAL
- en: Backend class to be used for forming the equations of motion. The default is
    `KanesMethod`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ImmutableMatrix
  prefs: []
  type: TYPE_NORMAL
- en: Vector of equations of motions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple example for a one degree of freedom translational spring-mass-damper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We can also solve for the states using the ‘rhs’ method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Inertial reference frame of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Constructs the system with respect to a Newtonian body.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve a body from the system by name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the body to retrieve.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RigidBody or Particle
  prefs: []
  type: TYPE_NORMAL
- en: The body with the given name, or None if no such body exists.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve a joint from the system by name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the joint to retrieve.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: subclass of Joint
  prefs: []
  type: TYPE_NORMAL
- en: The joint with the given name, or None if no such joint exists.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Matrix with the holonomic constraints as expressions equated to the zero matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Tuple of all joints that have been added to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Kinematical differential equations as expressions equated to the zero matrix.
    These equations describe the coupling between the generalized coordinates and
    the generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Tuple of loads that have been applied on the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The mass matrix of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The mass matrix \(M_d\) and the forcing vector \(f_d\) of a system describe
    the system’s dynamics according to the following equations:'
  prefs: []
  type: TYPE_NORMAL
- en: \[M_d \dot{u} = f_d\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\dot{u}\) is the time derivative of the generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The mass matrix of the system, augmented by the kinematic differential equations
    in explicit or implicit form.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The full mass matrix \(M_m\) and the full forcing vector \(f_m\) of a system
    describe the dynamics and kinematics according to the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[M_m \dot{x} = f_m\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(x\) is the state vector stacking \(q\) and \(u\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Matrix with the nonholonomic constraints as expressions equated to the zero
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of all the generalized coordinates with the independent stacked upon
    the dependent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of the dependent generalized coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of the independent generalized coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Compute the equations of motion in the explicit form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inv_method** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The specific sympy inverse matrix calculation method to use. For a list of valid
    methods, see [`inv()`](../../../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.inv
    "sympy.matrices.matrixbase.MatrixBase.inv")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ImmutableMatrix
  prefs: []
  type: TYPE_NORMAL
- en: Equations of motion in the explicit form.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics.kane.KanesMethod.rhs`](kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod.rhs
    "sympy.physics.mechanics.kane.KanesMethod.rhs")'
  prefs: []
  type: TYPE_NORMAL
- en: KanesMethod’s `rhs` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics.lagrange.LagrangesMethod.rhs`](kane_lagrange.html#sympy.physics.mechanics.lagrange.LagrangesMethod.rhs
    "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs")'
  prefs: []
  type: TYPE_NORMAL
- en: LagrangesMethod’s `rhs` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of all the generalized speeds with the independent stacked upon the dependent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of auxiliary generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of the dependent generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Matrix of the independent generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Validates the system using some basic checks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eom_method** : subclass of KanesMethod or LagrangesMethod'
  prefs: []
  type: TYPE_NORMAL
- en: Backend class that will be used for forming the equations of motion. There are
    different checks for the different backends. The default is `KanesMethod`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check_duplicates** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean whether the system should be checked for duplicate definitions. The
    default is False, because duplicates are already checked when adding objects to
    the system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This method validates the system based on the following checks:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of dependent generalized coordinates should equal the number of holonomic
    constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All generalized coordinates defined by the joints should also be known to the
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `KanesMethod` is used as a `eom_method`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All generalized speeds and kinematic differential equations defined by the joints
    should also be known to the system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of dependent generalized speeds should equal the number of velocity
    constraints.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of generalized coordinates should be less than or equal to the number
    of generalized speeds.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of generalized coordinates should equal the number of kinematic differential
    equations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `LagrangesMethod` is used as `eom_method`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should not be any generalized speeds that are not derivatives of the generalized
    coordinates (this includes the generalized speeds defined by the joints).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method is not guaranteed to be backwards compatible as it may improve over
    time. The method can become both more and less strict in certain areas. However
    a well-defined system should always pass all these tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Matrix with the velocity constraints as expressions equated to the zero matrix.
    The velocity constraints are by default derived from the holonomic and nonholonomic
    constraints unless they are explicitly set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Unit vector fixed in the inertial reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Unit vector fixed in the inertial reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Unit vector fixed in the inertial reference frame.
  prefs: []
  type: TYPE_NORMAL
