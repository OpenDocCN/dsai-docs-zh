- en: numpy.var
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.var.html](https://numpy.org/doc/1.26/reference/generated/numpy.var.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the variance along the specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the variance of the array elements, a measure of the spread of a distribution.
    The variance is computed for the flattened array by default, otherwise over the
    specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing numbers whose variance is desired. If *a* is not an array,
    a conversion is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the variance is computed. The default is to compute
    the variance of the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If this is a tuple of ints, a variance is performed over multiple axes, instead
    of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type to use in computing the variance. For arrays of integer type the default
    is [`float64`](../arrays.scalars.html#numpy.float64 "numpy.float64"); for arrays
    of float types it is the same as the array type.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. It must have the same shape
    as the expected output, but the type is cast if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**ddof**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '“Delta Degrees of Freedom”: the divisor used in the calculation is `N - ddof`,
    where `N` represents the number of elements. By default *ddof* is zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If the default value is passed, then *keepdims* will not be passed through to
    the [`var`](#numpy.var "numpy.var") method of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), however any non-default value will be. If the sub-class’ method
    does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in the variance. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**variance**ndarray, see dtype parameter above'
  prefs: []
  type: TYPE_NORMAL
- en: If `out=None`, returns a new array containing the variance; otherwise, a reference
    to the output array is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`std`](numpy.std.html#numpy.std "numpy.std"), [`mean`](numpy.mean.html#numpy.mean
    "numpy.mean"), [`nanmean`](numpy.nanmean.html#numpy.nanmean "numpy.nanmean"),
    [`nanstd`](numpy.nanstd.html#numpy.nanstd "numpy.nanstd"), [`nanvar`](numpy.nanvar.html#numpy.nanvar
    "numpy.nanvar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The variance is the average of the squared deviations from the mean, i.e., `var
    = mean(x)`, where `x = abs(a - a.mean())**2`.
  prefs: []
  type: TYPE_NORMAL
- en: The mean is typically calculated as `x.sum() / N`, where `N = len(x)`. If, however,
    *ddof* is specified, the divisor `N - ddof` is used instead. In standard statistical
    practice, `ddof=1` provides an unbiased estimator of the variance of a hypothetical
    infinite population. `ddof=0` provides a maximum likelihood estimate of the variance
    for normally distributed variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for complex numbers, the absolute value is taken before squaring,
    so that the result is always real and nonnegative.
  prefs: []
  type: TYPE_NORMAL
- en: For floating-point input, the variance is computed using the same precision
    the input has. Depending on the input data, this can cause the results to be inaccurate,
    especially for [`float32`](../arrays.scalars.html#numpy.float32 "numpy.float32")
    (see example below). Specifying a higher-accuracy accumulator using the `dtype`
    keyword can alleviate this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In single precision, var() can be inaccurate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Computing the variance in float64 is more accurate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying a where argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
