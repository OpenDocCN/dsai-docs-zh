- en: Representation of holonomic functions in SymPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SymPy 中全纯函数的表示
- en: Original text：[https://docs.sympy.org/latest/modules/holonomic/represent.html](https://docs.sympy.org/latest/modules/holonomic/represent.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/holonomic/represent.html](https://docs.sympy.org/latest/modules/holonomic/represent.html)
- en: Class [`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator
    "sympy.holonomic.holonomic.DifferentialOperator") is used to represent the annihilator
    but we create differential operators easily using the function [`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators"). Class [`HolonomicFunction`](#sympy.holonomic.holonomic.HolonomicFunction
    "sympy.holonomic.holonomic.HolonomicFunction") represents a holonomic function.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator "sympy.holonomic.holonomic.DifferentialOperator")
    用于表示湮灭子，但我们可以使用函数[`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators") 轻松创建微分算子。类[`HolonomicFunction`](#sympy.holonomic.holonomic.HolonomicFunction
    "sympy.holonomic.holonomic.HolonomicFunction") 表示一个全纯函数。
- en: 'Let’s explain this with an example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来解释这一点：
- en: Take \(\sin(x)\) for instance, the differential equation satisfied by it is
    \(y^{(2)}(x) + y(x) = 0\). By definition we conclude it is a holonomic function.
    The general solution of this ODE is \(C_{1} \cdot \sin(x) + C_{2} \cdot \cos(x)\)
    but to get \(\sin(x)\) we need to provide initial conditions i.e. \(y(0) = 0,
    y^{(1)}(0) = 1\).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以 \(\sin(x)\) 为例，它满足的微分方程是 \(y^{(2)}(x) + y(x) = 0\)。根据定义，我们得出它是一个全纯函数。该常微分方程的一般解为
    \(C_{1} \cdot \sin(x) + C_{2} \cdot \cos(x)\)，但要得到 \(\sin(x)\)，我们需要提供初始条件，即 \(y(0)
    = 0, y^{(1)}(0) = 1\)。
- en: To represent the same in this module one needs to provide the differential equation
    in the form of annihilator. Basically a differential operator is an operator on
    functions that differentiates them. So \(D^{n} \cdot y(x) = y^{(n)}(x)\) where
    \(y^{(n)}(x)\) denotes `n` times differentiation of \(y(x)\) with respect to `x`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要在该模块中表示相同的内容，需要将微分方程以湮灭子的形式提供。基本上，微分算子是作用于函数的操作符，对其进行微分。因此，\(D^{n} \cdot y(x)
    = y^{(n)}(x)\)，其中 \(y^{(n)}(x)\) 表示 \(y(x)\) 关于 \(x\) 的第 \(n\) 次导数。
- en: So the differential equation can also be written as \(D^{2} \cdot y(x) + y(x)
    = 0\) or \((D^{2} + 1) \cdot y(x) = 0\). The part left of \(y(x)\) is the annihilator
    i.e. \(D^{2}+1\).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，微分方程也可以写作 \(D^{2} \cdot y(x) + y(x) = 0\) 或者 \((D^{2} + 1) \cdot y(x) = 0\)。方程左侧的部分是湮灭子，即
    \(D^{2}+1\)。
- en: 'So this is how one will represent \(\sin(x)\) as a Holonomic Function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何将 \(\sin(x)\) 表示为全纯函数的方式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The polynomial coefficients will be members of the ring `ZZ[x]` in the example.
    The `D` operator returned by the function [`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators") can be used to create annihilators
    just like SymPy expressions. We currently use the older implementations of rings
    in SymPy for priority mechanism.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，多项式系数将成为环 `ZZ[x]` 的成员。通过函数[`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators") 返回的 `D` 算子可以像 SymPy 表达式一样用于创建湮灭子。我们目前使用
    SymPy 中较旧的环实现优先机制。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A Holonomic Function is a solution to a linear homogeneous ordinary differential
    equation with polynomial coefficients. This differential equation can also be
    represented by an annihilator i.e. a Differential Operator `L` such that \(L.f
    = 0\). For uniqueness of these functions, initial conditions can also be provided
    along with the annihilator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 全纯函数是线性齐次常微分方程 \(L.f = 0\) 的解，其系数为多项式。此微分方程也可以用湮灭子表示，即微分算子 `L`。为了确保这些函数的唯一性，可以提供初始条件和湮灭子。
- en: Explanation
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Holonomic functions have closure properties and thus forms a ring. Given two
    Holonomic Functions f and g, their sum, product, integral and derivative is also
    a Holonomic Function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 全纯函数具有封闭性质，因此形成一个环。给定两个全纯函数 \(f\) 和 \(g\)，它们的和、积、积分和导数也是全纯函数。
- en: For ordinary points initial condition should be a vector of values of the derivatives
    i.e. \([y(x_0), y'(x_0), y''(x_0) ... ]\).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通点，初始条件应为导数值的向量，即 \([y(x_0), y'(x_0), y''(x_0) ... ]\)。
- en: 'For regular singular points initial conditions can also be provided in this
    format: \({s0: [C_0, C_1, ...], s1: [C^1_0, C^1_1, ...], ...}\) where s0, s1,
    … are the roots of indicial equation and vectors \([C_0, C_1, ...], [C^0_0, C^0_1,
    ...], ...\) are the corresponding initial terms of the associated power series.
    See Examples below.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '对于常规奇异点，还可以按照此格式提供初值条件：\({s0: [C_0, C_1, ...], s1: [C^1_0, C^1_1, ...], ...}\)，其中s0,
    s1, …是指标方程的根，向量\([C_0, C_1, ...], [C^0_0, C^0_1, ...], ...\)是相关幂级数的初始项。请参见下面的示例。'
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: An example of initial conditions for regular singular points, the indicial equation
    has only one root \(1/2\).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于常规奇异点的初值条件示例，指标方程只有一个根\(1/2\)。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To plot a Holonomic Function, one can use \(.evalf()\) for numerical computation.
    Here’s an example on \(sin(x)**2/x\) using numpy and matplotlib.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制Holonomic函数，可以使用`.evalf()`进行数值计算。以下是使用numpy和matplotlib绘制\(sin(x)**2/x\)的示例。
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Differential Operators are elements of Weyl Algebra. The Operators are defined
    by a list of polynomials in the base ring and the parent ring of the Operator
    i.e. the algebra it belongs to.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 微分算子是Weyl代数的元素。这些运算符由基础环中的多项式列表和运算符所属的父环定义，即它所属的代数。
- en: Explanation
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Takes a list of polynomials for each power of `Dx` and the parent ring which
    must be an instance of DifferentialOperatorAlgebra.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接受每个`Dx`幂级别的多项式列表和必须是DifferentialOperatorAlgebra实例的父环的列表。
- en: A Differential Operator can be created easily using the operator `Dx`. See examples
    below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用运算符`Dx`可以轻松创建微分算子。请参见下面的示例。
- en: Examples
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DifferentialOperatorAlgebra`](#sympy.holonomic.holonomic.DifferentialOperatorAlgebra
    "sympy.holonomic.holonomic.DifferentialOperatorAlgebra")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DifferentialOperatorAlgebra`](#sympy.holonomic.holonomic.DifferentialOperatorAlgebra
    "sympy.holonomic.holonomic.DifferentialOperatorAlgebra")'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Checks if the differential equation is singular at x0.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 检查微分方程在x0处是否奇异。
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function is used to create annihilators using `Dx`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于使用`Dx`创建湮灭算子。
- en: 'Parameters:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**base:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础：**'
- en: Base polynomial ring for the algebra. The base polynomial ring is the ring of
    polynomials in \(x\) that will appear as coefficients in the operators.
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代数的基础多项式环。基础多项式环是在运算符中出现的x的多项式环，这些运算符将作为运算符的系数。
- en: '**generator:**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**生成器：**'
- en: Generator of the algebra which can be either a noncommutative `Symbol` or a
    string. e.g. “Dx” or “D”.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代数的生成器可以是非交换的`Symbol`或字符串。例如，“Dx”或“D”。
- en: Explanation
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns an Algebra of Differential Operators also called Weyl Algebra and the
    operator for differentiation i.e. the `Dx` operator.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回微分算子的代数，也称为Weyl代数，以及区分运算的操作符，即`Dx`运算符。
- en: Examples
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'An Ore Algebra is a set of noncommutative polynomials in the intermediate `Dx`
    and coefficients in a base polynomial ring \(A\). It follows the commutation rule:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Ore代数是中间`Dx`中的非交换多项式集合和基础多项式环\(A\)中的系数。它遵循交换规则：
- en: \[Dxa = \sigma(a)Dx + \delta(a)\]
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: \[Dxa = \sigma(a)Dx + \delta(a)\]
- en: for \(a \subset A\).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于\(a \subset A\)。
- en: 'Where \(\sigma: A \Rightarrow A\) is an endomorphism and \(\delta: A \rightarrow
    A\) is a skew-derivation i.e. \(\delta(ab) = \delta(a) b + \sigma(a) \delta(b)\).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '其中\(\sigma: A \Rightarrow A\)是一个自同态，而\(\delta: A \rightarrow A\)是一个斜导数，即\(\delta(ab)
    = \delta(a) b + \sigma(a) \delta(b)\)。'
- en: If one takes the sigma as identity map and delta as the standard derivation
    then it becomes the algebra of Differential Operators also called a Weyl Algebra
    i.e. an algebra whose elements are Differential Operators.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将sigma视为恒等映射，将delta视为标准导数，那么它变成了微分算子的代数，也称为Weyl代数，即其元素为微分算子的代数。
- en: This class represents a Weyl Algebra and serves as the parent ring for Differential
    Operators.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该类代表一个Weyl代数，并作为微分算子的父环。
- en: Examples
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator "sympy.holonomic.holonomic.DifferentialOperator")'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator "sympy.holonomic.holonomic.DifferentialOperator")'
