- en: Combinatorial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合学
- en: 原文：[https://docs.sympy.org/latest/modules/functions/combinatorial.html](https://docs.sympy.org/latest/modules/functions/combinatorial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/functions/combinatorial.html](https://docs.sympy.org/latest/modules/functions/combinatorial.html)
- en: This module implements various combinatorial functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块实现了各种组合函数。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Bell numbers / Bell polynomials
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 贝尔数 / 贝尔多项式
- en: The Bell numbers satisfy \(B_0 = 1\) and
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 贝尔数满足 \(B_0 = 1\) 和
- en: \[B_n = \sum_{k=0}^{n-1} \binom{n-1}{k} B_k.\]
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_n = \sum_{k=0}^{n-1} \binom{n-1}{k} B_k.\]
- en: 'They are also given by:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也可以表示为：
- en: \[B_n = \frac{1}{e} \sum_{k=0}^{\infty} \frac{k^n}{k!}.\]
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_n = \frac{1}{e} \sum_{k=0}^{\infty} \frac{k^n}{k!}.\]
- en: The Bell polynomials are given by \(B_0(x) = 1\) and
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 贝尔多项式定义为 \(B_0(x) = 1\) 和
- en: \[B_n(x) = x \sum_{k=1}^{n-1} \binom{n-1}{k-1} B_{k-1}(x).\]
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_n(x) = x \sum_{k=1}^{n-1} \binom{n-1}{k-1} B_{k-1}(x).\]
- en: The second kind of Bell polynomials (are sometimes called “partial” Bell polynomials
    or incomplete Bell polynomials) are defined as
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类贝尔多项式（有时称为“部分”贝尔多项式或不完全贝尔多项式）定义为
- en: \[B_{n,k}(x_1, x_2,\dotsc x_{n-k+1}) = \sum_{j_1+j_2+j_2+\dotsb=k \atop j_1+2j_2+3j_2+\dotsb=n}
    \frac{n!}{j_1!j_2!\dotsb j_{n-k+1}!} \left(\frac{x_1}{1!} \right)^{j_1} \left(\frac{x_2}{2!}
    \right)^{j_2} \dotsb \left(\frac{x_{n-k+1}}{(n-k+1)!} \right) ^{j_{n-k+1}}.\]
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_{n,k}(x_1, x_2,\dotsc x_{n-k+1}) = \sum_{j_1+j_2+j_2+\dotsb=k \atop j_1+2j_2+3j_2+\dotsb=n}
    \frac{n!}{j_1!j_2!\dotsb j_{n-k+1}!} \left(\frac{x_1}{1!} \right)^{j_1} \left(\frac{x_2}{2!}
    \right)^{j_2} \dotsb \left(\frac{x_{n-k+1}}{(n-k+1)!} \right) ^{j_{n-k+1}}.\]
- en: '`bell(n)` gives the \(n^{th}\) Bell number, \(B_n\).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bell(n)` 给出第 \(n\) 个贝尔数，\(B_n\)。'
- en: '`bell(n, x)` gives the \(n^{th}\) Bell polynomial, \(B_n(x)\).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bell(n, x)` 给出第 \(n\) 个贝尔多项式，\(B_n(x)\)。'
- en: '`bell(n, k, (x1, x2, ...))` gives Bell polynomials of the second kind, \(B_{n,k}(x_1,
    x_2, \dotsc, x_{n-k+1})\).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bell(n, k, (x1, x2, ...))` 给出第二类贝尔多项式，\(B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\)。'
- en: Notes
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Not to be confused with Bernoulli numbers and Bernoulli polynomials, which use
    the same notation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不要与伯努利数和伯努利多项式混淆，它们使用相同的符号。
- en: Examples
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
- en: References
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R207](#id1)]'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R207](#id1)]'
- en: '[https://en.wikipedia.org/wiki/Bell_number](https://en.wikipedia.org/wiki/Bell_number)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Bell_number](https://en.wikipedia.org/wiki/Bell_number)'
- en: '[[R208](#id2)]'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R208](#id2)]'
- en: '[https://mathworld.wolfram.com/BellNumber.html](https://mathworld.wolfram.com/BellNumber.html)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/BellNumber.html](https://mathworld.wolfram.com/BellNumber.html)'
- en: '[[R209](#id3)]'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R209](#id3)]'
- en: '[https://mathworld.wolfram.com/BellPolynomial.html](https://mathworld.wolfram.com/BellPolynomial.html)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/BellPolynomial.html](https://mathworld.wolfram.com/BellPolynomial.html)'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Bernoulli numbers / Bernoulli polynomials / Bernoulli function
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利数 / 伯努利多项式 / 伯努利函数
- en: 'The Bernoulli numbers are a sequence of rational numbers defined by \(B_0 =
    1\) and the recursive relation (\(n > 0\)):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利数是由 \(B_0 = 1\) 和递归关系定义的一系列有理数：
- en: \[n+1 = \sum_{k=0}^n \binom{n+1}{k} B_k\]
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: \[n+1 = \sum_{k=0}^n \binom{n+1}{k} B_k\]
- en: They are also commonly defined by their exponential generating function, which
    is \(\frac{x}{1 - e^{-x}}\). For odd indices > 1, the Bernoulli numbers are zero.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也通常由其指数生成函数定义，即 \(\frac{x}{1 - e^{-x}}\)。对于大于1的奇数索引，伯努利数为零。
- en: 'The Bernoulli polynomials satisfy the analogous formula:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利多项式满足类似的公式：
- en: \[B_n(x) = \sum_{k=0}^n (-1)^k \binom{n}{k} B_k x^{n-k}\]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_n(x) = \sum_{k=0}^n (-1)^k \binom{n}{k} B_k x^{n-k}\]
- en: Bernoulli numbers and Bernoulli polynomials are related as \(B_n(1) = B_n\).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利数和伯努利多项式之间的关系为 \(B_n(1) = B_n\)。
- en: The generalized Bernoulli function \(\operatorname{B}(s, a)\) is defined for
    any complex \(s\) and \(a\), except where \(a\) is a nonpositive integer and \(s\)
    is not a nonnegative integer. It is an entire function of \(s\) for fixed \(a\),
    related to the Hurwitz zeta function by
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 广义伯努利函数 \(\operatorname{B}(s, a)\) 定义在任意复数 \(s\) 和 \(a\) 上，除了 \(a\) 是非正整数且 \(s\)
    不是非负整数。对于固定的 \(a\)，它是 \(s\) 的整函数，与胡尔维兹塞塔函数相关联，方法如下：
- en: \[\begin{split}\operatorname{B}(s, a) = \begin{cases} -s \zeta(1-s, a) & s \ne
    0 \\ 1 & s = 0 \end{cases}\end{split}\]
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\operatorname{B}(s, a) = \begin{cases} -s \zeta(1-s, a) & s \ne
    0 \\ 1 & s = 0 \end{cases}\end{split}\]
- en: 'When \(s\) is a nonnegative integer this function reduces to the Bernoulli
    polynomials: \(\operatorname{B}(n, x) = B_n(x)\). When \(a\) is omitted it is
    assumed to be 1, yielding the (ordinary) Bernoulli function which interpolates
    the Bernoulli numbers and is related to the Riemann zeta function.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当 \(s\) 是非负整数时，此函数简化为伯努利多项式：\(\operatorname{B}(n, x) = B_n(x)\)。当省略 \(a\) 时，默认为
    1，得到（普通的）伯努利函数，它插值了伯努利数，并与黎曼塞塔函数相关联。
- en: 'We compute Bernoulli numbers using Ramanujan’s formula:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用拉马努金公式计算伯努利数：
- en: \[B_n = \frac{A(n) - S(n)}{\binom{n+3}{n}}\]
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_n = \frac{A(n) - S(n)}{\binom{n+3}{n}}\]
- en: 'where:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: \[\begin{split}A(n) = \begin{cases} \frac{n+3}{3} & n \equiv 0\ \text{or}\ 2
    \pmod{6} \\ -\frac{n+3}{6} & n \equiv 4 \pmod{6} \end{cases}\end{split}\]
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}A(n) = \begin{cases} \frac{n+3}{3} & n \equiv 0\ \text{or}\ 2
    \pmod{6} \\ -\frac{n+3}{6} & n \equiv 4 \pmod{6} \end{cases}\end{split}\]
- en: 'and:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并且：
- en: \[S(n) = \sum_{k=1}^{[n/6]} \binom{n+3}{n-6k} B_{n-6k}\]
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: \[S(n) = \sum_{k=1}^{[n/6]} \binom{n+3}{n-6k} B_{n-6k}\]
- en: This formula is similar to the sum given in the definition, but cuts \(\frac{2}{3}\)
    of the terms. For Bernoulli polynomials, we use Appell sequences.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此公式类似于定义中给出的和，但删去了 \(\frac{2}{3}\) 的项。对于伯努利多项式，我们使用阿佩尔序列。
- en: For \(n\) a nonnegative integer and \(s\), \(a\), \(x\) arbitrary complex numbers,
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非负整数 \(n\) 和任意复数 \(s\)、\(a\)、\(x\)，
- en: '`bernoulli(n)` gives the nth Bernoulli number, \(B_n\)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bernoulli(n)` 给出第 n 个伯努利数，\(B_n\)'
- en: '`bernoulli(s)` gives the Bernoulli function \(\operatorname{B}(s)\)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bernoulli(s)` 给出伯努利函数 \(\operatorname{B}(s)\)'
- en: '`bernoulli(n, x)` gives the nth Bernoulli polynomial in \(x\), \(B_n(x)\)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bernoulli(n, x)` 给出第 n 个伯努利多项式在 \(x\) 中的值，\(B_n(x)\)'
- en: '`bernoulli(s, a)` gives the generalized Bernoulli function \(\operatorname{B}(s,
    a)\)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bernoulli(s, a)` 给出广义伯努利函数 \(\operatorname{B}(s, a)\)'
- en: 'Changed in version 1.12: `bernoulli(1)` gives \(+\frac{1}{2}\) instead of \(-\frac{1}{2}\).
    This choice of value confers several theoretical advantages [[R214]](#r214), including
    the extension to complex parameters described above which this function now implements.
    The previous behavior, defined only for nonnegative integers \(n\), can be obtained
    with `(-1)**n*bernoulli(n)`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.12更改：`bernoulli(1)`现在返回 \(+\frac{1}{2}\) 而非 \(-\frac{1}{2}\)。此选择的值具有几个理论优势[[R214]](#r214)，包括此函数现在实现的对复参数的扩展描述。先前的行为仅对非负整数
    \(n\) 定义，可通过 `(-1)**n*bernoulli(n)` 获得。
- en: Examples
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See also
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.bernoulli_poly`](../polys/reference.html#sympy.polys.appellseqs.bernoulli_poly
    "sympy.polys.appellseqs.bernoulli_poly")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.bernoulli_poly`](../polys/reference.html#sympy.polys.appellseqs.bernoulli_poly
    "sympy.polys.appellseqs.bernoulli_poly")'
- en: References
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R210](#id5)]'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R210](#id5)]'
- en: '[https://en.wikipedia.org/wiki/Bernoulli_number](https://en.wikipedia.org/wiki/Bernoulli_number)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Bernoulli_number](https://en.wikipedia.org/wiki/Bernoulli_number)'
- en: '[[R211](#id6)]'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R211](#id6)]'
- en: '[https://en.wikipedia.org/wiki/Bernoulli_polynomial](https://en.wikipedia.org/wiki/Bernoulli_polynomial)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Bernoulli_polynomial](https://en.wikipedia.org/wiki/Bernoulli_polynomial)'
- en: '[[R212](#id7)]'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R212](#id7)]'
- en: '[https://mathworld.wolfram.com/BernoulliNumber.html](https://mathworld.wolfram.com/BernoulliNumber.html)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/BernoulliNumber.html](https://mathworld.wolfram.com/BernoulliNumber.html)'
- en: '[[R213](#id8)]'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R213](#id8)]'
- en: '[https://mathworld.wolfram.com/BernoulliPolynomial.html](https://mathworld.wolfram.com/BernoulliPolynomial.html)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/BernoulliPolynomial.html](https://mathworld.wolfram.com/BernoulliPolynomial.html)'
- en: '[R214] ([1](#id4),[2](#id9))'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[R214] ([1](#id4),[2](#id9))'
- en: Peter Luschny, “The Bernoulli Manifesto”, [https://luschny.de/math/zeta/The-Bernoulli-Manifesto.html](https://luschny.de/math/zeta/The-Bernoulli-Manifesto.html)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 彼得·卢什尼，“伯努利宣言”，[https://luschny.de/math/zeta/The-Bernoulli-Manifesto.html](https://luschny.de/math/zeta/The-Bernoulli-Manifesto.html)
- en: '[[R215](#id10)]'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R215](#id10)]'
- en: Peter Luschny, “An introduction to the Bernoulli function”, [https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 彼得·卢什尼，“伯努利函数简介”，[https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Implementation of the binomial coefficient. It can be defined in two ways depending
    on its desired interpretation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实现二项式系数。它可以根据所需的解释方式分为两种定义：
- en: \[\binom{n}{k} = \frac{n!}{k!(n-k)!}\ \text{or}\ \binom{n}{k} = \frac{(n)_k}{k!}\]
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: \[\binom{n}{k} = \frac{n!}{k!(n-k)!}\ \text{或}\ \binom{n}{k} = \frac{(n)_k}{k!}\]
- en: First, in a strict combinatorial sense it defines the number of ways we can
    choose \(k\) elements from a set of \(n\) elements. In this case both arguments
    are nonnegative integers and binomial is computed using an efficient algorithm
    based on prime factorization.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在严格的组合意义上，它定义了从 \(n\) 个元素的集合中选择 \(k\) 个元素的方式数。在这种情况下，两个参数都是非负整数，并且使用基于素因子分解的高效算法计算二项式系数。
- en: The other definition is generalization for arbitrary \(n\), however \(k\) must
    also be nonnegative. This case is very useful when evaluating summations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种定义是任意 \(n\) 的泛化，但 \(k\) 也必须是非负的。在求和时这种情况非常有用。
- en: For the sake of convenience, for negative integer \(k\) this function will return
    zero no matter the other argument.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，对于负整数 \(k\)，无论其他参数如何，此函数将返回零。
- en: To expand the binomial when \(n\) is a symbol, use either `expand_func()` or
    `expand(func=True)`. The former will keep the polynomial in factored form while
    the latter will expand the polynomial itself. See examples for details.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当\(n\)为符号时，要扩展二项式，请使用`expand_func()`或`expand(func=True)`。前者将保持多项式的分解形式，而后者将展开多项式本身。详见示例以获取详细信息。
- en: Examples
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Rows of Pascal’s triangle can be generated with the binomial function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 帕斯卡三角形的行可以使用二项式函数生成：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As can a given diagonal, e.g. the 4th diagonal:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如给定的对角线，如第4个对角线：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In many cases, we can also compute binomial coefficients modulo a prime p quickly
    using Lucas’ Theorem [[R217]](#r217), though we need to include \(evaluate=False\)
    to postpone evaluation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们还可以使用Lucas定理（参见[R217](#r217)）快速计算素数p的二项式系数，尽管我们需要包含\(evaluate=False\)来延迟评估：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using a generalisation of Lucas’s Theorem given by Granville [[R218]](#r218),
    we can extend this to arbitrary n:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Granville给出的Lucas定理的一般化（参见[R218](#r218)），我们可以将其扩展到任意的n：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: References
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R216](#id13)]'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R216](#id13)]'
- en: '[https://www.johndcook.com/blog/binomial_coefficients/](https://www.johndcook.com/blog/binomial_coefficients/)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.johndcook.com/blog/binomial_coefficients/](https://www.johndcook.com/blog/binomial_coefficients/)'
- en: '[R217] ([1](#id11),[2](#id14))'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[R217] ([1](#id11),[2](#id14))'
- en: '[https://en.wikipedia.org/wiki/Lucas%27s_theorem](https://en.wikipedia.org/wiki/Lucas%27s_theorem)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Lucas%27s_theorem](https://en.wikipedia.org/wiki/Lucas%27s_theorem)'
- en: '[R218] ([1](#id12),[2](#id15))'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[R218] ([1](#id12),[2](#id15))'
- en: 'Binomial coefficients modulo prime powers, Andrew Granville, Available: [https://web.archive.org/web/20170202003812/http://www.dms.umontreal.ca/~andrew/PDF/BinCoeff.pdf](https://web.archive.org/web/20170202003812/http://www.dms.umontreal.ca/~andrew/PDF/BinCoeff.pdf)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 素数幂的二项式系数，Andrew Granville，可获取：[https://web.archive.org/web/20170202003812/http://www.dms.umontreal.ca/~andrew/PDF/BinCoeff.pdf](https://web.archive.org/web/20170202003812/http://www.dms.umontreal.ca/~andrew/PDF/BinCoeff.pdf)
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Catalan numbers
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 卡特兰数
- en: 'The \(n^{th}\) catalan number is given by:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第\(n\)个卡特兰数由以下公式给出：
- en: \[C_n = \frac{1}{n+1} \binom{2n}{n}\]
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: \[C_n = \frac{1}{n+1} \binom{2n}{n}\]
- en: '`catalan(n)` gives the \(n^{th}\) Catalan number, \(C_n\)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalan(n)` 给出第\(n\)个卡特兰数，\(C_n\)'
- en: Examples
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Catalan numbers can be transformed into several other, identical expressions
    involving other mathematical functions
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 卡特兰数可以转化为几个其他相同的表达式，涉及其他数学函数
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For some non-integer values of n we can get closed form expressions by rewriting
    in terms of gamma functions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些非整数值的n，我们可以通过重新写成伽玛函数的形式得到闭合形式表达式：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can differentiate the Catalan numbers C(n) interpreted as a continuous real
    function in n:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在n中将卡特兰数C(n)解释为连续实函数时进行微分：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As a more advanced example consider the following ratio between consecutive
    numbers:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更高级的例子，考虑以下连续数之间的比率：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The Catalan numbers can be generalized to complex numbers:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 卡特兰数可以推广到复数：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'and evaluated with arbitrary precision:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 并且可以进行任意精度的评估：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See also
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.functions.combinatorial.factorials.binomial`](#sympy.functions.combinatorial.factorials.binomial
    "sympy.functions.combinatorial.factorials.binomial")'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.functions.combinatorial.factorials.binomial`](#sympy.functions.combinatorial.factorials.binomial
    "sympy.functions.combinatorial.factorials.binomial")'
- en: References
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R219](#id16)]'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R219](#id16)]'
- en: '[https://en.wikipedia.org/wiki/Catalan_number](https://en.wikipedia.org/wiki/Catalan_number)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Catalan_number](https://en.wikipedia.org/wiki/Catalan_number)'
- en: '[[R220](#id17)]'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R220](#id17)]'
- en: '[https://mathworld.wolfram.com/CatalanNumber.html](https://mathworld.wolfram.com/CatalanNumber.html)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/CatalanNumber.html](https://mathworld.wolfram.com/CatalanNumber.html)'
- en: '[[R221](#id18)]'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R221](#id18)]'
- en: '[https://functions.wolfram.com/GammaBetaErf/CatalanNumber/](https://functions.wolfram.com/GammaBetaErf/CatalanNumber/)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://functions.wolfram.com/GammaBetaErf/CatalanNumber/](https://functions.wolfram.com/GammaBetaErf/CatalanNumber/)'
- en: '[[R222](#id19)]'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R222](#id19)]'
- en: '[http://geometer.org/mathcircles/catalan.pdf](http://geometer.org/mathcircles/catalan.pdf)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://geometer.org/mathcircles/catalan.pdf](http://geometer.org/mathcircles/catalan.pdf)'
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Euler numbers / Euler polynomials / Euler function
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉数 / 欧拉多项式 / 欧拉函数
- en: 'The Euler numbers are given by:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉数由以下给出：
- en: \[E_{2n} = I \sum_{k=1}^{2n+1} \sum_{j=0}^k \binom{k}{j} \frac{(-1)^j (k-2j)^{2n+1}}{2^k
    I^k k}\]\[E_{2n+1} = 0\]
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: \[E_{2n} = I \sum_{k=1}^{2n+1} \sum_{j=0}^k \binom{k}{j} \frac{(-1)^j (k-2j)^{2n+1}}{2^k
    I^k k}\]\[E_{2n+1} = 0\]
- en: Euler numbers and Euler polynomials are related by
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉数和欧拉多项式之间的关系为：
- en: \[E_n = 2^n E_n\left(\frac{1}{2}\right).\]
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: \[E_n = 2^n E_n\left(\frac{1}{2}\right).\]
- en: We compute symbolic Euler polynomials using Appell sequences, but numerical
    evaluation of the Euler polynomial is computed more efficiently (and more accurately)
    using the mpmath library.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Appell 序列计算符号欧拉多项式，但是使用 mpmath 库可以更高效（并且更准确地）计算欧拉多项式的数值评估。
- en: The Euler polynomials are special cases of the generalized Euler function, related
    to the Genocchi function as
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉多项式是广义欧拉函数的特殊情况，与 Genocchi 函数相关如下：
- en: \[\operatorname{E}(s, a) = -\frac{\operatorname{G}(s+1, a)}{s+1}\]
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: \[\operatorname{E}(s, a) = -\frac{\operatorname{G}(s+1, a)}{s+1}\]
- en: with the limit of \(\psi\left(\frac{a+1}{2}\right) - \psi\left(\frac{a}{2}\right)\)
    being taken when \(s = -1\). The (ordinary) Euler function interpolating the Euler
    numbers is then obtained as \(\operatorname{E}(s) = 2^s \operatorname{E}\left(s,
    \frac{1}{2}\right)\).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当 \(s = -1\) 时，限制为 \(\psi\left(\frac{a+1}{2}\right) - \psi\left(\frac{a}{2}\right)\)。插值欧拉函数
    \(E(s)\) 如下所得：\(\operatorname{E}(s) = 2^s \operatorname{E}\left(s, \frac{1}{2}\right)\)。
- en: '`euler(n)` gives the nth Euler number \(E_n\).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`euler(n)` 给出第 n 个欧拉数 \(E_n\)。'
- en: '`euler(s)` gives the Euler function \(\operatorname{E}(s)\).'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`euler(s)` 给出欧拉函数 \(\operatorname{E}(s)\)。'
- en: '`euler(n, x)` gives the nth Euler polynomial \(E_n(x)\).'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`euler(n, x)` 给出第 n 个欧拉多项式 \(E_n(x)\)。'
- en: '`euler(s, a)` gives the generalized Euler function \(\operatorname{E}(s, a)\).'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`euler(s, a)` 给出广义欧拉函数 \(\operatorname{E}(s, a)\)。'
- en: Examples
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.euler_poly`](../polys/reference.html#sympy.polys.appellseqs.euler_poly
    "sympy.polys.appellseqs.euler_poly")'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`andre`](#sympy.functions.combinatorial.numbers.andre "sympy.functions.combinatorial.numbers.andre"),
    [`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.euler_poly`](../polys/reference.html#sympy.polys.appellseqs.euler_poly
    "sympy.polys.appellseqs.euler_poly")'
- en: References
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R223](#id20)]'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R223](#id20)]'
- en: '[https://en.wikipedia.org/wiki/Euler_numbers](https://en.wikipedia.org/wiki/Euler_numbers)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Euler_numbers](https://en.wikipedia.org/wiki/Euler_numbers)'
- en: '[[R224](#id21)]'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R224](#id21)]'
- en: '[https://mathworld.wolfram.com/EulerNumber.html](https://mathworld.wolfram.com/EulerNumber.html)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/EulerNumber.html](https://mathworld.wolfram.com/EulerNumber.html)'
- en: '[[R225](#id22)]'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R225](#id22)]'
- en: '[https://en.wikipedia.org/wiki/Alternating_permutation](https://en.wikipedia.org/wiki/Alternating_permutation)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Alternating_permutation](https://en.wikipedia.org/wiki/Alternating_permutation)'
- en: '[[R226](#id23)]'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R226](#id23)]'
- en: '[https://mathworld.wolfram.com/AlternatingPermutation.html](https://mathworld.wolfram.com/AlternatingPermutation.html)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/AlternatingPermutation.html](https://mathworld.wolfram.com/AlternatingPermutation.html)'
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Implementation of factorial function over nonnegative integers. By convention
    (consistent with the gamma function and the binomial coefficients), factorial
    of a negative integer is complex infinity.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 针对非负整数的阶乘函数的实现。按照约定（与伽玛函数和二项式系数一致），负整数的阶乘被定义为复数无穷。
- en: The factorial is very important in combinatorics where it gives the number of
    ways in which \(n\) objects can be permuted. It also arises in calculus, probability,
    number theory, etc.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘在组合学中非常重要，用于计算 \(n\) 个对象的排列方式数量。它还出现在微积分、概率论、数论等领域。
- en: There is strict relation of factorial with gamma function. In fact \(n! = gamma(n+1)\)
    for nonnegative integers. Rewrite of this kind is very useful in case of combinatorial
    simplification.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘与伽玛函数有严格的关系。事实上，对于非负整数，\(n! = gamma(n+1)\)。这种重写在组合简化中非常有用。
- en: Computation of the factorial is done using two algorithms. For small arguments
    a precomputed look up table is used. However for bigger input algorithm Prime-Swing
    is used. It is the fastest algorithm known and computes \(n!\) via prime factorization
    of special class of numbers, called here the ‘Swing Numbers’.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘的计算使用两种算法。对于小输入，使用预先计算的查找表。但对于更大的输入，使用Prime-Swing算法。这是已知最快的算法，通过对称称为‘Swing
    Numbers’的特殊数字的质因数分解来计算 \(n!\)。
- en: Examples
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See also
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial"), [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial"), [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The subfactorial counts the derangements of \(n\) items and is defined for
    non-negative integers as:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 子阶乘计算 \(n\) 项的错位排列，并定义为非负整数：
- en: \[\begin{split}!n = \begin{cases} 1 & n = 0 \\ 0 & n = 1 \\ (n-1)(!(n-1) + !(n-2))
    & n > 1 \end{cases}\end{split}\]
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}!n = \begin{cases} 1 & n = 0 \\ 0 & n = 1 \\ (n-1)(!(n-1) + !(n-2))
    & n > 1 \end{cases}\end{split}\]
- en: It can also be written as `int(round(n!/exp(1)))` but the recursive definition
    with caching is implemented for this function.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以写成 `int(round(n!/exp(1)))`，但是此函数实现了具有缓存的递归定义。
- en: An interesting analytic expression is the following [[R228]](#r228)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的解析表达式如下 [[R228]](#r228)
- en: \[!x = \Gamma(x + 1, -1)/e\]
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: \[!x = \Gamma(x + 1, -1)/e\]
- en: which is valid for non-negative integers \(x\). The above formula is not very
    useful in case of non-integers. \(\Gamma(x + 1, -1)\) is single-valued only for
    integral arguments \(x\), elsewhere on the positive real axis it has an infinite
    number of branches none of which are real.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于非负整数 \(x\)。上述公式在非整数情况下并不是很有用。\(\Gamma(x + 1, -1)\) 仅在整数参数 \(x\) 上是单值的，在正实轴上有无限多个分支，其中没有一个是实数。
- en: Examples
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE44]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: See also
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`uppergamma`](special.html#sympy.functions.special.gamma_functions.uppergamma
    "sympy.functions.special.gamma_functions.uppergamma"), [`sympy.utilities.iterables.generate_derangements`](../utilities/iterables.html#sympy.utilities.iterables.generate_derangements
    "sympy.utilities.iterables.generate_derangements")'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`uppergamma`](special.html#sympy.functions.special.gamma_functions.uppergamma
    "sympy.functions.special.gamma_functions.uppergamma"), [`sympy.utilities.iterables.generate_derangements`](../utilities/iterables.html#sympy.utilities.iterables.generate_derangements
    "sympy.utilities.iterables.generate_derangements")'
- en: References
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R227](#id25)]'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R227](#id25)]'
- en: '[https://en.wikipedia.org/wiki/Subfactorial](https://en.wikipedia.org/wiki/Subfactorial)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Subfactorial](https://en.wikipedia.org/wiki/Subfactorial)'
- en: '[R228] ([1](#id24),[2](#id26))'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[R228] ([1](#id24),[2](#id26))'
- en: '[https://mathworld.wolfram.com/Subfactorial.html](https://mathworld.wolfram.com/Subfactorial.html)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/Subfactorial.html](https://mathworld.wolfram.com/Subfactorial.html)'
- en: '[PRE45]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The double factorial \(n!!\), not to be confused with \((n!)!\)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 双阶乘 \(n!!\)，不要与 \((n!)!\) 混淆
- en: 'The double factorial is defined for nonnegative integers and for odd negative
    integers as:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 双阶乘对非负整数和奇负整数定义如下：
- en: \[\begin{split}n!! = \begin{cases} 1 & n = 0 \\ n(n-2)(n-4) \cdots 1 & n\ \text{positive
    odd} \\ n(n-2)(n-4) \cdots 2 & n\ \text{positive even} \\ (n+2)!!/(n+2) & n\ \text{negative
    odd} \end{cases}\end{split}\]
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}n!! = \begin{cases} 1 & n = 0 \\ n(n-2)(n-4) \cdots 1 & n\ \text{为正奇数}
    \\ n(n-2)(n-4) \cdots 2 & n\ \text{为正偶数} \\ (n+2)!!/(n+2) & n\ \text{为负奇数} \end{cases}\end{split}\]
- en: Examples
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE46]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: See also
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial"), [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial"), [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
- en: References
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R229](#id27)]'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R229](#id27)]'
- en: '[https://en.wikipedia.org/wiki/Double_factorial](https://en.wikipedia.org/wiki/Double_factorial)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Double_factorial](https://en.wikipedia.org/wiki/Double_factorial)'
- en: '[PRE47]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Falling factorial (related to rising factorial) is a double valued function
    arising in concrete mathematics, hypergeometric functions and series expansions.
    It is defined by
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 降阶乘（与升阶乘相关）是在具体数学、超几何函数和级数展开中出现的双值函数。它由以下定义：
- en: \[\texttt{ff(x, k)} = (x)_k = x \cdot (x-1) \cdots (x-k+1)\]
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: \[\texttt{ff(x, k)} = (x)_k = x \cdot (x-1) \cdots (x-k+1)\]
- en: where \(x\) can be arbitrary expression and \(k\) is an integer. For more information
    check “Concrete mathematics” by Graham, pp. 66 or [[R230]](#r230).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(x\) 可以是任意表达式，\(k\) 是整数。更多信息请查阅格雷厄姆的《具体数学》第66页或 [[R230]](#r230)。
- en: When \(x\) is a \(~.Poly\) instance of degree \(\ge 1\) with single variable,
    \((x)_k = x(y) \cdot x(y-1) \cdots x(y-k+1)\), where \(y\) is the variable of
    \(x\). This is as described in
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当 \(x\) 是单变量具有度数 \(\ge 1\) 的 \(~.Poly\) 实例时，\((x)_k = x(y) \cdot x(y-1) \cdots
    x(y-k+1)\)，其中 \(y\) 是 \(x\) 的变量。这如同描述在
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Rewriting is complicated unless the relationship between the arguments is known,
    but falling factorial can be rewritten in terms of gamma, factorial and binomial
    and rising factorial.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 除非已知参数之间的关系，否则重新编写将会很复杂，但是阶乘下降可以通过伽玛，阶乘和二项式重写上升阶乘。
- en: '[PRE50]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: See also
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial")'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`RisingFactorial`](#sympy.functions.combinatorial.factorials.RisingFactorial
    "sympy.functions.combinatorial.factorials.RisingFactorial")'
- en: References
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[R230] ([1](#id28),[2](#id29))'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[R230] ([1](#id28),[2](#id29))'
- en: '[https://mathworld.wolfram.com/FallingFactorial.html](https://mathworld.wolfram.com/FallingFactorial.html)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/FallingFactorial.html](https://mathworld.wolfram.com/FallingFactorial.html)'
- en: '[[R231](#id30)]'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R231](#id30)]'
- en: Peter Paule, “Greatest Factorial Factorization and Symbolic Summation”, Journal
    of Symbolic Computation, vol. 20, pp. 235-268, 1995.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Peter Paule, “最大阶乘分解和符号求和”, 《符号计算期刊》, vol. 20, pp. 235-268, 1995.
- en: '[PRE51]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Fibonacci numbers / Fibonacci polynomials
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列 / 斐波那契多项式
- en: The Fibonacci numbers are the integer sequence defined by the initial terms
    \(F_0 = 0\), \(F_1 = 1\) and the two-term recurrence relation \(F_n = F_{n-1}
    + F_{n-2}\). This definition extended to arbitrary real and complex arguments
    using the formula
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列是由初始项 \(F_0 = 0\), \(F_1 = 1\) 和两项递推关系 \(F_n = F_{n-1} + F_{n-2}\) 定义的整数序列。此定义可扩展到任意实数和复数参数使用下列公式
- en: \[F_z = \frac{\phi^z - \cos(\pi z) \phi^{-z}}{\sqrt 5}\]
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: \[F_z = \frac{\phi^z - \cos(\pi z) \phi^{-z}}{\sqrt 5}\]
- en: The Fibonacci polynomials are defined by \(F_1(x) = 1\), \(F_2(x) = x\), and
    \(F_n(x) = x*F_{n-1}(x) + F_{n-2}(x)\) for \(n > 2\). For all positive integers
    \(n\), \(F_n(1) = F_n\).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契多项式由 \(F_1(x) = 1\), \(F_2(x) = x\), 以及对于 \(n > 2\) 的 \(F_n(x) = x*F_{n-1}(x)
    + F_{n-2}(x)\) 定义。对于所有正整数 \(n\), \(F_n(1) = F_n\)。
- en: '`fibonacci(n)` gives the \(n^{th}\) Fibonacci number, \(F_n\)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fibonacci(n)` 给出第 \(n\) 个斐波那契数 \(F_n\)'
- en: '`fibonacci(n, x)` gives the \(n^{th}\) Fibonacci polynomial in \(x\), \(F_n(x)\)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fibonacci(n, x)` 给出 \(n^{th}\) 斐波那契多项式 \(F_n(x)\)'
- en: Examples
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE52]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: See also
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
- en: References
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R233](#id31)]'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R233](#id31)]'
- en: '[https://en.wikipedia.org/wiki/Fibonacci_number](https://en.wikipedia.org/wiki/Fibonacci_number)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Fibonacci_number](https://en.wikipedia.org/wiki/Fibonacci_number)'
- en: '[[R234](#id32)]'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R234](#id32)]'
- en: '[https://mathworld.wolfram.com/FibonacciNumber.html](https://mathworld.wolfram.com/FibonacciNumber.html)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/FibonacciNumber.html](https://mathworld.wolfram.com/FibonacciNumber.html)'
- en: '[PRE54]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Tribonacci numbers / Tribonacci polynomials
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 泰波那契数 / 泰波那契多项式
- en: The Tribonacci numbers are the integer sequence defined by the initial terms
    \(T_0 = 0\), \(T_1 = 1\), \(T_2 = 1\) and the three-term recurrence relation \(T_n
    = T_{n-1} + T_{n-2} + T_{n-3}\).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 泰波那契数列由初始项定义为 \(T_0 = 0\)，\(T_1 = 1\)，\(T_2 = 1\)，并具有三项递推关系 \(T_n = T_{n-1}
    + T_{n-2} + T_{n-3}\)。
- en: The Tribonacci polynomials are defined by \(T_0(x) = 0\), \(T_1(x) = 1\), \(T_2(x)
    = x^2\), and \(T_n(x) = x^2 T_{n-1}(x) + x T_{n-2}(x) + T_{n-3}(x)\) for \(n >
    2\). For all positive integers \(n\), \(T_n(1) = T_n\).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 泰波那契多项式由 \(T_0(x) = 0\)，\(T_1(x) = 1\)，\(T_2(x) = x^2\) 定义，并对 \(n > 2\) 有递推关系
    \(T_n(x) = x^2 T_{n-1}(x) + x T_{n-2}(x) + T_{n-3}(x)\)。对于所有正整数 \(n\)，\(T_n(1)
    = T_n\)。
- en: '`tribonacci(n)` gives the \(n^{th}\) Tribonacci number, \(T_n\)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tribonacci(n)` 给出第 \(n\) 个泰波那契数，\(T_n\)'
- en: '`tribonacci(n, x)` gives the \(n^{th}\) Tribonacci polynomial in \(x\), \(T_n(x)\)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tribonacci(n, x)` 给出在 \(x\) 中的第 \(n\) 个泰波那契多项式，\(T_n(x)\)'
- en: Examples
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE55]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: See also
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition")'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell")，[`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli
    "sympy.functions.combinatorial.numbers.bernoulli")，[`catalan`](#sympy.functions.combinatorial.numbers.catalan
    "sympy.functions.combinatorial.numbers.catalan")，[`euler`](#sympy.functions.combinatorial.numbers.euler
    "sympy.functions.combinatorial.numbers.euler")，[`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci
    "sympy.functions.combinatorial.numbers.fibonacci")，[`harmonic`](#sympy.functions.combinatorial.numbers.harmonic
    "sympy.functions.combinatorial.numbers.harmonic")，[`lucas`](#sympy.functions.combinatorial.numbers.lucas
    "sympy.functions.combinatorial.numbers.lucas")，[`genocchi`](#sympy.functions.combinatorial.numbers.genocchi
    "sympy.functions.combinatorial.numbers.genocchi")，[`partition`](#sympy.functions.combinatorial.numbers.partition
    "sympy.functions.combinatorial.numbers.partition")'
- en: References
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R235](#id33)]'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R235](#id33)]'
- en: '[https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers#Tribonacci_numbers](https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers#Tribonacci_numbers)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers#Tribonacci_numbers](https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers#Tribonacci_numbers)'
- en: '[[R236](#id34)]'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R236](#id34)]'
- en: '[https://mathworld.wolfram.com/TribonacciNumber.html](https://mathworld.wolfram.com/TribonacciNumber.html)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/TribonacciNumber.html](https://mathworld.wolfram.com/TribonacciNumber.html)'
- en: '[[R237](#id35)]'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R237](#id35)]'
- en: '[https://oeis.org/A000073](https://oeis.org/A000073)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A000073](https://oeis.org/A000073)'
- en: '[PRE57]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Harmonic numbers
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 调和数
- en: The nth harmonic number is given by \(\operatorname{H}_{n} = 1 + \frac{1}{2}
    + \frac{1}{3} + \ldots + \frac{1}{n}\).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 第 \(n\) 个调和数由 \(\operatorname{H}_{n} = 1 + \frac{1}{2} + \frac{1}{3} + \ldots
    + \frac{1}{n}\) 给出。
- en: 'More generally:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说：
- en: \[\operatorname{H}_{n,m} = \sum_{k=1}^{n} \frac{1}{k^m}\]
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: \[\operatorname{H}_{n,m} = \sum_{k=1}^{n} \frac{1}{k^m}\]
- en: As \(n \rightarrow \infty\), \(\operatorname{H}_{n,m} \rightarrow \zeta(m)\),
    the Riemann zeta function.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当 \(n \rightarrow \infty\) 时，\(\operatorname{H}_{n,m} \rightarrow \zeta(m)\)，黎曼
    zeta 函数。
- en: '`harmonic(n)` gives the nth harmonic number, \(\operatorname{H}_n\)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`harmonic(n)` 给出第 \(n\) 个调和数，\(\operatorname{H}_n\)'
- en: '`harmonic(n, m)` gives the nth generalized harmonic number of order \(m\),
    \(\operatorname{H}_{n,m}\), where `harmonic(n) == harmonic(n, 1)`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`harmonic(n, m)` 给出第 \(m\) 阶广义调和数的第 \(n\) 个，\(\operatorname{H}_{n,m}\)，其中 `harmonic(n)
    == harmonic(n, 1)`'
- en: This function can be extended to complex \(n\) and \(m\) where \(n\) is not
    a negative integer or \(m\) is a nonpositive integer as
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数可扩展至复数 \(n\) 和非负整数 \(m\)，其中 \(n\) 不是负整数或 \(m\) 是非正整数。
- en: \[\begin{split}\operatorname{H}_{n,m} = \begin{cases} \zeta(m) - \zeta(m, n+1)
    & m \ne 1 \\ \psi(n+1) + \gamma & m = 1 \end{cases}\end{split}\]
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\operatorname{H}_{n,m} = \begin{cases} \zeta(m) - \zeta(m, n+1)
    & m \ne 1 \\ \psi(n+1) + \gamma & m = 1 \end{cases}\end{split}\]
- en: Examples
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE58]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We can evaluate harmonic numbers for all integral and positive rational arguments:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以评估所有整数和正有理数参数的调和数：
- en: '[PRE62]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We can rewrite harmonic numbers in terms of polygamma functions:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用多项式函数重新表达调和数：
- en: '[PRE64]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Integer offsets in the argument can be pulled out:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 参数中的整数偏移可以被拆出：
- en: '[PRE69]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Some limits can be computed as well:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一些极限也可以计算出来：
- en: '[PRE72]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'For \(m > 1\), \(H_{n,m}\) tends to \(\zeta(m)\) in the limit of infinite \(n\):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 对于\(m > 1\)，\(H_{n,m}\)在\(n\)趋向无穷时趋于\(\zeta(m)\)：
- en: '[PRE76]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: See also
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
- en: References
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R238](#id36)]'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R238](#id36)]'
- en: '[https://en.wikipedia.org/wiki/Harmonic_number](https://en.wikipedia.org/wiki/Harmonic_number)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Harmonic_number](https://en.wikipedia.org/wiki/Harmonic_number)'
- en: '[[R239](#id37)]'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R239](#id37)]'
- en: '[https://functions.wolfram.com/GammaBetaErf/HarmonicNumber/](https://functions.wolfram.com/GammaBetaErf/HarmonicNumber/)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://functions.wolfram.com/GammaBetaErf/HarmonicNumber/](https://functions.wolfram.com/GammaBetaErf/HarmonicNumber/)'
- en: '[[R240](#id38)]'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R240](#id38)]'
- en: '[https://functions.wolfram.com/GammaBetaErf/HarmonicNumber2/](https://functions.wolfram.com/GammaBetaErf/HarmonicNumber2/)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://functions.wolfram.com/GammaBetaErf/HarmonicNumber2/](https://functions.wolfram.com/GammaBetaErf/HarmonicNumber2/)'
- en: '[PRE77]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Lucas numbers
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 卢卡斯数
- en: Lucas numbers satisfy a recurrence relation similar to that of the Fibonacci
    sequence, in which each term is the sum of the preceding two. They are generated
    by choosing the initial values \(L_0 = 2\) and \(L_1 = 1\).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 卢卡斯数满足与斐波那契数列类似的递推关系，其中每一项是前两项的和。它们由选择初始值\(L_0 = 2\)和\(L_1 = 1\)生成。
- en: '`lucas(n)` gives the \(n^{th}\) Lucas number'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lucas(n)` 给出第\(n\)个卢卡斯数'
- en: Examples
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE78]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: See also
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
- en: References
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R241](#id39)]'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R241](#id39)]'
- en: '[https://en.wikipedia.org/wiki/Lucas_number](https://en.wikipedia.org/wiki/Lucas_number)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Lucas_number](https://en.wikipedia.org/wiki/Lucas_number)'
- en: '[[R242](#id40)]'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R242](#id40)]'
- en: '[https://mathworld.wolfram.com/LucasNumber.html](https://mathworld.wolfram.com/LucasNumber.html)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/LucasNumber.html](https://mathworld.wolfram.com/LucasNumber.html)'
- en: '[PRE80]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Genocchi numbers / Genocchi polynomials / Genocchi function
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Genocchi 数字 / Genocchi 多项式 / Genocchi 函数
- en: 'The Genocchi numbers are a sequence of integers \(G_n\) that satisfy the relation:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Genocchi 数字是满足以下关系的整数序列 \(G_n\)：
- en: \[\frac{-2t}{1 + e^{-t}} = \sum_{n=0}^\infty \frac{G_n t^n}{n!}\]
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: \[\frac{-2t}{1 + e^{-t}} = \sum_{n=0}^\infty \frac{G_n t^n}{n!}\]
- en: They are related to the Bernoulli numbers by
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 他们与伯努利数相关，如下所示
- en: \[G_n = 2 (1 - 2^n) B_n\]
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: \[G_n = 2 (1 - 2^n) B_n\]
- en: and generalize like the Bernoulli numbers to the Genocchi polynomials and function
    as
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 并且像伯努利数一样推广到Genocchi多项式和函数
- en: \[\operatorname{G}(s, a) = 2 \left(\operatorname{B}(s, a) - 2^s \operatorname{B}\left(s,
    \frac{a+1}{2}\right)\right)\]
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: \[\operatorname{G}(s, a) = 2 \left(\operatorname{B}(s, a) - 2^s \operatorname{B}\left(s,
    \frac{a+1}{2}\right)\right)\]
- en: 'Changed in version 1.12: `genocchi(1)` gives \(-1\) instead of \(1\).'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.12中更改：`genocchi(1)`结果为\(-1\)而不是\(1\)
- en: Examples
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE81]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: See also
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.genocchi_poly`](../polys/reference.html#sympy.polys.appellseqs.genocchi_poly
    "sympy.polys.appellseqs.genocchi_poly")'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`partition`](#sympy.functions.combinatorial.numbers.partition "sympy.functions.combinatorial.numbers.partition"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci"),
    [`sympy.polys.appellseqs.genocchi_poly`](../polys/reference.html#sympy.polys.appellseqs.genocchi_poly
    "sympy.polys.appellseqs.genocchi_poly")'
- en: References
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R243](#id41)]'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R243](#id41)]'
- en: '[https://en.wikipedia.org/wiki/Genocchi_number](https://en.wikipedia.org/wiki/Genocchi_number)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zh.wikipedia.org/wiki/格诺奇数](https://en.wikipedia.org/wiki/Genocchi_number)'
- en: '[[R244](#id42)]'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R244](#id42)]'
- en: '[https://mathworld.wolfram.com/GenocchiNumber.html](https://mathworld.wolfram.com/GenocchiNumber.html)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/GenocchiNumber.html](https://mathworld.wolfram.com/GenocchiNumber.html)'
- en: '[[R245](#id43)]'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R245](#id43)]'
- en: Peter Luschny, “An introduction to the Bernoulli function”, [https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 彼得·卢施尼，“伯努利函数简介”，[https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
- en: '[PRE82]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Andre numbers / Andre function
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 安德列数 / 安德列函数
- en: The Andre number \(\mathcal{A}_n\) is Luschny’s name for half the number of
    *alternating permutations* on \(n\) elements, where a permutation is alternating
    if adjacent elements alternately compare “greater” and “smaller” going from left
    to right. For example, \(2 < 3 > 1 < 4\) is an alternating permutation.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 安德列数 \(\mathcal{A}_n\) 是卢施尼对于 \(n\) 个元素上 *交替排列* 数的称呼，其中排列是交替的，如果从左到右相邻元素交替比较“较大”和“较小”。例如，\(2
    < 3 > 1 < 4\) 是一个交替排列。
- en: This sequence is A000111 in the OEIS, which assigns the names *up/down numbers*
    and *Euler zigzag numbers*. It satisfies a recurrence relation similar to that
    for the Catalan numbers, with \(\mathcal{A}_0 = 1\) and
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列是OEIS中的A000111，分配了“上升/下降数”和“欧拉锯齿数”的名称。它满足类似于卡塔兰数的递归关系，其中 \(\mathcal{A}_0
    = 1\) 和
- en: \[2 \mathcal{A}_{n+1} = \sum_{k=0}^n \binom{n}{k} \mathcal{A}_k \mathcal{A}_{n-k}\]
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: \[2 \mathcal{A}_{n+1} = \sum_{k=0}^n \binom{n}{k} \mathcal{A}_k \mathcal{A}_{n-k}\]
- en: 'The Bernoulli and Euler numbers are signed transformations of the odd- and
    even-indexed elements of this sequence respectively:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利数和欧拉数是该序列的奇偶索引元素的有符号变换：
- en: \[\operatorname{B}_{2k} = \frac{2k \mathcal{A}_{2k-1}}{(-4)^k - (-16)^k}\]\[\operatorname{E}_{2k}
    = (-1)^k \mathcal{A}_{2k}\]
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: \[\operatorname{B}_{2k} = \frac{2k \mathcal{A}_{2k-1}}{(-4)^k - (-16)^k}\]\[\operatorname{E}_{2k}
    = (-1)^k \mathcal{A}_{2k}\]
- en: 'Like the Bernoulli and Euler numbers, the Andre numbers are interpolated by
    the entire Andre function:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于伯努利数和欧拉数，安德列数被整个安德列函数插值：
- en: \[\begin{split}\mathcal{A}(s) = (-i)^{s+1} \operatorname{Li}_{-s}(i) + i^{s+1}
    \operatorname{Li}_{-s}(-i) = \\ \frac{2 \Gamma(s+1)}{(2\pi)^{s+1}} (\zeta(s+1,
    1/4) - \zeta(s+1, 3/4) \cos{\pi s})\end{split}\]
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\mathcal{A}(s) = (-i)^{s+1} \operatorname{Li}_{-s}(i) + i^{s+1}
    \operatorname{Li}_{-s}(-i) = \\ \frac{2 \Gamma(s+1)}{(2\pi)^{s+1}} (\zeta(s+1,
    1/4) - \zeta(s+1, 3/4) \cos{\pi s})\end{split}\]
- en: Examples
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE83]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`sympy.polys.appellseqs.andre_poly`](../polys/reference.html#sympy.polys.appellseqs.andre_poly
    "sympy.polys.appellseqs.andre_poly")'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`sympy.polys.appellseqs.andre_poly`](../polys/reference.html#sympy.polys.appellseqs.andre_poly
    "sympy.polys.appellseqs.andre_poly")'
- en: References
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R246](#id44)]'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R246](#id44)]'
- en: '[https://en.wikipedia.org/wiki/Alternating_permutation](https://en.wikipedia.org/wiki/Alternating_permutation)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Alternating_permutation](https://en.wikipedia.org/wiki/Alternating_permutation)'
- en: '[[R247](#id45)]'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R247](#id45)]'
- en: '[https://mathworld.wolfram.com/EulerZigzagNumber.html](https://mathworld.wolfram.com/EulerZigzagNumber.html)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/EulerZigzagNumber.html](https://mathworld.wolfram.com/EulerZigzagNumber.html)'
- en: '[[R248](#id46)]'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R248](#id46)]'
- en: Peter Luschny, “An introduction to the Bernoulli function”, [https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 彼得·卢施尼，“伯努利函数简介”，[https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
- en: '[PRE84]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Partition numbers
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 划分数
- en: 'The Partition numbers are a sequence of integers \(p_n\) that represent the
    number of distinct ways of representing \(n\) as a sum of natural numbers (with
    order irrelevant). The generating function for \(p_n\) is given by:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 划分数是整数序列 \(p_n\)，代表了将 \(n\) 表示为自然数和的不同方式数量（顺序无关）。划分数的生成函数如下：
- en: \[\sum_{n=0}^\infty p_n x^n = \prod_{k=1}^\infty (1 - x^k)^{-1}\]
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sum_{n=0}^\infty p_n x^n = \prod_{k=1}^\infty (1 - x^k)^{-1}\]
- en: Examples
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE85]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: See also
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bell`](#sympy.functions.combinatorial.numbers.bell "sympy.functions.combinatorial.numbers.bell"),
    [`bernoulli`](#sympy.functions.combinatorial.numbers.bernoulli "sympy.functions.combinatorial.numbers.bernoulli"),
    [`catalan`](#sympy.functions.combinatorial.numbers.catalan "sympy.functions.combinatorial.numbers.catalan"),
    [`euler`](#sympy.functions.combinatorial.numbers.euler "sympy.functions.combinatorial.numbers.euler"),
    [`fibonacci`](#sympy.functions.combinatorial.numbers.fibonacci "sympy.functions.combinatorial.numbers.fibonacci"),
    [`harmonic`](#sympy.functions.combinatorial.numbers.harmonic "sympy.functions.combinatorial.numbers.harmonic"),
    [`lucas`](#sympy.functions.combinatorial.numbers.lucas "sympy.functions.combinatorial.numbers.lucas"),
    [`genocchi`](#sympy.functions.combinatorial.numbers.genocchi "sympy.functions.combinatorial.numbers.genocchi"),
    [`tribonacci`](#sympy.functions.combinatorial.numbers.tribonacci "sympy.functions.combinatorial.numbers.tribonacci")'
- en: References
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R249](#id47)]'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R249](#id47)]'
- en: '[https://en.wikipedia.org/wiki/Partition_(number_theory%29](https://en.wikipedia.org/wiki/Partition_(number_theory%29)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Partition_(number_theory%29](https://en.wikipedia.org/wiki/Partition_(number_theory%29)'
- en: '[[R250](#id48)]'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R250](#id48)]'
- en: '[https://en.wikipedia.org/wiki/Pentagonal_number_theorem](https://en.wikipedia.org/wiki/Pentagonal_number_theorem)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Pentagonal_number_theorem](https://en.wikipedia.org/wiki/Pentagonal_number_theorem)'
- en: '[PRE86]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Calculate the divisor function \(\sigma_k(n)\) for positive integer n
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正整数 n 的除数函数 \(\sigma_k(n)\)
- en: '`divisor_sigma(n, k)` is equal to `sum([x**k for x in divisors(n)])`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`divisor_sigma(n, k)` 等于 `sum([x**k for x in divisors(n)])`'
- en: 'If n’s prime factorization is:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 若 n 的质因数分解为：
- en: \[n = \prod_{i=1}^\omega p_i^{m_i},\]
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: \[n = \prod_{i=1}^\omega p_i^{m_i},\]
- en: then
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 那么
- en: \[\sigma_k(n) = \prod_{i=1}^\omega (1+p_i^k+p_i^{2k}+\cdots + p_i^{m_ik}).\]
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sigma_k(n) = \prod_{i=1}^\omega (1+p_i^k+p_i^{2k}+\cdots + p_i^{m_ik}).\]
- en: Examples
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE87]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: See also
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count"), [`totient`](#sympy.functions.combinatorial.numbers.totient
    "sympy.functions.combinatorial.numbers.totient"), [`sympy.ntheory.factor_.divisors`](../ntheory.html#sympy.ntheory.factor_.divisors
    "sympy.ntheory.factor_.divisors"), [`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count"), [`totient`](#sympy.functions.combinatorial.numbers.totient
    "sympy.functions.combinatorial.numbers.totient"), [`sympy.ntheory.factor_.divisors`](../ntheory.html#sympy.ntheory.factor_.divisors
    "sympy.ntheory.factor_.divisors"), [`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
- en: References
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R251](#id49)]'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R251](#id49)]'
- en: '[https://en.wikipedia.org/wiki/Divisor_function](https://en.wikipedia.org/wiki/Divisor_function)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Divisor_function](https://en.wikipedia.org/wiki/Divisor_function)'
- en: '[PRE88]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Calculate the unitary divisor function \(\sigma_k^*(n)\) for positive integer
    n
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正整数 n 的单位除数函数 \(\sigma_k^*(n)\)
- en: '`udivisor_sigma(n, k)` is equal to `sum([x**k for x in udivisors(n)])`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`udivisor_sigma(n, k)` 等于 `sum([x**k for x in udivisors(n)])`'
- en: 'If n’s prime factorization is:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 若 n 的质因数分解为：
- en: \[n = \prod_{i=1}^\omega p_i^{m_i},\]
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: \[n = \prod_{i=1}^\omega p_i^{m_i},\]
- en: then
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 那么
- en: \[\sigma_k^*(n) = \prod_{i=1}^\omega (1+ p_i^{m_ik}).\]
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sigma_k^*(n) = \prod_{i=1}^\omega (1+ p_i^{m_ik}).\]
- en: 'Parameters:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**k** : power of divisors in the sum'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**k** : 求和中的除数的幂次'
- en: 'for k = 0, 1: `udivisor_sigma(n, 0)` is equal to `udivisor_count(n)` `udivisor_sigma(n,
    1)` is equal to `sum(udivisors(n))`'
  id: totrans-393
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '对于 k = 0, 1: `udivisor_sigma(n, 0)` 等于 `udivisor_count(n)` `udivisor_sigma(n,
    1)` 等于 `sum(udivisors(n))`'
- en: ''
  id: totrans-394
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Default for k is 1.
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: k 的默认值为 1.
- en: Examples
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE89]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: See also
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count"), [`totient`](#sympy.functions.combinatorial.numbers.totient
    "sympy.functions.combinatorial.numbers.totient"), [`sympy.ntheory.factor_.divisors`](../ntheory.html#sympy.ntheory.factor_.divisors
    "sympy.ntheory.factor_.divisors"), [`sympy.ntheory.factor_.udivisors`](../ntheory.html#sympy.ntheory.factor_.udivisors
    "sympy.ntheory.factor_.udivisors"), [`sympy.ntheory.factor_.udivisor_count`](../ntheory.html#sympy.ntheory.factor_.udivisor_count
    "sympy.ntheory.factor_.udivisor_count"), [`divisor_sigma`](#sympy.functions.combinatorial.numbers.divisor_sigma
    "sympy.functions.combinatorial.numbers.divisor_sigma"), [`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count"), [`totient`](#sympy.functions.combinatorial.numbers.totient
    "sympy.functions.combinatorial.numbers.totient"), [`sympy.ntheory.factor_.divisors`](../ntheory.html#sympy.ntheory.factor_.divisors
    "sympy.ntheory.factor_.divisors"), [`sympy.ntheory.factor_.udivisors`](../ntheory.html#sympy.ntheory.factor_.udivisors
    "sympy.ntheory.factor_.udivisors"), [`sympy.ntheory.factor_.udivisor_count`](../ntheory.html#sympy.ntheory.factor_.udivisor_count
    "sympy.ntheory.factor_.udivisor_count"), [`divisor_sigma`](#sympy.functions.combinatorial.numbers.divisor_sigma
    "sympy.functions.combinatorial.numbers.divisor_sigma"), [`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
- en: References
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R252](#id50)]'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R252](#id50)]'
- en: '[https://mathworld.wolfram.com/UnitaryDivisorFunction.html](https://mathworld.wolfram.com/UnitaryDivisorFunction.html)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/UnitaryDivisorFunction.html](https://mathworld.wolfram.com/UnitaryDivisorFunction.html)'
- en: '[PRE90]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Returns the Legendre symbol \((a / p)\).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Legendre符号\((a / p)\)。
- en: For an integer `a` and an odd prime `p`, the Legendre symbol is defined as
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整数`a`和奇素数`p`，Legendre符号定义为
- en: \[\begin{split}\genfrac(){}{}{a}{p} = \begin{cases} 0 & \text{if } p \text{
    divides } a\\ 1 & \text{if } a \text{ is a quadratic residue modulo } p\\ -1 &
    \text{if } a \text{ is a quadratic nonresidue modulo } p \end{cases}\end{split}\]
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\genfrac(){}{}{a}{p} = \begin{cases} 0 & \text{if } p \text{
    divides } a\\ 1 & \text{if } a \text{ is a quadratic residue modulo } p\\ -1 &
    \text{if } a \text{ is a quadratic nonresidue modulo } p \end{cases}\end{split}\]
- en: Examples
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE91]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: See also
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.ntheory.residue_ntheory.is_quad_residue`](../ntheory.html#sympy.ntheory.residue_ntheory.is_quad_residue
    "sympy.ntheory.residue_ntheory.is_quad_residue"), [`jacobi_symbol`](#sympy.functions.combinatorial.numbers.jacobi_symbol
    "sympy.functions.combinatorial.numbers.jacobi_symbol")'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.residue_ntheory.is_quad_residue`](../ntheory.html#sympy.ntheory.residue_ntheory.is_quad_residue
    "sympy.ntheory.residue_ntheory.is_quad_residue"), [`jacobi_symbol`](#sympy.functions.combinatorial.numbers.jacobi_symbol
    "sympy.functions.combinatorial.numbers.jacobi_symbol")'
- en: '[PRE92]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Returns the Jacobi symbol \((m / n)\).
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Jacobi符号\((m / n)\)。
- en: 'For any integer `m` and any positive odd integer `n` the Jacobi symbol is defined
    as the product of the Legendre symbols corresponding to the prime factors of `n`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意整数`m`和任意正奇整数`n`，Jacobi符号定义为`n`的素因子对应的Legendre符号的乘积：
- en: \[\genfrac(){}{}{m}{n} = \genfrac(){}{}{m}{p^{1}}^{\alpha_1} \genfrac(){}{}{m}{p^{2}}^{\alpha_2}
    ... \genfrac(){}{}{m}{p^{k}}^{\alpha_k} \text{ where } n = p_1^{\alpha_1} p_2^{\alpha_2}
    ... p_k^{\alpha_k}\]
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: \[\genfrac(){}{}{m}{n} = \genfrac(){}{}{m}{p^{1}}^{\alpha_1} \genfrac(){}{}{m}{p^{2}}^{\alpha_2}
    ... \genfrac(){}{}{m}{p^{k}}^{\alpha_k} \text{ where } n = p_1^{\alpha_1} p_2^{\alpha_2}
    ... p_k^{\alpha_k}\]
- en: Like the Legendre symbol, if the Jacobi symbol \(\genfrac(){}{}{m}{n} = -1\)
    then `m` is a quadratic nonresidue modulo `n`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 与Legendre符号类似，如果Jacobi符号\(\genfrac(){}{}{m}{n} = -1\)，则`m`是模`n`的二次非剩余。
- en: But, unlike the Legendre symbol, if the Jacobi symbol \(\genfrac(){}{}{m}{n}
    = 1\) then `m` may or may not be a quadratic residue modulo `n`.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 但与Legendre符号不同，如果Jacobi符号\(\genfrac(){}{}{m}{n} = 1\)，则`m`可能是模`n`的二次剩余，也可能不是。
- en: Examples
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE93]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The relationship between the `jacobi_symbol` and `legendre_symbol` can be demonstrated
    as follows:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`jacobi_symbol`与`legendre_symbol`之间的关系如下所示：'
- en: '[PRE94]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: See also
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.ntheory.residue_ntheory.is_quad_residue`](../ntheory.html#sympy.ntheory.residue_ntheory.is_quad_residue
    "sympy.ntheory.residue_ntheory.is_quad_residue"), [`legendre_symbol`](#sympy.functions.combinatorial.numbers.legendre_symbol
    "sympy.functions.combinatorial.numbers.legendre_symbol")'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.residue_ntheory.is_quad_residue`](../ntheory.html#sympy.ntheory.residue_ntheory.is_quad_residue
    "sympy.ntheory.residue_ntheory.is_quad_residue"), [`legendre_symbol`](#sympy.functions.combinatorial.numbers.legendre_symbol
    "sympy.functions.combinatorial.numbers.legendre_symbol")'
- en: '[PRE95]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Returns the Kronecker symbol \((a / n)\).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Kronecker符号\((a / n)\)。
- en: Examples
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE96]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: See also
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`jacobi_symbol`](#sympy.functions.combinatorial.numbers.jacobi_symbol "sympy.functions.combinatorial.numbers.jacobi_symbol"),
    [`legendre_symbol`](#sympy.functions.combinatorial.numbers.legendre_symbol "sympy.functions.combinatorial.numbers.legendre_symbol")'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[`jacobi_symbol`](#sympy.functions.combinatorial.numbers.jacobi_symbol "sympy.functions.combinatorial.numbers.jacobi_symbol"),
    [`legendre_symbol`](#sympy.functions.combinatorial.numbers.legendre_symbol "sympy.functions.combinatorial.numbers.legendre_symbol")'
- en: References
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R253](#id51)]'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R253](#id51)]'
- en: '[https://en.wikipedia.org/wiki/Kronecker_symbol](https://en.wikipedia.org/wiki/Kronecker_symbol)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Kronecker_symbol](https://en.wikipedia.org/wiki/Kronecker_symbol)'
- en: '[PRE97]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Mobius function maps natural number to {-1, 0, 1}
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 莫比乌斯函数将自然数映射到{-1, 0, 1}。
- en: 'It is defined as follows:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 它的定义如下：
- en: \(1\) if \(n = 1\).
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(1\) 如果 \(n = 1\)。
- en: \(0\) if \(n\) has a squared prime factor.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(0\) 如果 \(n\) 含有平方素数因子。
- en: \((-1)^k\) if \(n\) is a square-free positive integer with \(k\) number of prime
    factors.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \((-1)^k\) 如果 \(n\) 是一个无平方素数因子的正整数，其中 \(k\) 是素数因子的数量。
- en: It is an important multiplicative function in number theory and combinatorics.
    It has applications in mathematical series, algebraic number theory and also physics
    (Fermion operator has very concrete realization with Mobius Function model).
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 它是数论和组合数学中重要的乘性函数。它在数学级数、代数数论以及物理学（费米子算符与莫比乌斯函数模型有具体的实现）中都有应用。
- en: Examples
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE98]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Even in the case of a symbol, if it clearly contains a squared prime factor,
    it will be zero.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在符号的情况下，如果它明显包含平方素因子，它将为零。
- en: '[PRE99]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: References
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R254](#id52)]'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R254](#id52)]'
- en: '[https://en.wikipedia.org/wiki/M%C3%B6bius_function](https://en.wikipedia.org/wiki/M%C3%B6bius_function)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/M%C3%B6bius_function](https://en.wikipedia.org/wiki/M%C3%B6bius_function)'
- en: '[[R255](#id53)]'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R255](#id53)]'
- en: Thomas Koshy “Elementary Number Theory with Applications”
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: Thomas Koshy 的《Elementary Number Theory with Applications》
- en: '[[R256](#id54)]'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R256](#id54)]'
- en: '[https://oeis.org/A008683](https://oeis.org/A008683)'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A008683](https://oeis.org/A008683)'
- en: '[PRE100]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Calculate the number of distinct prime factors for a positive integer n.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正整数 n 的不同素因子数量。
- en: 'If n’s prime factorization is:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 n 的素因数分解为：
- en: \[n = \prod_{i=1}^k p_i^{m_i},\]
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: \[n = \prod_{i=1}^k p_i^{m_i},\]
- en: 'then `primenu(n)` or \(\nu(n)\) is:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `primenu(n)` 或 \(\nu(n)\) 是：
- en: \[\nu(n) = k.\]
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: \[\nu(n) = k.\]
- en: Examples
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE101]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: See also
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
- en: References
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R257](#id55)]'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R257](#id55)]'
- en: '[https://mathworld.wolfram.com/PrimeFactor.html](https://mathworld.wolfram.com/PrimeFactor.html)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/PrimeFactor.html](https://mathworld.wolfram.com/PrimeFactor.html)'
- en: '[[R258](#id56)]'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R258](#id56)]'
- en: '[https://oeis.org/A001221](https://oeis.org/A001221)'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A001221](https://oeis.org/A001221)'
- en: '[PRE102]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Calculate the number of prime factors counting multiplicities for a positive
    integer n.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正整数 n 的素因子数量，包括重复计数。
- en: 'If n’s prime factorization is:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 n 的素因数分解为：
- en: \[n = \prod_{i=1}^k p_i^{m_i},\]
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: \[n = \prod_{i=1}^k p_i^{m_i},\]
- en: 'then `primeomega(n)` or \(\Omega(n)\) is:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `primeomega(n)` 或 \(\Omega(n)\) 是：
- en: \[\Omega(n) = \sum_{i=1}^k m_i.\]
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: \[\Omega(n) = \sum_{i=1}^k m_i.\]
- en: Examples
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE103]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: See also
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
- en: References
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R259](#id57)]'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R259](#id57)]'
- en: '[https://mathworld.wolfram.com/PrimeFactor.html](https://mathworld.wolfram.com/PrimeFactor.html)'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/PrimeFactor.html](https://mathworld.wolfram.com/PrimeFactor.html)'
- en: '[[R260](#id58)]'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R260](#id58)]'
- en: '[https://oeis.org/A001222](https://oeis.org/A001222)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A001222](https://oeis.org/A001222)'
- en: '[PRE104]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Calculate the Euler totient function phi(n)
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 计算欧拉 totient 函数 phi(n)
- en: '`totient(n)` or \(\phi(n)\) is the number of positive integers \(\leq\) n that
    are relatively prime to n.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`totient(n)` 或 \(\phi(n)\) 是不大于 n 的与 n 互质的正整数的数量。'
- en: Examples
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE105]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: See also
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count")'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.factor_.divisor_count`](../ntheory.html#sympy.ntheory.factor_.divisor_count
    "sympy.ntheory.factor_.divisor_count")'
- en: References
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R261](#id59)]'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R261](#id59)]'
- en: '[https://en.wikipedia.org/wiki/Euler%27s_totient_function](https://en.wikipedia.org/wiki/Euler%27s_totient_function)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Euler%27s_totient_function](https://en.wikipedia.org/wiki/Euler%27s_totient_function)'
- en: '[[R262](#id60)]'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R262](#id60)]'
- en: '[https://mathworld.wolfram.com/TotientFunction.html](https://mathworld.wolfram.com/TotientFunction.html)'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/TotientFunction.html](https://mathworld.wolfram.com/TotientFunction.html)'
- en: '[[R263](#id61)]'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R263](#id61)]'
- en: '[https://oeis.org/A000010](https://oeis.org/A000010)'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A000010](https://oeis.org/A000010)'
- en: '[PRE106]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Calculate the Carmichael reduced totient function lambda(n)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 Carmichael 减小的欧拉 totient 函数 lambda(n)
- en: '`reduced_totient(n)` or \(\lambda(n)\) is the smallest m > 0 such that \(k^m
    \equiv 1 \mod n\) for all k relatively prime to n.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduced_totient(n)`或\(\lambda(n)\)是满足对于所有与n互质的k，\(k^m \equiv 1 \mod n\)的最小m
    > 0。'
- en: Examples
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE107]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: See also
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[`totient`](#sympy.functions.combinatorial.numbers.totient "sympy.functions.combinatorial.numbers.totient")'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[`totient`](#sympy.functions.combinatorial.numbers.totient "sympy.functions.combinatorial.numbers.totient")'
- en: References
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: References
- en: '[[R264](#id62)]'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R264](#id62)]'
- en: '[https://en.wikipedia.org/wiki/Carmichael_function](https://en.wikipedia.org/wiki/Carmichael_function)'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Carmichael_function](https://en.wikipedia.org/wiki/Carmichael_function)'
- en: '[[R265](#id63)]'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R265](#id63)]'
- en: '[https://mathworld.wolfram.com/CarmichaelFunction.html](https://mathworld.wolfram.com/CarmichaelFunction.html)'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/CarmichaelFunction.html](https://mathworld.wolfram.com/CarmichaelFunction.html)'
- en: '[[R266](#id64)]'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R266](#id64)]'
- en: '[https://oeis.org/A002322](https://oeis.org/A002322)'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A002322](https://oeis.org/A002322)'
- en: '[PRE108]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Represents the prime counting function pi(n) = the number of prime numbers less
    than or equal to n.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 表示素数计数函数pi(n) = 小于或等于n的素数的数量。
- en: Examples
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE109]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: So there are 9 primes less than or equal to 25\. Is 25 prime?
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，小于或等于25的素数有9个。25是素数吗？
- en: '[PRE110]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'It is not. So the first prime less than 25 must be the 9th prime:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是。所以小于25的第一个素数必须是第9个素数：
- en: '[PRE111]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: See also
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[`sympy.ntheory.primetest.isprime`](../ntheory.html#sympy.ntheory.primetest.isprime
    "sympy.ntheory.primetest.isprime")'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.primetest.isprime`](../ntheory.html#sympy.ntheory.primetest.isprime
    "sympy.ntheory.primetest.isprime")'
- en: Test if n is prime
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 测试n是否为素数
- en: '[`sympy.ntheory.generate.primerange`](../ntheory.html#sympy.ntheory.generate.primerange
    "sympy.ntheory.generate.primerange")'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.generate.primerange`](../ntheory.html#sympy.ntheory.generate.primerange
    "sympy.ntheory.generate.primerange")'
- en: Generate all primes in a given range
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 生成给定范围内的所有素数
- en: '[`sympy.ntheory.generate.prime`](../ntheory.html#sympy.ntheory.generate.prime
    "sympy.ntheory.generate.prime")'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.generate.prime`](../ntheory.html#sympy.ntheory.generate.prime
    "sympy.ntheory.generate.prime")'
- en: Return the nth prime
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第n个素数
- en: References
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: References
- en: '[[R267](#id65)]'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R267](#id65)]'
- en: '[https://oeis.org/A000720](https://oeis.org/A000720)'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://oeis.org/A000720](https://oeis.org/A000720)'
- en: '[PRE112]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Rising factorial (also called Pochhammer symbol [[R268]](#r268)) is a double
    valued function arising in concrete mathematics, hypergeometric functions and
    series expansions. It is defined by:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 上升阶乘（也称为Pochhammer符号[[R268]](#r268)）是在具体数学、超几何函数和级数展开中出现的双值函数。它的定义是：
- en: \[\texttt{rf(y, k)} = (x)^k = x \cdot (x+1) \cdots (x+k-1)\]
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: \[\texttt{rf(y, k)} = (x)^k = x \cdot (x+1) \cdots (x+k-1)\]
- en: where \(x\) can be arbitrary expression and \(k\) is an integer. For more information
    check “Concrete mathematics” by Graham, pp. 66 or visit [https://mathworld.wolfram.com/RisingFactorial.html](https://mathworld.wolfram.com/RisingFactorial.html)
    page.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\(x\)可以是任意表达式，\(k\)是整数。欲了解更多信息，请参阅Graham的《Concrete mathematics》第66页或访问[https://mathworld.wolfram.com/RisingFactorial.html](https://mathworld.wolfram.com/RisingFactorial.html)页面。
- en: When \(x\) is a \(~.Poly\) instance of degree \(\ge 1\) with a single variable,
    \((x)^k = x(y) \cdot x(y+1) \cdots x(y+k-1)\), where \(y\) is the variable of
    \(x\). This is as described in [[R269]](#r269).
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 当\(x\)是具有单一变量的\(~.Poly\)实例的次数为\(\ge 1\)时，\((x)^k = x(y) \cdot x(y+1) \cdots
    x(y+k-1)\)，其中\(y\)是\(x\)的变量。这如同[[R269]](#r269)中描述的那样。
- en: Examples
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE114]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Rewriting is complicated unless the relationship between the arguments is known,
    but rising factorial can be rewritten in terms of gamma, factorial, binomial,
    and falling factorial.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 除非已知参数之间的关系，否则重写是复杂的，但上升阶乘可以用gamma、阶乘、二项式和下降阶乘来重写。
- en: '[PRE115]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: See also
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[`factorial`](#sympy.functions.combinatorial.factorials.factorial "sympy.functions.combinatorial.factorials.factorial"),
    [`factorial2`](#sympy.functions.combinatorial.factorials.factorial2 "sympy.functions.combinatorial.factorials.factorial2"),
    [`FallingFactorial`](#sympy.functions.combinatorial.factorials.FallingFactorial
    "sympy.functions.combinatorial.factorials.FallingFactorial")'
- en: References
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: References
- en: '[R268] ([1](#id66),[2](#id68))'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '[R268] ([1](#id66),[2](#id68))'
- en: '[https://en.wikipedia.org/wiki/Pochhammer_symbol](https://en.wikipedia.org/wiki/Pochhammer_symbol)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Pochhammer_symbol](https://en.wikipedia.org/wiki/Pochhammer_symbol)'
- en: '[R269] ([1](#id67),[2](#id69))'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '[R269] ([1](#id67),[2](#id69))'
- en: Peter Paule, “Greatest Factorial Factorization and Symbolic Summation”, Journal
    of Symbolic Computation, vol. 20, pp. 235-268, 1995.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: Peter Paule，《Greatest Factorial Factorization and Symbolic Summation》，《符号计算杂志》，第20卷，第235-268页，1995年。
- en: '[PRE116]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return Stirling number \(S(n, k)\) of the first or second (default) kind.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一或第二（默认）种类的斯特林数 \(S(n, k)\)。
- en: 'The sum of all Stirling numbers of the second kind for \(k = 1\) through \(n\)
    is `bell(n)`. The recurrence relationship for these numbers is:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `k = 1` 到 `n` 的所有第二种斯特林数的总和是 `bell(n)`。这些数的递归关系是：
- en: \[{0 \brace 0} = 1; {n \brace 0} = {0 \brace k} = 0;\]\[{{n+1} \brace k} = j
    {n \brace k} + {n \brace {k-1}}\]
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: \[{0 \brace 0} = 1; {n \brace 0} = {0 \brace k} = 0;\]\[{{n+1} \brace k} = j
    {n \brace k} + {n \brace {k-1}}\]
- en: 'where \(j\) is:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(j\) 是：
- en: \(n\) for Stirling numbers of the first kind, \(-n\) for signed Stirling numbers
    of the first kind, \(k\) for Stirling numbers of the second kind.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种斯特林数，第一种符号斯特林数为 \(-n\)，第二种斯特林数为 `k`。
- en: 'The first kind of Stirling number counts the number of permutations of `n`
    distinct items that have `k` cycles; the second kind counts the ways in which
    `n` distinct items can be partitioned into `k` parts. If `d` is given, the “reduced
    Stirling number of the second kind” is returned: \(S^{d}(n, k) = S(n - d + 1,
    k - d + 1)\) with \(n \ge k \ge d\). (This counts the ways to partition \(n\)
    consecutive integers into \(k\) groups with no pairwise difference less than \(d\).
    See example below.)'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种斯特林数计算具有 `k` 个循环的 `n` 个不同项的排列数；第二种斯特林数计算将 `n` 个不同项划分为 `k` 个部分的方式。如果给定 `d`，则返回“降维第二种斯特林数”：\(S^{d}(n,
    k) = S(n - d + 1, k - d + 1)\)，其中 \(n \ge k \ge d\)。（这计算了将 `n` 个连续整数分成 `k` 组，使得任意两数的差至少为
    `d`。见下面的示例。）
- en: To obtain the signed Stirling numbers of the first kind, use keyword `signed=True`.
    Using this keyword automatically sets `kind` to 1.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取第一种符号斯特林数，请使用关键字 `signed=True`。使用此关键字会自动将 `kind` 设置为 1。
- en: Examples
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE117]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'First kind (unsigned by default):'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种（默认为无符号）：
- en: '[PRE118]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'First kind (signed):'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种（符号化）：
- en: '[PRE119]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Second kind:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种情况：
- en: '[PRE120]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Reduced second kind:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 降维第二种情况：
- en: '[PRE121]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: See also
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
- en: References
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R270](#id70)]'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R270](#id70)]'
- en: '[https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_first_kind)'
- en: '[[R271](#id71)]'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R271](#id71)]'
- en: '[https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind)'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind](https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind)'
- en: Enumeration
  id: totrans-568
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举
- en: Three functions are available. Each of them attempts to efficiently compute
    a given combinatorial quantity for a given set or multiset which can be entered
    as an integer, sequence or multiset (dictionary with elements as keys and multiplicities
    as values). The `k` parameter indicates the number of elements to pick (or the
    number of partitions to make). When `k` is None, the sum of the enumeration for
    all `k` (from 0 through the number of items represented by `n`) is returned. A
    `replacement` parameter is recognized for combinations and permutations; this
    indicates that any item may appear with multiplicity as high as the number of
    items in the original set.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了三个函数。每个函数尝试为给定的集合或多集高效计算给定的组合数量，集合或多集可以输入为整数、序列或多集（字典，元素为键，重复次数为值）。参数 `k`
    表示要选择的元素数（或要进行的分区数）。当 `k` 为 None 时，返回所有 `n` 项目数的从 0 到 `k` 的枚举总和。组合和排列识别 `replacement`
    参数；这表示任何项目可以以原始集合中项目数量的最高复制数出现。
- en: '[PRE122]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Return the number of combinations of `n` items taken `k` at a time.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从 `n` 个项目中取 `k` 个项目的组合数。
- en: 'Possible values for `n`:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '`n` 的可能值：'
- en: integer - set of length `n`
  id: totrans-574
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整数 - 长度为 `n` 的集合
- en: ''
  id: totrans-575
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sequence - converted to a multiset internally
  id: totrans-576
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 序列 - 在内部转换为多集
- en: ''
  id: totrans-577
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiset - {element: multiplicity}'
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 多集 - {元素：重复次数}
- en: If `k` is None then the total of all combinations of length 0 through the number
    of items represented in `n` will be returned.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `k` 为 None，则将返回长度为 0 到 `n` 项目数的所有组合的总和。
- en: If `replacement` is True then a given item can appear more than once in the
    `k` items. (For example, for ‘ab’ sets of 2 would include ‘aa’, ‘ab’, and ‘bb’.)
    The multiplicity of elements in `n` is ignored when `replacement` is True but
    the total number of elements is considered since no element can appear more times
    than the number of elements in `n`.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`replacement`为True，则给定的项目可以在`k`个项目中出现多次。（例如，对于长度为2的‘ab’集合，包括‘aa’、‘ab’和‘bb’。）当`replacement`为True时，`n`中元素的多重度被忽略，但考虑元素总数，因为没有元素可以比`n`中的元素出现更多次。
- en: Examples
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE124]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'When `replacement` is True, each item can have multiplicity equal to the length
    represented by `n`:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 当`replacement`为True时，每个项目的多重度可以等于由`n`表示的长度：
- en: '[PRE125]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'If there are `k` items with multiplicities `m_1, m_2, ..., m_k` then the total
    of all combinations of length 0 through `k` is the product, `(m_1 + 1)*(m_2 +
    1)*...*(m_k + 1)`. When the multiplicity of each item is 1 (i.e., k unique items)
    then there are 2**k combinations. For example, if there are 4 unique items, the
    total number of combinations is 16:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有`k`个项目，多重度为`m_1, m_2, ..., m_k`，则长度为0到`k`的所有组合的总数是乘积`(m_1 + 1)*(m_2 + 1)*...*(m_k
    + 1)`。当每个项目的多重度为1时（即k个唯一项目），则有2**k个组合。例如，如果有4个唯一项目，则组合的总数为16：
- en: '[PRE126]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: See also
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.utilities.iterables.multiset_combinations`](../utilities/iterables.html#sympy.utilities.iterables.multiset_combinations
    "sympy.utilities.iterables.multiset_combinations")'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.multiset_combinations`](../utilities/iterables.html#sympy.utilities.iterables.multiset_combinations
    "sympy.utilities.iterables.multiset_combinations")'
- en: References
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R272](#id72)]'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R272](#id72)]'
- en: '[https://en.wikipedia.org/wiki/Combination](https://en.wikipedia.org/wiki/Combination)'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Combination](https://en.wikipedia.org/wiki/Combination)'
- en: '[[R273](#id73)]'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R273](#id73)]'
- en: '[https://tinyurl.com/cep849r](https://tinyurl.com/cep849r)'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://tinyurl.com/cep849r](https://tinyurl.com/cep849r)'
- en: '[PRE127]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Return the number of permutations of `n` items taken `k` at a time.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`n`个项目的排列数，每次取`k`个。
- en: 'Possible values for `n`:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '`n`的可能值：'
- en: integer - set of length `n`
  id: totrans-597
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整数 - 长度为`n`的集合
- en: ''
  id: totrans-598
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sequence - converted to a multiset internally
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 序列 - 内部转换为多重集合
- en: ''
  id: totrans-600
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiset - {element: multiplicity}'
  id: totrans-601
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '多重集合 - {元素: 多重度}'
- en: If `k` is None then the total of all permutations of length 0 through the number
    of items represented by `n` will be returned.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`k`为None，则返回长度从0到由`n`表示的项目数的所有排列的总数。
- en: If `replacement` is True then a given item can appear more than once in the
    `k` items. (For example, for ‘ab’ permutations of 2 would include ‘aa’, ‘ab’,
    ‘ba’ and ‘bb’.) The multiplicity of elements in `n` is ignored when `replacement`
    is True but the total number of elements is considered since no element can appear
    more times than the number of elements in `n`.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`replacement`为True，则给定的项目可以在`k`个项目中出现多次。（例如，对于长度为2的‘ab’排列将包括‘aa’、‘ab’、‘ba’和‘bb’。）当`replacement`为True时，`n`中元素的多重度被忽略，但考虑元素总数，因为没有元素可以比`n`中的元素出现更多次。
- en: Examples
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE128]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'When `replacement` is True, each item can have multiplicity equal to the length
    represented by `n`:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 当`replacement`为True时，每个项目的多重度可以等于由`n`表示的长度：
- en: '[PRE129]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: See also
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.utilities.iterables.multiset_permutations`](../utilities/iterables.html#sympy.utilities.iterables.multiset_permutations
    "sympy.utilities.iterables.multiset_permutations")'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.multiset_permutations`](../utilities/iterables.html#sympy.utilities.iterables.multiset_permutations
    "sympy.utilities.iterables.multiset_permutations")'
- en: References
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R274](#id74)]'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R274](#id74)]'
- en: '[https://en.wikipedia.org/wiki/Permutation](https://en.wikipedia.org/wiki/Permutation)'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Permutation](https://en.wikipedia.org/wiki/Permutation)'
- en: '[PRE130]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Return the number of `k`-sized partitions of `n` items.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`n`个项目的`k`大小分区的数量。
- en: 'Possible values for `n`:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '`n`的可能值：'
- en: integer - `n` identical items
  id: totrans-616
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整数 - `n`个相同的项目
- en: ''
  id: totrans-617
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sequence - converted to a multiset internally
  id: totrans-618
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 序列 - 内部转换为多重集合
- en: ''
  id: totrans-619
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'multiset - {element: multiplicity}'
  id: totrans-620
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '多重集合 - {元素: 多重度}'
- en: 'Note: the convention for `nT` is different than that of `nC` and `nP` in that
    here an integer indicates `n` *identical* items instead of a set of length `n`;
    this is in keeping with the `partitions` function which treats its integer-`n`
    input like a list of `n` 1s. One can use `range(n)` for `n` to indicate `n` distinct
    items.'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这里`nT`的约定与`nC`和`nP`的约定不同，这里整数表示`n` *相同* 项目，而不是长度为`n`的集合；这与`partitions`函数相符，它将其整数`n`输入视为`n`个1的列表。可以使用`range(n)`表示`n`以指示`n`个不同的项目。
- en: If `k` is None then the total number of ways to partition the elements represented
    in `n` will be returned.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`k`为None，则返回表示`n`中元素的分区方式的总数。
- en: Examples
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE131]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Partitions of the given multiset:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 给定多重集合的分区：
- en: '[PRE132]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Partitions when all items are identical:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有项都相同时的分区：
- en: '[PRE134]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'When all items are different:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有项都不同时：
- en: '[PRE135]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Partitions of an integer expressed as a sum of positive integers:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数的分区，表示为正整数的和：
- en: '[PRE136]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: See also
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.utilities.iterables.partitions`](../utilities/iterables.html#sympy.utilities.iterables.partitions
    "sympy.utilities.iterables.partitions"), [`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions"), [`sympy.functions.combinatorial.numbers.partition`](#sympy.functions.combinatorial.numbers.partition
    "sympy.functions.combinatorial.numbers.partition")'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.partitions`](../utilities/iterables.html#sympy.utilities.iterables.partitions
    "sympy.utilities.iterables.partitions"), [`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions"), [`sympy.functions.combinatorial.numbers.partition`](#sympy.functions.combinatorial.numbers.partition
    "sympy.functions.combinatorial.numbers.partition")'
- en: References
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R275](#id75)]'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R275](#id75)]'
- en: '[https://web.archive.org/web/20210507012732/https://teaching.csse.uwa.edu.au/units/CITS7209/partition.pdf](https://web.archive.org/web/20210507012732/https://teaching.csse.uwa.edu.au/units/CITS7209/partition.pdf)'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://web.archive.org/web/20210507012732/https://teaching.csse.uwa.edu.au/units/CITS7209/partition.pdf](https://web.archive.org/web/20210507012732/https://teaching.csse.uwa.edu.au/units/CITS7209/partition.pdf)'
