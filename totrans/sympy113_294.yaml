- en: Differential Geometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/diffgeom.html](https://docs.sympy.org/latest/modules/diffgeom.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Introduction'
  prefs: []
  type: TYPE_NORMAL
- en: Base Class Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A mathematical manifold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the manifold.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dim** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The dimension of the manifold.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A manifold is a topological space that locally resembles Euclidean space near
    each point [1]. This class does not provide any means to study the topological
    characteristics of the manifold that it represents, though.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R175](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Manifold](https://en.wikipedia.org/wiki/Manifold)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A patch on a manifold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the patch.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**manifold** : Manifold'
  prefs: []
  type: TYPE_NORMAL
- en: The manifold on which the patch is defined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate patch, or patch in short, is a simply-connected open set around a
    point in the manifold [1]. On a manifold one can have many patches that do not
    always include the whole manifold. On these patches coordinate charts can be defined
    that permit the parameterization of any point on the patch in terms of a tuple
    of real numbers (the coordinates).
  prefs: []
  type: TYPE_NORMAL
- en: This class does not provide any means to study the topological characteristics
    of the patch that it represents.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R176](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: G. Sussman, J. Wisdom, W. Farr, Functional Differential Geometry (2013)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A coordinate system defined on the patch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the coordinate system.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**patch** : Patch'
  prefs: []
  type: TYPE_NORMAL
- en: The patch where the coordinate system is defined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbols** : list of Symbols, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the names and assumptions of coordinate symbols.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**relations** : dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Key is a tuple of two strings, who are the names of the systems where the coordinates
    transform from and transform to. Value is a tuple of the symbols before transformation
    and a tuple of the expressions after transformation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate system is a system that uses one or more coordinates to uniquely
    determine the position of the points or other geometric elements on a manifold
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: By passing `Symbols` to *symbols* parameter, user can define the name and assumptions
    of coordinate symbols of the coordinate system. If not passed, these symbols are
    generated automatically and are assumed to be real valued.
  prefs: []
  type: TYPE_NORMAL
- en: By passing *relations* parameter, user can define the transform relations of
    coordinate systems. Inverse transformation and indirect transformation can be
    found automatically. If this parameter is not passed, coordinate transformation
    cannot be done.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We define two-dimensional Cartesian coordinate system and polar coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`symbols` property returns `CoordinateSymbol` instances. These symbols are
    not same with the symbols used to construct the coordinate system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`transformation()` method returns the transformation function from one coordinate
    system to another. `transform()` method returns the transformed coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`jacobian()` method returns the Jacobian matrix of coordinate transformation
    between two systems. `jacobian_determinant()` method returns the Jacobian determinant
    of coordinate transformation between two systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R177](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Coordinate_system](https://en.wikipedia.org/wiki/Coordinate_system)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return a basis 1-form field. The basis one-form field for this coordinate system.
    It is also an operator on vector fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of all base oneforms. For more details see the `base_oneform`
    method of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return `BaseScalarField` that takes a point and returns one of the coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of all coordinate functions. For more details see the `base_scalar`
    method of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Return a basis vector field. The basis vector field for this coordinate system.
    It is also an operator on scalar fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of all base vectors. For more details see the `base_vector` method
    of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Return `BaseScalarField` that takes a point and returns one of the coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of all coordinate functions. For more details see the `base_scalar`
    method of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Transform `coords` to coord system `to_sys`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return the jacobian matrix of a transformation on given coordinates. If coordinates
    are not given, coordinate symbols of *self* are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**coordinates** : Any iterable, optional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.ImmutableDenseMatrix
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return the jacobian determinant of a transformation on given coordinates. If
    coordinates are not given, coordinate symbols of *self* are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**coordinates** : Any iterable, optional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.Expr
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Return the jacobian matrix of a transformation on given coordinates. If coordinates
    are not given, coordinate symbols of *self* are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**coordinates** : Any iterable, optional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.ImmutableDenseMatrix
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Create a `Point` with coordinates given in this coord system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the coordinates of a point in this coord system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Return the result of coordinate transformation from *self* to *sys*. If coordinates
    are not given, coordinate symbols of *self* are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**coordinates** : Any iterable, optional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.ImmutableDenseMatrix containing CoordinateSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Return coordinate transformation function from *self* to *sys*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.Lambda
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: A symbol which denotes an abstract value of i-th coordinate of the coordinate
    system with given context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**index** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Each coordinates in coordinate system are represented by unique symbol, such
    as x, y, z in Cartesian coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: You may not construct this class directly. Instead, use \(symbols\) method of
    CoordSystem.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`CoordinateSymbol` contains its coordinate symbol and index.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can transform `CoordinateSymbol` into other coordinate system using `rewrite()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Point defined in a coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**coords** : list'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates of the point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically, point is defined in the manifold and does not have any coordinates
    by itself. Coordinate system is what imbues the coordinates to the point by coordinate
    chart. However, due to the difficulty of realizing such logic, you must supply
    a coordinate system and coordinates to define a Point here.
  prefs: []
  type: TYPE_NORMAL
- en: The usage of this object after its definition is independent of the coordinate
    system that was used in order to define it, however due to limitations in the
    simplification routines you can arrive at complicated expressions if you use inappropriate
    coordinate systems.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Coordinates of the point in given coordinate system. If coordinate system is
    not passed, it returns the coordinates in the coordinate system in which the poin
    was defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Base scalar field over a manifold for a given coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**index** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A scalar field takes a point as an argument and returns a scalar. A base scalar
    field of a coordinate system takes a point and returns one of the coordinates
    of that point in the coordinate system in question.
  prefs: []
  type: TYPE_NORMAL
- en: To define a scalar field you need to choose the coordinate system and the index
    of the coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: The use of the scalar field after its definition is independent of the coordinate
    system in which it was defined, however due to limitations in the simplification
    routines you may arrive at more complicated expression if you use unappropriate
    coordinate systems. You can build complicated scalar fields by just building up
    SymPy expressions containing `BaseScalarField` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Base vector field over a manifold for a given coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSystem'
  prefs: []
  type: TYPE_NORMAL
- en: '**index** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A vector field is an operator taking a scalar field and returning a directional
    derivative (which is also a scalar field). A base vector field is the same type
    of operator, however the derivation is specifically done with respect to a chosen
    coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: To define a base vector field you need to choose the coordinate system and the
    index of the coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: The use of the vector field after its definition is independent of the coordinate
    system in which it was defined, however due to limitations in the simplification
    routines you may arrive at more complicated expression if you use unappropriate
    coordinate systems.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Commutator of two vector fields.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The commutator of two vector fields \(v_1\) and \(v_2\) is defined as the vector
    field \([v_1, v_2]\) that evaluated on each scalar field \(f\) is equal to \(v_1(v_2(f))
    - v_2(v_1(f))\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, the current code is not able to compute everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Return the differential (exterior derivative) of a form field.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The differential of a form (i.e. the exterior derivative) has a complicated
    definition in the general case. The differential \(df\) of the 0-form \(f\) is
    defined for any vector field \(v\) as \(df(v) = v(f)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying the exterior derivative operator twice always results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Tensor product of forms.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The tensor product permits the creation of multilinear functionals (i.e. higher
    order tensors) out of lower order fields (e.g. 1-forms and vector fields). However,
    the higher tensors thus created lack the interesting features provided by the
    other type of product, the wedge product, namely they are not antisymmetric and
    hence are not form fields.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You can nest tensor products.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: You can make partial contraction for instance when ‘raising an index’. Putting
    `None` in the second argument of `rcall` means that the respective position in
    the tensor product is left as it is.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Or automatically pad the args with `None` without specifying them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Wedge product of forms.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: In the context of integration only completely antisymmetric forms make sense.
    The wedge product permits the creation of such forms.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: You can nest wedge products.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Lie derivative with respect to a vector field.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The transport operator that defines the Lie derivative is the pushforward of
    the field to be derived along the integral curve of the field with respect to
    which one derives.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The Lie derivative of a tensor field by another tensor field is equal to their
    commutator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Covariant derivative operator with respect to a base vector.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Covariant derivative operator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Return the series expansion for an integral curve of the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vector_field**'
  prefs: []
  type: TYPE_NORMAL
- en: the vector field for which an integral curve will be given
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**param**'
  prefs: []
  type: TYPE_NORMAL
- en: the argument of the function \(\gamma\) from R to the curve
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**start_point**'
  prefs: []
  type: TYPE_NORMAL
- en: the point which corresponds to \(\gamma(0)\)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n**'
  prefs: []
  type: TYPE_NORMAL
- en: the order to which to expand
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**coord_sys**'
  prefs: []
  type: TYPE_NORMAL
- en: the coordinate system in which to expand coeffs (default False) - if True return
    a list of elements of the expansion
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Integral curve is a function \(\gamma\) taking a parameter in \(R\) to a point
    in the manifold. It verifies the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(V(f)\big(\gamma(t)\big) = \frac{d}{dt}f\big(\gamma(t)\big)\)
  prefs: []
  type: TYPE_NORMAL
- en: where the given `vector_field` is denoted as \(V\). This holds for any value
    \(t\) for the parameter and any scalar field \(f\).
  prefs: []
  type: TYPE_NORMAL
- en: This equation can also be decomposed of a basis of coordinate functions \(V(f_i)\big(\gamma(t)\big)
    = \frac{d}{dt}f_i\big(\gamma(t)\big) \quad \forall i\)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a series expansion of \(\gamma(t)\) in terms of the coordinate
    system `coord_sys`. The equations and expansions are necessarily done in coordinate-system-dependent
    way as there is no other way to represent movement between points on the manifold
    (i.e. there is no such thing as a difference of points for a general manifold).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the predefined R2 manifold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a starting point and a vector field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Or get the elements of the expansion in a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The series in the polar coordinate system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`intcurve_diffequ`](#sympy.diffgeom.intcurve_diffequ "sympy.diffgeom.intcurve_diffequ")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Return the differential equation for an integral curve of the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vector_field**'
  prefs: []
  type: TYPE_NORMAL
- en: the vector field for which an integral curve will be given
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**param**'
  prefs: []
  type: TYPE_NORMAL
- en: the argument of the function \(\gamma\) from R to the curve
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**start_point**'
  prefs: []
  type: TYPE_NORMAL
- en: the point which corresponds to \(\gamma(0)\)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**coord_sys**'
  prefs: []
  type: TYPE_NORMAL
- en: the coordinate system in which to give the equations
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a tuple of (equations, initial conditions)
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Integral curve is a function \(\gamma\) taking a parameter in \(R\) to a point
    in the manifold. It verifies the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(V(f)\big(\gamma(t)\big) = \frac{d}{dt}f\big(\gamma(t)\big)\)
  prefs: []
  type: TYPE_NORMAL
- en: where the given `vector_field` is denoted as \(V\). This holds for any value
    \(t\) for the parameter and any scalar field \(f\).
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the differential equation of \(\gamma(t)\) in terms of
    the coordinate system `coord_sys`. The equations and expansions are necessarily
    done in coordinate-system-dependent way as there is no other way to represent
    movement between points on the manifold (i.e. there is no such thing as a difference
    of points for a general manifold).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the predefined R2 manifold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a starting point and a vector field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The series in the polar coordinate system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`intcurve_series`](#sympy.diffgeom.intcurve_series "sympy.diffgeom.intcurve_series")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Transform all base vectors in base vectors of a specified coord basis. While
    the new base vectors are in the new coordinate system basis, any coefficients
    are kept in the old system.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Return the matrix representing the twoform.
  prefs: []
  type: TYPE_NORMAL
- en: For the twoform \(w\) return the matrix \(M\) such that \(M[i,j]=w(e_i, e_j)\),
    where \(e_i\) is the i-th base vector field for the coordinate system in which
    the expression of \(w\) is given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Return the nested list of Christoffel symbols for the given metric. This returns
    the Christoffel symbol of first kind that represents the Levi-Civita connection
    for the given metric.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Return the nested list of Christoffel symbols for the given metric. This returns
    the Christoffel symbol of second kind that represents the Levi-Civita connection
    for the given metric.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Return the components of the Riemann tensor expressed in a given basis.
  prefs: []
  type: TYPE_NORMAL
- en: Given a metric it calculates the components of the Riemann tensor in the canonical
    basis of the coordinate system in which the metric expression is given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Return the components of the Ricci tensor expressed in a given basis.
  prefs: []
  type: TYPE_NORMAL
- en: Given a metric it calculates the components of the Ricci tensor in the canonical
    basis of the coordinate system in which the metric expression is given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
