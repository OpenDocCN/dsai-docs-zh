["```py\nscipy.stats.linregress(x, y=None, alternative='two-sided')\n```", "```py\nslope, intercept, r, p, se = linregress(x, y) \n```", "```py\nresult = linregress(x, y)\nprint(result.intercept, result.intercept_stderr) \n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy import stats\n>>> rng = np.random.default_rng() \n```", "```py\n>>> x = rng.random(10)\n>>> y = 1.6*x + rng.random(10) \n```", "```py\n>>> res = stats.linregress(x, y) \n```", "```py\n>>> print(f\"R-squared: {res.rvalue**2:.6f}\")\nR-squared: 0.717533 \n```", "```py\n>>> plt.plot(x, y, 'o', label='original data')\n>>> plt.plot(x, res.intercept + res.slope*x, 'r', label='fitted line')\n>>> plt.legend()\n>>> plt.show() \n```", "```py\n>>> # Two-sided inverse Students t-distribution\n>>> # p - probability, df - degrees of freedom\n>>> from scipy.stats import t\n>>> tinv = lambda p, df: abs(t.ppf(p/2, df)) \n```", "```py\n>>> ts = tinv(0.05, len(x)-2)\n>>> print(f\"slope (95%): {res.slope:.6f} +/- {ts*res.stderr:.6f}\")\nslope (95%): 1.453392 +/- 0.743465\n>>> print(f\"intercept (95%): {res.intercept:.6f}\"\n...       f\" +/- {ts*res.intercept_stderr:.6f}\")\nintercept (95%): 0.616950 +/- 0.544475 \n```"]