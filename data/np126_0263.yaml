- en: Masked array operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Masked array operations
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.ma.html](https://numpy.org/doc/1.26/reference/routines.ma.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.ma.html](https://numpy.org/doc/1.26/reference/routines.ma.html)
- en: '## Constants'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 常量'
- en: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | alias of [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | [`bool_`](arrays.scalars.html#numpy.bool_)的别名 |'
- en: Creation
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Creation
- en: From existing data
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: From existing data
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | `MaskedArray`的别名 |'
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | 一个可能包含屏蔽值的数组类。 |'
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | 返回数组的副本。 |'
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | 将缓冲区解释为一维数组。 |'
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | 通过在每个坐标上执行函数来构造数组。 |'
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | 返回数组的副本。 |'
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
- en: Ones and zeros
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ones and zeros
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | 返回给定形状和类型的新数组，但不初始化条目。 |'
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | 返回与给定数组相同形状和类型的新数组。 |'
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | 所有元素都被屏蔽的空掩码数组。 |'
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | 具有现有数组属性的空掩码数组。 |'
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | 返回给定形状和类型的新数组，填充为1。 |'
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | 返回与给定数组相同形状和类型的1数组。 |'
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | 返回给定形状和类型的新数组，填充为0。 |'
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | 返回与给定数组相同形状和类型的零数组。 |'
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Inspecting the array
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Inspecting the array
- en: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | Returns True if all elements evaluate to True. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | 如果所有元素求值为True，则返回True。 |'
- en: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | 如果*a*的任何元素求值为True，则返回True。 |'
- en: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | Count the non-masked elements of the array along the given axis. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | 计算沿给定轴的数组的非掩码元素数。 |'
- en: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | Count the number of masked elements along
    the given axis. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | 计算沿给定轴的掩码元素数。 |'
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | 返回掩码数组的掩码，或nomask。 |'
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | 返回掩码数组的掩码，或全为False的布尔数组。 |'
- en: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | Return the data of a masked array as an ndarray. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | 将掩码数组的数据返回为一个ndarray。 |'
- en: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | Return the indices of unmasked elements that are not zero. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | 返回未掩码且非零元素的索引。 |'
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | 返回数组的形状。 |'
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | 返回沿指定轴的元素数。 |'
- en: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | Determine whether input has masked values. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | 确定输入是否具有掩码值。 |'
- en: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | Return True if m is a valid, standard mask. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | 如果m是有效的标准掩码，则返回True。 |'
- en: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | Test whether input is an instance of MaskedArray.
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | 测试输入是否是MaskedArray的实例。 |'
- en: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | Test whether input is an instance of MaskedArray. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | 测试输入是否是MaskedArray的实例。 |'
- en: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | Test whether input is an instance of MaskedArray. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | 测试输入是否是MaskedArray的实例。 |'
- en: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | Calculates *element in test_elements*, broadcasting over *element* only. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | 计算*element*是否在*test_elements*中，仅广播*element*。 |'
- en: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | Test whether each element of an array is also present in a second array. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | 测试数组中的每个元素是否也存在于第二个数组中。 |'
- en: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | Finds the unique elements of an array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | 查找数组的唯一元素。 |'
- en: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | 如果所有元素求值为True，则返回True。 |'
- en: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | 如果*a*的任何元素求值为 True，则返回 True。
    |'
- en: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | 计算数组沿着给定轴的非屏蔽元素数。 |'
- en: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | 返回非零未屏蔽元素的索引。 |'
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | 返回数组的形状。 |'
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | 返回沿着给定轴的元素数量。 |'
- en: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | Returns the underlying data, as a view of the masked
    array. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | 返回作为屏蔽数组视图的基础数据。 |'
- en: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | Current mask. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | 当前掩码。 |'
- en: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | Get or set the mask of the array if it has
    no named fields. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | 如果数组没有命名字段，则获取或设置数组的掩码。 |'
- en: '* * *'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Manipulating a MaskedArray
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 MaskedArray
- en: Changing the shape
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变形状
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | 返回 self 的一维版本，作为视图。 |'
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | 返回包含相同数据的具有新形状的数组。 |'
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | 返回具有指定大小和形状的新屏蔽数组。 |'
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | 返回将数组展平为一维的副本。 |'
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | 返回 self 的一维版本，作为视图。 |'
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | 给数组赋予新的形状，但不改变其数据。 |'
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
- en: Modifying axes
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改轴
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | 返回一个将*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 对数组的维度进行排列。 |'
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | 返回*axis1*和*axis2*交换的数组视图。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回数组的轴转置视图。 |'
- en: Changing the number of dimensions
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变维度数量
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | 扩展数组的形状。 |'
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接一系列数组。 |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | 将切片对象转换为沿��一个轴的连接。
    |'
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: Joining arrays
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组拼接
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接一系列数组。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | 将值附加到数组的末尾。 |'
- en: '* * *'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Operations on masks
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掩码操作
- en: Creating a mask
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建掩码
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | 从数组创建布尔掩码。 |'
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | 返回给定形状的布尔掩码，填充为False。 |'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩码。 |'
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | 从给定的dtype构造dtype描述列表。 |'
- en: Accessing a mask
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问掩码
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | 返回掩码数组的掩码，或无掩码。 |'
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | 返回掩码数组的掩码，或填充为False的完整布尔数组。 |'
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | 当前掩码。 |'
- en: Finding masked data
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找掩码数据
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | 多维索引迭代器。 |'
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | 在掩码数组中查找连续的未掩码数据。 |'
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | 查找第一个和最后一个未掩码值的索引。 |'
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | 在给定轴上查找掩码数组中连续的未掩码数据。 |'
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | 沿轴查找第一个和最后一个未掩码值���索引。 |'
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | 返回与1-D数组的掩码块对应的切片列表。 |'
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | 返回与1-D数组的未掩码块对应的切片列表。 |'
- en: Modifying a mask
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改掩码
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | 掩盖包含掩码值的2D数组的列。 |'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩码。 |'
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | 屏蔽包含屏蔽值的2D数组的行和/或列。 |'
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | 屏蔽包含屏蔽值的2D数组的行。 |'
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | 强制将掩码硬化，防止通过赋值取消掩码。 |'
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | 强制将掩码软化（默认），允许通过赋值取消掩码。 |'
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制将掩码硬化，防止通过赋值取消掩码。 |'
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制将掩码软化（默认），允许通过赋值取消掩码。 |'
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码减少到nomask。 |'
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。 |'
- en: '* * *'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Conversion operations
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换操作
- en: to a masked array
  id: totrans-122
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到一个屏蔽数组
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | 将输入转换为给定数据类型的屏蔽数组。 |'
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | 将输入转换为屏蔽数组，保留子类。 |'
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | 返回将无效数据屏蔽并替换为填充值的输入。 |'
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | 在等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | 在大于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | 在大于或等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | 掩盖给定区间内的数组。 |'
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | 掩盖数组中出现无效值（NaN或infs）的部分。 |'
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | 掩盖数组中小于给定值的部分。 |'
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | 掩盖数组中小于或等于给定值的部分。 |'
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | 掩盖数组中*不*等于给定值的部分。 |'
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | 掩盖数组*x*中数据与value完全相等的部分。
    |'
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | 掩盖给定区间外的数组。 |'
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | 使用浮点数相等性进行掩盖。 |'
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | 满足条件时掩盖数组的部分。 |'
- en: to a ndarray
  id: totrans-138
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转移到一个ndarray
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | 抑制包含掩码值的二维数组的整列。 |'
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | 抑制包含掩码值的二维数组的行和/或列。 |'
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | 抑制包含掩码值的二维数组的整行。 |'
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | 将所有非掩盖数据作为一维数组返回。 |'
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | 将输入作为一个数组返回��其中掩盖数据被填充为一个填充值。 |'
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | 将所有非掩盖数据作为一维数组返回。 |'
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | 返回一个副本，其中掩盖值用给定值填充。 |'
- en: to another object
  id: totrans-146
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转移到另一个对象
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | 将掩码数组以二进制格式保存到文件中。 |'
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | 将掩码数组的数据部分作为分层Python列表返回。 |'
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | 将掩码数组转换为灵活类型数组。 |'
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | 将数组数据作为包含数组中原始字节的字符串返回。
    |'
- en: Filling a masked array
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充掩码数组
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | 返回两个掩码数组的公共填充值（如果有的话）。 |'
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | 返回参数对象的默认填充值。 |'
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | 返回对象的数据类型能表示的最小值。 |'
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | 返回对象的数据类型能表示的最大值。 |'
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | 设置a的填充值，如果a是一个掩码数组。 |'
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组的填充值是一个标量。 |'
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | 掩码数组的填充值是一个标量。 |'
- en: '* * *'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Masked arrays arithmetic
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掩码数组算术
- en: Arithmetic
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | 计算沿给定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | 计算沿给定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | 返回沿给定轴的数组的加权平均值。 |'
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | 返回逐元素的复共轭。 |'
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | 返回皮尔逊积矩相关系数。 |'
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | 估计协方差矩阵。 |'
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | 返回沿给定轴的数组元素的累积和。 |'
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | 返回沿给定轴的数组元素的累积积。 |'
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | 返回沿给定轴的数组元素的平均值。 |'
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | 计算沿指定轴的中位数。 |'
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | 返回第二个数组的幂次方作为第一个数组的元素。 |'
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | 返回沿给定轴的数组元素的乘积。 |'
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | 返回沿给定轴的数组元素的标准差。 |'
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | 返回沿给定轴的数组元素的和。 |'
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | 计算沿指定轴的方差。 |'
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | 计算沿给定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | 返回沿给定轴的数组元素的累积积。 |'
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | 返回沿给定轴的数组元素的累积和。 |'
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的平均值。'
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的乘积。'
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | 返回沿指定轴的数组元素的标准差。'
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的和。'
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | 计算沿指定轴的方差。'
- en: Minimum/maximum
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小值/最大值
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | 返回沿指定轴的最大值的索引数组。'
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | 返回沿指定轴的最小值的索引数组。'
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | 返回沿指定轴的最大值。'
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | 返回沿指定轴的最小值。'
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | 返回沿给定维度的（最大值 - 最小值）。'
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | 计算沿给定轴的第n个离散差分。'
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | 返回沿指定轴的最大值的索引数组。'
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | 返回沿指定轴的最小值的索引数组。'
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | 返回沿指定轴的最大值。'
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | 返回沿指定轴的最小值。'
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | 返回给定维度上的（最大值 - 最小值）。
    |'
- en: Sorting
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | 返回沿指定轴排序数组的索引的数组。 |'
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | 返回排序后的掩码数组的副本。 |'
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | 返回沿指定轴排序数组的索引的数组。
    |'
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | 对数组进行原地排序 |'
- en: Algebra
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代数
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | 提取对角线或构造对角线数组。 |'
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | 返回两个数组的点积。 |'
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | 返回单位矩阵。 |'
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | 两个数组的内积。 |'
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | 两个数组的内积。 |'
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | 计算两个向量的外积。 |'
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | 计算两个向量的外积。 |'
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | 返回数组对角线上的和。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 排列数组的维度。 |'
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | 返回数组对角线上的和。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回沿轴转置的数组视图。 |'
- en: Polynomial fit
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式拟合
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | 生成范德蒙德矩阵。 |'
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | 最小二乘多项式拟合。 |'
- en: Clipping and rounding
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 截取和四舍五入
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | 将数组四舍五入到给定的小数位数。 |'
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    限制数组中的值。 |'
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | 返回a的副本，四舍五入到''decimals''位。 |'
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | 返回其值限制为`[min, max]`的数组。 |'
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | 返回每个元素四舍五入到给定的小数位��。 |'
- en: Set operations
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合操作
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | 返回两个数组共同的唯一元素。 |'
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | 具有唯一元素的1D数组的集合差异。 |'
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | 具有唯一元素的1-D数组的异或集。 |'
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | 两个数组的并集。 |'
- en: Miscellanea
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | 如果a和b的所有条目都相等，则返回True，使用fill_value作为真值，其中一个或两个被屏蔽。 |'
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | 如果两个数组在容差范围内逐元素相等，则返回True。 |'
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | 在给定轴上沿着1-D切片应用函数。 |'
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | 在多个轴上重复应用函数。 |'
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | 返回给定区间内均匀间隔的值。 |'
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | 使用索引数组从选择列表构造新数组。 |'
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | 计算数组中相邻元素之间的差异。 |'
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | 返回表示网格索引的数组。 |'
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | 根据条件返回一个带有来自*x*或*y*的元素的掩码数组。 |'
- en: Constants
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量
- en: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | alias of [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | [`bool_`](arrays.scalars.html#numpy.bool_)的别名 |'
- en: Creation
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建
- en: From existing data
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从现有数据
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | `MaskedArray`的别名 |'
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | 具有可能掩码值的数组类。 |'
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | 返回数组的副本。 |'
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | 将缓冲区解释为1维数组。 |'
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | 通过在每个坐标上执行函数来构造数组。 |'
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | 返回数组的副本。 |'
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
- en: Ones and zeros
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一和零
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | 返回给定形状和类型的新数组，但不初始化条目。 |'
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | 返回与给定数组相同形状和类型的新数组。 |'
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | 具有所有元素掩码的空掩码数组。 |'
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | 生成一个具有现有数组属性的空掩码数组。 |'
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | 返回给定形状和类型的新数组，填充为1。 |'
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | 返回与给定数组相同形状和类型的全为1的数组。 |'
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | 返回给定形状和类型的新数组，填充为0。 |'
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma205ma.zeros_like
    "numpy.ma.zeros_like") | 返回一个与给定数组具有相同形状和类型的零数组。'
- en: From existing data
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从现有数据
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma208ma.masked_array
    "numpy.ma.masked_array") | `MaskedArray`的别名'
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma213ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | 具有可能掩码值的数组类。'
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma216ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | 返回数组的副本。'
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma207ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | 将缓冲区解释为1维数组。'
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma206ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | 通过在每个坐标上执行函数来构造数组。'
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma215ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | 返回数组的副本。'
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma214ma.diagflat "numpy.ma.diagflat")
    | diagflat'
- en: Ones and zeros
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1和0
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma200ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，但不初始化条目。'
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma209ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | 返回一个与给定数组具有相同形状和类型的新数组。'
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma212ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | 具有所有元素掩码的空掩码数组。'
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma202ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | 具有现有数组属性的空掩码数组。'
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma203ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | 返回一个给定形状和类型的新数组，填充为1。'
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma210ma.ones_like
    "numpy.ma.ones_like") | 返回一个与给定数组具有相同形状和类型的1数组。'
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma211ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为0。'
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma201ma.zeros_like
    "numpy.ma.zeros_like") | 返回一个与给定数组具有相同形状和类型的零数组。'
- en: Inspecting the array
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查数组
- en: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | Returns True if all elements evaluate to True. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma204ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | 如果所有元素都评估为True，则返回True。'
- en: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | 如果*a*的任何元素评估为True，则返回True。 |'
- en: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | Count the non-masked elements of the array along the given axis. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | 计算沿给定轴的数组的非掩码元素数。 |'
- en: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | Count the number of masked elements along
    the given axis. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | 计算沿给定轴的掩码元素的数量。 |'
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | 返回掩码数组的掩码，或nomask。 |'
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | 返回掩码数组的掩码，或全为False的布尔数组。 |'
- en: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | Return the data of a masked array as an ndarray. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | 将掩码数组的数据作为ndarray返回。 |'
- en: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | Return the indices of unmasked elements that are not zero. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | 返回未掩码且非零元素的索引。 |'
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | 返回数组的形状。 |'
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | 返回沿给定轴的元素数量。 |'
- en: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | Determine whether input has masked values. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | 确定输入是否具有掩码值。 |'
- en: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | Return True if m is a valid, standard mask. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | 如果m是有效的标准掩码，则返回True。 |'
- en: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | Test whether input is an instance of MaskedArray.
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | 测试输入是否为MaskedArray的实例。 |'
- en: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | Test whether input is an instance of MaskedArray. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | 测试输入是否为MaskedArray的实例。 |'
- en: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | Test whether input is an instance of MaskedArray. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | 测试输入是否为MaskedArray的实例。 |'
- en: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | Calculates *element in test_elements*, broadcasting over *element* only. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | 计算*element*是否在*test_elements*中，仅广播*element*。 |'
- en: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | Test whether each element of an array is also present in a second array. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | 测试数组的每个元素是否也存在于第二个数组中。 |'
- en: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | Finds the unique elements of an array. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | 查找数组的唯一元素。 |'
- en: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | 如果所有元素都评估为True，则返回True。 |'
- en: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | 如果*a*的任何元素求值为True，则返回True。
    |'
- en: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | 计算沿给定轴的数组中非屏蔽元素的数量。 |'
- en: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | 返回非零未屏蔽元素的索引。 |'
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | 返回数组的形状。 |'
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | 返回沿着给定轴的元素数量。 |'
- en: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | Returns the underlying data, as a view of the masked
    array. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | 返回作为屏蔽数组视图的基础数据。 |'
- en: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | Current mask. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | 当前掩码。 |'
- en: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | Get or set the mask of the array if it has
    no named fields. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | 如果数组没有命名字段，则获取或设置数组的掩码。 |'
- en: Manipulating a MaskedArray
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 MaskedArray
- en: Changing the shape
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变形状
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | 返回一个将自身转换为一维版本的视图。 |'
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | 返回包含相同数据的具有新形状的数组。 |'
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | 返回具有指定大小和形状的新屏蔽数组。 |'
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | 返回将数组展平为一维的副本。 |'
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | 返回一个视图，将自身转换为一维版本。 |'
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | 在不改变数据的情况下为数组赋予新的形状。 |'
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
- en: Modifying axes
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改轴
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | 返回一个将*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 对数组的维度进行排列。 |'
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | 返回*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回数组的轴转置视图。 |'
- en: Changing the number of dimensions
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变维度数量
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | 扩展数组的形状。 |'
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接序列数组。 |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | 将切片对象转换为沿第一个轴的连接。
    |'
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: Joining arrays
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接数组
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接序列数组。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | 将值附加到数组的末尾。 |'
- en: Changing the shape
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变形状
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | 返回self的一维版本，作为视图。 |'
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | 返回包含相同数据的新形状数组。 |'
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | 返回一个指定大小和形状的新掩码数组。 |'
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | 返回将数组展平为一维的副本。 |'
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | 返回self的一维版本，作为视图。 |'
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | 在不改变数据的情况下为数组赋予新形状。 |'
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
- en: Modifying axes
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改轴
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | 返回将*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 对数组的维度进行排列。 |'
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | 返回将*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回轴转置的数组视图。 |'
- en: Changing the number of dimensions
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变维度数量
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | 扩展数组的形状。 |'
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接一系列数组。 |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | 将切片对象转换为沿第一个轴的连接。
    |'
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: Joining arrays
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接数组
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | 沿着给定轴连接一系列数组。 |'
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | 将值附加到数组的末尾。 |'
- en: Operations on masks
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掩码操作
- en: Creating a mask
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个掩码
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | 从数组创建一个布尔掩码。 |'
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | 返回给定形状的布尔掩码，填充为False。 |'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩码。 |'
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | 从给定的dtype构造一个dtype描述列表。 |'
- en: Accessing a mask
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问掩码
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | 返回掩码数组的掩码，或无掩码。 |'
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | 返回掩码数组的掩码，或填充为False的完整布尔数组。 |'
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | 当前掩盖。 |'
- en: Finding masked data
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找掩盖数据
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | 多维索引迭代器。 |'
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | 在掩盖数组中查找连续的未掩盖数据。 |'
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | 查找第一个和最后一个未掩盖值的索引。 |'
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | 在给定轴上查找掩盖数组中的连续未掩盖数据。 |'
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | 查找沿轴的第一个和最后一个未掩盖值的索引。 |'
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | 返回与一维数组中掩盖块对应的切片列表。 |'
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | 返回与一维数组中未掩盖块对应的切片列表。 |'
- en: Modifying a mask
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改掩盖
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | 掩盖包含掩盖值的二维数组的列。 |'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩盖。 |'
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | 掩盖包含掩盖值的二维数组的行和/或列。 |'
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | 掩盖包含掩盖值的二维数组的行。 |'
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | 强制掩盖为硬掩盖，防止通过赋值取消掩盖。 |'
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | 强制掩盖为软掩盖（默认），允许通过赋值取消掩盖。 |'
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制掩盖为硬掩盖，防止通过赋值取消掩盖。 |'
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制将掩码软化（默认），允许通过赋值取消掩码。 |'
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码减少到无掩码。 |'
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。 |'
- en: Creating a mask
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建掩码
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | 从数组创建一个布尔掩码。 |'
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | 返回给定形状的布尔掩码，填充为False。 |'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩码。 |'
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | 从给定的数据类型构造数据类型描述列表。 |'
- en: Accessing a mask
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问掩码
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | 返回掩码数组的掩码，或无掩码。 |'
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | 返回掩码数组的掩码，或填充为False的完整布尔数组。 |'
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | 当前掩码。 |'
- en: Finding masked data
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找掩码数据
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | 多维索引迭代器。 |'
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | 在掩码数组中找到连续的未掩码数据。 |'
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | 找到第一个和最后一个未掩码值的索引。 |'
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | 在给定轴上找到掩码数组中的连续未掩码数据。 |'
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | 找到沿轴的第一个和最后一个未掩码值的索引。 |'
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | 返回与 1-D 数组中掩码凝块对应的切片列表。'
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | 返回与 1-D 数组中未掩码凝块对应的切片列表。'
- en: Modifying a mask
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改掩码
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | 掩盖包含掩码值的 2D 数组的列。'
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | 使用`logical_or`运算符组合两个掩码。'
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | 掩盖包含掩码值的 2D 数组的行和/或列。'
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | 掩盖包含掩码值的 2D 数组的行。'
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | 强制将掩码硬化，防止通过赋值取消掩码。'
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | 强制将掩码软化（默认），允许通过赋值取消掩码。'
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制将掩码硬化，防止通过赋值取消掩码。'
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制将掩码软化（默认），允许通过赋值取消掩码。'
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码减少到无掩码。'
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。'
- en: Conversion operations
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换操作
- en: to a masked array
  id: totrans-437
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换为掩码数组
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | 将输入转换为给定数据类型的掩码数组。'
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | 将输入转换为掩码数组，保留子类。'
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | 返回将无效数据掩码并替换为填充值的输入。'
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | 在等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | 在大于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | 在大于���等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | 在给定区间内屏蔽数组。 |'
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | 在出现无效值（NaN或infs）的地方屏蔽数组。 |'
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | 在小于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | 在小于或等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | 在不等于给定值的地方屏蔽数组。 |'
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | 在数据与value完全相等的地方屏蔽数组*x*。
    |'
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | 在给定区间外屏蔽数组。 |'
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | 使用浮点数相等性进行屏蔽。 |'
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | 在满足条件的地方屏蔽数组。 |'
- en: to a ndarray
  id: totrans-453
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换为ndarray
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | 抑制包含屏蔽值的2-D数组的整列。 |'
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | 抑制包含屏蔽值的2-D数组的行和/或列。 |'
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | 抑制包含屏蔽值的2-D数组的整行。 |'
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | 将所有非屏蔽数据作为1-D数组返回。 |'
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | 将输入作为一个数组返回，其中掩码数据被填充值替换。 |'
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | 将所有非掩码数据作为1-D数组返回。 |'
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | 返回自身的副本，其中掩码值被给定值填充。 |'
- en: to another object
  id: totrans-461
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换为另一个对象
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | 以二进制格式将掩码数组保存到文件中。 |'
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | 将掩码数组的数据部分作为分层Python列表返回。 |'
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | 将掩码数组转换为灵活类型数组。 |'
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | 将数组数据作为包含数组中原始字节的字符串返回。
    |'
- en: Filling a masked array
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充掩码数组
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | 返回两个掩码数组的公共填充值，如果有的话。 |'
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | 返回参数对象的默认填充值。 |'
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | 返回对象的数据类型可以表示的最小值。 |'
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | 返回对象的数据类型可以表示的最大值。 |'
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | 如���a是掩码数组，则设置a的填充值。 |'
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组的填充值是一个标量。 |'
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | 掩码数组的填充值是一个标量。 |'
- en: to a masked array
  id: totrans-475
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换为掩码数组
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | 将输入转换为给定数据类型的掩码数组。 |'
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | 将输入转换为掩码数组，保留子类。 |'
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | 返回掩码并用填充值替换无效数据的输入。 |'
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | 掩码等于给定值的数组。 |'
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | 掩码大于给定值的数组。 |'
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | 掩码大于或等于给定值的数组。 |'
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | 掩码给定区间内的数组。 |'
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | 掩码包含无效值（NaNs 或 infs）的数组。 |'
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | 掩码小于给定值的数组。 |'
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | 掩码小于或等于给定值的数组。 |'
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | 掩码不等于给定值的数组。 |'
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | 掩码数组*x*，其中数据与值完全相等。 |'
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | 掩码给定区间外的数组。 |'
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | 使用浮点数相等性进行掩码。 |'
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | 掩码满足条件的数组。 |'
- en: to a ndarray
  id: totrans-491
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换为 ndarray
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols)(a)
    | 抑制包含掩码值的二维数组的整列。 |'
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols)(x[, axis])
    | 抑制包含掩码值的二维数组的行和/或列。 |'
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows)(a)
    | 抑制包含掩码值的二维数组的整行。 |'
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | 返回所有非掩码数据作为一维数组。 |'
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled)(a[, fill_value])
    | 返回将带有掩码数据的输入替换为填充值的数组。 |'
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed)()
    | 返回所有非掩码数据作为一维数组。 |'
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled)([fill_value])
    | 返回带有给定值填充的自身副本，掩码值被填充。 |'
- en: to another object
  id: totrans-499
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到另一个对象
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile)(fid[, sep, format])
    | 以二进制格式将掩码数组保存到文件中。 |'
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist)([fill_value])
    | 将掩码数组的数据部分作为分层Python列表返回。 |'
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords)()
    | 将掩码数组转换为灵活类型数组。 |'
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes)([fill_value, order])
    | 将数组数据作为包含数组中原始字节的字符串返回。 |'
- en: Filling a masked array
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充掩码数组
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value)(a, b)
    | 返回两个掩码数组的公共填充值（如果有）。 |'
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value)(obj)
    | 返回参数对象的默认填充值。 |'
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value)(obj)
    | 返回对象的数据类型能表示的最小值。 |'
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | 返回对象的数据类型可以表示的最大值。 |'
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | 如果a是掩码数组，则设置a的填充值。 |'
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组的填充值是一个标量。 |'
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | 掩码数组的填充值是一个标量。 |'
- en: Masked arrays arithmetic
  id: totrans-513
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掩码数组算术
- en: Arithmetic
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | 计算沿给定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | 计算沿给定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | 返回给定轴上数组的加权平均值。 |'
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | 返回复共轭，逐元素。 |'
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | 返回皮尔逊积矩相关系数。 |'
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | 估计协方差矩阵。 |'
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | 返回给定轴上数组元素的累积和。 |'
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | 返回给定轴上数组元素的累积乘积。 |'
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | 返回沿给定轴的数组元素的平均值。 |'
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | 计算沿指定轴的中位数。 |'
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | 返回第二个数组的幂次方作为第一个数组的元素。 |'
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | 返回沿指定轴的数组元素的乘积。'
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | 返回沿指定轴的数组元素的标准差。'
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | 返回沿指定轴的数组元素之和。'
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | 计算沿指定轴的方差。'
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | 计算沿指定轴的异常值（与算术平均值的偏差）。'
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | 返回沿指定轴的数组元素的累积乘积。'
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | 返回沿指定轴的数组元素的累积和。'
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的平均值。'
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的乘积。'
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | 返回沿指定轴的数组元素的标准差。'
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素之和。'
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | 计算沿指定轴的方差。'
- en: Minimum/maximum
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小/最大值
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | 返回沿指定轴的最大值的索引数组。'
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | 返回沿指定轴的最小值的索引数组。'
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | 返回沿指定轴的最大值。'
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | 返回沿着给定轴的最小值。 |'
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | 返回沿着给定维度的（最大值 - 最小值）（即 |'
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | 计算沿着给定轴的第n个离散差分。 |'
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | 返回沿着给定轴的最大值的索引数组。 |'
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | 返回沿着给定轴的最小值的索引数组。 |'
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | 返回沿着给定轴的最大值。 |'
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | 返回沿着给定轴的最小值。 |'
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | 返回沿着给定维度的（最大值 - 最小值）（即
    |'
- en: Sorting
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | 返回沿着指定轴对数组进行排序的索引的ndarray。 |'
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | 返回排序后的掩码数组的副本。 |'
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  id: totrans-553
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | 返回沿着指定轴对数组进行排序的索引的ndarray。
    |'
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | 对数组进行排序，就地排序。'
- en: Algebra
  id: totrans-555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代数
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | 提取对角线或构造对角线数组。 |'
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | 返回两个数组的点积。 |'
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | 返回单位矩阵。 |'
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  id: totrans-559
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | 两个数组的内积。 |'
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | 两个数组的内积。 |'
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | 计算两个向量的外积。 |'
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | 计算两个向量的外积。 |'
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  id: totrans-563
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | 返回数组对角线上的和。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 对数组的维度进行排列。 |'
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  id: totrans-565
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | 返回数组对角线上的和。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回数组的轴转置视图。 |'
- en: Polynomial fit
  id: totrans-567
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式拟合
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  id: totrans-568
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | 生成一个范德蒙德矩阵。 |'
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | 最小二乘多项式拟合。 |'
- en: Clipping and rounding
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修剪和四舍五入
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | 将数组四舍五入到给定的小数位数。 |'
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  id: totrans-572
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    限制数组中的值。 |'
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  id: totrans-573
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | 返回四舍五入到 ''decimals'' 位的 a 的副本。 |'
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  id: totrans-574
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | 返回其值限制在 `[min, max]` 范围内的数组。 |'
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  id: totrans-575
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | 返回每个元素四舍五入到给定的小数位数。 |'
- en: Set operations
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合操作
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  id: totrans-577
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | 返回两个数组共同的唯一元素。 |'
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  id: totrans-578
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | 返回具有唯一元素的 1D 数组的差集。 |'
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  id: totrans-579
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | 具有唯一元素的 1-D 数组的异或集。 |'
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  id: totrans-580
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | 两个数组的并集。 |'
- en: Miscellanea
  id: totrans-581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | 如果a和b的所有条目相等，则返回True，使用fill_value作为真值，其中任一或两者都被屏蔽。'
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | 如果两个数组在容差范围内逐元素相等，则返回True。'
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  id: totrans-584
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | 沿着给定轴对1-D切片应用函数。'
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  id: totrans-585
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | 在多个轴上重复应用函数。'
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | 返回给定区间内均匀间隔的值。'
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | 使用索引数组从选择列表中构建新数组。'
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  id: totrans-588
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | 计算数组中连续元素之间的差异。'
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  id: totrans-589
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | 返回表示网格索引的数组。'
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | 根据条件从*x*或*y*返回一个掩码数组。'
- en: Arithmetic
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arithmetic
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-592
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | 计算沿着给定轴的异常值（与算术平均值的偏差）。'
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | 计算沿着给定轴的异常值（与算术平均值的偏差）。'
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | 返回给定轴上数组的加权平均值。'
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | 返回逐元素的复共轭。'
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | 返回皮尔逊积矩相关系数。'
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | 估计协方差矩阵。'
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | 返回给定轴上数组元素的累积和。'
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | 返回沿着给定轴的数组元素的累积乘积。'
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | 返回沿着给定轴的数组元素的平均值。'
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | 计算沿着指定轴的中位数。'
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | 返回第二个数组的幂次方的基本数组的逐元素计算。'
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  id: totrans-603
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | 返回沿着给定轴的数组元素的乘积。'
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | 返回沿着给定轴的数组元素的标准差。'
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | 返回沿着给定轴的数组元素的和。'
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | 计算沿着指定轴的方差。'
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | 计算沿着给定轴的异常值（与算术平均值的偏差）。'
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  id: totrans-608
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | 返回沿着给定轴的数组元素的累积乘积。'
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  id: totrans-609
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | 返回沿着给定轴的数组元素的累积和。'
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  id: totrans-610
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | 返回沿着给定轴的数组元素的平均值。'
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | 返回沿着给定轴的数组元素的乘积。'
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | 返回沿着给定轴的数组元素的标准差。'
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  id: totrans-613
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | 返回沿着给定轴的数组��素的和。'
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-614
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | 计算沿着指定轴的方差。'
- en: Minimum/maximum
  id: totrans-615
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小/最大
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | 返回沿着给定轴的最大值的索引数组。'
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | 返回沿着给定轴的最小值的索引数组。'
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | 返回沿着给定轴的最大值。'
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | 返回沿着给定轴的最小值。'
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  id: totrans-620
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | 返回沿着给定维度的（最大值 - 最小值）。'
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  id: totrans-621
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | 计算沿着给定轴的第n个离散差分。'
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | 返回沿着给定轴的最大值的索引数组。'
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  id: totrans-623
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | 返回沿着给定轴的最小值的索引数组。'
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  id: totrans-624
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | 返回沿着给定轴的最大值。'
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  id: totrans-625
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | 返回沿着给定轴的最小值。'
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  id: totrans-626
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | 返回沿着给定维度的（最大值 - 最小值）。'
- en: Sorting
  id: totrans-627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | 返回沿着���定轴对数组进行排序的索引的ndarray。'
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | 返回排序后的掩码数组的副本。'
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  id: totrans-630
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | 返回沿着指定轴对数组进行排序的索引的ndarray。'
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  id: totrans-631
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | 对数组进行排序，就地操作 |'
- en: Algebra
  id: totrans-632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代数
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | 提取对角线或构造对角线数组。 |'
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | 返回两个数组的点积。 |'
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | 返回单位矩阵。 |'
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | 两个数组的内积。 |'
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | 两个数组的内积。 |'
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | 计算两个向量的外积。 |'
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | 计算两个向量的外积。 |'
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | 返回数组沿对角线的和。 |'
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | 排列数组的维度。 |'
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | 返回数组沿对角线的和。 |'
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回数组的轴转置视图。 |'
- en: Polynomial fit
  id: totrans-644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式拟合
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | 生成一个范德蒙矩阵。 |'
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | 最小二乘多项式拟合。 |'
- en: Clipping and rounding
  id: totrans-647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 截取和四舍五入
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | 将数组四舍五入到指定的小数位数。 |'
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    截取（限制）数组中的值。 |'
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | 返回a的副本，四舍五入到''decimals''位。 |'
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | 返回一个其值限制在`[min, max]`范围内的数组。 |'
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | 返回每个元素四舍五入到指定的小数位数。 |'
- en: Set operations
  id: totrans-653
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合操作
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  id: totrans-654
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | 返回两个数组共同的唯一元素。 |'
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  id: totrans-655
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | 具有唯一元素的1D数组的差集。 |'
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | 具有唯一元素的1-D数组的异或集。 |'
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | 两个数组的并集。 |'
- en: Miscellanea
  id: totrans-658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Miscellanea
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | 如果a和b的所有条目都相等，则使用fill_value作为真值返回True，其中任一或两者都被屏蔽。 |'
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | 如果两个数组在容差范围内逐元素相等，则返回True。 |'
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | 沿着给定轴对1-D切片应用函数。 |'
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | 在多个轴上重复应用函数。 |'
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | 返回给定区间内均匀间隔的值。 |'
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | 使用索引数组从选择列表构造新数组。 |'
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | 计算数组连续元素之间的差异。 |'
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | 返回表示网格索引的数组。 |'
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | 根据条件从*x*或*y*返回一个掩码数组。 |'
