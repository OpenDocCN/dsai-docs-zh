- en: Number Fields
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数域
- en: Original text：[https://docs.sympy.org/latest/modules/polys/numberfields.html](https://docs.sympy.org/latest/modules/polys/numberfields.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/polys/numberfields.html](https://docs.sympy.org/latest/modules/polys/numberfields.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 引言'
- en: Like many other computations in algebraic number theory, the splitting of rational
    primes can be treated by *rational* methods only. This fact is very important
    if computation by automatic computing machinery is considered. Only the knowledge
    of the irreducible polynomial \(f(x)\), a zero of which generates the field in
    question, is needed.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 像代数数论中许多其他计算一样，有理素数的分裂只能用*有理*方法处理。如果考虑用自动计算设备进行计算，这一事实非常重要。只需知道不可约多项式\(f(x)\)，其零点生成所讨论的域即可。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Olga Taussky, 1953
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Olga Taussky，1953
- en: 'Concepts like number fields and algebraic numbers are essential to our understanding
    of algebraic number theory, but to the computer the subject is all about polynomials:
    the ring \(\mathbb{Q}[x]\) reduced modulo irreducible polynomials \(f(x) \in \mathbb{Q}[x]\).
    It thus finds a natural home under the [`polys`](reference.html#module-sympy.polys
    "sympy.polys") module in SymPy.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 像数域和代数数这样的概念对我们理解代数数论至关重要，但对于计算机而言，这个主题完全是关于多项式的：在\(\mathbb{Q}[x]\)上通过不可约多项式\(f(x)
    \in \mathbb{Q}[x]\)降阶。因此，它在SymPy的[`polys`](reference.html#module-sympy.polys "sympy.polys")模块下找到了自然的归属。
- en: Various authors (such as Taussky, Zimmer, Pohst and Zassenhaus, or Cohen) have
    articulated the main goals of computational algebraic number theory in different
    ways, but invariably the list centers around a certain essential set of tasks.
    As a goal for the `numberfields` module in SymPy, we may set the following list,
    based on [[Cohen93]](literature.html#cohen93), Sec. 4.9.3.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 多位作者（如Taussky、Zimmer、Pohst和Zassenhaus，或者Cohen）以不同的方式阐明了计算代数数论的主要目标，但无论如何，列表都围绕着一定的基本任务集中。作为SymPy中`numberfields`模块的目标，我们可以根据[[Cohen93]](literature.html#cohen93)，第4.9.3节，列出以下列表。
- en: 'For a number field \(K = \mathbb{Q}(\theta)\), whose ring of algebraic integers
    is denoted \(\mathbb{Z}_K\), compute:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数域\(K = \mathbb{Q}(\theta)\)，其代数整数环标记为\(\mathbb{Z}_K\)，计算：
- en: an integral basis of \(\mathbb{Z}_K\)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(\mathbb{Z}_K\)的一个整数基底
- en: the decomposition of rational primes in \(\mathbb{Z}_K\)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(\mathbb{Z}_K\)中有理素数的分解
- en: \(\mathfrak{p}\)-adic valuations for ideals and elements
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于理想和元素的\(\mathfrak{p}\)-adic赋值
- en: the Galois group of the Galois closure of \(K\)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(K\)的Galois封闭的Galois群
- en: a system of fundamental units of \(K\)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(K\)的一组基本单位
- en: the regulator \(R(K)\)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 规则\(R(K)\)
- en: the class number
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类数
- en: the structure of the class group \(Cl(K)\)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类群\(Cl(K)\)的结构
- en: decide whether a given ideal is principal, and if so compute a generator.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定一个给定理想是否为主理想，如果是，则计算一个生成元。
- en: As a foundation, and to support our basic ability to define and work with number
    fields and algebraic numbers, we also set the following problems, following [[Cohen93]](literature.html#cohen93),
    Sec. 4.5.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基础，并支持我们定义和处理数域和代数数的基本能力，我们也根据[[Cohen93]](literature.html#cohen93)，第4.5节，设置以下问题。
- en: Given an algebraic number – expressed by radicals and rational operations, or
    even as a special value of a transcendental function – determine its minimal polynomial
    over \(\mathbb{Q}\).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个代数数，可以通过根式和有理运算表达，甚至可以作为超越函数的特殊值，确定它在\(\mathbb{Q}\)上的最小多项式。
- en: 'The Subfield Problem: Given two number fields \(\mathbb{Q}(\alpha)\), \(\mathbb{Q}(\beta)\)
    via the minimal polynomials for their generators \(\alpha\) and \(\beta\), decide
    whether one field is isomorphic to a subfield of the other, and if so exhibit
    an embedding.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子域问题：通过它们的生成元\(\alpha\)和\(\beta\)的最小多项式，给定两个数域\(\mathbb{Q}(\alpha)\)，\(\mathbb{Q}(\beta)\)，决定一个数域是否同构于另一个数域的子域，并展示嵌入。
- en: 'The Field Membership Problem: Given two algebraic numbers \(\alpha\), \(\beta\),
    decide whether \(\alpha \in \mathbb{Q}(\beta)\), and if so write \(\alpha = f(\beta)\)
    for some \(f(x) \in \mathbb{Q}[x]\).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 域成员问题：给定两个代数数\(\alpha\)，\(\beta\)，决定\(\alpha \in \mathbb{Q}(\beta)\)是否成立，如果成立，则写成\(\alpha
    = f(\beta)\)，其中\(f(x) \in \mathbb{Q}[x]\)。
- en: 'The Primitive Element Problem: Given several algebraic numbers \(\alpha_1,
    \ldots, \alpha_m\), compute a single algebraic number \(\theta\) such that \(\mathbb{Q}(\alpha_1,
    \ldots, \alpha_m) = \mathbb{Q}(\theta)\).'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原初元问题：给定几个代数数\(\alpha_1, \ldots, \alpha_m\)，计算一个单一的代数数\(\theta\)，使得\(\mathbb{Q}(\alpha_1,
    \ldots, \alpha_m) = \mathbb{Q}(\theta)\)。
- en: At present only a subset of the tasks enumerated above is yet supported in SymPy,
    and if you are interested in expanding support, you are encouraged to contribute!
    An excellent source, providing solutions to all the remaining problems (as well
    as those already solved) is [[Cohen93]](literature.html#cohen93).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，SymPy 仅支持上述任务的子集，如果您有兴趣扩展支持，请贡献！提供所有剩余问题解决方案（以及已解决的问题）的出色来源是 [[Cohen93]](literature.html#cohen93)。
- en: 'At time of writing, the existing solutions to the above problems are found
    in the following places:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '在写作时，上述问题的现有解决方案可以在以下位置找到:'
- en: '| Task | Implementation |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | 实现 |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: integral basis
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数基础
- en: '| [`round_two()`](#sympy.polys.numberfields.basis.round_two "sympy.polys.numberfields.basis.round_two")
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`round_two()`](#sympy.polys.numberfields.basis.round_two "sympy.polys.numberfields.basis.round_two")
    |'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: prime decomposition
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 素数分解
- en: '| [`prime_decomp()`](#sympy.polys.numberfields.primes.prime_decomp "sympy.polys.numberfields.primes.prime_decomp")
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`prime_decomp()`](#sympy.polys.numberfields.primes.prime_decomp "sympy.polys.numberfields.primes.prime_decomp")
    |'
- en: '|'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: \(\mathfrak{p}\)-adic valuation
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(\mathfrak{p}\)-递值
- en: '| [`prime_valuation()`](#sympy.polys.numberfields.primes.prime_valuation "sympy.polys.numberfields.primes.prime_valuation")
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`prime_valuation()`](#sympy.polys.numberfields.primes.prime_valuation "sympy.polys.numberfields.primes.prime_valuation")
    |'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Galois group
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Galois 群
- en: '| [`galois_group()`](#sympy.polys.numberfields.galoisgroups.galois_group "sympy.polys.numberfields.galoisgroups.galois_group")
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`galois_group()`](#sympy.polys.numberfields.galoisgroups.galois_group "sympy.polys.numberfields.galoisgroups.galois_group")
    |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: find minimal polynomial
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找最小多项式
- en: '| [`minimal_polynomial()`](#sympy.polys.numberfields.minpoly.minimal_polynomial
    "sympy.polys.numberfields.minpoly.minimal_polynomial") |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`minimal_polynomial()`](#sympy.polys.numberfields.minpoly.minimal_polynomial
    "sympy.polys.numberfields.minpoly.minimal_polynomial") |'
- en: '|'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: subfield
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子领域
- en: '| [`field_isomorphism()`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism") |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`field_isomorphism()`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism") |'
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: field membership
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 领域成员
- en: '| [`to_number_field()`](#sympy.polys.numberfields.subfield.to_number_field
    "sympy.polys.numberfields.subfield.to_number_field") |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`to_number_field()`](#sympy.polys.numberfields.subfield.to_number_field
    "sympy.polys.numberfields.subfield.to_number_field") |'
- en: '|'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: primitive element
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始元素
- en: '| [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element") |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element") |'
- en: Solving the Main Problems
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决主要问题
- en: Integral Basis
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数基础
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Zassenhaus’s “Round 2” algorithm.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Zassenhaus 的“Round 2” 算法。
- en: 'Parameters:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
- en: Either (1) the irreducible polynomial over [ZZ](domainsref.html#zz) or [QQ](domainsref.html#qq)
    defining the number field, or (2) an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") representing the number field itself.
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要么是在 [ZZ](domainsref.html#zz) 或 [QQ](domainsref.html#qq) 上的不可约多项式，定义数域，或者是代表数域本身的
    [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")。
- en: '**radicals** : dict, optional'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**根式** : dict, optional'
- en: This is a way for any \(p\)-radicals (if computed) to be returned by reference.
    If desired, pass an empty dictionary. If the algorithm reaches the point where
    it computes the nilradical mod \(p\) of the ring of integers \(Z_K\), then an
    \(\mathbb{F}_p\)-basis for this ideal will be stored in this dictionary under
    the key `p`. This can be useful for other algorithms, such as prime decomposition.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是任何 \(p\)-根式（如果计算的话）通过引用返回的一种方式。如果需要，传递一个空字典。如果算法达到计算环 \(Z_K\) 的 nilradical
    mod \(p\) 的点，则该字典中将以 `p` 为键存储此理想的 \(\mathbb{F}_p\)-基础。这对于其他算法（如素数分解）可能很有用。
- en: 'Returns:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: 'Pair `(ZK, dK)`, where:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '对 `(ZK, dK)`，其中:'
- en: '`ZK` is a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    representing the maximal order.'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`ZK` 是表示最大秩的 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")。'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`dK` is the discriminant of the field \(K = \mathbb{Q}[x]/(T(x))\).'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`dK` 是字段 \(K = \mathbb{Q}[x]/(T(x))\) 的判别式。'
- en: Explanation
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: Carry out Zassenhaus’s “Round 2” algorithm on an irreducible polynomial *T*
    over [ZZ](domainsref.html#zz) or [QQ](domainsref.html#qq). This computes an integral
    basis and the discriminant for the field \(K = \mathbb{Q}[x]/(T(x))\).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在[ZZ](domainsref.html#zz)或[QQ](domainsref.html#qq)上的不可约多项式*T*上执行Zassenhaus的“Round
    2”算法。这计算了一个整数基和字段\(K = \mathbb{Q}[x]/(T(x))\)的判别式。
- en: Alternatively, you may pass an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") instance, in place of the polynomial *T*,
    in which case the algorithm is applied to the minimal polynomial for the field’s
    primitive element.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以传递一个[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") 实例，替代多项式*T*，在这种情况下算法应用于该字段的原始元的最小多项式。
- en: Ordinarily this function need not be called directly, as one can instead access
    the [`maximal_order()`](domainsref.html#sympy.polys.domains.AlgebraicField.maximal_order
    "sympy.polys.domains.AlgebraicField.maximal_order"), [`integral_basis()`](domainsref.html#sympy.polys.domains.AlgebraicField.integral_basis
    "sympy.polys.domains.AlgebraicField.integral_basis"), and [`discriminant()`](domainsref.html#sympy.polys.domains.AlgebraicField.discriminant
    "sympy.polys.domains.AlgebraicField.discriminant") methods of an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不必直接调用此函数，因为可以访问[`maximal_order()`](domainsref.html#sympy.polys.domains.AlgebraicField.maximal_order
    "sympy.polys.domains.AlgebraicField.maximal_order")、[`integral_basis()`](domainsref.html#sympy.polys.domains.AlgebraicField.integral_basis
    "sympy.polys.domains.AlgebraicField.integral_basis")和[`discriminant()`](domainsref.html#sympy.polys.domains.AlgebraicField.discriminant
    "sympy.polys.domains.AlgebraicField.discriminant")方法的[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")。
- en: Examples
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Working through an AlgebraicField:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过AlgebraicField进行操作：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Calling directly:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 直接调用：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The nilradicals mod \(p\) that are sometimes computed during the Round Two
    algorithm may be useful in further calculations. Pass a dictionary under \(radicals\)
    to receive these:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二轮算法中有时会计算模\(p\)的零根式，这可能在进一步计算中很有用。传递一个字典在\(radicals\)下接收这些：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`AlgebraicField.maximal_order`](domainsref.html#sympy.polys.domains.AlgebraicField.maximal_order
    "sympy.polys.domains.AlgebraicField.maximal_order"), [`AlgebraicField.integral_basis`](domainsref.html#sympy.polys.domains.AlgebraicField.integral_basis
    "sympy.polys.domains.AlgebraicField.integral_basis"), [`AlgebraicField.discriminant`](domainsref.html#sympy.polys.domains.AlgebraicField.discriminant
    "sympy.polys.domains.AlgebraicField.discriminant")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AlgebraicField.maximal_order`](domainsref.html#sympy.polys.domains.AlgebraicField.maximal_order
    "sympy.polys.domains.AlgebraicField.maximal_order")，[`AlgebraicField.integral_basis`](domainsref.html#sympy.polys.domains.AlgebraicField.integral_basis
    "sympy.polys.domains.AlgebraicField.integral_basis")，[`AlgebraicField.discriminant`](domainsref.html#sympy.polys.domains.AlgebraicField.discriminant
    "sympy.polys.domains.AlgebraicField.discriminant")'
- en: References
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R802](#id4)]'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R802](#id4)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.*
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算代数数论课程.*
- en: Prime Decomposition
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 质数分解
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Compute the decomposition of rational prime *p* in a number field.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 计算在一个数域中有理质数*p*的分解。
- en: 'Parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**p** : int'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**p**：int'
- en: The rational prime whose decomposition is desired.
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 想要分解的有理质数。
- en: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    optional'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**T**：[`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")，可选'
- en: 'Monic irreducible polynomial defining the number field \(K\) in which to factor.
    NOTE: at least one of *T* or *ZK* must be provided.'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义数域\(K\)中的单一不可约多项式。注意：*T*或*ZK*至少要提供一个。
- en: '**ZK** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule"),
    optional'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**ZK**：[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")，可选'
- en: 'The maximal order for \(K\), if already known. NOTE: at least one of *T* or
    *ZK* must be provided.'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知，\(K\)的最大序。注意：*T*或*ZK*至少要提供一个。
- en: '**dK** : int, optional'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**dK**：int，可选'
- en: The discriminant of the field \(K\), if already known.
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知，\(K\)的判别式。
- en: '**radical** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule"),
    optional'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**radical**：[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")，可选'
- en: The nilradical mod *p* in the integers of \(K\), if already known.
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知，\(K\)的整数中的模*p*的零根式。
- en: 'Returns:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: List of [`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")
    instances.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")
    实例列表。'
- en: Explanation
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Ordinarily this should be accessed through the [`primes_above()`](domainsref.html#sympy.polys.domains.AlgebraicField.primes_above
    "sympy.polys.domains.AlgebraicField.primes_above") method of an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField").
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应通过 [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") 的 [`primes_above()`](domainsref.html#sympy.polys.domains.AlgebraicField.primes_above
    "sympy.polys.domains.AlgebraicField.primes_above") 方法访问它。
- en: Examples
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: References
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R803](#id5)]'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R803](#id5)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.* (See Algorithm
    6.2.9.)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算代数数论课程.* (见算法 6.2.9.)
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A prime ideal in a ring of algebraic integers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个代数整数环中的素理想。
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Parameters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**ZK** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**ZK**：[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: The maximal order where this ideal lives.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此理想所在的最大阶。
- en: '**p** : int'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**p**：int'
- en: The rational prime this ideal divides.
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此理想除以的有理素数。
- en: '**alpha** : [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**alpha**：[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")'
- en: Such that the ideal is equal to `p*ZK + alpha*ZK`.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使得理想等于 `p*ZK + alpha*ZK`。
- en: '**f** : int'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**f**：int'
- en: The inertia degree.
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 惯性度。
- en: '**e** : int, `None`, optional'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**e**：int，`None`，可选'
- en: The ramification index, if already known. If `None`, we will compute it here.
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知分歧指数。 如果为 `None`，我们将在此计算它。
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Convert to a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    and add to another [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule").
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    并添加到另一个 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    中。
- en: See also
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`as_submodule`](#sympy.polys.numberfields.primes.PrimeIdeal.as_submodule "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule")'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[`as_submodule`](#sympy.polys.numberfields.primes.PrimeIdeal.as_submodule "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule")'
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Convert to a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    and multiply by another [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule") or a rational number.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    并乘以另一个 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    或有理数。
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`as_submodule`](#sympy.polys.numberfields.primes.PrimeIdeal.as_submodule "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`as_submodule`](#sympy.polys.numberfields.primes.PrimeIdeal.as_submodule "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule")'
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Represent this prime ideal as a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将此素理想表示为 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")。
- en: 'Returns:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: Will be equal to `self.p * self.ZK + self.alpha * self.ZK`.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将等于 `self.p * self.ZK + self.alpha * self.ZK`。
- en: Explanation
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The [`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")
    class serves to bundle information about a prime ideal, such as its inertia degree,
    ramification index, and two-generator representation, as well as to offer helpful
    methods like [`valuation()`](#sympy.polys.numberfields.primes.PrimeIdeal.valuation
    "sympy.polys.numberfields.primes.PrimeIdeal.valuation") and [`test_factor()`](#sympy.polys.numberfields.primes.PrimeIdeal.test_factor
    "sympy.polys.numberfields.primes.PrimeIdeal.test_factor").
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")
    类用于捆绑关于素理想的信息，如其惯性度、分歧指数和双生成器表示，以及提供像 [`valuation()`](#sympy.polys.numberfields.primes.PrimeIdeal.valuation
    "sympy.polys.numberfields.primes.PrimeIdeal.valuation") 和 [`test_factor()`](#sympy.polys.numberfields.primes.PrimeIdeal.test_factor
    "sympy.polys.numberfields.primes.PrimeIdeal.test_factor") 这样有用的方法。'
- en: However, in order to be added and multiplied by other ideals or rational numbers,
    it must first be converted into a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"), which is a class that supports
    these operations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了能够与其他理想或有理数相加和相乘，首先必须将其转换为一个支持这些操作的 [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule") 类。
- en: In many cases, the user need not perform this conversion deliberately, since
    it is automatically performed by the arithmetic operator methods [`__add__()`](#sympy.polys.numberfields.primes.PrimeIdeal.__add__
    "sympy.polys.numberfields.primes.PrimeIdeal.__add__") and [`__mul__()`](#sympy.polys.numberfields.primes.PrimeIdeal.__mul__
    "sympy.polys.numberfields.primes.PrimeIdeal.__mul__").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，用户不需要刻意执行这种转换，因为算术运算符方法[`__add__()`](#sympy.polys.numberfields.primes.PrimeIdeal.__add__
    "sympy.polys.numberfields.primes.PrimeIdeal.__add__")和[`__mul__()`](#sympy.polys.numberfields.primes.PrimeIdeal.__mul__
    "sympy.polys.numberfields.primes.PrimeIdeal.__mul__")会自动执行此操作。
- en: Raising a [`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")
    to a non-negative integer power is also supported.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个[`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")提升到非负整数次方也是支持的。
- en: Examples
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that, on both sides of the equation above, we had a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"). In the next equation we recall
    that adding ideals yields their GCD. This time, we need a deliberate conversion
    to [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    on the right:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上述等式的两边，我们有一个[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")。在下一个等式中，我们回顾到添加理想值会产生它们的最大公约数。这次，我们需要在右边有一个明确的转换为[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`__add__`](#sympy.polys.numberfields.primes.PrimeIdeal.__add__ "sympy.polys.numberfields.primes.PrimeIdeal.__add__"),
    [`__mul__`](#sympy.polys.numberfields.primes.PrimeIdeal.__mul__ "sympy.polys.numberfields.primes.PrimeIdeal.__mul__")'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`__add__`](#sympy.polys.numberfields.primes.PrimeIdeal.__add__ "sympy.polys.numberfields.primes.PrimeIdeal.__add__"),
    [`__mul__`](#sympy.polys.numberfields.primes.PrimeIdeal.__mul__ "sympy.polys.numberfields.primes.PrimeIdeal.__mul__")'
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Say whether the rational prime we divide is inert, i.e. stays prime in our ring
    of integers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 说清楚我们在整数环中保留的有理素数是否惰性，即保持原样。
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Reduce an [`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
    to a “small representative” modulo this prime ideal.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个[`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")减少到此素理想的“小代表”。
- en: 'Parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**elt** : [`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**elt**：[`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")'
- en: The element to be reduced.
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要减少的元素。
- en: 'Returns:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")'
- en: The reduced element.
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 减少后的元素。
- en: See also
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`reduce_element`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_element
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"), [`reduce_alg_num`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"), [`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reduce_element`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_element
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"), [`reduce_alg_num`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"), [`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Reduce an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") to a “small representative” modulo this
    prime ideal.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")减少到此素理想的“小代表”。
- en: 'Parameters:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**elt** : [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**elt**：[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")'
- en: The element to be reduced.
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要减少的元素。
- en: 'Returns:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")'
- en: The reduced element.
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 减少后的元素。
- en: See also
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`reduce_element`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_element
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"), [`reduce_ANP`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"), [`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reduce_element`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_element
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element")，[`reduce_ANP`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP")，[`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Reduce a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") to a “small representative”
    modulo this prime ideal.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")减少到模这个素数理想的“小代表”。
- en: 'Parameters:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**elt** : [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**elt**：[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")'
- en: The element to be reduced.
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要减少的元素。
- en: 'Returns:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")'
- en: The reduced element.
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 被减少的元素。
- en: See also
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`reduce_ANP`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"),
    [`reduce_alg_num`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"), [`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reduce_ANP`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP")，[`reduce_alg_num`](#sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num
    "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num")，[`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Print a representation of this prime ideal.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 打印这个素数理想的表示。
- en: 'Parameters:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**field_gen** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    `None`, optional (default=None)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**field_gen**：[`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")，`None`，可选（默认为
    `None`）'
- en: The symbol to use for the generator of the field. This will appear in our representation
    of `self.alpha`. If `None`, we use the variable of the defining polynomial of
    `self.ZK`.
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于场的生成器的符号。这将出现在我们对`self.alpha`的表示中。如果为`None`，我们使用`self.ZK`的定义多项式的变量。
- en: '**just_gens** : bool, optional (default=False)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**just_gens**：布尔值，可选（默认为 `False`）'
- en: If `True`, just print the “(p, alpha)” part, showing “just the generators” of
    the prime ideal. Otherwise, print a string of the form “[ (p, alpha) e=…, f=…
    ]”, giving the ramification index and inertia degree, along with the generators.
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为`True`，仅打印“(p, alpha)”部分，显示素数理想的“生成器”。否则，打印形式为“[ (p, alpha) e=…, f=… ]”的字符串，给出分歧指数和惯性度，以及生成器。
- en: Examples
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Compute a test factor for this prime ideal.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 计算这个素数理想的一个测试因子。
- en: Explanation
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Write \(\mathfrak{p}\) for this prime ideal, \(p\) for the rational prime it
    divides. Then, for computing \(\mathfrak{p}\)-adic valuations it is useful to
    have a number \(\beta \in \mathbb{Z}_K\) such that \(p/\mathfrak{p} = p \mathbb{Z}_K
    + \beta \mathbb{Z}_K\).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个素数理想写下\(\mathfrak{p}\)，\(p\)是它分解的有理素数。然后，为了计算\(\mathfrak{p}\)-递减估值，有一个数\(\beta
    \in \mathbb{Z}_K\)，使得\(p/\mathfrak{p} = p \mathbb{Z}_K + \beta \mathbb{Z}_K\)非常有用。
- en: Essentially, this is the same as the number \(\Psi\) (or the “reagent”) from
    Kummer’s 1847 paper (*Ueber die Zerlegung…*, Crelle vol. 35) in which ideal divisors
    were invented.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这与库默（Kummer）1847年的论文(*Ueber die Zerlegung…*, Crelle vol. 35)中的数\Psi（或“试剂”）相同，其中发明了理想除法。
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Compute the \(\mathfrak{p}\)-adic valuation of integral ideal I at this prime
    ideal.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 计算整数理想 *I* 在这个素数理想上的\(\mathfrak{p}\)-递减估值。
- en: 'Parameters:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**I** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**I**：[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: See also
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prime_valuation`](#sympy.polys.numberfields.primes.prime_valuation "sympy.polys.numberfields.primes.prime_valuation")'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prime_valuation`](#sympy.polys.numberfields.primes.prime_valuation "sympy.polys.numberfields.primes.prime_valuation")'
- en: p-adic Valuation
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: p-递减估值
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Compute the *P*-adic valuation for an integral ideal *I*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 计算整数理想 *I* 的*P*-递减估值。
- en: 'Parameters:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**I** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**I** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: An integral ideal whose valuation is desired.
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 欲求其价值的整数理想。
- en: '**P** : [`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**P** : [`PrimeIdeal`](#sympy.polys.numberfields.primes.PrimeIdeal "sympy.polys.numberfields.primes.PrimeIdeal")'
- en: The prime at which to compute the valuation.
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算价值的质数。
- en: 'Returns:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: int
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: Examples
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE22]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 亦见：
- en: '[`PrimeIdeal.valuation`](#sympy.polys.numberfields.primes.PrimeIdeal.valuation
    "sympy.polys.numberfields.primes.PrimeIdeal.valuation")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimeIdeal.valuation`](#sympy.polys.numberfields.primes.PrimeIdeal.valuation
    "sympy.polys.numberfields.primes.PrimeIdeal.valuation")'
- en: References
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R804](#id6)]'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R804](#id6)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.* (See Algorithm
    4.8.17.)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *A Course in Computational Algebraic Number Theory.* (见算法 4.8.17。)
- en: Galois Groups
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Galois 群
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Compute the Galois group for polynomials *f* up to degree 6.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 计算多项式 *f* 的 Galois 群，直到 6 次。
- en: 'Parameters:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**f** : Expr'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**f** : 表达式'
- en: Irreducible polynomial over [ZZ](domainsref.html#zz) or [QQ](domainsref.html#qq),
    whose Galois group is to be determined.
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不可约多项式在 [ZZ](domainsref.html#zz) 或 [QQ](domainsref.html#qq) 上，其 Galois 群需确定。
- en: '**gens** : optional list of symbols'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**gens** : 符号的可选列表'
- en: For converting *f* to Poly, and will be passed on to the [`poly_from_expr()`](reference.html#sympy.polys.polytools.poly_from_expr
    "sympy.polys.polytools.poly_from_expr") function.
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将 *f* 转换为 Poly，并传递给 [`poly_from_expr()`](reference.html#sympy.polys.polytools.poly_from_expr
    "sympy.polys.polytools.poly_from_expr") 函数。
- en: '**by_name** : bool, default False'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**by_name** : bool，默认为 False'
- en: If `True`, the Galois group will be returned by name. Otherwise it will be returned
    as a [`PermutationGroup`](../combinatorics/perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup
    "sympy.combinatorics.perm_groups.PermutationGroup").
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `True`，则以名称返回 Galois 群。否则将其作为 [`PermutationGroup`](../combinatorics/perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup
    "sympy.combinatorics.perm_groups.PermutationGroup") 返回。
- en: '**max_tries** : int, default 30'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_tries** : int，默认为 30'
- en: Make at most this many attempts in those steps that involve generating Tschirnhausen
    transformations.
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在生成 Tschirnhausen 变换的步骤中最多尝试这么多次。
- en: '**randomize** : bool, default False'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**randomize** : bool，默认为 False'
- en: If `True`, then use random coefficients when generating Tschirnhausen transformations.
    Otherwise try transformations in a fixed order. Both approaches start with small
    coefficients and degrees and work upward.
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为 `True`，则在生成 Tschirnhausen 变换时使用随机系数。否则，按固定顺序尝试变换。这两种方法都从小系数和次数开始，并向上工作。
- en: '**args** : optional'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**args** : 可选'
- en: For converting *f* to Poly, and will be passed on to the [`poly_from_expr()`](reference.html#sympy.polys.polytools.poly_from_expr
    "sympy.polys.polytools.poly_from_expr") function.
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将 *f* 转换为 Poly，并传递给 [`poly_from_expr()`](reference.html#sympy.polys.polytools.poly_from_expr
    "sympy.polys.polytools.poly_from_expr") 函数。
- en: 'Returns:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Pair `(G, alt)`
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `(G, alt)` 进行配对
- en: The first element `G` indicates the Galois group. It is an instance of one of
    the [`sympy.combinatorics.galois.S1TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S1TransitiveSubgroups
    "sympy.combinatorics.galois.S1TransitiveSubgroups") [`sympy.combinatorics.galois.S2TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S2TransitiveSubgroups
    "sympy.combinatorics.galois.S2TransitiveSubgroups"), etc. enum classes if *by_name*
    was `True`, and a [`PermutationGroup`](../combinatorics/perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup
    "sympy.combinatorics.perm_groups.PermutationGroup") if `False`.
  id: totrans-229
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一个元素 `G` 表示 Galois 群。它是 [`sympy.combinatorics.galois.S1TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S1TransitiveSubgroups
    "sympy.combinatorics.galois.S1TransitiveSubgroups") 和 [`sympy.combinatorics.galois.S2TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S2TransitiveSubgroups
    "sympy.combinatorics.galois.S2TransitiveSubgroups") 等枚举类的实例，如果 `by_name` 是 `True`，则返回其名称；如果是
    `False`，则返回一个 [`PermutationGroup`](../combinatorics/perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup
    "sympy.combinatorics.perm_groups.PermutationGroup")。
- en: ''
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The second element is a boolean, saying whether the group is contained in the
    alternating group \(A_n\) (\(n\) the degree of *T*).
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第二个元素是一个布尔值，表明群是否包含于交错群 \(A_n\) (\(n\) 是 *T* 的次数)。
- en: 'Raises:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**ValueError**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**ValueError**'
- en: if *f* is of an unsupported degree.
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 *f* 的度数不支持。
- en: '**MaxTriesException**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**MaxTriesException**'
- en: if could not complete before exceeding *max_tries* in those steps that involve
    generating Tschirnhausen transformations.
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果在生成 Tschirnhausen 变换时尝试次数超过 *max_tries* 则无法完成。
- en: Examples
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE24]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The group is returned along with a boolean, indicating whether it is contained
    in the alternating group \(A_n\), where \(n\) is the degree of *T*. Along with
    other group properties, this can help determine which group it is:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 该组返回时附带一个布尔值，指示它是否包含在交替群 \(A_n\) 中，其中 \(n\) 是 *T* 的次数。结合其他群属性，这有助于确定它是哪一个群：
- en: '[PRE25]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alternatively, the group can be returned by name:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，可以通过名称返回该组：
- en: '[PRE26]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The group itself can then be obtained by calling the name’s `get_perm_group()`
    method:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过调用名称的 `get_perm_group()` 方法获得该组：
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Group names are values of the enum classes [`sympy.combinatorics.galois.S1TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S1TransitiveSubgroups
    "sympy.combinatorics.galois.S1TransitiveSubgroups"), [`sympy.combinatorics.galois.S2TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S2TransitiveSubgroups
    "sympy.combinatorics.galois.S2TransitiveSubgroups"), etc.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 群名称是枚举类[`sympy.combinatorics.galois.S1TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S1TransitiveSubgroups
    "sympy.combinatorics.galois.S1TransitiveSubgroups")，[`sympy.combinatorics.galois.S2TransitiveSubgroups`](../combinatorics/galois.html#sympy.combinatorics.galois.S2TransitiveSubgroups
    "sympy.combinatorics.galois.S2TransitiveSubgroups")等的值。
- en: See also
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Poly.galois_group`](reference.html#sympy.polys.polytools.Poly.galois_group
    "sympy.polys.polytools.Poly.galois_group")'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Poly.galois_group`](reference.html#sympy.polys.polytools.Poly.galois_group
    "sympy.polys.polytools.Poly.galois_group")'
- en: Finding Minimal Polynomials
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找最小多项式
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Computes the minimal polynomial of an algebraic element.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代数元素的最小多项式。
- en: 'Parameters:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**ex** : Expr'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**ex** : 表达式'
- en: Element or expression whose minimal polynomial is to be calculated.
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要计算其最小多项式的元素或表达式。
- en: '**x** : Symbol, optional'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**x** : 符号，可选'
- en: Independent variable of the minimal polynomial
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最小多项式的自变量
- en: '**compose** : boolean, optional (default=True)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**compose** : 布尔值，可选（默认值=True）'
- en: Method to use for computing minimal polynomial. If `compose=True` (default)
    then `_minpoly_compose` is used, if `compose=False` then groebner bases are used.
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于计算最小多项式的方法。如果 `compose=True`（默认值），则使用 `_minpoly_compose`，如果 `compose=False`，则使用格罗本基。
- en: '**polys** : boolean, optional (default=False)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**polys** : 布尔值， 可选（默认值=False）'
- en: If `True` returns a `Poly` object else an `Expr` object.
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `True` 返回 `Poly` 对象，否则返回 `Expr` 对象。
- en: '**domain** : Domain, optional'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**domain** : 域，可选'
- en: Ground domain
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基域
- en: Notes
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By default `compose=True`, the minimal polynomial of the subexpressions of `ex`
    are computed, then the arithmetic operations on them are performed using the resultant
    and factorization. If `compose=False`, a bottom-up algorithm is used with `groebner`.
    The default algorithm stalls less frequently.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下 `compose=True`，计算 `ex` 的子表达式的最小多项式，然后使用结果和因式分解对它们进行算术运算。如果 `compose=False`，则使用
    `groebner` 的自下而上算法。默认算法更少停滞。
- en: If no ground domain is given, it will be generated automatically from the expression.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定基域，将从表达式中自动生成。
- en: Examples
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE29]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is a synonym for [`minimal_polynomial()`](#sympy.polys.numberfields.minpoly.minimal_polynomial
    "sympy.polys.numberfields.minpoly.minimal_polynomial").
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`minimal_polynomial()`](#sympy.polys.numberfields.minpoly.minimal_polynomial
    "sympy.polys.numberfields.minpoly.minimal_polynomial")的同义词。
- en: The Subfield Problem
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子域问题
- en: Functions in `polys.numberfields.subfield` solve the “Subfield Problem” and
    allied problems, for algebraic number fields.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`polys.numberfields.subfield` 中的函数解决“子域问题”和相关问题，适用于代数数域。'
- en: 'Following Cohen (see [[Cohen93]](literature.html#cohen93) Section 4.5), we
    can define the main problem as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Cohen（参见[[Cohen93]](literature.html#cohen93) 第4.5节），我们可以将主要问题定义如下：
- en: '**Subfield Problem:**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子域问题：**'
- en: Given two number fields \(\mathbb{Q}(\alpha)\), \(\mathbb{Q}(\beta)\) via the
    minimal polynomials for their generators \(\alpha\) and \(\beta\), decide whether
    one field is isomorphic to a subfield of the other.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定两个数域 \(\mathbb{Q}(\alpha)\)，\(\mathbb{Q}(\beta)\)，通过它们生成元 \(\alpha\) 和 \(\beta\)
    的最小多项式，判断一个数域是否同构于另一个数域的子域。
- en: 'From a solution to this problem flow solutions to the following problems as
    well:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决此问题的解中，流出以下问题的解：
- en: '**Primitive Element Problem:**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始元素问题：**'
- en: Given several algebraic numbers \(\alpha_1, \ldots, \alpha_m\), compute a single
    algebraic number \(\theta\) such that \(\mathbb{Q}(\alpha_1, \ldots, \alpha_m)
    = \mathbb{Q}(\theta)\).
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定几个代数数 \(\alpha_1, \ldots, \alpha_m\)，计算一个单一的代数数 \(\theta\)，使得 \(\mathbb{Q}(\alpha_1,
    \ldots, \alpha_m) = \mathbb{Q}(\theta)\)。
- en: '**Field Isomorphism Problem:**'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域同构问题：**'
- en: Decide whether two number fields \(\mathbb{Q}(\alpha)\), \(\mathbb{Q}(\beta)\)
    are isomorphic.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 判断两个数域 \(\mathbb{Q}(\alpha)\)，\(\mathbb{Q}(\beta)\) 是否同构。
- en: '**Field Membership Problem:**'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域成员问题：**'
- en: Given two algebraic numbers \(\alpha\), \(\beta\), decide whether \(\alpha \in
    \mathbb{Q}(\beta)\), and if so write \(\alpha = f(\beta)\) for some \(f(x) \in
    \mathbb{Q}[x]\).
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定两个代数数 \(\alpha\)、\(\beta\)，决定 \(\alpha \in \mathbb{Q}(\beta)\)，如果是，则写成 \(\alpha
    = f(\beta)\) 其中 \(f(x) \in \mathbb{Q}[x]\)。
- en: '[PRE32]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Find an embedding of one number field into another.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个数域嵌入到另一个数域中。
- en: 'Parameters:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**a** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
- en: Any expression representing an algebraic number.
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任何表示代数数的表达式。
- en: '**b** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**b** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
- en: Any expression representing an algebraic number.
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任何表示代数数的表达式。
- en: '**fast** : boolean, optional (default=True)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**fast** : 布尔值，可选（默认为True）'
- en: If `True`, we first attempt a potentially faster way of computing the isomorphism,
    falling back on a slower method if this fails. If `False`, we go directly to the
    slower method, which is guaranteed to return a result.
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为 `True`，首先尝试一种可能更快的计算同构的方法，如果失败，则退回到较慢的方法。如果为 `False`，则直接使用保证返回结果的较慢方法。
- en: 'Returns:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: List of rational numbers, or None
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 有理数列表，或者为 `None`
- en: If \(\mathbb{Q}(a)\) is not isomorphic to some subfield of \(\mathbb{Q}(b)\),
    then return `None`. Otherwise, return a list of rational numbers representing
    an element of \(\mathbb{Q}(b)\) to which \(a\) may be mapped, in order to define
    a monomorphism, i.e. an isomorphism from \(\mathbb{Q}(a)\) to some subfield of
    \(\mathbb{Q}(b)\). The elements of the list are the coefficients of falling powers
    of \(b\).
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 \(\mathbb{Q}(a)\) 不同构于 \(\mathbb{Q}(b)\) 的某个子域，则返回 `None`。否则，返回一个有序列表，表示
    \(\mathbb{Q}(b)\) 中元素，其中 \(a\) 可能被映射到，以定义单同态，即从 \(\mathbb{Q}(a)\) 到 \(\mathbb{Q}(b)\)
    的同构。列表的元素是 \(b\) 的降幂的系数。
- en: Explanation
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This function looks for an isomorphism from \(\mathbb{Q}(a)\) onto some subfield
    of \(\mathbb{Q}(b)\). Thus, it solves the Subfield Problem.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数寻找从 \(\mathbb{Q}(a)\) 到 \(\mathbb{Q}(b)\) 的同构。因此，它解决了子域问题。
- en: Examples
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE33]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Find a single generator for a number field given by several generators.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 找到由几个生成元给出的数域的单一生成元。
- en: 'Parameters:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**extension** : list of [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**extension** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    的列表'
- en: Each expression must represent an algebraic number \(\alpha_i\).
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个表达式必须表示代数数 \(\alpha_i\)。
- en: '**x** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    optional (default=None)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**x** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")，可选（默认为None）'
- en: The desired symbol to appear in the computed minimal polynomial for the primitive
    element \(\theta\). If `None`, we use a dummy symbol.
  id: totrans-304
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所需出现在原始元素 \(\theta\) 的计算最小多项式中的符号。如果为 `None`，则使用虚拟符号。
- en: '**ex** : boolean, optional (default=False)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**ex** : 布尔值，可选（默认为False）'
- en: If and only if `True`, compute the representation of each \(\alpha_i\) as a
    \(\mathbb{Q}\)-linear combination over the powers of \(\theta\).
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当且仅当为`True`时，计算每个 \(\alpha_i\) 的表示，作为 \(\theta\) 的幂次在 \(\mathbb{Q}\) 上的线性组合。
- en: '**polys** : boolean, optional (default=False)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**polys** : 布尔值，可选（默认为False）'
- en: If `True`, return the minimal polynomial as a [`Poly`](reference.html#sympy.polys.polytools.Poly
    "sympy.polys.polytools.Poly"). Otherwise return it as an [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr").
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为 `True`，将最小多项式作为 [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    返回。否则将其作为 [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr") 返回。
- en: 'Returns:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'Pair (f, coeffs) or triple (f, coeffs, reps), where:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 一对 (f, coeffs) 或三元组 (f, coeffs, reps)，其中：
- en: '`f` is the minimal polynomial for the primitive element. `coeffs` gives the
    primitive element as a linear combination of the given generators. `reps` is present
    if and only if argument `ex=True` was passed, and is a list of lists of rational
    numbers. Each list gives the coefficients of falling powers of the primitive element,
    to recover one of the original, given generators.'
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`f` 是原始元素的最小多项式。`coeffs` 给出原始元素作为给定生成元的线性组合。如果传递了 `ex=True`，则 `reps` 存在，并且是有理数列表的列表。每个列表给出原始生成元的降幂系数，以恢复其中之一。'
- en: Explanation
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'The basic problem is this: Given several algebraic numbers \(\alpha_1, \alpha_2,
    \ldots, \alpha_n\), find a single algebraic number \(\theta\) such that \(\mathbb{Q}(\alpha_1,
    \alpha_2, \ldots, \alpha_n) = \mathbb{Q}(\theta)\).'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 基本问题是：给定几个代数数 \(\alpha_1, \alpha_2, \ldots, \alpha_n\)，找到一个单一的代数数 \(\theta\)，使得
    \(\mathbb{Q}(\alpha_1, \alpha_2, \ldots, \alpha_n) = \mathbb{Q}(\theta)\)。
- en: This function actually guarantees that \(\theta\) will be a linear combination
    of the \(\alpha_i\), with non-negative integer coefficients.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数实际上保证 \(\theta\) 将是 \(\alpha_i\) 的线性组合，其系数为非负整数。
- en: Furthermore, if desired, this function will tell you how to express each \(\alpha_i\)
    as a \(\mathbb{Q}\)-linear combination of the powers of \(\theta\).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果需要，此函数将告诉您如何将每个 \(\alpha_i\) 表示为 \(\theta\) 的 \(\mathbb{Q}\) 线性组合的幂次元素。
- en: Examples
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE35]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then `lincomb` tells us the primitive element as a linear combination of the
    given generators `sqrt(2)` and `sqrt(3)`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `lincomb` 告诉我们原始元素作为给定生成元 `sqrt(2)` 和 `sqrt(3)` 的线性组合。
- en: '[PRE36]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This means the primtiive element is \(\sqrt{2} + \sqrt{3}\). Meanwhile `f` is
    the minimal polynomial for this primitive element.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着原始元素是 \(\sqrt{2} + \sqrt{3}\)。同时 `f` 是这个原始元素的最小多项式。
- en: '[PRE37]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finally, `reps` (which was returned only because we set keyword arg `ex=True`)
    tells us how to recover each of the generators \(\sqrt{2}\) and \(\sqrt{3}\) as
    \(\mathbb{Q}\)-linear combinations of the powers of the primitive element \(\sqrt{2}
    + \sqrt{3}\).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`reps`（仅因为我们设置了关键字参数 `ex=True` 而返回）告诉我们如何将每个生成元 \(\sqrt{2}\) 和 \(\sqrt{3}\)
    作为 \(\mathbb{Q}\) 线性组合的幂次元素 \(\sqrt{2} + \sqrt{3}\) 的恢复方式。
- en: '[PRE38]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Express one algebraic number in the field generated by another.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的域中表达一个代数数。
- en: 'Parameters:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 'Parameters:'
- en: '**extension** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    or list of [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**extension** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    或者 [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr") 的列表'
- en: Either the algebraic number that is to be expressed in the other field, or else
    a list of algebraic numbers, a primitive element for which is to be expressed
    in the other field.
  id: totrans-328
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要么是要在另一个域中表达的代数数，要么是代数数的列表，其中一个原始元素将在另一个域中表达。
- en: '**theta** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr"),
    None, optional (default=None)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '**theta** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr"),
    None, optional (default=None)'
- en: If an [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr") representing
    an algebraic number, behavior is as described under **Explanation**. If `None`,
    then this function reduces to a shorthand for calling [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element") on `extension` and turning
    the computed primitive element into an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber").
  id: totrans-330
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果代表代数数的 [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")，则其行为如
    **Explanation** 中所述。如果为 `None`，则此函数简化为对 `extension` 调用 [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element") 并将计算得到的原始元素转换为 [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")。
- en: '**gen** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**gen** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
- en: If provided, this will be used as the generator symbol for the minimal polynomial
    in the returned [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber").
  id: totrans-332
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供，则将用作返回的 [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") 的最小多项式的生成符号。
- en: '**alias** : str, [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**alias** : str, [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
- en: If provided, this will be used as the alias symbol for the returned [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber").
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供，则将用作返回的 [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") 的别名符号。
- en: 'Returns:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 'Returns:'
- en: AlgebraicNumber
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: AlgebraicNumber
- en: Belonging to \(\mathbb{Q}(\theta)\) and equaling \(\eta\).
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 属于 \(\mathbb{Q}(\theta)\) 并等于 \(\eta\)。
- en: 'Raises:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 'Raises:'
- en: '**IsomorphismFailed**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**IsomorphismFailed**'
- en: If \(\eta \not\in \mathbb{Q}(\theta)\).
  id: totrans-340
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 \(\eta \not\in \mathbb{Q}(\theta)\)。
- en: Explanation
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: Explanation
- en: Given two algebraic numbers \(\eta, \theta\), this function either expresses
    \(\eta\) as an element of \(\mathbb{Q}(\theta)\), or else raises an exception
    if \(\eta \not\in \mathbb{Q}(\theta)\).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个代数数 \(\eta, \theta\)，此函数要么将 \(\eta\) 表示为 \(\mathbb{Q}(\theta)\) 中的元素，要么在
    \(\eta \not\in \mathbb{Q}(\theta)\) 时引发异常。
- en: This function is essentially just a convenience, utilizing [`field_isomorphism()`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism") (our solution of the Subfield
    Problem) to solve this, the Field Membership Problem.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数本质上只是一种方便的工具，利用 [`field_isomorphism()`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism")（我们解决的子域问题）来解决这个域成员问题。
- en: As an additional convenience, this function allows you to pass a list of algebraic
    numbers \(\alpha_1, \alpha_2, \ldots, \alpha_n\) instead of \(\eta\). It then
    computes \(\eta\) for you, as a solution of the Primitive Element Problem, using
    [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element "sympy.polys.numberfields.subfield.primitive_element")
    on the list of \(\alpha_i\).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外方便，此函数允许您传递代数数列 \(\alpha_1, \alpha_2, \ldots, \alpha_n\) 而不是 \(\eta\)。它会使用
    [`primitive_element()`](#sympy.polys.numberfields.subfield.primitive_element "sympy.polys.numberfields.subfield.primitive_element")
    对 \(\alpha_i\) 列表计算 \(\eta\)，作为原始元问题的解。
- en: Examples
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE40]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We get an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber"), whose `.root` is \(\theta\), whose value
    is \(\eta\), and whose `.coeffs()` show how to write \(\eta\) as a \(\mathbb{Q}\)-linear
    combination in falling powers of \(\theta\).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个 [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")，其
    `.root` 是 \(\theta\)，其值是 \(\eta\)，并且其 `.coeffs()` 显示如何用 \(\theta\) 的降幂写出 \(\eta\)
    的 \(\mathbb{Q}\)-线性组合。
- en: See also
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`field_isomorphism`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism"), [`primitive_element`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element")'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`field_isomorphism`](#sympy.polys.numberfields.subfield.field_isomorphism
    "sympy.polys.numberfields.subfield.field_isomorphism")，[`primitive_element`](#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element")'
- en: Internals
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部
- en: Algebraic number fields
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代数数域
- en: Algebraic number fields are represented in SymPy by the [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") class, which is a part of [the polynomial
    domains system](domainsref.html#polys-domainsref).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，代数数域由 [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") 类表示，这是 [多项式域系统](domainsref.html#polys-domainsref)
    的一部分。
- en: Representing algebraic numbers
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表示代数数
- en: There are several different ways to represent algebraic numbers, and different
    forms may be preferable for different computational tasks. See [[Cohen93]](literature.html#cohen93),
    Sec. 4.2.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 表示代数数有多种不同的方式，对于不同的计算任务可能有不同的首选形式。参见 [[Cohen93]](literature.html#cohen93)，第
    4.2 节。
- en: As number field elements
  id: totrans-355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 作为数域元素
- en: In SymPy, there is a distinction between number and expression classes defined
    in the [`sympy.core.numbers`](../core.html#module-sympy.core.numbers "sympy.core.numbers")
    module on the one hand, and domains and domain elements defined in the [`polys`](reference.html#module-sympy.polys
    "sympy.polys") module on the other. This is explained in more detail [here](domainsintro.html#polys-domainsintro).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，有一个区分数字和表达式类别的区别，分别在 [`sympy.core.numbers`](../core.html#module-sympy.core.numbers
    "sympy.core.numbers") 模块中定义，在 [`polys`](reference.html#module-sympy.polys "sympy.polys")
    模块中定义域和域元素。这在 [这里](domainsintro.html#polys-domainsintro) 有更详细的解释。
- en: When it comes to algebraic numbers, the [`sympy.core.numbers`](../core.html#module-sympy.core.numbers
    "sympy.core.numbers") module offers the [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") class, while the [`polys`](reference.html#module-sympy.polys
    "sympy.polys") module offers the [`ANP`](domainsref.html#sympy.polys.polyclasses.ANP
    "sympy.polys.polyclasses.ANP") class. This is the type of domain elements belonging
    to the [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")
    domain.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及代数数时，[`sympy.core.numbers`](../core.html#module-sympy.core.numbers "sympy.core.numbers")
    模块提供 [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")
    类，而 [`polys`](reference.html#module-sympy.polys "sympy.polys") 模块提供 [`ANP`](domainsref.html#sympy.polys.polyclasses.ANP
    "sympy.polys.polyclasses.ANP") 类。这是属于 [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") 域的域元素类型。
- en: As elements of finitely-generated modules
  id: totrans-358
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 作为有限生成模块的元素
- en: In computational algebraic number theory, finitely-generated \(\mathbb{Z}\)-modules
    are of central importance. For example, every [order](https://en.wikipedia.org/wiki/Order_(ring_theory))
    and every [ideal](https://en.wikipedia.org/wiki/Ideal_(ring_theory)) is such a
    module.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算代数数论中，有限生成的\(\mathbb{Z}\)-模块具有至关重要的作用。例如，每个[秩](https://en.wikipedia.org/wiki/Order_(ring_theory))和每个[理想](https://en.wikipedia.org/wiki/Ideal_(ring_theory))都是这样一个模块。
- en: In particular, the maximal order – or [ring of integers](https://en.wikipedia.org/wiki/Ring_of_integers)
    – in a number field is a finitely-generated \(\mathbb{Z}\)-module, whose generators
    form an [integral basis](https://en.wikipedia.org/wiki/Algebraic_number_field#Integral_basis)
    for the field.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，在数域中，最大秩的序数——或[整数环](https://en.wikipedia.org/wiki/Ring_of_integers)——是一个有限生成的\(\mathbb{Z}\)-模块，其生成器形成该域的[整基](https://en.wikipedia.org/wiki/Algebraic_number_field#Integral_basis)。
- en: Classes allowing us to represent such modules, and their elements, are provided
    in the [`modules`](#module-sympy.polys.numberfields.modules "sympy.polys.numberfields.modules")
    module. Here, the [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") class provides another way to
    represent algebraic numbers.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 允许我们表示这种模块及其元素的类，都在[`modules`](#module-sympy.polys.numberfields.modules "sympy.polys.numberfields.modules")模块中提供。在这里，[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")类提供了另一种表示代数数的方式。
- en: '### Finitely-generated modules'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '### 有限生成模块'
- en: Modules in number fields.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 数域中的模块。
- en: The classes defined here allow us to work with finitely generated, free modules,
    whose generators are algebraic numbers.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义的类允许我们处理有限生成的自由模块，其生成器是代数数。
- en: There is an abstract base class called [`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module"), which has two concrete subclasses,
    [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    and [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule").
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")的抽象基类，它有两个具体子类，[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")和[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")。
- en: 'Every module is defined by its basis, or set of generators:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块由其基础或生成器集合定义：
- en: For a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis"),
    the generators are the first \(n\) powers (starting with the zeroth) of an algebraic
    integer \(\theta\) of degree \(n\). The [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") is constructed by passing either
    the minimal polynomial of \(\theta\), or an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") having \(\theta\) as its primitive element.
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")，生成器是代数整数\(\theta\)的前\(n\)个幂（从零开始），其次数为\(n\)。
    [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")通过传递\(\theta\)的最小多项式或将\(\theta\)作为其原始元素的[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")来构造。
- en: For a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule"),
    the generators are a set of \(\mathbb{Q}\)-linear combinations of the generators
    of another module. That other module is then the “parent” of the [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"). The coefficients of the \(\mathbb{Q}\)-linear
    combinations may be given by an integer matrix, and a positive integer denominator.
    Each column of the matrix defines a generator.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")，生成器是另一个模块的\(\mathbb{Q}\)-线性组合的集合。那个模块则是[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")的“父”模块。\(\mathbb{Q}\)-线性组合的系数可以由整数矩阵和正整数分母给出。矩阵的每一列定义一个生成器。
- en: '[PRE41]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Thus, every module is either a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis"), or a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"), some ancestor of which is a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis"). (If `S` is a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"), then its ancestors are `S.parent`,
    `S.parent.parent`, and so on).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个模块都是[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")或[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")的一个祖先，如果`S`是一个[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")，那么它的祖先是`S.parent`、`S.parent.parent`等。
- en: The [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    class represents a linear combination of the generators of any module. Critically,
    the coefficients of this linear combination are not restricted to be integers,
    but may be any rational numbers. This is necessary so that any and all algebraic
    integers be representable, starting from the power basis in a primitive element
    \(\theta\) for the number field in question. For example, in a quadratic field
    \(\mathbb{Q}(\sqrt{d})\) where \(d \equiv 1 \mod{4}\), a denominator of \(2\)
    is needed.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")类表示任何模块的生成器的线性组合。关键是，这个线性组合的系数不限于整数，而可以是任何有理数。这是必要的，以便任何和所有的代数整数都可以表示，从某个数域中的原始元素\(\theta\)的幂开始。例如，在二次域\(\mathbb{Q}(\sqrt{d})\)中，其中\(d
    \equiv 1 \mod{4}\)，需要一个分母为2。'
- en: 'A [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    can be constructed from an integer column vector and a denominator:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")可以由整数列向量和分母构造：'
- en: '[PRE42]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") class is a subclass of [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") that represents elements of
    a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis"),
    and adds functionality pertinent to elements represented directly over powers
    of the primitive element \(\theta\).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")类是[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")的子类，表示[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")的元素，并添加了直接在原始元素\(\theta\)的幂上表示的元素相关的功能。'
- en: Arithmetic with module elements
  id: totrans-375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与模块元素进行算术运算
- en: While a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    represents a linear combination over the generators of a particular module, recall
    that every module is either a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") or a descendant (along a chain
    of [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    objects) thereof, so that in fact every [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") represents an algebraic number
    in some field \(\mathbb{Q}(\theta)\), where \(\theta\) is the defining element
    of some [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis").
    It thus makes sense to talk about the number field to which a given [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belongs.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")表示特定模块的生成器的线性组合，但要记住每个模块都是[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")或其后代（沿着[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")对象的链），因此实际上每个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")都表示某个域\(\mathbb{Q}(\theta)\)中的代数数，其中\(\theta\)是某个[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")的定义元素。因此，讨论给定的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")属于哪个数域是有意义的。
- en: This means that any two [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") instances can be added, subtracted,
    multiplied, or divided, provided they belong to the same number field. Similarly,
    since \(\mathbb{Q}\) is a subfield of every number field, any [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") may be added, multiplied, etc.
    by any rational number.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着任意两个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")实例都可以相加、相减、相乘或相除，只要它们属于同一个数域。同样，由于
    \(\mathbb{Q}\) 是每个数域的子域，任何[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")也可以与任何有理数相加、相乘等。
- en: '[PRE43]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: However, care must be taken with arithmetic operations on [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), because the module \(C\) to
    which the result will belong will be the nearest common ancestor (NCA) of the
    modules \(A\), \(B\) to which the two operands belong, and \(C\) may be different
    from either or both of \(A\) and \(B\).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在对[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")进行算术操作时必须要小心，因为结果所属的模块
    \(C\) 将是两个操作数所属的模块 \(A\) 和 \(B\) 的最近公共祖先（NCA），而 \(C\) 可能与 \(A\) 和 \(B\) 中的任意一个或两个都不同。
- en: '[PRE44]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Before the arithmetic operation is performed, copies of the two operands are
    automatically converted into elements of the NCA (the operands themselves are
    not modified). This upward conversion along an ancestor chain is easy: it just
    requires the successive multiplication by the defining matrix of each [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行算术操作之前，两个操作数的副本会自动转换为NCA的元素（操作数本身不会被修改）。沿祖先链的向上转换非常简单：只需依次乘以每个[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")的定义矩阵即可。
- en: Conversely, downward conversion, i.e. representing a given [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") in a submodule, is also supported
    – namely by the [`represent()`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent") method – but is not guaranteed
    to succeed in general, since the given element may not belong to the submodule.
    The main circumstance in which this issue tends to arise is with multiplication,
    since modules, while closed under addition, need not be closed under multiplication.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，也支持向下转换，即将给定的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")表示为子模块中的一个元素，具体方法是[`represent()`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent")方法。但是一般来说，这种转换并不保证总是成功，因为给定的元素可能不属于子模块。这个问题通常在乘法时出现，因为模块在加法下封闭，但不一定在乘法下封闭。
- en: Multiplication
  id: totrans-383
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 乘法
- en: Generally speaking, a module need not be closed under multiplication, i.e. need
    not form a ring. However, many of the modules we work with in the context of number
    fields are in fact rings, and our classes do support multiplication.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，一个模块不一定在乘法下封闭，即不一定构成一个环。然而，在数域的背景下我们处理的许多模块实际上是环，而我们的类确实支持乘法。
- en: Specifically, any [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")
    can attempt to compute its own multiplication table, but this does not happen
    unless an attempt is made to multiply two [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") instances belonging to it.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，任何[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")都可以尝试计算其自己的乘法表，但只有在尝试将属于它的两个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")实例相乘时才会这样做。
- en: '[PRE45]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Every [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    is, by its nature, closed under multiplication, so instances of [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") can always successfully compute
    their multiplication table.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")本质上都是在乘法下封闭的，因此[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")的实例总是可以成功地计算它们的乘法表。
- en: When a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    attempts to compute its multiplication table, it converts each of its own generators
    into elements of its parent module, multiplies them there, in every possible pairing,
    and then tries to represent the results in itself, i.e. as \(\mathbb{Z}\)-linear
    combinations over its own generators. This will succeed if and only if the submodule
    is in fact closed under multiplication.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")试图计算其乘法表时，它会将自己的每个生成元转换为其父模块中的元素，并在那里进行每个可能的配对的乘法运算，然后试图将结果表示为其自身的\(\mathbb{Z}\)-线性组合，即其自身的生成元。只有当子模块实际上在乘法下是封闭的时，这个过程才会成功。
- en: Module Homomorphisms
  id: totrans-389
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模同态
- en: Many important number theoretic algorithms require the calculation of the kernel
    of one or more module homomorphisms. Accordingly we have several lightweight classes,
    [`ModuleHomomorphism`](#sympy.polys.numberfields.modules.ModuleHomomorphism "sympy.polys.numberfields.modules.ModuleHomomorphism"),
    [`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism "sympy.polys.numberfields.modules.ModuleEndomorphism"),
    [`InnerEndomorphism`](#sympy.polys.numberfields.modules.InnerEndomorphism "sympy.polys.numberfields.modules.InnerEndomorphism"),
    and [`EndomorphismRing`](#sympy.polys.numberfields.modules.EndomorphismRing "sympy.polys.numberfields.modules.EndomorphismRing"),
    which provide the minimal necessary machinery to support this.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 许多重要的数论算法需要计算一个或多个模同态的核。因此，我们有几个轻量级类，[`ModuleHomomorphism`](#sympy.polys.numberfields.modules.ModuleHomomorphism
    "sympy.polys.numberfields.modules.ModuleHomomorphism")，[`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism
    "sympy.polys.numberfields.modules.ModuleEndomorphism")，[`InnerEndomorphism`](#sympy.polys.numberfields.modules.InnerEndomorphism
    "sympy.polys.numberfields.modules.InnerEndomorphism") 和 [`EndomorphismRing`](#sympy.polys.numberfields.modules.EndomorphismRing
    "sympy.polys.numberfields.modules.EndomorphismRing")，它们提供了支持这些操作所需的最小机制。
- en: Class Reference
  id: totrans-391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类参考
- en: '[PRE46]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Generic finitely-generated module.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的有限生成模块。
- en: This is an abstract base class, and should not be instantiated directly. The
    two concrete subclasses are [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") and [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个抽象基类，不应直接实例化。两个具体的子类是[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") 和 [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")。
- en: Every [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    is derived from another module, referenced by its `parent` attribute. If `S` is
    a submodule, then we refer to `S.parent`, `S.parent.parent`, and so on, as the
    “ancestors” of `S`. Thus, every [`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module") is either a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") or a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"), some ancestor of which is a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis").
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")都来源于另一个模块，通过其`parent`属性引用。如果`S`是一个子模块，则我们称`S.parent`，`S.parent.parent`等为`S`的“祖先”。因此，每个[`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module")要么是一个[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")，要么是一个[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")，其中某个祖先是[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")。
- en: '[PRE47]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Generate a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belonging to this module.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 生成属于此模块的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")。
- en: 'Parameters:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**spec** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix"), int'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**spec** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix"), int'
- en: Specifies the numerators of the coefficients of the [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"). Can be either a column vector
    over [ZZ](domainsref.html#zz), whose length must equal the number \(n\) of generators
    of this module, or else an integer `j`, \(0 \leq j < n\), which is a shorthand
    for column \(j\) of \(I_n\), the \(n \times n\) identity matrix.
  id: totrans-400
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")的系数的分子。可以是整数向量，范围为[ZZ](domainsref.html#zz)，其长度必须等于此模块生成器的数量\(n\)，或者是整数`j`，\(0
    \leq j < n\)，表示单位矩阵\(I_n\)的第\(n \times n\)列的简写。
- en: '**denom** : int, optional (default=1)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '**denom**：整数，可选（默认=1）'
- en: Denominator for the coefficients of the [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement").
  id: totrans-402
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")的系数的分母。'
- en: 'Returns:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: The coefficients are the entries of the *spec* vector, divided by *denom*.
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 系数是*spec*向量的条目，除以*denom*。
- en: Examples
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE48]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return the list of ancestor modules of this module, from the foundational [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") downward, optionally including
    `self`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此模块的祖先模块列表，从基础的[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")开始向下，可选包括`self`。
- en: See also
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: '[PRE50]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Get list of [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") being the generators of this
    module.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 获取[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")生成器列表。
- en: '[PRE51]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Return a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    representing a rational number.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示有理数的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: 'Parameters:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a** : int, [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq)'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**：整数，[ZZ](domainsref.html#zz)，[QQ](domainsref.html#qq)'
- en: 'Returns:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: Explanation
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The returned [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") will belong to the first module
    on this module’s ancestor chain (including this module itself) that starts with
    unity.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")将属于此模块的祖先链上的第一个模块（包括此模块本身），该链以单位元素开始。
- en: Examples
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE52]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Form the [`EndomorphismRing`](#sympy.polys.numberfields.modules.EndomorphismRing
    "sympy.polys.numberfields.modules.EndomorphismRing") for this module.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 形成此模块的[`EndomorphismRing`](#sympy.polys.numberfields.modules.EndomorphismRing
    "sympy.polys.numberfields.modules.EndomorphismRing")。
- en: '[PRE54]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Say whether *col* is a suitable column vector for this module.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 判断*col*是否适合此模块的列向量。
- en: '[PRE55]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Get the multiplication table for this module (if closed under mult).
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此模块的乘法表（如果在乘法下封闭）。
- en: 'Returns:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: dict of dict of lists
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的字典的列表
- en: 'Raises:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: '**ClosureFailure**'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '**ClosureFailure**'
- en: If the module is not closed under multiplication.
  id: totrans-434
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果模块在乘法下不封闭。
- en: Explanation
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Computes a dictionary `M` of dictionaries of lists, representing the upper triangular
    half of the multiplication table.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 计算表示乘法表上三角部分的字典`M`的字典的列表。
- en: In other words, if `0 <= i <= j < self.n`, then `M[i][j]` is the list `c` of
    coefficients such that `g[i] * g[j] == sum(c[k]*g[k], k in range(self.n))`, where
    `g` is the list of generators of this module.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果`0 <= i <= j < self.n`，那么`M[i][j]`是系数列表`c`，使得`g[i] * g[j] == sum(c[k]*g[k],
    k in range(self.n))`，其中`g`是此模块生成器的列表。
- en: If `j < i` then `M[i][j]` is undefined.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`j < i`，则`M[i][j]`未定义。
- en: Examples
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE56]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The number of generators of this module.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块的生成器数量。
- en: '[PRE58]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Locate the nearest common ancestor of this module and another.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 定位此模块及另一个模块的最近公共祖先。
- en: 'Returns:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module"),
    `None`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")，`None`'
- en: See also
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: '[PRE59]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return the associated [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField"), if any.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关联的[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")（如果有的话）。
- en: 'Returns:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField"),
    `None`'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")，`None`'
- en: Explanation
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    can be constructed on a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    \(f\) or on an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") \(K\). In the latter case, the [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") and all its descendant modules
    will return \(K\) as their `.number_field` property, while in the former case
    they will all return `None`.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    \(f\)上或者在[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") \(K\)上构造[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")。在后一种情况下，[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")及其所有后代模块将返回\(K\)作为其`.number_field`属性，而在前一种情况下，它们将全部返回`None`。
- en: '[PRE60]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    representing unity, and belonging to the first ancestor of this module (including
    itself) that starts with unity.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示单位的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")，并属于该模块的第一个祖先（包括它自身），该祖先以单位开始。
- en: '[PRE61]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The parent module, if any, for this module.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有的话，返回此模块的父模块。
- en: 'Returns:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module"),
    `None`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")，`None`'
- en: Explanation
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: For a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    this is its `parent` attribute; for a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") this is `None`.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")，这是其`parent`属性；对于[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")，这是`None`。
- en: See also
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: '[PRE62]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return the [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    that is an ancestor of this module.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个模块的祖先的[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")。
- en: See also
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: '[PRE63]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Represent a module element as an integer-linear combination over the generators
    of this module.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块元素表示为该模块生成器的整数线性组合。
- en: 'Parameters:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**elt** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '**elt**：[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: The module element to be represented. Must belong to some ancestor module of
    this module (including this module itself).
  id: totrans-473
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要表示的模块元素。 必须属于此模块的某个祖先模块（包括此模块本身）。
- en: 'Returns:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")关于[ZZ](domainsref.html#zz)'
- en: This will be a column vector, representing the coefficients of a linear combination
    of this module’s generators, which equals the given element.
  id: totrans-476
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这将是一个列向量，表示该模块生成器的线性组合的系数，其等于给定的元素。
- en: 'Raises:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**ClosureFailure**'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '**ClosureFailure**'
- en: If the given element cannot be represented as a [ZZ](domainsref.html#zz)-linear
    combination over this module.
  id: totrans-479
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果给定的元素不能表示为此模块上的[ZZ](domainsref.html#zz)线性组合。
- en: Explanation
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: In our system, to “represent” always means to write a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") as a [ZZ](domainsref.html#zz)-linear
    combination over the generators of the present [`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module"). Furthermore, the incoming [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") must belong to an ancestor of
    the present [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")
    (or to the present [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")
    itself).
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统中，“表示”始终意味着将[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")写成当前[`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module")的生成元的[ZZ](domainsref.html#zz)线性组合。此外，传入的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")必须属于当前[`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module")的祖先（或当前[`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module")本身）。
- en: The most common application is to represent a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") in a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule"). For example, this is involved in
    computing multiplication tables.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的应用是在[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")中表示[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。例如，这涉及计算乘法表。
- en: On the other hand, representing in a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") is an odd case, and one which tends
    not to arise in practice, except for example when using a [`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism
    "sympy.polys.numberfields.modules.ModuleEndomorphism") on a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis").
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")中表示是一个特例，这种情况通常不会在实践中出现，除非例如在[`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism
    "sympy.polys.numberfields.modules.ModuleEndomorphism")在[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")上使用时。
- en: In such a case, (1) the incoming [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") must belong to the [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") itself (since the latter has no
    proper ancestors) and (2) it is “representable” iff it belongs to \(\mathbb{Z}[\theta]\)
    (although generally a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") may represent any element
    of \(\mathbb{Q}(\theta)\), i.e. any algebraic number).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，（1）传入的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")必须属于[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")本身（因为后者没有适当的祖先），（2）它“可表示”当且仅当它属于\(\mathbb{Z}[\theta]\)（尽管通常[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")可以表示\(\mathbb{Q}(\theta)\)中的任何元素，即任何代数数）。
- en: Examples
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE64]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    `a` has all even coefficients. If we represent `a` in the submodule `B = 2*A`,
    the coefficients in the column vector will be halved:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    `a` 的所有系数都是偶数。如果我们在子模块`B = 2*A`中表示`a`，列向量中的系数将减半：'
- en: '[PRE65]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'However, the element of `B` so defined still represents the same algebraic
    number:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如此定义的`B`中的元素仍表示相同的代数数：
- en: '[PRE66]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: See also
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Submodule.represent`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent"), [`PowerBasis.represent`](#sympy.polys.numberfields.modules.PowerBasis.represent
    "sympy.polys.numberfields.modules.PowerBasis.represent")'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule.represent`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent")，[`PowerBasis.represent`](#sympy.polys.numberfields.modules.PowerBasis.represent
    "sympy.polys.numberfields.modules.PowerBasis.represent")'
- en: '[PRE67]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Say whether the module’s first generator equals unity.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 判断模块的第一个生成元是否等于单位元。
- en: '[PRE68]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Form the submodule generated by a list of [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belonging to this module.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 用属于本模块的 [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    列表生成的子模。
- en: 'Parameters:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**gens** : list of [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belonging to this module.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '**gens** : 属于本模块的 [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") 列表。'
- en: '**hnf** : boolean, optional (default=True)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf** : boolean, optional (默认=True)'
- en: If True, we will reduce the matrix into Hermite Normal Form before forming the
    [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule").
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为 True，则在形成 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    前将矩阵缩减为 Hermite 正规形式。
- en: '**hnf_modulus** : int, None, optional (default=None)'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf_modulus** : int, None, optional (默认=None)'
- en: Modulus for use in the HNF reduction algorithm. See [`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form").
  id: totrans-502
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于 HNF 缩减算法中的模数。参见 [`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form")。
- en: 'Returns:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: Examples
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE69]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`submodule_from_matrix`](#sympy.polys.numberfields.modules.Module.submodule_from_matrix
    "sympy.polys.numberfields.modules.Module.submodule_from_matrix")'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[`submodule_from_matrix`](#sympy.polys.numberfields.modules.Module.submodule_from_matrix
    "sympy.polys.numberfields.modules.Module.submodule_from_matrix")'
- en: '[PRE70]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Form the submodule generated by the elements of this module indicated by the
    columns of a matrix, with an optional denominator.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 用矩阵的列指示的本模块的元素生成的子模，带有可选的分母。
- en: 'Parameters:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**B** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '**B** : [`ZZ`](domainsref.html#zz)上的 [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")。'
- en: Each column gives the numerators of the coefficients of one generator of the
    submodule. Thus, the number of rows of *B* must equal the number of generators
    of the present module.
  id: totrans-513
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每一列都给出了子模的一个生成元的系数的分子。因此，*B* 的行数必须等于当前模的生成元的数量。
- en: '**denom** : int, optional (default=1)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '**denom** : int, optional (默认=1)'
- en: Common denominator for all generators of the submodule.
  id: totrans-515
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有生成元的公共分母的最小公倍数。
- en: 'Returns:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: 'Raises:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**ValueError**'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '**ValueError**'
- en: If the given matrix *B* is not over [ZZ](domainsref.html#zz) or its number of
    rows does not equal the number of generators of the present module.
  id: totrans-520
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果给定的矩阵 *B* 不是在 [ZZ](domainsref.html#zz) 上或其行数不等于当前模的生成元的数量。
- en: Examples
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE71]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`submodule_from_gens`](#sympy.polys.numberfields.modules.Module.submodule_from_gens
    "sympy.polys.numberfields.modules.Module.submodule_from_gens")'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '[`submodule_from_gens`](#sympy.polys.numberfields.modules.Module.submodule_from_gens
    "sympy.polys.numberfields.modules.Module.submodule_from_gens")'
- en: '[PRE72]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Return a submodule equal to this entire module.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个等于整个模的子模。
- en: Explanation
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: This is useful when you have a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") and want to turn it into a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule") (in order to use methods belonging
    to the latter).
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个 [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    并希望将其转换为 [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")（以使用后者属于的方法）时，这将非常有用。
- en: '[PRE73]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Return a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    representing zero.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示零的 [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")。
- en: '[PRE74]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The module generated by the powers of an algebraic integer.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 由代数整数的幂生成的模。
- en: '[PRE75]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Parameters:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
- en: Either (1) the monic, irreducible, univariate polynomial over [ZZ](domainsref.html#zz),
    a root of which is the generator of the power basis, or (2) an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") whose primitive element is the generator
    of the power basis.
  id: totrans-536
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （1）整数环上的首一、不可约、一元多项式，其根是幂基的生成元，或者（2）一个 [`代数域`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")，其原始元素是幂基的生成元。
- en: '[PRE76]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Convert an ANP into a PowerBasisElement.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ANP 转换为幂基元素。
- en: '[PRE77]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Convert an AlgebraicNumber into a PowerBasisElement.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 将代数数转换为幂基元素。
- en: '[PRE78]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Produce an element of this module, representing *f* after reduction mod our
    defining minimal polynomial.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定义的最小多项式模除后，产生此模块的元素，表示 *f*。
- en: 'Parameters:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**f** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    over [ZZ](domainsref.html#zz) in same var as our defining poly.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '**f** : [`多项式`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    over [ZZ](domainsref.html#zz)，与我们定义的多项式相同的变量。'
- en: 'Returns:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`幂基元素`](#sympy.polys.numberfields.modules.PowerBasisElement "sympy.polys.numberfields.modules.PowerBasisElement")'
- en: '[PRE79]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Represent a module element as an integer-linear combination over the generators
    of this module.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块元素表示为该模块生成器上的整数线性组合。
- en: See also
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Module.represent`](#sympy.polys.numberfields.modules.Module.represent "sympy.polys.numberfields.modules.Module.represent"),
    [`Submodule.represent`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent")'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module.represent`](#sympy.polys.numberfields.modules.Module.represent "sympy.polys.numberfields.modules.Module.represent")，[`Submodule.represent`](#sympy.polys.numberfields.modules.Submodule.represent
    "sympy.polys.numberfields.modules.Submodule.represent")'
- en: '[PRE80]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: A submodule of another module.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个模块的子模块。
- en: '[PRE81]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Parameters:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**parent** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**parent** : [`模块`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The module from which this one is derived.
  id: totrans-556
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 派生此模块的模块。
- en: '**matrix** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '**matrix** : [`域矩阵`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
- en: The matrix whose columns define this submodule’s generators as linear combinations
    over the parent’s generators.
  id: totrans-558
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其列定义此子模块生成器作为父生成器上的线性组合的矩阵。
- en: '**denom** : int, optional (default=1)'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '**denom** : 整数, 可选 (默认为1)'
- en: Denominator for the coefficients given by the matrix.
  id: totrans-560
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 矩阵给定系数的分母。
- en: '**mult_tab** : dict, `None`, optional'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '**mult_tab** : 字典, `None`, 可选'
- en: If already known, the multiplication table for this module may be supplied.
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知，可以提供此模块的乘法表。
- en: '[PRE82]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [QQ](domainsref.html#qq),
    equal to `self.matrix / self.denom`, and guaranteed to be dense.'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[`域矩阵`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    over [QQ](domainsref.html#qq)，等于 `self.matrix / self.denom`，并保证为稠密矩阵。'
- en: 'Returns:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [QQ](domainsref.html#qq)'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`域矩阵`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    over [QQ](domainsref.html#qq)'
- en: Explanation
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Depending on how it is formed, a [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") may have an internal representation
    that is sparse or dense. We guarantee a dense representation here, so that tests
    for equivalence of submodules always come out as expected.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 取决于其形成方式，[`域矩阵`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") 可能具有内部表示为稀疏或稠密的表现形式。我们在这里保证稠密表示，以便子模块的等价性测试总是符合预期。
- en: Examples
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE83]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Add this [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    to another.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    添加到另一个模块中。
- en: 'Parameters:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** : [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** : [`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: '**hnf** : boolean, optional (default=True)'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf** : 布尔值, 可选 (默认为True)'
- en: If `True`, reduce the matrix of the combined module to its Hermite Normal Form.
  id: totrans-576
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为`True`，将组合模块的矩阵减少到其Hermite正常形式。
- en: '**hnf_modulus** : [ZZ](domainsref.html#zz), None, optional'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf_modulus**：[ZZ](domainsref.html#zz)，可选，默认为None'
- en: If a positive integer is provided, use this as modulus in the HNF reduction.
    See [`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form").
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供了正整数，则在HNF约简中使用它作为模数。参见[`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form")。
- en: 'Returns:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: Explanation
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: This represents the module generated by the union of the two modules’ sets of
    generators.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表由两个模块生成器集合的并集生成的模块。
- en: '[PRE85]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Return list of this submodule’s basis elements as elements of the submodule’s
    parent module.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此子模块作为父模块中的基元素列表。
- en: '[PRE86]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Produce a new module by discarding all generators before a given index *r*.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 通过丢弃给定索引*r*之前的所有生成器来生成一个新的模块。
- en: '[PRE87]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Multiply this [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    by a rational number, a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), or another [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")乘以一个有理数，一个[`模元素`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")或另一个[`子模块`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")。
- en: 'Parameters:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** : int, [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq), [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '**other**：整数，[ZZ](domainsref.html#zz)，[QQ](domainsref.html#qq)，[`模元素`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")，[`子模块`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")'
- en: '**hnf** : boolean, optional (default=True)'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf**：布尔值，可选（默认为True）'
- en: If `True`, reduce the matrix of the product module to its Hermite Normal Form.
  id: totrans-592
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为`True`，将产品模块的矩阵减少到其Hermite正常形式。
- en: '**hnf_modulus** : [ZZ](domainsref.html#zz), None, optional'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '**hnf_modulus**：[ZZ](domainsref.html#zz)，可选，默认为None'
- en: If a positive integer is provided, use this as modulus in the HNF reduction.
    See [`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form").
  id: totrans-594
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供了正整数，则在HNF约简中使用它作为模数。参见[`hermite_normal_form()`](domainmatrix.html#sympy.polys.matrices.normalforms.hermite_normal_form
    "sympy.polys.matrices.normalforms.hermite_normal_form")。
- en: 'Returns:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: Explanation
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: To multiply by a rational number or [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") means to form the submodule
    whose generators are the products of this quantity with all the generators of
    the present submodule.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 乘以有理数或[`模元素`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")意味着形成其生成器为当前子模块所有生成器与此数量的乘积的子模块。
- en: To multiply by another [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule") means to form the submodule whose
    generators are all the products of one generator from the one submodule, and one
    generator from the other.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 乘以另一个[`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")意味着形成其生成器为一个子模块的一个生成器与另一个子模块的一个生成器的乘积的子模块。
- en: '[PRE88]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: If this submodule \(B\) has defining matrix \(W\) in square, maximal-rank Hermite
    normal form, then, given an element \(x\) of the parent module \(A\), we produce
    an element \(y \in A\) such that \(x - y \in B\), and the \(i\)th coordinate of
    \(y\) satisfies \(0 \leq y_i < w_{i,i}\). This representative \(y\) is unique,
    in the sense that every element of the coset \(x + B\) reduces to it under this
    procedure.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此子模块\(B\)在方形、最大秩Hermite正常形式中具有定义矩阵\(W\)，则给定父模块\(A\)的元素\(x\)，我们产生一个元素\(y \in
    A\)，使得\(x - y \in B\)，并且\(y\)的第\(i\)个坐标满足\(0 \leq y_i < w_{i,i}\)。这个代表\(y\)是唯一的，意味着每个余类\(x
    + B\)在此过程下都将其减少为它。
- en: 'Parameters:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**elt** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素** : [`模块元素`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: An element of this submodule’s parent module.
  id: totrans-604
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个子模块的父模块的一个元素。
- en: 'Returns:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**elt** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素** : [`模块元素`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: An element of this submodule’s parent module.
  id: totrans-607
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个子模块的父模块的一个元素。
- en: 'Raises:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**NotImplementedError**'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '**未实现错误**'
- en: If the given [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") does not belong to this submodule’s
    parent module.
  id: totrans-610
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果给定的 [`模块元素`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    不属于此子模块的父模块。
- en: '**StructureError**'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构错误**'
- en: If this submodule’s defining matrix is not in square, maximal-rank Hermite normal
    form.
  id: totrans-612
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果这个子模块的定义矩阵不是方的、最大秩的 Hermite 正则形式。
- en: Explanation
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: In the special case where \(A\) is a power basis for a number field \(K\), and
    \(B\) is a submodule representing an ideal \(I\), this operation represents one
    of a few important ways of reducing an element of \(K\) modulo \(I\) to obtain
    a “small” representative. See [[Cohen00]](#cohen00) Section 1.4.3.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 特别情况下，当 \(A\) 是数域 \(K\) 的一个幂基，而 \(B\) 是代表理想 \(I\) 的一个子模块时，这个操作代表了将 \(K\) 中的一个元素对
    \(I\) 取模以得到一个“小”代表的几种重要方法之一。参见 [[Cohen00]](#cohen00) 第 1.4.3 节。
- en: Examples
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE89]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: References
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Cohen00] ([1](#id9),[2](#id10))'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cohen00] ([1](#id9),[2](#id10))'
- en: Cohen, H. *Advanced Topics in Computational Number Theory.*
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算数论的高级主题.*
- en: '[PRE90]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Produce a reduced version of this submodule.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这个子模块的简化版本。
- en: 'Returns:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '[`子模块`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: Explanation
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: In the reduced version, it is guaranteed that 1 is the only positive integer
    dividing both the submodule’s denominator, and every entry in the submodule’s
    matrix.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 在简化版本中，保证 1 是唯一同时整除子模块的分母和子模块矩阵中每个条目的正整数。
- en: '[PRE91]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Represent a module element as an integer-linear combination over the generators
    of this module.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个模块元素表示为该模块生成元的整数线性组合。
- en: See also
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Module.represent`](#sympy.polys.numberfields.modules.Module.represent "sympy.polys.numberfields.modules.Module.represent"),
    [`PowerBasis.represent`](#sympy.polys.numberfields.modules.PowerBasis.represent
    "sympy.polys.numberfields.modules.PowerBasis.represent")'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Module.represent`](#sympy.polys.numberfields.modules.Module.represent "sympy.polys.numberfields.modules.Module.represent"),
    [`PowerBasis.represent`](#sympy.polys.numberfields.modules.PowerBasis.represent
    "sympy.polys.numberfields.modules.PowerBasis.represent")'
- en: '[PRE92]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Represents an element of a [`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module").
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 [`模块`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")
    的一个元素。
- en: 'NOTE: Should not be constructed directly. Use the [`__call__()`](#sympy.polys.numberfields.modules.Module.__call__
    "sympy.polys.numberfields.modules.Module.__call__") method or the [`make_mod_elt()`](#sympy.polys.numberfields.modules.make_mod_elt
    "sympy.polys.numberfields.modules.make_mod_elt") factory function instead.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 注：不应直接构造。请使用 [`__call__()`](#sympy.polys.numberfields.modules.Module.__call__
    "sympy.polys.numberfields.modules.Module.__call__") 方法或 [`make_mod_elt()`](#sympy.polys.numberfields.modules.make_mod_elt
    "sympy.polys.numberfields.modules.make_mod_elt") 工厂函数代替。
- en: '[PRE93]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Parameters:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**module** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块** : [`模块`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The module to which this element belongs.
  id: totrans-636
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 属于此元素的模块。
- en: '**col** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '**列** : [`域矩阵`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [ZZ](domainsref.html#zz)'
- en: Column vector giving the numerators of the coefficients of this element.
  id: totrans-638
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给出此元素系数的分子的列向量。
- en: '**denom** : int, optional (default=1)'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '**分母** : int, 可选 (默认=1)'
- en: Denominator for the coefficients of this element.
  id: totrans-640
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此元素的系数的分母。
- en: '[PRE94]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: A [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    can be added to a rational number, or to another [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement").
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")可以加到一个有理数，或者另一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: Explanation
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: When the other summand is a rational number, it will be converted into a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") (belonging to the first ancestor
    of this module that starts with unity).
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 当另一个加数是有理数时，它将被转换为一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")（属于这个模块的第一个以单位开始的祖先）。
- en: In all cases, the sum belongs to the nearest common ancestor (NCA) of the modules
    of the two summands. If the NCA does not exist, we return `NotImplemented`.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，和属于两个加数模块的最近公共祖先（NCA）。如果NCA不存在，我们返回`NotImplemented`。
- en: '[PRE95]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: A [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    can be multiplied by a rational number, or by another [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement").
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")可以乘以有理数，或者另一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: Explanation
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: When the multiplier is a rational number, the product is computed by operating
    directly on the coefficients of this [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement").
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 当乘数是一个有理数时，该产品通过直接操作这个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")的系数来计算。
- en: When the multiplier is another [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), the product will belong to
    the nearest common ancestor (NCA) of the modules of the two operands, and that
    NCA must have a multiplication table. If the NCA does not exist, we return `NotImplemented`.
    If the NCA does not have a mult. table, `ClosureFailure` will be raised.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 当乘数是另一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")时，该产品将属于两个操作数的模块的最近公共祖先（NCA），并且该NCA必须有一个乘法表。如果NCA不存在，我们返回`NotImplemented`。如果NCA没有乘法表，将会引发`ClosureFailure`。
- en: '[PRE96]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Reduce this [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") mod a [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")对[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")进行归约。
- en: 'Parameters:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**m** : int, [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq), [`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '**m**：整数，[ZZ](domainsref.html#zz)，[QQ](domainsref.html#qq)，[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")'
- en: If a [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule"),
    reduce `self` relative to this. If an integer or rational, reduce relative to
    the [`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")
    that is our own module times this constant.
  id: totrans-655
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果是[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")，相对于此归约`self`。如果是整数或有理数，则相对于我们自己模块乘以这个常数的[`Submodule`](#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule")进行归约。
- en: See also
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule.reduce_element`](#sympy.polys.numberfields.modules.Submodule.reduce_element
    "sympy.polys.numberfields.modules.Submodule.reduce_element")'
- en: '[PRE97]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") over [QQ](domainsref.html#qq),
    equal to `self.col / self.denom`, and guaranteed to be dense.'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") 在[QQ](domainsref.html#qq)上，等于`self.col
    / self.denom`，并且保证是密集的。'
- en: See also
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Submodule.QQ_matrix`](#sympy.polys.numberfields.modules.Submodule.QQ_matrix
    "sympy.polys.numberfields.modules.Submodule.QQ_matrix")'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule.QQ_matrix`](#sympy.polys.numberfields.modules.Submodule.QQ_matrix
    "sympy.polys.numberfields.modules.Submodule.QQ_matrix")'
- en: '[PRE98]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Get a copy of this element’s column, optionally converting to a domain.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此元素列的副本，可选择转换为域。
- en: '[PRE99]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: A [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    may test as equivalent to a rational number or another [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), if they represent the same
    algebraic number.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们表示相同的代数数，则[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")可能测试为等价于有理数或另一个。
- en: 'Parameters:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** : int, [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq), [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '**other**：int，[ZZ](domainsref.html#zz)，[QQ](domainsref.html#qq)，[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
- en: 'Returns:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: bool
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: 'Raises:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**UnificationFailed**'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '**UnificationFailed**'
- en: If `self` and `other` do not share a common [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") ancestor.
  id: totrans-672
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`self`和`other`不共享[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")祖先。
- en: Explanation
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This method is intended to check equivalence only in those cases in which it
    is easy to test; namely, when *other* is either a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") that can be unified with this
    one (i.e. one which shares a common [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") ancestor), or else a rational number
    (which is easy because every [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") represents every rational number).
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅意在检查等价性的情况下进行测试；即，当*other*是可以与此一致化的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")（即，与此共享公共[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")祖先）或者是一个有理数时（因为每个[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")代表每个有理数）。
- en: '[PRE100]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Make a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")
    from a list of ints (instead of a column vector).
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 从整数列表（而不是列向量）创建一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: '[PRE101]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Test whether other is another [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") with same module.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 测试*other*是否为另一个具有相同模块的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: '[PRE102]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: The length of this element’s column.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素列的长度。
- en: '[PRE103]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Transform into a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") over our [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") ancestor.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为我们[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")祖先上的[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")。
- en: '[PRE104]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Produce a reduced version of this ModuleElement, i.e. one in which the gcd of
    the denominator together with all numerator coefficients is 1.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")的简化版本，即分母和所有分子系数的gcd为1。
- en: '[PRE105]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Produce a version of this [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") in which all numerator coefficients
    have been reduced mod *p*.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")的版本，其中所有分子系数已经对*p*取模。
- en: '[PRE106]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Transform into a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belonging to a given ancestor
    of this element’s module.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 将其转换为属于此元素模块祖先的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: 'Parameters:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**anc** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '**anc**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: '[PRE107]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Transform into a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") belonging to the parent of this
    element’s module.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为此元素模块父级的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")。
- en: '[PRE108]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Try to make a compatible pair of [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), one equivalent to this one,
    and one equivalent to the other.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试生成一个与[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")兼容的配对，一个等效于这个，另一个等效于另一个。
- en: 'Returns:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Pair `(e1, e2)`
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 配对`(e1, e2)`
- en: Each `ei` is a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), they belong to the same [`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module"), `e1` is equivalent to `self`, and
    `e2` is equivalent to `other`.
  id: totrans-697
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个`ei`是[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")，它们属于同一个[`Module`](#sympy.polys.numberfields.modules.Module
    "sympy.polys.numberfields.modules.Module")，`e1`等效于`self`，`e2`等效于`other`。
- en: 'Raises:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: '**UnificationFailed**'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '**UnificationFailed**'
- en: If `self` and `other` have no common ancestor module.
  id: totrans-700
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`self`和`other`没有共同的祖先模块。
- en: Explanation
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: Explanation
- en: We search for the nearest common ancestor module for the pair of elements, and
    represent each one there.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索元素对的最近共同祖先模块，并在那里表示每个元素。
- en: '[PRE109]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Subclass for [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") instances whose module is a
    [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis").
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 子类，用于模块为[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")的[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")实例。
- en: '[PRE110]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Access the defining polynomial of the [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis").
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")的定义多项式。
- en: '[PRE111]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Create a Basic expression from `self`.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 从`self`创建一个基本表达式。
- en: '[PRE112]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Return a [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")
    to be used when expressing this element as a polynomial.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个[`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")，用于在多项式中表示此元素。
- en: If we have an associated [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField") whose primitive element has an alias symbol,
    we use that. Otherwise we use the variable of the minimal polynomial defining
    the power basis to which we belong.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个关联的[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")，其原始元素具有别名符号，我们使用它。否则，我们使用定义功率基底的极小多项式的变量。
- en: '[PRE113]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Say whether this element represents a rational number.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 判断此元素是否表示一个有理数。
- en: '[PRE114]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Compute the norm of this number.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 计算该数的范数。
- en: '[PRE115]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Obtain the numerator as a polynomial over [ZZ](domainsref.html#zz).
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 将该数的分子作为多项式获取在[ZZ](domainsref.html#zz)上。
- en: '[PRE116]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Obtain the number as a polynomial over [QQ](domainsref.html#qq).
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 将该数作为多项式获取在[QQ](domainsref.html#qq)上。
- en: '[PRE117]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Convert to an equivalent [`ANP`](domainsref.html#sympy.polys.polyclasses.ANP
    "sympy.polys.polyclasses.ANP").
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为等效的[`ANP`](domainsref.html#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")。
- en: '[PRE118]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Try to convert to an equivalent [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber").
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试转换为等效的[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")。
- en: 'Returns:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")'
- en: 'Raises:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: '**StructureError**'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '**StructureError**'
- en: If the [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")
    to which this element belongs does not have an associated [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField").
  id: totrans-728
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果这个元素所属的[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis "sympy.polys.numberfields.modules.PowerBasis")没有关联的[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")。
- en: Explanation
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: Explanation
- en: In general, the conversion from an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") to a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") throws away information,
    because an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") specifies a complex embedding, while a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") does not. However, in some
    cases it is possible to convert a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") back into an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber"), namely when the associated [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis") has a reference to an [`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField").
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，从[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber "sympy.core.numbers.AlgebraicNumber")到[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")的转换会丢失信息，因为[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")指定了一个复数嵌入，而[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")则没有。然而，在某些情况下，可以将[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")转换回[`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber")，特别是当相关的[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")引用了一个[`AlgebraicField`](domainsref.html#sympy.polys.domains.AlgebraicField
    "sympy.polys.domains.AlgebraicField")时。
- en: '[PRE119]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Factory function which builds a [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement"), but ensures that it is a [`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement") if the module is a [`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis").
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂函数用于构建一个[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")，但如果模块是[`PowerBasis`](#sympy.polys.numberfields.modules.PowerBasis
    "sympy.polys.numberfields.modules.PowerBasis")，则确保它是[`PowerBasisElement`](#sympy.polys.numberfields.modules.PowerBasisElement
    "sympy.polys.numberfields.modules.PowerBasisElement")。
- en: '[PRE120]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: A homomorphism from one module to another.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个模块到另一个模块的同态映射。
- en: '[PRE121]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Parameters:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**domain** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '**domain**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The domain of the mapping.
  id: totrans-738
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 映射的定义域。
- en: '**codomain** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '**codomain**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The codomain of the mapping.
  id: totrans-740
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 映射的值域。
- en: '**mapping** : callable'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '**mapping**：可调用对象'
- en: An arbitrary callable is accepted, but should be chosen so as to represent an
    actual module homomorphism. In particular, should accept elements of *domain*
    and return elements of *codomain*.
  id: totrans-742
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任意可调用对象都可以被接受，但应选择代表实际模块同态的对象。特别是，应该接受*定义域*的元素并返回*值域*的元素。
- en: Examples
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE122]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Compute a Submodule representing the kernel of this homomorphism.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代表这个同态的核心的子模块。
- en: 'Parameters:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**modulus** : int, optional'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '**modulus**：int，可选'
- en: A positive prime number \(p\) if the kernel should be computed mod \(p\).
  id: totrans-749
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果核心应该在模数`p`下计算，则为正的素数\(p\)。
- en: 'Returns:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Submodule`](#sympy.polys.numberfields.modules.Submodule "sympy.polys.numberfields.modules.Submodule")'
- en: This submodule’s generators span the kernel of this homomorphism over [ZZ](domainsref.html#zz),
    or else over [GF(p)](domainsref.html#gf-p) if a modulus was given.
  id: totrans-752
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个子模块的生成元跨越在[ZZ](domainsref.html#zz)上这个同态的核心，或者如果给定了模数，那么在[GF(p)](domainsref.html#gf-p)上跨越。
- en: '[PRE124]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Compute the matrix of this homomorphism.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 计算这个同态的矩阵。
- en: 'Parameters:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**modulus** : int, optional'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '**modulus**：int，可选'
- en: A positive prime number \(p\) if the matrix should be reduced mod \(p\).
  id: totrans-757
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果矩阵应该在模数`p`下被约简，则为正的素数\(p\)。
- en: 'Returns:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
- en: The matrix is over [ZZ](domainsref.html#zz), or else over [GF(p)](domainsref.html#gf-p)
    if a modulus was given.
  id: totrans-760
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果矩阵是在[ZZ](domainsref.html#zz)上，否则是在[GF(p)](domainsref.html#gf-p)上，如果给定了模数。
- en: '[PRE125]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: A homomorphism from one module to itself.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个模到其自身的同态映射。
- en: '[PRE126]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Parameters:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**domain** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义域**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The common domain and codomain of the mapping.
  id: totrans-766
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 映射的公共定义域和值域。
- en: '**mapping** : callable'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '**映射**：可调用'
- en: An arbitrary callable is accepted, but should be chosen so as to represent an
    actual module endomorphism. In particular, should accept and return elements of
    *domain*.
  id: totrans-768
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 接受任意可调用对象，但应选择以表示实际的模自同态。特别地，应接受并返回 *定义域* 的元素。
- en: '[PRE127]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: An inner endomorphism on a module, i.e. the endomorphism corresponding to multiplication
    by a fixed element.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 模上的内部自同态，即乘以固定元素所对应的自同态。
- en: '[PRE128]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Parameters:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**domain** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义域**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The domain and codomain of the endomorphism.
  id: totrans-774
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自同态的定义域和值域。
- en: '**multiplier** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '**乘子**：[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: The element \(a\) defining the mapping as \(x \mapsto a x\).
  id: totrans-776
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 元素 \(a\) 定义映射为 \(x \mapsto a x\)。
- en: '[PRE129]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The ring of endomorphisms on a module.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模的自同态环。
- en: '[PRE130]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Parameters:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**domain** : [`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义域**：[`Module`](#sympy.polys.numberfields.modules.Module "sympy.polys.numberfields.modules.Module")'
- en: The domain and codomain of the endomorphisms.
  id: totrans-782
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自同态的定义域和值域。
- en: '[PRE131]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Form an inner endomorphism belonging to this endomorphism ring.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 形成属于这个自同态环的内部自同态。
- en: 'Parameters:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**multiplier** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**乘子**：[`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement "sympy.polys.numberfields.modules.ModuleElement")'
- en: Element \(a\) defining the inner endomorphism \(x \mapsto a x\).
  id: totrans-787
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义内部自同态的元素 \(a\)，即 \(x \mapsto a x\)。
- en: 'Returns:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`InnerEndomorphism`](#sympy.polys.numberfields.modules.InnerEndomorphism "sympy.polys.numberfields.modules.InnerEndomorphism")'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InnerEndomorphism`](#sympy.polys.numberfields.modules.InnerEndomorphism "sympy.polys.numberfields.modules.InnerEndomorphism")'
- en: '[PRE132]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Represent an element of this endomorphism ring, as a single column vector.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个自同态环的元素表示为一个单列向量。
- en: 'Parameters:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**element** : [`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism
    "sympy.polys.numberfields.modules.ModuleEndomorphism") belonging to this ring.'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**：[`ModuleEndomorphism`](#sympy.polys.numberfields.modules.ModuleEndomorphism
    "sympy.polys.numberfields.modules.ModuleEndomorphism") 属于这个环。'
- en: 'Returns:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
- en: Column vector equalling the vertical stacking of all the columns of the matrix
    that represents the given *element* as a mapping.
  id: totrans-796
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列向量等于将表示给定 *元素* 的矩阵的所有列竖直堆叠。
- en: Explanation
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Let \(M\) be a module, and \(E\) its ring of endomorphisms. Let \(N\) be another
    module, and consider a homomorphism \(\varphi: N \rightarrow E\). In the event
    that \(\varphi\) is to be represented by a matrix \(A\), each column of \(A\)
    must represent an element of \(E\). This is possible when the elements of \(E\)
    are themselves representable as matrices, by stacking the columns of such a matrix
    into a single column.'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: '设 \(M\) 是一个模，\(E\) 是其自同态环。设 \(N\) 是另一个模，并考虑一个同态 \(\varphi: N \rightarrow E\)。如果
    \(\varphi\) 要用矩阵 \(A\) 表示，那么 \(A\) 的每一列必须表示 \(E\) 的一个元素。当 \(E\) 的元素本身可以表示为矩阵时，可以通过将这样一个矩阵的列堆叠成单列来实现这一点。'
- en: This method supports calculating such matrices \(A\), by representing an element
    of this endomorphism ring first as a matrix, and then stacking that matrix’s columns
    into a single column.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法支持计算这样的矩阵 \(A\)，首先将这个自同态环的一个元素表示为矩阵，然后将该矩阵的列堆叠成单列。
- en: Examples
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: Note that in these examples we print matrix transposes, to make their columns
    easier to inspect.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这些示例中，我们打印矩阵的转置，以便更容易检查其列。
- en: '[PRE133]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Let \(\zeta\) be a primitive 5th root of unity, a generator of our field, and
    consider the inner endomorphism \(\tau\) on the ring of integers, induced by \(\zeta\):'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 设 \(\zeta\) 是一个原始的五次单位根，是我们域的生成元，考虑由 \(\zeta\) 引出的整数环上的内部自同态 \(\tau\)：
- en: '[PRE134]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The matrix representation of \(\tau\) is as expected. The first column shows
    that multiplying by \(\zeta\) carries \(1\) to \(\zeta\), the second column that
    it carries \(\zeta\) to \(\zeta^2\), and so forth.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵表示的 \(\tau\) 如预期所示。第一列显示乘以 \(\zeta\) 将 \(1\) 带到 \(\zeta\)，第二列显示将 \(\zeta\)
    带到 \(\zeta^2\)，依此类推。
- en: 'The `represent` method of the endomorphism ring `E` stacks these into a single
    column:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 环 `E` 的同态的 `represent` 方法将它们堆叠到单列中：
- en: '[PRE135]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'This is useful when we want to consider a homomorphism \(\varphi\) having `E`
    as codomain:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要考虑一个具有 `E` 作为余域的同态 \(\varphi\) 时，这是有用的：
- en: '[PRE136]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'and we want to compute the matrix of such a homomorphism:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望计算这样一个同态的矩阵：
- en: '[PRE137]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Note that the stacked matrix of \(\tau\) occurs as the second column in this
    example. This is because \(\zeta\) is the second basis element of `M`, and \(\varphi(\zeta)
    = \tau\).
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，\(\tau\) 的堆叠矩阵在此示例中作为第二列出现。这是因为 \(\zeta\) 是 `M` 的第二个基元素，并且 \(\varphi(\zeta)
    = \tau\)。
- en: '[PRE138]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Find a polynomial of least degree (not necessarily irreducible) satisfied by
    an element of a finitely-generated ring with unity.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个在有单位元的有限生成环中满足一个元素的最小次数（不一定是不可约的）的多项式。
- en: 'Parameters:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**alpha** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '**alpha** : [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement")'
- en: The element whose min poly is to be found, and whose module has multiplication
    and starts with unity.
  id: totrans-817
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 期望找到其最小多项式的元素，并且其模具有乘法并以单位元开始。
- en: '**domain** : [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '**domain** : [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")'
- en: The desired domain of the polynomial.
  id: totrans-819
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 多项式的期望域。
- en: '**x** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    optional'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '**x** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")，可选'
- en: The desired variable for the polynomial.
  id: totrans-821
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 多项式的期望变量。
- en: '**powers** : list, optional'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '**powers** : 列表，可选'
- en: If desired, pass an empty list. The powers of *alpha* (as [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") instances) from the zeroth up
    to the degree of the min poly will be recorded here, as we compute them.
  id: totrans-823
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果需要，传递空列表。从零到最小多项式的次数，将 *alpha* 的幂（作为 [`ModuleElement`](#sympy.polys.numberfields.modules.ModuleElement
    "sympy.polys.numberfields.modules.ModuleElement") 实例）记录在此处，我们在计算它们时。
- en: 'Returns:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly"),
    `None`'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")，`None`'
- en: The minimal polynomial for alpha, or `None` if no polynomial could be found
    over the desired domain.
  id: totrans-826
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于 alpha 的最小多项式，如果在期望的域上找不到多项式，则返回 `None`。
- en: 'Raises:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '**MissingUnityError**'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '**MissingUnityError**'
- en: If the module to which alpha belongs does not start with unity.
  id: totrans-829
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 alpha 属于的模不以单位元开头。
- en: '**ClosureFailure**'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '**ClosureFailure**'
- en: If the module to which alpha belongs is not closed under multiplication.
  id: totrans-831
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 alpha 属于的模不闭合于乘法。
- en: Examples
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: For the \(n\)th cyclotomic field, \(n\) an odd prime, consider the quadratic
    equation whose roots are the two periods of length \((n-1)/2\). Article 356 of
    Gauss tells us that we should get \(x^2 + x - (n-1)/4\) or \(x^2 + x + (n+1)/4\)
    according to whether \(n\) is 1 or 3 mod 4, respectively.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第 \(n\) 个旋缠域，\(n\) 为奇素数，考虑其根为长度为 \((n-1)/2\) 的两个周期的二次方程。高斯的文章 356 告诉我们，根据
    \(n\) 是 1 或 3 模 4，我们应该得到 \(x^2 + x - (n-1)/4\) 或 \(x^2 + x + (n+1)/4\)。
- en: '[PRE139]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Utilities
  id: totrans-835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实用程序
- en: '[PRE140]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Test whether an argument is of an acceptable type to be used as a rational number.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 测试参数是否适合用作有理数。
- en: Explanation
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns `True` on any argument of type `int`, [ZZ](domainsref.html#zz), or [QQ](domainsref.html#qq).
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类型为 `int`、[ZZ](domainsref.html#zz) 或 [QQ](domainsref.html#qq) 的任何参数返回 `True`。
- en: See also
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`is_int`](#sympy.polys.numberfields.utilities.is_int "sympy.polys.numberfields.utilities.is_int")'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_int`](#sympy.polys.numberfields.utilities.is_int "sympy.polys.numberfields.utilities.is_int")'
- en: '[PRE141]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Test whether an argument is of an acceptable type to be used as an integer.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 测试参数是否适合用作整数。
- en: Explanation
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns `True` on any argument of type `int` or [ZZ](domainsref.html#zz).
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类型为 `int` 或 [ZZ](domainsref.html#zz) 的任何参数返回 `True`。
- en: See also
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`is_rat`](#sympy.polys.numberfields.utilities.is_rat "sympy.polys.numberfields.utilities.is_rat")'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_rat`](#sympy.polys.numberfields.utilities.is_rat "sympy.polys.numberfields.utilities.is_rat")'
- en: '[PRE142]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Given any argument on which [`is_rat()`](#sympy.polys.numberfields.utilities.is_rat
    "sympy.polys.numberfields.utilities.is_rat") is `True`, return the numerator and
    denominator of this number.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 [`is_rat()`](#sympy.polys.numberfields.utilities.is_rat "sympy.polys.numberfields.utilities.is_rat")
    返回为 `True` 的任何参数，返回此数的分子和分母。
- en: See also
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_rat`](#sympy.polys.numberfields.utilities.is_rat "sympy.polys.numberfields.utilities.is_rat")'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_rat`](#sympy.polys.numberfields.utilities.is_rat "sympy.polys.numberfields.utilities.is_rat")'
- en: '[PRE143]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Extract a fundamental discriminant from an integer *a*.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 从整数 *a* 中提取基本判别式。
- en: 'Parameters:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a: int, must be 0 or 1 mod 4**'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '**a: int, 必须是 0 或 1 模 4**'
- en: 'Returns:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Pair `(D, F)` of dictionaries.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 字典对 `(D, F)`。
- en: 'Raises:'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: '**ValueError**'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '**ValueError**'
- en: If *a* is not 0 or 1 mod 4.
  id: totrans-860
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 *a* 不是 4 的倍数余 0 或 1.
- en: Explanation
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given any rational integer *a* that is 0 or 1 mod 4, write \(a = d f^2\), where
    \(d\) is either 1 or a fundamental discriminant, and return a pair of dictionaries
    `(D, F)` giving the prime factorizations of \(d\) and \(f\) respectively, in the
    same format returned by [`factorint()`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint").
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 给定任意 0 或 1 模 4 的有理整数 *a*，写成 \(a = d f^2\)，其中 \(d\) 要么是 1 要么是基本判别式，并返回给定的由 [`factorint()`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint") 返回格式相同的字典对 `(D, F)`，分别给出 \(d\) 和 \(f\) 的素因子分解。
- en: A fundamental discriminant \(d\) is different from unity, and is either 1 mod
    4 and squarefree, or is 0 mod 4 and such that \(d/4\) is squarefree and 2 or 3
    mod 4\. This is the same as being the discriminant of some quadratic field.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 基本判别式 \(d\) 不同于单位，并且要么是 4 的倍数余 1 并且无平方因子，要么是 4 的倍数余 0 并且 \(d/4\) 是无平方因子并且余 2
    或 3。这等同于某些二次域的判别式。
- en: Examples
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE144]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'For comparison:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 作为比较：
- en: '[PRE145]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: References
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R805](#id11)]'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R805](#id11)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.* (See Prop. 5.1.3)
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算代数数论课程.*（见 Prop. 5.1.3）
- en: '[PRE146]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Compute the powers of an algebraic integer.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代数整数的幂。
- en: Explanation
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given an algebraic integer \(\theta\) by its monic irreducible polynomial `T`
    over [ZZ](domainsref.html#zz), this class computes representations of arbitrarily
    high powers of \(\theta\), as [ZZ](domainsref.html#zz)-linear combinations over
    \(\{1, \theta, \ldots, \theta^{n-1}\}\), where \(n = \deg(T)\).
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个代数整数 \(\theta\) 由其在 [ZZ](domainsref.html#zz) 上的首一不可约多项式 `T`，此类计算 \(\theta\)
    的任意高次幂的表示，作为 [ZZ](domainsref.html#zz) 上的线性组合，其中 \(n = \deg(T)\)。
- en: The representations are computed using the linear recurrence relations for powers
    of \(\theta\), derived from the polynomial `T`. See [1], Sec. 4.2.2.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 利用多项式 `T` 导出的 \(\theta\) 的幂的线性递归关系计算表示。见 [1]，第 4.2.2 节。
- en: Optionally, the representations may be reduced with respect to a modulus.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，可以将表示与模数减少。
- en: Examples
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE147]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: References
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R806](#id12)]'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R806](#id12)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.*
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算代数数论课程.*
- en: '[PRE148]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Parameters:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '**T** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")'
- en: The monic irreducible polynomial over [ZZ](domainsref.html#zz) defining the
    algebraic integer.
  id: totrans-885
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义代数整数的首一不可约多项式在 [ZZ](domainsref.html#zz) 上。
- en: '**modulus** : int, None, optional'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '**modulus** : int, None, 可选'
- en: If not `None`, all representations will be reduced w.r.t. this.
  id: totrans-887
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果不是 `None`，所有表示将被减少到这个。
- en: '[PRE149]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Generate coefficients for searching through polynomials.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 为搜索多项式生成系数。
- en: 'Parameters:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**m** : int'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '**m** : int'
- en: Length of coeff list.
  id: totrans-892
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 系数列表的长度。
- en: '**R** : int'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '**R** : int'
- en: Initial max abs val for coeffs (will increase as search proceeds).
  id: totrans-894
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 系数的初始最大绝对值（搜索进行时将增加）。
- en: 'Returns:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: generator
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: generator
- en: Infinite generator of lists of coefficients.
  id: totrans-897
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列表系数的无限生成器。
- en: Explanation
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Lead coeff is always non-negative. Explore all combinations with coeffs bounded
    in absolute value before increasing the bound. Skip the all-zero list, and skip
    any repeats. See examples.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 导数系数始终为非负。在增加界限前，探索绝对值受限的所有组合。跳过全零列表，跳过任何重复。见示例。
- en: Examples
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE150]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Extend a basis for a subspace to a basis for the whole space.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 将子空间的基扩展为整个空间的基。
- en: 'Parameters:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**M** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**M** : [`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
- en: The columns give the basis for the subspace.
  id: totrans-906
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列给出子空间的基。
- en: 'Returns:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DomainMatrix`](domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
- en: This matrix is invertible and its first \(r\) columns equal *M*.
  id: totrans-909
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此矩阵是可逆的，其前 \(r\) 列等于 *M*。
- en: 'Raises:'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 提升：
- en: '**DMRankError**'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '**DMRankError**'
- en: If *M* was not of maximal rank.
  id: totrans-912
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 *M* 不是最大秩。
- en: Explanation
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given an \(n \times r\) matrix *M* of rank \(r\) (so \(r \leq n\)), this function
    computes an invertible \(n \times n\) matrix \(B\) such that the first \(r\) columns
    of \(B\) equal *M*.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个秩为 \(r\) 的 \(n \times r\) 矩阵 *M*（因此 \(r \leq n\)），此函数计算一个可逆的 \(n \times
    n\) 矩阵 \(B\)，使得 \(B\) 的前 \(r\) 列等于 *M*。
- en: This operation can be interpreted as a way of extending a basis for a subspace,
    to give a basis for the whole space.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作可以解释为扩展子空间的基，从而给出整个空间的基。
- en: To be precise, suppose you have an \(n\)-dimensional vector space \(V\), with
    basis \(\{v_1, v_2, \ldots, v_n\}\), and an \(r\)-dimensional subspace \(W\) of
    \(V\), spanned by a basis \(\{w_1, w_2, \ldots, w_r\}\), where the \(w_j\) are
    given as linear combinations of the \(v_i\). If the columns of *M* represent the
    \(w_j\) as such linear combinations, then the columns of the matrix \(B\) computed
    by this function give a new basis \(\{u_1, u_2, \ldots, u_n\}\) for \(V\), again
    relative to the \(\{v_i\}\) basis, and such that \(u_j = w_j\) for \(1 \leq j
    \leq r\).
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，假设您有一个 \(n\)-维向量空间 \(V\)，其基为 \(\{v_1, v_2, \ldots, v_n\}\)，以及 \(V\) 的一个
    \(r\)-维子空间 \(W\)，其由基 \(\{w_1, w_2, \ldots, w_r\}\) 张成，其中 \(w_j\) 被给出作为 \(v_i\)
    的线性组合。如果 *M* 的列表示这些 \(w_j\) 作为这种线性组合，则此函数计算的矩阵 \(B\) 的列给出一个新的基 \(\{u_1, u_2, \ldots,
    u_n\}\) 用于 \(V\)，再次相对于 \(\{v_i\}\) 基，并且对于 \(1 \leq j \leq r\)，有 \(u_j = w_j\)。
- en: Examples
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Note: The function works in terms of columns, so in these examples we print
    matrix transposes in order to make the columns easier to inspect.'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：该函数按列处理，因此在这些示例中，我们打印矩阵的转置，以便更容易检查列。
- en: '[PRE152]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: References
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R807](#id13)]'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R807](#id13)]'
- en: Cohen, H. *A Course in Computational Algebraic Number Theory* (See Sec. 2.3.2.)
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: Cohen, H. *计算代数数论课程*（见第 2.3.2 节。）
- en: '[PRE154]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Find a rational isolating interval for a real algebraic number.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 为实数代数数找到一个有理隔离区间。
- en: 'Parameters:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**alg** : str, int, [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '**alg**：str, int, [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
- en: The algebraic number to be isolated. Must be a real number, to use this particular
    function. However, see also [`Poly.intervals()`](reference.html#sympy.polys.polytools.Poly.intervals
    "sympy.polys.polytools.Poly.intervals"), which isolates complex roots when you
    pass `all=True`.
  id: totrans-928
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要隔离的代数数。必须是实数，才能使用此特定函数。但是，另请参阅[`Poly.intervals()`](reference.html#sympy.polys.polytools.Poly.intervals
    "sympy.polys.polytools.Poly.intervals")，当您传递`all=True`时，它可以隔离复数根。
- en: '**eps** : positive element of [QQ](domainsref.html#qq), None, optional (default=None)'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '**eps**：正元素 [QQ](domainsref.html#qq) 中的元素，None，可选（默认为None）'
- en: Precision to be passed to [`Poly.refine_root()`](reference.html#sympy.polys.polytools.Poly.refine_root
    "sympy.polys.polytools.Poly.refine_root")
  id: totrans-930
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要传递给[`Poly.refine_root()`](reference.html#sympy.polys.polytools.Poly.refine_root
    "sympy.polys.polytools.Poly.refine_root")的精度。
- en: '**fast** : boolean, optional (default=False)'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '**fast**：布尔值，可选（默认为False）'
- en: Say whether fast refinement procedure should be used. (Will be passed to [`Poly.refine_root()`](reference.html#sympy.polys.polytools.Poly.refine_root
    "sympy.polys.polytools.Poly.refine_root").)
  id: totrans-932
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 说明是否应该使用快速细化过程。（将传递给[`Poly.refine_root()`](reference.html#sympy.polys.polytools.Poly.refine_root
    "sympy.polys.polytools.Poly.refine_root").）
- en: 'Returns:'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Pair of rational numbers defining an isolating interval for the given
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 一对有理数，定义给定代数数的隔离区间
- en: algebraic number.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 代数数。
- en: Examples
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE155]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: See also
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Poly.intervals`](reference.html#sympy.polys.polytools.Poly.intervals "sympy.polys.polytools.Poly.intervals")'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Poly.intervals`](reference.html#sympy.polys.polytools.Poly.intervals "sympy.polys.polytools.Poly.intervals")'
