- en: numpy.choose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.choose
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.choose.html](https://numpy.org/doc/1.26/reference/generated/numpy.choose.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.choose.html](https://numpy.org/doc/1.26/reference/generated/numpy.choose.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Construct an array from an index array and a list of arrays to choose from.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从索引数组和要选择的数组列表构造数组。
- en: 'First of all, if confused or uncertain, definitely look at the Examples - in
    its full generality, this function is less simple than it might seem from the
    following code description (below ndi = `numpy.lib.index_tricks`):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果感到困惑或不确定，请务必查看示例 - 在其完整范围内，此函数比下面的代码描述（下面是 `numpy.lib.index_tricks`）看起来要复杂得多。
- en: '`np.choose(a,c) == np.array([c[a[I]][I] for I in ndi.ndindex(a.shape)])`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.choose(a, c) == np.array([c[a[I]][I] for I in ndi.ndindex(a.shape)])`.'
- en: 'But this omits some subtleties. Here is a fully general summary:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 但这会忽略一些微妙之处。这里是一个完全通用的总结：
- en: 'Given an “index” array (*a*) of integers and a sequence of `n` arrays (*choices*),
    *a* and each choice array are first broadcast, as necessary, to arrays of a common
    shape; calling these *Ba* and *Bchoices[i], i = 0,…,n-1* we have that, necessarily,
    `Ba.shape == Bchoices[i].shape` for each `i`. Then, a new array with shape `Ba.shape`
    is created as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 给定整数“索引”数组（*a*）和 `n` 个数组（*choices*）的序列，*a* 和每个选择的数组首先按需广播为共同形状的数组；将这些称为 *Ba*
    和 *Bchoices[i], i = 0,…,n-1*，我们有必然地，对于每个 `i`，`Ba.shape == Bchoices[i].shape`。然后，创建一个形状为
    `Ba.shape` 的新数组，如下所示：
- en: if `mode='raise'` (the default), then, first of all, each element of `a` (and
    thus `Ba`) must be in the range `[0, n-1]`; now, suppose that `i` (in that range)
    is the value at the `(j0, j1, ..., jm)` position in `Ba` - then the value at the
    same position in the new array is the value in `Bchoices[i]` at that same position;
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `mode='raise'`（默认），则首先，`a`（因此 `Ba`）的每个元素必须在 `[0, n-1]` 范围内；现在，假设 `i`（在该范围内）是
    `Ba` 中 `(j0, j1, ..., jm)` 位置的值 - 那么在新数组中相同位置的值是 `Bchoices[i]` 在同一位置处的值；
- en: if `mode='wrap'`, values in *a* (and thus *Ba*) may be any (signed) integer;
    modular arithmetic is used to map integers outside the range *[0, n-1]* back into
    that range; and then the new array is constructed as above;
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若 `mode='wrap'`，*a*（因此 *Ba*）中的值可以是任意（有符号）整数；使用模运算将范围在 *[0, n-1]* 之外的整数映射回该范围；然后构造新数组如上；
- en: if `mode='clip'`, values in *a* (and thus `Ba`) may be any (signed) integer;
    negative integers are mapped to 0; values greater than `n-1` are mapped to `n-1`;
    and then the new array is constructed as above.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `mode='clip'`，*a*（因此 `Ba`）中的值可以是任意（有符号）整数；负整数映射为0；大于 `n-1` 的值映射为 `n-1`；然后构造新数组如上。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a**int array'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**整数数组'
- en: This array must contain integers in `[0, n-1]`, where `n` is the number of choices,
    unless `mode=wrap` or `mode=clip`, in which cases any integers are permissible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该数组必须包含 `[0, n-1]` 范围内的整数，其中 `n` 是选择的数量，除非 `mode=wrap` 或 `mode=clip`，在这种情况下，任何整数都是可接受的。
- en: '**choices**sequence of arrays'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**choices**数组序列'
- en: Choice arrays. *a* and all of the choices must be broadcastable to the same
    shape. If *choices* is itself an array (not recommended), then its outermost dimension
    (i.e., the one corresponding to `choices.shape[0]`) is taken as defining the “sequence”.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择数组。*a* 和所有 choices 必须可广播为相同形状。如果 *choices* 本身是一个数组（不建议），则其最外层维度（即对应于 `choices.shape[0]`
    的那一维）被视为定义“序列”。
- en: '**out**array, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**数组，可选'
- en: If provided, the result will be inserted into this array. It should be of the
    appropriate shape and dtype. Note that *out* is always buffered if `mode='raise'`;
    use other modes for better performance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了，则结果将插入到此数组中。它应具有适当的形状和dtype。请注意，如果 `mode='raise'`，则始终缓冲 *out*；用其他模式以获得更好的性能。
- en: '**mode**{‘raise’ (default), ‘wrap’, ‘clip’}, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**mode**{‘raise’（默认），‘wrap’，‘clip’}，可选'
- en: 'Specifies how indices outside `[0, n-1]` will be treated:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 指定 `[0, n-1]` 之外的索引如何处理：
- en: '‘raise’ : an exception is raised'
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘raise’：引发异常
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘wrap’ : value becomes value mod `n`'
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘wrap’：值变为值对 `n` 取模
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘clip’ : values < 0 are mapped to 0, values > n-1 are mapped to n-1'
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘clip’：值小于 0 映射为 0，值大于 n-1 映射为 n-1
- en: 'Returns:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**merged_array**array'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**merged_array**数组'
- en: The merged result.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 合并的结果。
- en: 'Raises:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: 'ValueError: shape mismatch'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'ValueError: 形状不匹配'
- en: If *a* and each choice array are not all broadcastable to the same shape.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *a* 和每个选择的数组不能都广播为相同形状。
- en: See also
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ndarray.choose`](numpy.ndarray.choose.html#numpy.ndarray.choose "numpy.ndarray.choose")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndarray.choose`](numpy.ndarray.choose.html#numpy.ndarray.choose "numpy.ndarray.choose")'
- en: equivalent method
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 等效方法
- en: '[`numpy.take_along_axis`](numpy.take_along_axis.html#numpy.take_along_axis
    "numpy.take_along_axis")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.take_along_axis`](numpy.take_along_axis.html#numpy.take_along_axis
    "numpy.take_along_axis")'
- en: Preferable if *choices* is an array
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*choices*是一个数组，则最好
- en: Notes
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To reduce the chance of misinterpretation, even though the following “abuse”
    is nominally supported, *choices* should neither be, nor be thought of as, a single
    array, i.e., the outermost sequence-like container should be either a list or
    a tuple.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少误解的机会，即使下面的“滥用”在名义上是支持的，*choices*也不应该是单个数组，即，最外层的类似序列的容器应该是一个列表或元组。
- en: Examples
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A couple examples illustrating how choose broadcasts:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例说明选择的广播方式：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
