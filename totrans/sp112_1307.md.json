["```py\nscipy.stats.pearsonr(x, y, *, alternative='two-sided', method=None)\n```", "```py\ndist = scipy.stats.beta(n/2 - 1, n/2 - 1, loc=-1, scale=2) \n```", "```py\np = 2*dist.cdf(-abs(r)) \n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> x, y = [1, 2, 3, 4, 5, 6, 7], [10, 9, 2.5, 6, 4, 3, 2]\n>>> res = stats.pearsonr(x, y)\n>>> res\nPearsonRResult(statistic=-0.828503883588428, pvalue=0.021280260007523286) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> method = stats.PermutationMethod(n_resamples=np.inf, random_state=rng)\n>>> stats.pearsonr(x, y, method=method)\nPearsonRResult(statistic=-0.828503883588428, pvalue=0.028174603174603175) \n```", "```py\n>>> method = stats.MonteCarloMethod(rvs=(rng.uniform, rng.uniform))\n>>> stats.pearsonr(x, y, method=method)\nPearsonRResult(statistic=-0.828503883588428, pvalue=0.0188) \n```", "```py\n>>> res.confidence_interval(confidence_level=0.9)\nConfidenceInterval(low=-0.9644331982722841, high=-0.3460237473272273) \n```", "```py\n>>> method = stats.BootstrapMethod(method='BCa', random_state=rng)\n>>> res.confidence_interval(confidence_level=0.9, method=method)\nConfidenceInterval(low=-0.9983163756488651, high=-0.22771001702132443)  # may vary \n```", "```py\n>>> rng = np.random.default_rng()\n>>> s = 0.5\n>>> x = stats.norm.rvs(size=500, random_state=rng)\n>>> e = stats.norm.rvs(scale=s, size=500, random_state=rng)\n>>> y = x + e\n>>> stats.pearsonr(x, y).statistic\n0.9001942438244763 \n```", "```py\n>>> 1/np.sqrt(1 + s**2)\n0.8944271909999159 \n```", "```py\n>>> y = np.abs(x)\n>>> stats.pearsonr(x, y)\nPearsonRResult(statistic=-0.05444919272687482, pvalue=0.22422294836207743) \n```", "```py\n>>> y = np.where(x < 0, x, 0)\n>>> stats.pearsonr(x, y)\nPearsonRResult(statistic=0.861985781588, pvalue=4.813432002751103e-149) \n```"]