- en: numpy.cross
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.cross.html](https://numpy.org/doc/1.26/reference/generated/numpy.cross.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the cross product of two (arrays of) vectors.
  prefs: []
  type: TYPE_NORMAL
- en: The cross product of *a* and *b* in \(R^3\) is a vector perpendicular to both
    *a* and *b*. If *a* and *b* are arrays of vectors, the vectors are defined by
    the last axis of *a* and *b* by default, and these axes can have dimensions 2
    or 3\. Where the dimension of either *a* or *b* is 2, the third component of the
    input vector is assumed to be zero and the cross product calculated accordingly.
    In cases where both input vectors have dimension 2, the z-component of the cross
    product is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Components of the first vector(s).
  prefs: []
  type: TYPE_NORMAL
- en: '**b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Components of the second vector(s).
  prefs: []
  type: TYPE_NORMAL
- en: '**axisa**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis of *a* that defines the vector(s). By default, the last axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axisb**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis of *b* that defines the vector(s). By default, the last axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axisc**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis of *c* containing the cross product vector(s). Ignored if both input vectors
    have dimension 2, as the return is scalar. By default, the last axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If defined, the axis of *a*, *b* and *c* that defines the vector(s) and cross
    product(s). Overrides *axisa*, *axisb* and *axisc*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Vector cross product(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: When the dimension of the vector(s) in *a* and/or *b* does not equal 2 or 3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`inner`](numpy.inner.html#numpy.inner "numpy.inner")'
  prefs: []
  type: TYPE_NORMAL
- en: Inner product
  prefs: []
  type: TYPE_NORMAL
- en: '[`outer`](numpy.outer.html#numpy.outer "numpy.outer")'
  prefs: []
  type: TYPE_NORMAL
- en: Outer product.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ix_`](numpy.ix_.html#numpy.ix_ "numpy.ix_")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct index arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: Supports full broadcasting of the inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Vector cross-product.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: One vector with dimension 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Equivalently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Both vectors with dimension 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Multiple vector cross-products. Note that the direction of the cross product
    vector is defined by the *right-hand rule*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The orientation of *c* can be changed using the *axisc* keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Change the vector definition of *x* and *y* using *axisa* and *axisb*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
