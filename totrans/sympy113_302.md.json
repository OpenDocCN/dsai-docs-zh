["```py\nassert function(arguments) == result \n```", "```py\n# from sympy/functions/elementary/tests/test_trigonometric.py\n\ndef test_cos_series():\n    assert cos(x).series(x, 0, 9) == \\\n        1 - x**2/2 + x**4/24 - x**6/720 + x**8/40320 + O(x**9) \n```", "```py\n./bin/test \n```", "```py\n./bin/doctest \n```", "```py\n./bin/test solvers \n```", "```py\npytest -m 'not slow' sympy/solvers \n```", "```py\n_____________________________________________________________________________________________________\n_________________ sympy/printing/pretty/tests/test_pretty.py:test_upretty_sub_super _________________\nTraceback (most recent call last):\n  File \"/home/oscar/current/sympy/sympy.git/sympy/printing/pretty/tests/test_pretty.py\", line 317, in test_upretty_sub_super\n    assert upretty( Symbol('beta_1_2') ) == 'β₁₂'\nAssertionError \n```", "```py\n./bin/test sympy/printing/pretty/tests/test_pretty.py::test_upretty_sub_super \n```", "```py\npytest sympy/printing/pretty/tests/test_pretty.py::test_upretty_sub_super \n```", "```py\n>>> residue(cot(pi*x)/((x - 1)*(x - 2) + 1), x, S(3)/2 - sqrt(3)*I/2) \n-sqrt(3)*tanh(sqrt(3)*pi/2)/3\n>>> residue(cot(pi*x)/(x**2 - 3*x + 3), x, S(3)/2 - sqrt(3)*I/2) \n0 \n```", "```py\n# In sympy/functions/elementary/tests/test_trigonometric.py\n\ndef test_tan():\n    ...\n    # <This test was already existing. The following was added to the end>\n\n    # https://github.com/sympy/sympy/issues/21177\n    f = tan(pi*(x + S(3)/2))/(3*x)\n    assert f.as_leading_term(x) == -1/(3*pi*x**2) \n```", "```py\n# In sympy/core/tests/test_expr.py\n\ndef test_as_leading_term():\n    ...\n    # <This test was already existing. The following was added to the end>\n\n    # https://github.com/sympy/sympy/issues/21177\n    f = -3*x + (x + Rational(3, 2) - sqrt(3)*S.ImaginaryUnit/2)**2\\\n        - Rational(3, 2) + 3*sqrt(3)*S.ImaginaryUnit/2\n    assert f.as_leading_term(x) == \\\n        (3*sqrt(3)*x - 3*S.ImaginaryUnit*x)/(sqrt(3) + 3*S.ImaginaryUnit)\n\n    # https://github.com/sympy/sympy/issues/21245\n    f = 1 - x - x**2\n    fi = (1 + sqrt(5))/2\n    assert f.subs(x, y + 1/fi).as_leading_term(y) == \\\n        (-36*sqrt(5)*y - 80*y)/(16*sqrt(5) + 36) \n```", "```py\n# In sympy/series/tests/test_residues.py\n\ndef test_issue_21177():\n    r = -sqrt(3)*tanh(sqrt(3)*pi/2)/3\n    a = residue(cot(pi*x)/((x - 1)*(x - 2) + 1), x, S(3)/2 - sqrt(3)*I/2)\n    b = residue(cot(pi*x)/(x**2 - 3*x + 3), x, S(3)/2 - sqrt(3)*I/2)\n    assert a == r\n    assert (b - a).cancel() == 0 \n```", "```py\nfrom sympy.testing.pytest.raises\nraises(TypeError, lambda: cos(x, y) \n```", "```py\n# BAD\nraises(TypeError, cos(x, y)) # This test will fail \n```", "```py\nwith raises(TypeError):\n    cos(x, y) \n```", "```py\n# BAD\nwith raises(TypeError):\n   cos(x, y)\n   sin(x, y) # THIS WILL NEVER BE TESTED \n```", "```py\nfrom sympy.testing.pytest import warns\nwith warns(UserWarning):\n    function_that_emits_a_warning()\n\nwith warns(UserWarning, match=r'warning'):\n    function_that_emits_a_warning() \n```", "```py\nfrom sympy.testing.pytest import warns_deprecated_sympy\nx = symbols('x')\n\n# expr_free_symbols is deprecated\ndef test_deprecated_expr_free_symbols():\n    with warns_deprecated_sympy():\n        assert x.expr_free_symbols == {x} \n```", "```py\nassert function(input) == output \n```", "```py\nassert sin(pi) == 0\nassert sin(pi/2) == 1\nassert sin(1) == sin(1) \n```", "```py\nfrom sympy.core.expr import unchanged\n\ndef test_sin_1_unevaluated():\n    assert unchanged(sin, 1) \n```", "```py\n# from\nsympy/functions/combinatorial/tests/test_comb_factorials.py\n\ndef test_factorial_rewrite():\n    n = Symbol('n', integer=True)\n    k = Symbol('k', integer=True, nonnegative=True)\n\n    assert factorial(n).rewrite(gamma) == gamma(n + 1)\n    _i = Dummy('i')\n    assert factorial(k).rewrite(Product).dummy_eq(Product(_i, (_i, 1, k)))\n    assert factorial(n).rewrite(Product) == factorial(n) \n```", "```py\nassert function(input) == expression \n```", "```py\nexpr = sin(x)*exp(x)\nexpected == exp(x)*sin(x)/2 - exp(x)*cos(x)/2\n\n# The test for integrate()\nassert integrate(expr, x) == expected\n# The consistency check that the test itself is correct\nassert diff(expected, x) == expr \n```", "```py\n$./bin/test\n========================================================================== test process starts ==========================================================================\nexecutable:         /Users/aaronmeurer/anaconda3/bin/python  (3.9.13-final-0) [CPython]\narchitecture:       64-bit\ncache:              yes\nground types:       gmpy 2.1.2\nnumpy:              1.22.4\nrandom seed:        7357232\nhash randomization: on (PYTHONHASHSEED=3923913114) \n```", "```py\n./bin/test --seed 7357232 \n```", "```py\nfrom sympy.external import import_module\n\n# numpy will be None if NumPy is not installed\nnumpy = import_module('numpy')\n\ndef test_func():\n    if not numpy:\n       skip('numpy is not installed')\n\n    assert func(...) == ... \n```", "```py\nfrom sympy.testing.pytest import XFAIL\n\n@XFAIL\ndef test_failing_integral():\n    assert integrate(sqrt(x**2 + 1/x**2), x) == x*sqrt(x**2 + x**(-2))*(sqrt(x**4 + 1) - atanh(sqrt(x**4 + 1)))/(2*sqrt(x**4 + 1)) \n```", "```py\nfrom sympy.testing.pytest import XFAIL\n\n@XFAIL\ndef test_failing_integral():\n    # Should be x*sqrt(x**2 + x**(-2))*(sqrt(x**4 + 1) - atanh(sqrt(x**4 + 1)))/(2*sqrt(x**4 + 1))\n    assert not integrate(sqrt(x**2 + 1/x**2), x).has(Integral) \n```", "```py\n./bin/test --slow \n```", "```py\n./bin/doctest \n```", "```py\n>>> from sympy import Function, dsolve, cos, sin\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x),\n...        f(x), hint='1st_exact')\nEq(x*cos(f(x)) + f(x)**3/3, C1) \n```", "```py\n# BAD\n>>> from sympy import sin, cos, trigsimp, symbols\n>>> x = symbols('x')\n>>> result = trigsimp(sin(x)*cos(x))\n>>> result == sin(2*x)/2\nTrue \n```", "```py\n# BETTER\n>>> from sympy import sin, cos, trigsimp, symbols\n>>> x = symbols('x')\n>>> trigsimp(sin(x)*cos(x))\nsin(2*x)/2 \n```", "```py\n    >>> from sympy.abc import x, y\n    >>> x + y\n    x + y \n    ```", "```py\n    >>> from sympy import symbols, sqrt\n    >>> a, b = symbols('a b', positive=True)\n    >>> sqrt((a + b)**2)\n    a + b \n    ```", "```py\n    >>> from sympy import Integer\n    >>> Integer('a')\n    Traceback (most recent call last):\n    ...\n    ValueError: invalid literal for int() with base 10: 'a' \n    ```", "```py\n    >>> from sympy import simplify\n    >>> simplify\n    <function simplify at ...> \n    ```", "```py\n    >>> ((x + 1)**10).expand()\n    x**10 + 10*x**9 + 45*x**8 + 120*x**7 + 210*x**6 + 252*x**5 + 210*x**4 +\n    120*x**3 + 45*x**2 + 10*x + 1 \n    ```", "```py\n\n    >>> import random\n    >>> random.random()      # doctest: +SKIP\n    0.6868680200532414\n\n    ```", "```py\n    >>> from sympy import Symbol\n    >>> x = Symbol('x', positive=True)\n    >>> x.is_real\n    True\n    >>> x = Symbol('x', real=True)\n    >>> x.is_positive # Shows nothing, because it is None\n    >>> print(x.is_positive)\n    None \n    ```", "```py\n    >>> {'b': 1, 'a': 2}\n    {'a': 2, 'b': 1}\n    >>> {'b', 'a'}\n    {'a', 'b'}\n    >>> y + x\n    x + y \n    ```", "```py\n./bin/test quality \n```", "```py\nflake8 sympy \n```", "```py\n@dispatch(...)\ndef funcname(arg1, arg2): # noqa: F811\n    ...\n\n@dispatch(...)\ndef funcname(arg1, arg2): # noqa: F811\n    ... \n```", "```py\n    # BAD\n    assert expand((x + 1/2)**2) == x**2 + x + 1/4 \n    ```", "```py\n    # GOOD\n    assert expand((x + S(1)/2)**2) == x**2 + x + S(1)/4 \n    ```", "```py\n    # BAD\n    assert str(expand((x + 2)**3)) == 'x**3 + 6*x**2 + 12*x + 8' \n    ```", "```py\n    # GOOD\n    assert expand((x + 2)**3) == x**3 + 6*x**2 + 12*x + 8 \n    ```", "```py\n    # BAD\n    expr = sympify('a*b*c*d*e')\n    assert expr.count_ops() == 4 \n    ```", "```py\n    # GOOD\n    a, b, c, d, e = symbols('a b c d e')\n    expr = a*b*c*d*e\n    assert expr.count_ops() == 4 \n    ```", "```py\n    # BAD\n    assert not x.is_real \n    ```", "```py\n    # GOOD\n    assert x.is_real is False \n    ```", "```py\n./bin/coverage_report.py \n```", "```py\nfrom hypothesis import given\nfrom hypothesis import strategies as st\nfrom sympy import symbols\nfrom sympy import Mod\n\n@given(a = st.integers(), p = st.integers().filter(lambda p: p != 0), i = st.integers(),\nj = st.integers().filter(lambda j: j != 0))\ndef test_modular(a, p, i, j):\n    x, y = symbols('x y')\n    value = Mod(x, y).subs({x: a, y: p})\n    assert value == a % p \n```"]