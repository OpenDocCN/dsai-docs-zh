- en: Array API Standard Compatibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组 API 标准兼容性
- en: 原文：[https://numpy.org/doc/1.26/reference/array_api.html](https://numpy.org/doc/1.26/reference/array_api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/array_api.html](https://numpy.org/doc/1.26/reference/array_api.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `numpy.array_api` module is still experimental. See [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.array_api` 模块仍处于实验阶段。请参阅 [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)。'
- en: NumPy includes a reference implementation of the [array API standard](https://data-apis.org/array-api/latest/)
    in `numpy.array_api`. [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    describes the motivation and scope for implementing the array API standard in
    NumPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 在 `numpy.array_api` 中包含了 [array API standard](https://data-apis.org/array-api/latest/)
    的参考实现。[NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html) 描述了在 NumPy
    中实现数组 API 标准的动机和范围。
- en: The `numpy.array_api` module serves as a minimal, reference implementation of
    the array API standard. In being minimal, the module only implements those things
    that are explicitly required by the specification. Certain things are allowed
    by the specification but are explicitly disallowed in `numpy.array_api`. This
    is so that the module can serve as a reference implementation for users of the
    array API standard. Any consumer of the array API can test their code against
    `numpy.array_api` and be sure that they aren’t using any features that aren’t
    guaranteed by the spec, and which may not be present in other conforming libraries.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.array_api` 模块作为数组 API 标准的最小参考实现。作为最小实现，该模块仅实现规范明确要求的内容。规范允许某些内容，但在 `numpy.array_api`
    中明确禁止。这样可以使该模块成为数组 API 标准的用户的参考实现。任何使用数组 API 的消费者都可以针对 `numpy.array_api` 测试其代码，并确保他们没有使用规范未保证的功能，这些功能可能不会出现在其他符合规范的库中。'
- en: The `numpy.array_api` module is not documented here. For a listing of the functions
    present in the array API specification, refer to the [array API standard](https://data-apis.org/array-api/latest/).
    The `numpy.array_api` implementation is functionally complete, so all functionality
    described in the standard is implemented.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未记录 `numpy.array_api` 模块。要查看数组 API 规范中包含的函数列表，请参考 [array API standard](https://data-apis.org/array-api/latest/)。`numpy.array_api`
    实现功能完整，因此已实现规范中描述的所有功能。
- en: '## Table of Differences between `numpy.array_api` and `numpy`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '## `numpy.array_api` 与 `numpy` 之间的差异表'
- en: 'This table outlines the primary differences between `numpy.array_api` from
    the main `numpy` namespace. There are three types of differences:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本表概述了 `numpy.array_api` 与主 `numpy` 命名空间之间的主要区别。有三种类型的差异：
- en: '**Strictness**. Things that are only done so that `numpy.array_api` is a strict,
    minimal implementation. They aren’t actually required by the spec, and other conforming
    libraries may not follow them. In most cases, spec does not specify or require
    any behavior outside of the given domain. The main `numpy` namespace would not
    need to change in any way to be spec-compatible for these.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**严格性**。仅为了使 `numpy.array_api` 成为严格的、最小的实现而执行的事项。实际上，这些事项并不是规范要求的，其他符合规范的库可能不会遵循它们。在大多数情况下，规范不指定或要求给定域之外的任何行为。主
    `numpy` 命名空间不需要做任何更改才能符合规范。'
- en: '**Compatible**. Things that could be added to the main `numpy` namespace without
    breaking backwards compatibility.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**兼容**。可以添加到主 `numpy` 命名空间而不会破坏向后兼容性的事项。'
- en: '**Breaking**. Things that would break backwards compatibility if implemented
    in the main `numpy` namespace.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Breaking**。如果在主 `numpy` 命名空间中实现，可能会破坏向后兼容性的事项。'
- en: Name Differences
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称差异
- en: Many functions have been renamed in the spec from NumPy. These are otherwise
    identical in behavior, and are thus all **compatible** changes, unless otherwise
    noted.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多函数在规范中从 NumPy 重命名。除非另有说明，否则这些函数在行为上是相同的，因此都是**兼容**的更改。
- en: '#### Function Name Changes'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 函数名称更改'
- en: The following functions are named differently in the array API
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数组 API 中以下函数的名称与 NumPy 中不同
- en: '| Array API name | NumPy namespace name | Notes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Array API 名称 | NumPy 命名空间名称 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `acos` | `arccos` |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | `arccos` |  |'
- en: '| `acosh` | `arccosh` |  |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | `arccosh` |  |'
- en: '| `asin` | `arcsin` |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `asin` | `arcsin` |  |'
- en: '| `asinh` | `arcsinh` |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` | `arcsinh` |  |'
- en: '| `atan` | `arctan` |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `atan` | `arctan` |  |'
- en: '| `atan2` | `arctan2` |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` | `arctan2` |  |'
- en: '| `atanh` | `arctanh` |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` | `arctanh` |  |'
- en: '| `bitwise_left_shift` | `left_shift` |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` | `left_shift` |  |'
- en: '| `bitwise_invert` | `invert` |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | `invert` |  |'
- en: '| `bitwise_right_shift` | `right_shift` |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` | `right_shift` |  |'
- en: '| `bool` | `bool_` | This is **breaking** because `np.bool` is currently a
    deprecated alias for the built-in `bool`. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | `bool_` | 这是一个**破坏性的**更改，因为 `np.bool` 目前是内置 `bool` 的弃用别名。'
- en: '| `concat` | `concatenate` |  |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `concat` | `concatenate` |  |'
- en: '| `matrix_norm` and `vector_norm` | `norm` | `matrix_norm` and `vector_norm`
    each do a limited subset of what `np.norm` does. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` 和 `vector_norm` | `norm` | `matrix_norm` 和 `vector_norm` 每个只执行
    `np.norm` 的有限子集。'
- en: '| `permute_dims` | `transpose` | Unlike `np.transpose`, the `axis` keyword-argument
    to `permute_dims` is required. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `permute_dims` | `transpose` | 与 `np.transpose` 不同，`permute_dims` 的 `axis`
    关键字参数是必需的。 |'
- en: '| `pow` | `power` |  |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `pow` | `power` |  |'
- en: '| `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values` | `unique`
    | Each is equivalent to `np.unique` with certain flags set. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all`、`unique_counts`、`unique_inverse` 和 `unique_values` | `unique`
    | 每个等效于设置了特定标志的 `np.unique`。'
- en: Function instead of method
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数而非方法
- en: '`astype` is a function in the array API, whereas it is a method on `ndarray`
    in `numpy`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astype` 是数组 API 中的一个函数，而在 `numpy` 中是 `ndarray` 的方法。'
- en: '`linalg` Namespace Differences'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`linalg` 命名空间差异'
- en: 'These functions are in the `linalg` sub-namespace in the array API, but are
    only in the top-level namespace in NumPy:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在数组 API 的 `linalg` 子命名空间中，但在 NumPy 中仅在顶层命名空间中：
- en: '`cross`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross`'
- en: '`diagonal`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diagonal`'
- en: '`matmul` (*)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul` (*)'
- en: '`outer`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outer`'
- en: '`tensordot` (*)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensordot` (*)'
- en: '`trace`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace`'
- en: '(*): These functions are also in the top-level namespace in the array API.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '(*): 这些函数也在数组 API 的顶层命名空间中。'
- en: Keyword Argument Renames
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键字参数重命名
- en: The following functions have keyword arguments that have been renamed. The functionality
    of the keyword argument is identical unless otherwise stated. Renamed keyword
    arguments with the same semantic definition may be considered either **compatible**
    or **breaking**, depending on how the change is implemented.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数的关键字参数已被重命名。除非另有说明，否则关键字参数的功能是相同的。具有相同语义定义的重命名关键字参数可能被视为**兼容**或**破坏**，具体取决于更改的实现方式。
- en: Note, this page does not list function keyword arguments that are in the main
    `numpy` namespace but not in the array API. Such keyword arguments are omitted
    from `numpy.array_api` for **strictness**, as the spec allows functions to include
    additional keyword arguments from those required.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此页面不列出主 `numpy` 命名空间中存在但不在数组 API 中的函数关键字参数。出于**严格性**的考虑，这些关键字参数被从 `numpy.array_api`
    中省略，因为规范允许函数包含额外的关键字参数。
- en: '| Function | Array API keyword name | NumPy keyword name | Notes |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 数组 API 关键字名称 | NumPy 关键字名称 | 备注 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `argsort` and `sort` | `stable` | `kind` | The definitions of `stable` and
    `kind` differ, as do the default values. The change of the default value makes
    this **breaking**. See [Set Functions Differences](#array-api-set-functions-differences).
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` | `stable` | `kind` | `stable` 和 `kind` 的定义不同，以及默认值也不同。默认值的更改使得这是一个**破坏性的**更改。请参阅[集合函数差异](#array-api-set-functions-differences)。'
- en: '| `matrix_rank` | `rtol` | `tol` | The definitions of `rtol` and `tol` differ,
    as do the default values. The change of the default value makes this **breaking**.
    See [Linear Algebra Differences](#array-api-linear-algebra-differences). |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | `rtol` | `tol` | `rtol` 和 `tol` 的定义不同，以及默认值也不同。默认值的更改使得这是一个**破坏性的**更改。请参阅[线性代数差异](#array-api-linear-algebra-differences)。'
- en: '| `pinv` | `rtol` | `rcond` | The definitions of `rtol` and `rcond` are the
    same, but their default values differ, making this **breaking**. See [Linear Algebra
    Differences](#array-api-linear-algebra-differences). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | `rtol` | `rcond` | `rtol` 和 `rcond` 的定义相同，但默认值不同，这是一个**破坏性的**更改。请参阅[线性代数差异](#array-api-linear-algebra-differences)。'
- en: '| `std` and `var` | `correction` | `ddof` |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` | `correction` | `ddof` |  |'
- en: '| `reshape` | `shape` | `newshape` | The argument may be passed as a positional
    or keyword argument for both NumPy and the array API. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` | `shape` | `newshape` | 该参数可以作为 NumPy 和数组 API 的位置参数或关键字参数传递。 |'
- en: '### Type Promotion Differences'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型提升差异'
- en: Type promotion is the biggest area where NumPy deviates from the spec. The most
    notable difference is that NumPy does value-based casting in many cases. The spec
    explicitly disallows value-based casting. In the array API, the result type of
    any operation is always determined entirely by the input types, independently
    of values or shapes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提升是 NumPy 与规范最大的差异之一。最显著的区别是 NumPy 在许多情况下进行基于值的转换。规范明确禁止基于值的转换。在数组 API 中，任何操作的结果类型始终完全由输入类型确定，与值或形状无关。
- en: '| Feature | Type | Notes |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Limited set of dtypes. | **Strictness** | `numpy.array_api` only implements
    those [dtypes that are required by the spec](https://data-apis.org/array-api/latest/API_specification/data_types.html).
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 有限的数据类型集合。 | **严格性** | `numpy.array_api`只实现了那些[规范要求的数据类型](https://data-apis.org/array-api/latest/API_specification/data_types.html)。
    |'
- en: '| Operators (like `+`) with Python scalars only accept matching scalar types.
    | **Strictness** | For example, `<int32 array> + 1.0` is not allowed. See [the
    spec rules for mixing arrays and Python scalars](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars).
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 操作符（比如`+`）只接受匹配的标量类型。 | **严格性** | 例如，`<int32 array> + 1.0`是不允许的。查看[混合数组和Python标量的规范规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)。
    |'
- en: '| Operators (like `+`) with Python scalars always return the same dtype as
    the array. | **Breaking** | For example, `numpy.array_api.asarray(0., dtype=float32)
    + 1e64` is a `float32` array. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 操作符（比如`+`）与Python标量始终返回与数组相同的数据类型。 | **破坏性变化** | 例如，`numpy.array_api.asarray(0.,
    dtype=float32) + 1e64`是一个`float32`数组。 |'
- en: '| In-place operators are disallowed when the left-hand side would be promoted.
    | **Breaking** | Example: `a = np.array(1, dtype=np.int8); a += np.array(1, dtype=np.int16)`.
    The spec explicitly disallows this. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 当左侧将被提升时，不允许原地操作符。 | **破坏性变化** | 例如：`a = np.array(1, dtype=np.int8); a +=
    np.array(1, dtype=np.int16)`。规范明确禁止这种情况。 |'
- en: '| In-place operators are disallowed when the right-hand side operand cannot
    broadcast to the shape of the left-hand side operand. | **Strictness** | This
    so-called “reverse broadcasting” should not be allowed. Example: `a = np.empty((2,
    3, 4)); a += np.empty((3, 4))` should error. See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 当右侧操作数无法广播到左侧操作数的形状时，不允许原地操作符。 | **严格性** | 这种所谓的“反向广播”不应该被允许。例如：`a = np.empty((2,
    3, 4)); a += np.empty((3, 4))`应该报错。参见[https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。
    |'
- en: '| `int` promotion for operators is only specified for integers within the bounds
    of the dtype. | **Strictness** | `numpy.array_api` fallsback to `np.ndarray` behavior
    (either cast or raise `OverflowError`). |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 操作符的`int`提升仅对在数据类型范围内的整数指定。 | **严格性** | `numpy.array_api`回退到`np.ndarray`的行为（要么转换，要么引发`OverflowError`）。
    |'
- en: '| `__pow__` and `__rpow__` do not do value-based casting for 0-D arrays. |
    **Breaking** | For example, `np.array(0., dtype=float32)**np.array(0., dtype=float64)`
    is `float32`. Note that this is value-based casting on 0-D arrays, not scalars.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `__pow__`和`__rpow__`不会对0维数组进行基于值的转换。 | **破坏性变化** | 例如，`np.array(0., dtype=float32)**np.array(0.,
    dtype=float64)`是`float32`。请注意，这是针对0维数组的基于值的转换，而不是标量。 |'
- en: '| No cross-kind casting. | **Strictness** | Namely, boolean, integer, and floating-point
    data types do not cast to each other, except explicitly with `astype` (this is
    separate from the behavior with Python scalars). |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 没有跨类型的转换。 | **严格性** | 即，布尔值、整数和浮点数数据类型不会相互转换，除非使用`astype`显式转换（这与Python标量的行为不同）。
    |'
- en: '| No casting unsigned integer dtypes to floating dtypes (e.g., `int64 + uint64
    -> float64`. | **Strictness** |  |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 不允许将无符号整数数据类型转换为浮点数据类型（例如，`int64 + uint64 -> float64`）。 | **严格性** |  |'
- en: '| `can_cast` and `result_type` are restricted. | **Strictness** | The `numpy.array_api`
    implementations disallow cross-kind casting. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `can_cast`和`result_type`受限制。 | **严格性** | `numpy.array_api`实现不允许跨类型转换。 |'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 当`dtype=None`时，`sum`和`prod`总是将`float32`向上转换为`float64`。 | **破坏性变化** |  |'
- en: Indexing Differences
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引差异
- en: The spec requires only a subset of indexing, but all indexing rules in the spec
    are compatible with NumPy’s more broad indexing rules.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 规范仅要求一部分索引，但规范中的所有索引规则与NumPy更广泛的索引规则兼容。
- en: '| Feature | Type | Notes |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No implicit ellipses (`...`). | **Strictness** | If an index does not include
    an ellipsis, all axes must be indexed. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 没有隐式的省略号（`...`）。 | **严格性** | 如果索引不包含省略号，则必须索引所有轴。 |'
- en: '| The start and stop of a slice may not be out of bounds. | **Strictness**
    | For a slice `i:j:k`, only the following are allowed:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '| 切片的起始和结束位置不能超出范围。 | **严格性** | 对于切片`i:j:k`，只允许以下情况：'
- en: '`i` or `j` omitted (`None`).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '省略`i`或`j`（`None`）。 '
- en: '`-n <= i <= max(0, n - 1)`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n <= i <= max(0, n - 1)`。'
- en: For `k > 0` or `k` omitted (`None`), `-n <= j <= n`.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`k > 0`或省略的`k`（`None`），`-n <= j <= n`。
- en: For `k < 0`, `-n - 1 <= j <= max(0, n - 1)`.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`k < 0`，`-n - 1 <= j <= max(0, n - 1)`。
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Boolean array indices are only allowed as the sole index. | **Strictness**
    |  |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: 布尔数组索引仅允许作为唯一索引。 | **严格性** |  |
- en: '| Integer array indices are not allowed at all. | **Strictness** | With the
    exception of 0-D arrays, which are treated like integers. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 整数数组索引根本不允许。 | **严格性** | 除了 0-D 数组，它们被视为整数之外。 |'
- en: '### Type Strictness'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型严格性'
- en: 'Functions in `numpy.array_api` restrict their inputs to only those dtypes that
    are explicitly required by the spec, even when the wrapped corresponding NumPy
    function would allow a broader set. Here, we list each function and the dtypes
    that are allowed in `numpy.array_api`. These are **strictness** differences because
    the spec does not require that other dtypes result in an error. The categories
    here are defined as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.array_api` 中的函数限制其输入仅限于规范明确要求的数据类型，即使包装的对应 NumPy 函数允许更广泛的数据类型。在这里，我们列出每个函数及允许在
    `numpy.array_api` 中的数据类型。这些是**严格性**差异，因为规范不要求其他数据类型会导致错误。这里的类别定义如下：'
- en: '**Floating-point**: `float32` or `float64`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**：`float32` 或 `float64`。'
- en: '**Integer**: Any signed or unsigned integer dtype (`int8`, `int16`, `int32`,
    `int64`, `uint8`, `uint16`, `uint32`, or `uint64`).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**：任何有符号或无符号整数数据类型（`int8`、`int16`、`int32`、`int64`、`uint8`、`uint16`、`uint32`或`uint64`）。'
- en: '**Boolean**: `bool`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**：`bool`。'
- en: '**Integer or boolean**: Any signed or unsigned integer dtype, or `bool`. For
    two-argument functions, both arguments must be integer or both must be `bool`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数或布尔值**：任何有符号或无符号整数数据类型，或`bool`。对于两个参数的函数，两个参数必须都是整数或都是`bool`。'
- en: '**Numeric**: Any integer or floating-point dtype. For two-argument functions,
    both arguments must be integer or both must be floating-point.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值**：任何整数或浮点数数据类型。对于两个参数的函数，两个参数必须都是整数或都是浮点数。'
- en: '**All**: Any of the above dtype categories. For two-argument functions, both
    arguments must be the same kind (integer, floating-point, or boolean).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有**：上述数据类型类别中的任何一种。对于两个参数的函数，两个参数必须是相同类型（整数、浮点数或布尔值）。'
- en: In all cases, the return dtype is chosen according to [the rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html),
    and does not differ from NumPy’s return dtype for any of the allowed input dtypes,
    except in the cases mentioned specifically in the subsections below.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，返回的数据类型根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html)选择，并且与
    NumPy 对于任何允许的输入数据类型的返回数据类型没有区别，除非在下面的子节中明确提到的情况。
- en: Elementwise Functions
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐元素函数
- en: '| Function Name | Dtypes |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `abs` | Numeric |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 数值 |'
- en: '| `acos` | Floating-point |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | 浮点数 |'
- en: '| `acosh` | Floating-point |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | 浮点数 |'
- en: '| `add` | Numeric |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 数值 |'
- en: '| `asin` (*) | Floating-point |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `asin` (*) | 浮点数 |'
- en: '| `asinh` (*) | Floating-point |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` (*) | 浮点数 |'
- en: '| `atan` (*) | Floating-point |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `atan` (*) | 浮点数 |'
- en: '| `atan2` (*) | Floating-point |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` (*) | 浮点数 |'
- en: '| `atanh` (*) | Floating-point |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` (*) | 浮点数 |'
- en: '| `bitwise_and` | Integer or boolean |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_and` | 整数或布尔值 |'
- en: '| `bitwise_invert` | Integer or boolean |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | 整数或布尔值 |'
- en: '| `bitwise_left_shift` (*) | Integer |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` (*) | 整数 |'
- en: '| `bitwise_or` | Integer or boolean |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or` | 整数或布尔值 |'
- en: '| `bitwise_right_shift` (*) | Integer |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` (*) | 整数 |'
- en: '| `bitwise_xor` | Integer or boolean |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor` | 整数或布尔值 |'
- en: '| `ceil` | Numeric |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `ceil` | 数值 |'
- en: '| `cos` | Floating-point |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `cos` | 浮点数 |'
- en: '| `cosh` | Floating-point |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `cosh` | 浮点数 |'
- en: '| `divide` | Floating-point |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `divide` | 浮点数 |'
- en: '| `equal` | All |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `equal` | 所有 |'
- en: '| `exp` | Floating-point |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `exp` | 浮点数 |'
- en: '| `expm1` | Floating-point |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `expm1` | 浮点数 |'
- en: '| `floor` | Numeric |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `floor` | 数值 |'
- en: '| `floor_divide` | Numeric |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `floor_divide` | 数值 |'
- en: '| `greater` | Numeric |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `greater` | 数值 |'
- en: '| `greater_equal` | Numeric |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `greater_equal` | 数值 |'
- en: '| `isfinite` | Numeric |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `isfinite` | 数值 |'
- en: '| `isinf` | Numeric |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `isinf` | 数值 |'
- en: '| `isnan` | Numeric |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `isnan` | 数值 |'
- en: '| `less` | Numeric |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `less` | 数值 |'
- en: '| `less_equal` | Numeric |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `less_equal` | 数值 |'
- en: '| `log` | Floating-point |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 浮点数 |'
- en: '| `logaddexp` | Floating-point |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp` | 浮点数 |'
- en: '| `log10` | Floating-point |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `log10` | 浮点数 |'
- en: '| `log1p` | Floating-point |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `log1p` | 浮点数 |'
- en: '| `log2` | Floating-point |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `log2` | 浮点数 |'
- en: '| `logical_and` | Boolean |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `logical_and` | 布尔值 |'
- en: '| `logical_not` | Boolean |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `logical_not` | 布尔值 |'
- en: '| `logical_or` | Boolean |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `logical_or` | 布尔值 |'
- en: '| `logical_xor` | Boolean |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `logical_xor` | 布尔值 |'
- en: '| `multiply` | Numeric |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `multiply` | 数值 |'
- en: '| `negative` | Numeric |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `negative` | 数值 |'
- en: '| `not_equal` | All |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `not_equal` | 所有 |'
- en: '| `positive` | Numeric |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `positive` | 数值 |'
- en: '| `pow` (*) | Numeric |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `pow` (*) | 数值 |'
- en: '| `remainder` | Numeric |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `remainder` | 数值 |'
- en: '| `round` | Numeric |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `round` | 数值型 |'
- en: '| `sign` | Numeric |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `sign` | 数值型 |'
- en: '| `sin` | Floating-point |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `sin` | 浮点数 |'
- en: '| `sinh` | Floating-point |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `sinh` | 浮点数 |'
- en: '| `sqrt` | Floating-point |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt` | 浮点数 |'
- en: '| `square` | Numeric |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `square` | 数值型 |'
- en: '| `subtract` | Numeric |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `subtract` | 数值型 |'
- en: '| `tan` | Floating-point |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `tan` | 浮点数 |'
- en: '| `tanh` | Floating-point |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `tanh` | 浮点数 |'
- en: '| `trunc` | Numeric |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `trunc` | 数值型 |'
- en: (*) These functions have different names from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数与主`numpy`命名空间中的名称不同。请参见[函数名称更改](#array-api-name-changes)。
- en: Creation Functions
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建函数
- en: '| Function Name | Dtypes |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `meshgrid` | Any (all input dtypes must be the same) |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid` | 任意类型（所有输入数据类型必须相同） |'
- en: Linear Algebra Functions
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性代数函数
- en: '| Function Name | Dtypes |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cholesky` | Floating-point |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` | 浮点数 |'
- en: '| `cross` | Numeric |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `cross` | 数值型 |'
- en: '| `det` | Floating-point |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `det` | 浮点数 |'
- en: '| `diagonal` | Any |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` | 任意类型 |'
- en: '| `eigh` | Floating-point |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `eigh` | 浮点数 |'
- en: '| `eighvals` | Floating-point |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `eighvals` | 浮点数 |'
- en: '| `inv` | Floating-point |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `inv` | 浮点数 |'
- en: '| `matmul` | Numeric |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `matmul` | 数值型 |'
- en: '| `matrix_norm` (*) | Floating-point |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` (*) | 浮点数 |'
- en: '| `matrix_power` | Floating-point |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_power` | 浮点数 |'
- en: '| `matrix_rank` | Floating-point |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | 浮点数 |'
- en: '| `matrix_transpose` (**) | Any |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose` (**) | 任意类型 |'
- en: '| `outer` | Numeric |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `outer` | 数值型 |'
- en: '| `pinv` | Floating-point |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | 浮点数 |'
- en: '| `qr` | Floating-point |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `qr` | 浮点数 |'
- en: '| `slogdet` | Floating-point |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `slogdet` | 浮点数 |'
- en: '| `solve` | Floating-point |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `solve` | 浮点数 |'
- en: '| `svd` | Floating-point |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `svd` | 浮点数 |'
- en: '| `svdvals` (**) | Floating-point |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `svdvals` (**) | 浮点数 |'
- en: '| `tensordot` | Numeric |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` | 数值型 |'
- en: '| `trace` | Numeric |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `trace` | 数值型 |'
- en: '| `vecdot` (**) | Numeric |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot` (**) | 数值型 |'
- en: '| `vector_norm` (*) | Floating-point |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `vector_norm` (*) | 浮点数 |'
- en: (*) These functions are split from `norm` from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数从主`numpy`命名空间中的`norm`中拆分出来。请参见[函数名称更改](#array-api-name-changes)。
- en: (**) These functions are new in the array API and are not in the main `numpy`
    namespace.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: (**) 这些函数是数组API中的新功能，不在主`numpy`命名空间中。
- en: Array Object
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数组对象
- en: All the special `__operator__` methods on the array object behave identically
    to their corresponding functions (see [the spec](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)
    for a list of which methods correspond to which functions). The exception is that
    operators explicitly allow Python scalars according to the [rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)
    (see [Type Promotion Differences](#array-api-type-promotion-differences)).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 数组对象上的所有特殊`__operator__`方法的行为与它们对应的函数完全相同（请参见[规范](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)以获取哪些方法对应哪些函数的列表）。唯一的例外是运算符根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)明确允许Python标量（请参见[类型提升差异](#array-api-type-promotion-differences)）。
- en: Array Object Differences
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组对象差异
- en: '| Feature | Type | Notes |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: 特征 | 类型 | 注释 |
- en: '| --- | --- | --- |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No array scalars | **Strictness** | The spec does not have array scalars,
    only 0-D arrays. However, other than the promotion differences outlined in [Type
    Promotion Differences](#array-api-type-promotion-differences), scalars duck type
    as 0-D arrays for the purposes of the spec. The are immutable, but the spec [does
    not require mutability](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html).
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 无数组标量 | **严格性** | 规范中没有数组标量，只有0-D数组。但是，除了[类型提升差异](#array-api-type-promotion-differences)中概述的提升差异外，标量在规范中作为0-D数组进行鸭子类型。它们是不可变的，但规范[不要求可变性](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html)。'
- en: '| `bool()`, `int()`, and `float()` only work on 0-D arrays. | **Strictness**
    | See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `bool()`、`int()`和`float()`仅适用于0-D数组。 | **严格性** | 请参见[https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。'
- en: '| `__imatmul__` | **Compatible** | `np.ndarray` does not currently implement
    `__imatmul`. Note that `a @= b` should only defined when it does not change the
    shape of `a`. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `__imatmul__` | **兼容** | `np.ndarray`目前未实现`__imatmul`。请注意，仅在不改变`a`的形状时才应定义`a
    @= b`。'
- en: '| The `mT` attribute for matrix transpose. | **Compatible** | See [the spec
    definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)
    for `mT`. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 用于矩阵转置的 `mT` 属性。 | **兼容** | 参见[`mT` 的规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)。'
- en: '| The `T` attribute should error if the input is not 2-dimensional. | **Breaking**
    | See [the note in the spec](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html).
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 如果输入不是二维的，则 `T` 属性应报错。 | **变动** | 参见[规范中的注释](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html)。'
- en: '| New method `to_device` and attribute `device` | **Compatible** | The methods
    would effectively not do anything since NumPy is CPU only |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 新方法 `to_device` 和属性 `device` | **兼容** | 这些方法实际上不会起作用，因为 NumPy 只支持 CPU。'
- en: Creation Functions Differences
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `copy` keyword argument to `asarray` | **Compatible** |  |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `asarray` 的 `copy` 关键字参数 | **兼容** | '
- en: '| New `device` keyword argument to all array creation functions (`asarray`,
    `arange`, `empty`, `empty_like`, `eye`, `full`, `full_like`, `linspace`, `ones`,
    `ones_like`, `zeros`, and `zeros_like`). | **Compatible** | `device` would effectively
    do nothing, since NumPy is CPU only. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 所有数组创建函数（`asarray`、`arange`、`empty`、`empty_like`、`eye`、`full`、`full_like`、`linspace`、`ones`、`ones_like`、`zeros`
    和 `zeros_like`）新增了 `device` 关键字参数。 | **兼容** | `device` 实际上不会起作用，因为 NumPy 只支持 CPU。'
- en: Elementwise Functions Differences
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐元素函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed. | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已更名。 | **兼容** | 参见[函数名称更改](#array-api-name-changes)。'
- en: '| Elementwise functions are only defined for given input type combinations.
    | **Strictness** | See [Type Strictness](#array-api-type-strictness). |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 仅对给定输入类型组合定义逐元素函数。 | **严格性** | 参见[类型严格性](#array-api-type-strictness)。'
- en: '| `bitwise_left_shift` and `bitwise_right_shift` are only defined for `x2`
    nonnegative. | **Strictness** |  |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` 和 `bitwise_right_shift` 仅对 `x2` 非负数定义。 | **严格性** | '
- en: '| `ceil`, `floor`, and `trunc` return an integer with integer input. | **Breaking**
    | `np.ceil`, `np.floor`, and `np.trunc` return a floating-point dtype on integer
    dtype input. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `ceil`、`floor` 和 `trunc` 在整数输入时返回整数。 | **变动** | `np.ceil`、`np.floor` 和 `np.trunc`
    在整数输入时返回浮点数数据类型。'
- en: '### Linear Algebra Differences'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '### 线性代数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cholesky` includes an `upper` keyword argument. | **Compatible** |  |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` 包括一个 `upper` 关键字参数。 | **兼容** | '
- en: '| `cross` does not allow size 2 vectors (only size 3). | **Breaking** |  |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `cross` 不允许大小为 2 的向量（仅允许大小为 3）。 | **变动** | '
- en: '| `diagonal` operates on the last two axes. | **Breaking** | Strictly speaking
    this can be **compatible** because `diagonal` is moved to the `linalg` namespace.
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` 操作在最后两个轴上。 | **变动** | 严格来说这可能是**兼容**的，因为 `diagonal` 已经移动到 `linalg`
    命名空间。'
- en: '| `eigh`, `qr`, `slogdet` and `svd` return a named tuple. | **Compatible**
    | The corresponding `numpy` functions return a `tuple`, with the resulting arrays
    in the same order. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`、`qr`、`slogdet` 和 `svd` 返回一个命名元组。 | **兼容** | 相应的 `numpy` 函数返回一个 `tuple`，其中结果数组的顺序相同。'
- en: '| New functions `matrix_norm` and `vector_norm`. | **Compatible** | The `norm`
    function has been omitted from the array API and split into `matrix_norm` for
    matrix norms and `vector_norm` for vector norms. Note that `vector_norm` supports
    any number of axes, whereas `np.linalg.norm` only supports a single axis for vector
    norms. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 新增了 `matrix_norm` 和 `vector_norm` 函数。 | **兼容** | `norm` 函数已从数组 API 中省略，并分为
    `matrix_norm` 用于矩阵范数和 `vector_norm` 用于向量范数。请注意，`vector_norm` 支持任意数量的轴，而 `np.linalg.norm`
    仅支持单个轴用于向量范数。'
- en: '| `matrix_rank` has an `rtol` keyword argument instead of `tol`. | **Breaking**
    | In the array API, `rtol` filters singular values smaller than `rtol * largest_singular_value`.
    In `np.linalg.matrix_rank`, `tol` filters singular values smaller than `tol`.
    Furthermore, the default value for `rtol` is `max(M, N) * eps`, whereas the default
    value of `tol` in `np.linalg.matrix_rank` is `S.max() * max(M, N) * eps`, where
    `S` is the singular values of the input. The new flag name is compatible but the
    default change is breaking |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 具有 `rtol` 关键字参数而不是 `tol`。 | **破坏性变化** | 在数组 API 中，`rtol` 会过滤比
    `rtol * largest_singular_value` 小的奇异值。在 `np.linalg.matrix_rank` 中，`tol` 会过滤比 `tol`
    小的奇异值。此外，`rtol` 的默认值为 `max(M, N) * eps`，而 `np.linalg.matrix_rank` 中 `tol` 的默认值为
    `S.max() * max(M, N) * eps`，其中 `S` 是输入的奇异值。新标志名称是兼容的，但默认更改是破坏性的 |'
- en: '| `matrix_rank` does not support 1-dimensional arrays. | **Breaking** |  |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 不支持 1 维数组。 | **破坏性变化** |  |'
- en: '| New function `matrix_transpose`. | **Compatible** | Unlike `np.transpose`,
    `matrix_transpose` only transposes the last two axes. See [the spec definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)
    |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 新功能 `matrix_transpose`。 | **兼容性** | 与 `np.transpose` 不同，`matrix_transpose`
    仅对最后两个轴进行转置。请参阅 [规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)
    |'
- en: '| `outer` only supports 1-dimensional arrays. | **Breaking** | The spec currently
    only specifies behavior on 1-D arrays but future behavior will likely be to broadcast,
    rather than flatten, which is what `np.outer` does. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `outer` 仅支持 1 维数组。 | **破坏性变化** | 规范目前仅指定了对 1 维数组的行为，但未来的行为可能是广播，而不是展平，这是
    `np.outer` 的行为。 |'
- en: '| `pinv` has an `rtol` keyword argument instead of `rcond` | **Breaking** |
    The meaning of `rtol` and `rcond` is the same, but the default value for `rtol`
    is `max(M, N) * eps`, whereas the default value for `rcond` is `1e-15`. The new
    flag name is compatible but the default change is breaking. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` 具有 `rtol` 关键字参数而不是 `rcond` | **破坏性变化** | `rtol` 和 `rcond` 的含义相同，但
    `rtol` 的默认值为 `max(M, N) * eps`，而 `rcond` 的默认值为 `1e-15`。 新标志名称是兼容的，但默认更改是破坏性的。
    |'
- en: '| `solve` only accepts `x2` as a vector when it is exactly 1-dimensional. |
    **Breaking** | The `np.linalg.solve` behavior is ambiguous. See [this numpy issue](https://github.com/numpy/numpy/issues/15349)
    and [this array API specification issue](https://github.com/data-apis/array-api/issues/285)
    for more details. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `solve` 仅在 `x2` 确切为 1 维时才接受作为向量。 | **破坏性变化** | `np.linalg.solve` 的行为是模糊的。有关更多详细信息，请参阅
    [此 numpy 问题](https://github.com/numpy/numpy/issues/15349) 和 [此数组 API 规范问题](https://github.com/data-apis/array-api/issues/285)。
    |'
- en: '| New function `svdvals`. | **Compatible** | Equivalent to `np.linalg.svd(compute_uv=False)`.
    |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 新功能 `svdvals`。 | **兼容性** | 等效于 `np.linalg.svd(compute_uv=False)`。 |'
- en: '| The `axis` keyword to `tensordot` must be a tuple. | **Compatible** | In
    `np.tensordot`, it can also be an array or array-like. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` 的 `axis` 关键字必须是���组。 | **兼容性** | 在 `np.tensordot` 中，它也可以是数组或类似数组。
    |'
- en: '| `trace` operates on the last two axes. | **Breaking** | `np.trace` operates
    on the first two axes by default. Note that the array API `trace` does not allow
    specifying which axes to operate on. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `trace` 在最后两个轴上操作。 | **破坏性变化** | `np.trace` 默认在前两个轴上操作。请注意，数组 API 的 `trace`
    不允许指定要操作的轴。 |'
- en: Manipulation Functions Differences
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已被重命名 | **兼容性** | 请参阅 [函数名称更改](#array-api-name-changes)。 |'
- en: '| `concat` has different default casting rules from `np.concatenate` | **Strictness**
    | No cross-kind casting. No value-based casting on scalars (when axis=None). |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `concat` 具有与 `np.concatenate` 不同的默认转换规则 | **严格性** | 无跨类型转换。对标量的值基转换无效（当 axis=None
    时）。 |'
- en: '| `stack` has different default casting rules from `np.stack` | **Strictness**
    | No cross-kind casting. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `stack` 具有与 `np.stack` 不同的默认转换规则 | **严格性** | 无跨类型转换。 |'
- en: '| New function `permute_dims`. | **Compatible** | Unlike `np.transpose`, the
    `axis` keyword argument to `permute_dims` is required. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 新功能 `permute_dims`。 | **兼容性** | 与 `np.transpose` 不同，`permute_dims` 的 `axis`
    关键字参数是必需的。 |'
- en: '| `reshape` function has a `copy` keyword argument | **Compatible** | See [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818).
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` 函数具有 `copy` 关键字参数 | **兼容性** | 请参阅 [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818)。
    |'
- en: Set Functions Differences
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| New functions `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values`.
    | **Compatible** | See [Function Name Changes](#array-api-name-changes). |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `unique_all`、`unique_counts`、`unique_inverse` 和 `unique_values`。 | **兼容**
    | 参见 [函数名称更改](#array-api-name-changes)。 |'
- en: '| The four `unique_*` functions return a named tuple. | **Compatible** |  |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 四个 `unique_*` 函数返回一个命名元组。 | **兼容** |  |'
- en: '| `unique_all` and `unique_indices` return indices with the same shape as `x`.
    | **Compatible** | See [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638).
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all` 和 `unique_indices` 返回的索引与 `x` 具有相同的形状。 | **兼容** | 参见 [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638)。
    |'
- en: '### Set Functions Differences'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '### 集合函数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `argsort` and `sort` have a `stable` keyword argument instead of `kind`.
    | **Breaking** | `stable` is a boolean keyword argument, defaulting to `True`.
    `kind` takes a string, defaulting to `"quicksort"`. `stable=True` is equivalent
    to `kind="stable"` and `kind=False` is equivalent to `kind="quicksort"`, although
    any sorting algorithm is allowed by the spec when `stable=False`. The new flag
    name is compatible but the default change is breaking. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 有一个 `stable` 关键字参数，而不是 `kind`。 | **破坏性变化** | `stable`
    是一个布尔关键字参数，默认为 `True`。 `kind` 接受一个字符串，默认为 `"quicksort"`。 `stable=True` 等同于 `kind="stable"`，`kind=False`
    等同于 `kind="quicksort"`，尽管当 `stable=False` 时允许使用任何排序算法。 新的标志名称是兼容的，但默认更改是破坏性的。
    |'
- en: '| `argsort` and `sort` have a `descending` keyword argument. | **Compatible**
    |  |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 有一个 `descending` 关键字参数。 | **兼容** |  |'
- en: Statistical Functions Differences
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 当 `dtype=None` 时，`sum` 和 `prod` 总是将 `float32` 上转型��� `float64`。 | **破坏性变化**
    |  |'
- en: '| The `std` and `var` functions have a `correction` keyword argument instead
    of `ddof`. | **Compatible** |  |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` 函数有一个 `correction` 关键字参数，而不是 `ddof`。 | **兼容** |  |'
- en: Other Differences
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他差异
- en: '| Feature | Type | Notes |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Dtypes can only be spelled as dtype objects. | **Strictness** | For example,
    `numpy.array_api.asarray([0], dtype=''int32'')` is not allowed. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型只能以 dtype 对象的形式拼写。 | **严格性** | 例如，`numpy.array_api.asarray([0], dtype=''int32'')`
    是不允许的。 |'
- en: '| `asarray` is not implicitly called in any function. | **Strictness** | The
    exception is Python operators, which accept Python scalars in certain cases (see
    [Type Promotion Differences](#array-api-type-promotion-differences)). |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `asarray` 在任何函数中都不会被隐式调用。 | **严格性** | 例外情况是 Python 运算符，在某些情况下接受 Python 标量（参见
    [类型提升差异](#array-api-type-promotion-differences)）。 |'
- en: '| `tril` and `triu` require the input to be at least 2-D. | **Strictness**
    |  |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `tril` 和 `triu` 要求输入至少为 2-D。 | **严格性** |  |'
- en: '| finfo() return type uses `float` for the various attributes. | **Strictness**
    | The spec allows duck typing, so `finfo` returning dtype scalars is considered
    type compatible with `float`. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| finfo() 返回类型使用 `float` 来表示各种属性。 | **严格性** | 规范允许鸭子类型，因此 `finfo` 返回 dtype
    标量被认为与 `float` 兼容。 |'
- en: '| Positional arguments in every function are positional-only. | **Breaking**
    | See the spec for the exact signature of each function. Note that NumPy ufuncs
    already use positional-only arguments, but non-ufuncs like `asarray` generally
    do not. |  ## Table of Differences between `numpy.array_api` and `numpy`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '| 每个函数中的位置参数都是仅限位置的。 | **破坏性变化** | 查看每个函数的确切签名规范。请注意，NumPy 的通用函数已经使用了仅限位置的参数，但像
    `asarray` 这样的非通用函数通常不会使用。 |  ## `numpy.array_api` 与 `numpy` 之间的差异表'
- en: 'This table outlines the primary differences between `numpy.array_api` from
    the main `numpy` namespace. There are three types of differences:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这张表概述了 `numpy.array_api` 与主要 `numpy` 命名空间之间的主要差异。有三种类型的差异：
- en: '**Strictness**. Things that are only done so that `numpy.array_api` is a strict,
    minimal implementation. They aren’t actually required by the spec, and other conforming
    libraries may not follow them. In most cases, spec does not specify or require
    any behavior outside of the given domain. The main `numpy` namespace would not
    need to change in any way to be spec-compatible for these.'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**严格性**。这些只是为了使 `numpy.array_api` 成为一个严格、最小的实现。它们实际上并不是规范要求的，其他符合规范的库可能不会遵循它们。在大多数情况下，规范并不指定或要求给定领域之外的任何行为。主要的
    `numpy` 命名空间不需要做任何改变才能符合这些规范。'
- en: '**Compatible**. Things that could be added to the main `numpy` namespace without
    breaking backwards compatibility.'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**兼容**。这些内容可以添加到主`numpy`命名空间而不会破坏向后兼容性。'
- en: '**Breaking**. Things that would break backwards compatibility if implemented
    in the main `numpy` namespace.'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**破坏性**。如果在主`numpy`命名空间中实现，可能会破坏向后兼容性的内容。'
- en: Name Differences
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称差异
- en: Many functions have been renamed in the spec from NumPy. These are otherwise
    identical in behavior, and are thus all **compatible** changes, unless otherwise
    noted.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 许多函数在规范中从NumPy中改名。除非另有说明，否则这些函数在行为上是完全相同的，因此都是**兼容**的更改。
- en: '#### Function Name Changes'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 函数名称更改'
- en: The following functions are named differently in the array API
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 数组API中以下函数的命名方式不同
- en: '| Array API name | NumPy namespace name | Notes |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 数组API名称 | NumPy命名空间名称 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `acos` | `arccos` |  |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | `arccos` |  |'
- en: '| `acosh` | `arccosh` |  |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | `arccosh` |  |'
- en: '| `asin` | `arcsin` |  |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `asin` | `arcsin` |  |'
- en: '| `asinh` | `arcsinh` |  |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` | `arcsinh` |  |'
- en: '| `atan` | `arctan` |  |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `atan` | `arctan` |  |'
- en: '| `atan2` | `arctan2` |  |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` | `arctan2` |  |'
- en: '| `atanh` | `arctanh` |  |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` | `arctanh` |  |'
- en: '| `bitwise_left_shift` | `left_shift` |  |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` | `left_shift` |  |'
- en: '| `bitwise_invert` | `invert` |  |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | `invert` |  |'
- en: '| `bitwise_right_shift` | `right_shift` |  |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` | `right_shift` |  |'
- en: '| `bool` | `bool_` | This is **breaking** because `np.bool` is currently a
    deprecated alias for the built-in `bool`. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | `bool_` | 这是**破坏性**的，因为`np.bool`当前是内置`bool`的弃用别名。 |'
- en: '| `concat` | `concatenate` |  |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `concat` | `concatenate` |  |'
- en: '| `matrix_norm` and `vector_norm` | `norm` | `matrix_norm` and `vector_norm`
    each do a limited subset of what `np.norm` does. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm`和`vector_norm` | `norm` | `matrix_norm`和`vector_norm`各自只执行`np.norm`的有限子集。
    |'
- en: '| `permute_dims` | `transpose` | Unlike `np.transpose`, the `axis` keyword-argument
    to `permute_dims` is required. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `permute_dims` | `transpose` | 与`np.transpose`不同，`permute_dims`需要`axis`关键字参数。
    |'
- en: '| `pow` | `power` |  |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `pow` | `power` |  |'
- en: '| `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values` | `unique`
    | Each is equivalent to `np.unique` with certain flags set. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all`, `unique_counts`, `unique_inverse`和`unique_values` | `unique`
    | 每个函数等同于设置了特定标志的`np.unique`。 |'
- en: Function instead of method
  id: totrans-282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数而非方法
- en: '`astype` is a function in the array API, whereas it is a method on `ndarray`
    in `numpy`.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astype`是数组API中的一个函数，而在`numpy`中是`ndarray`的一个方法。'
- en: '`linalg` Namespace Differences'
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`linalg`命名空间差异'
- en: 'These functions are in the `linalg` sub-namespace in the array API, but are
    only in the top-level namespace in NumPy:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在数组API的`linalg`子命名空间中，但在NumPy中仅在顶层命名空间中：
- en: '`cross`'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross`'
- en: '`diagonal`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diagonal`'
- en: '`matmul` (*)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul` (*)'
- en: '`outer`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outer`'
- en: '`tensordot` (*)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensordot` (*)'
- en: '`trace`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace`'
- en: '(*): These functions are also in the top-level namespace in the array API.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '(*): 这些函数也在数组API的顶层命名空间中。'
- en: Keyword Argument Renames
  id: totrans-293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键字参数重命名
- en: The following functions have keyword arguments that have been renamed. The functionality
    of the keyword argument is identical unless otherwise stated. Renamed keyword
    arguments with the same semantic definition may be considered either **compatible**
    or **breaking**, depending on how the change is implemented.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数具有重命名的关键字参数。除非另有说明，关键字参数的功能是相同的。具有相同语义定义的重命名关键字参数可能被视为**兼容**或**破坏性**，具体取决于更改的实现方式。
- en: Note, this page does not list function keyword arguments that are in the main
    `numpy` namespace but not in the array API. Such keyword arguments are omitted
    from `numpy.array_api` for **strictness**, as the spec allows functions to include
    additional keyword arguments from those required.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此页面不列出在数组API中但不在主`numpy`命名空间中的函数关键字参数。出于**严格性**的考虑，这些关键字参数在`numpy.array_api`中被省略，因为规范允许函数包含额外的关键字参数，而不仅限于所需的参数。
- en: '| Function | Array API keyword name | NumPy keyword name | Notes |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 数组API关键字名称 | NumPy关键字名称 | 备注 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `argsort` and `sort` | `stable` | `kind` | The definitions of `stable` and
    `kind` differ, as do the default values. The change of the default value makes
    this **breaking**. See [Set Functions Differences](#array-api-set-functions-differences).
    |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `argsort`和`sort` | `stable` | `kind` | `stable`和`kind`的定义不同，以及默认值也不同。默认值的更改使得这是**破坏性**的。参见[集合函数差异](#array-api-set-functions-differences)。
    |'
- en: '| `matrix_rank` | `rtol` | `tol` | The definitions of `rtol` and `tol` differ,
    as do the default values. The change of the default value makes this **breaking**.
    See [Linear Algebra Differences](#array-api-linear-algebra-differences). |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '`matrix_rank` | `rtol` | `tol` | `rtol` 和 `tol` 的定义不同，以及默认值。默认值的更改使这个**破坏性的**。请参阅[线性代数差异](#array-api-linear-algebra-differences)。'
- en: '| `pinv` | `rtol` | `rcond` | The definitions of `rtol` and `rcond` are the
    same, but their default values differ, making this **breaking**. See [Linear Algebra
    Differences](#array-api-linear-algebra-differences). |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '`pinv` | `rtol` | `rcond` | `rtol` 和 `rcond` 的定义相同，但它们的默认值不同，导致这是**破坏性的**。请参阅[线性代数差异](#array-api-linear-algebra-differences)。'
- en: '| `std` and `var` | `correction` | `ddof` |  |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '`std` 和 `var` | `correction` | `ddof` |  |'
- en: '| `reshape` | `shape` | `newshape` | The argument may be passed as a positional
    or keyword argument for both NumPy and the array API. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '`reshape` | `shape` | `newshape` | 参数可以作为NumPy和数组API的位置参数或关键字参数传递。'
- en: '### Type Promotion Differences'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型提升差异'
- en: Type promotion is the biggest area where NumPy deviates from the spec. The most
    notable difference is that NumPy does value-based casting in many cases. The spec
    explicitly disallows value-based casting. In the array API, the result type of
    any operation is always determined entirely by the input types, independently
    of values or shapes.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提升是NumPy与规范最大的差异领域。最显著的区别是NumPy在许多情况下进行基于值的转换。规范明确禁止基于值的转换。在数组API中，任何操作的结果类型始终完全由输入类型确定，与值或形状无关。
- en: '| Feature | Type | Notes |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: 特征 | 类型 | 注释 |
- en: '| --- | --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- |'
- en: '| Limited set of dtypes. | **Strictness** | `numpy.array_api` only implements
    those [dtypes that are required by the spec](https://data-apis.org/array-api/latest/API_specification/data_types.html).
    |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: 有限的dtype集合。 | **严格性** | `numpy.array_api`仅实现了[规范所需的那些dtype](https://data-apis.org/array-api/latest/API_specification/data_types.html)。
- en: '| Operators (like `+`) with Python scalars only accept matching scalar types.
    | **Strictness** | For example, `<int32 array> + 1.0` is not allowed. See [the
    spec rules for mixing arrays and Python scalars](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars).
    |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: 运算符（如`+`）与 Python 标量仅接受匹配的标量类型。 | **严格性** | 例如，`<int32 array> + 1.0` 是不允许的。请参阅[混合数组和Python标量的规范规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)。
- en: '| Operators (like `+`) with Python scalars always return the same dtype as
    the array. | **Breaking** | For example, `numpy.array_api.asarray(0., dtype=float32)
    + 1e64` is a `float32` array. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: 运算符（如`+`）与 Python 标量始终返回与数组相同的dtype。 | **破坏性的** | 例如，`numpy.array_api.asarray(0.,
    dtype=float32) + 1e64` 是一个 `float32` 数组。
- en: '| In-place operators are disallowed when the left-hand side would be promoted.
    | **Breaking** | Example: `a = np.array(1, dtype=np.int8); a += np.array(1, dtype=np.int16)`.
    The spec explicitly disallows this. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: 当左侧将被提升时，不允许原地操作符。 | **破坏性的** | 例如：`a = np.array(1, dtype=np.int8); a += np.array(1,
    dtype=np.int16)`。规范明确禁止这样做。
- en: '| In-place operators are disallowed when the right-hand side operand cannot
    broadcast to the shape of the left-hand side operand. | **Strictness** | This
    so-called “reverse broadcasting” should not be allowed. Example: `a = np.empty((2,
    3, 4)); a += np.empty((3, 4))` should error. See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: 当右侧操作数无法广播到左侧操作数的形状时，不允许原地操作符。 | **严格性** | 这种所谓的“反向广播”不应该被允许。例如：`a = np.empty((2,
    3, 4)); a += np.empty((3, 4))` 应该报错。请参阅[https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。
- en: '| `int` promotion for operators is only specified for integers within the bounds
    of the dtype. | **Strictness** | `numpy.array_api` fallsback to `np.ndarray` behavior
    (either cast or raise `OverflowError`). |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: 运算符的`int`提升仅对在dtype范围内的整数指定。 | **严格性** | `numpy.array_api`回退到`np.ndarray`行为（要么转换，要么引发`OverflowError`）。
- en: '| `__pow__` and `__rpow__` do not do value-based casting for 0-D arrays. |
    **Breaking** | For example, `np.array(0., dtype=float32)**np.array(0., dtype=float64)`
    is `float32`. Note that this is value-based casting on 0-D arrays, not scalars.
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '`__pow__` 和 `__rpow__` 不对0-D数组进行基于值的转换。 | **破坏性的** | 例如，`np.array(0., dtype=float32)**np.array(0.,
    dtype=float64)` 是 `float32`。请注意，这是对0-D数组进行基于值的转换，而不是标量。'
- en: '| No cross-kind casting. | **Strictness** | Namely, boolean, integer, and floating-point
    data types do not cast to each other, except explicitly with `astype` (this is
    separate from the behavior with Python scalars). |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| 不允许不同类型之间的转换。 | **严格性** | 即，布尔值、整数和浮点数类型不会相互转换，除非明确使用 `astype`（这与 Python
    标量的行为不同）。'
- en: '| No casting unsigned integer dtypes to floating dtypes (e.g., `int64 + uint64
    -> float64`. | **Strictness** |  |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| 不允许将无符号整数类型转换为浮点类型（例如，`int64 + uint64 -> float64`）。 | **严格性** |  |'
- en: '| `can_cast` and `result_type` are restricted. | **Strictness** | The `numpy.array_api`
    implementations disallow cross-kind casting. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `can_cast` 和 `result_type` 受限。 | **严格性** | `numpy.array_api` 实现不允许不同类型之间的转换。'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `sum` 和 `prod` 在 `dtype=None` 时总是将 `float32` 上转换为 `float64`。 | **破坏性** |  |'
- en: Indexing Differences
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引差异
- en: The spec requires only a subset of indexing, but all indexing rules in the spec
    are compatible with NumPy’s more broad indexing rules.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 规范要求只使用索引的子集，但规范中的所有索引规则与 NumPy 更广泛的索引规则兼容。
- en: '| Feature | Type | Notes |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | 类型 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No implicit ellipses (`...`). | **Strictness** | If an index does not include
    an ellipsis, all axes must be indexed. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 不允许隐式省略号（`...`）。 | **严格性** | 如果索引不包括省略号，则必须对所有轴进行索引。'
- en: '| The start and stop of a slice may not be out of bounds. | **Strictness**
    | For a slice `i:j:k`, only the following are allowed:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '| 切片的起始和结束不能超出边界。 | **严格性** | 对于切片 `i:j:k`，只允许以下情况：'
- en: '`i` or `j` omitted (`None`).'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 省略 `i` 或 `j`（`None`）。
- en: '`-n <= i <= max(0, n - 1)`.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n <= i <= max(0, n - 1)`。'
- en: For `k > 0` or `k` omitted (`None`), `-n <= j <= n`.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `k > 0` 或省略 `k`（`None`），`-n <= j <= n`。
- en: For `k < 0`, `-n - 1 <= j <= max(0, n - 1)`.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `k < 0`，`-n - 1 <= j <= max(0, n - 1)`。
- en: '|'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Boolean array indices are only allowed as the sole index. | **Strictness**
    |  |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 仅允许布尔数组索引作为唯一索引。 | **严格性** |  |'
- en: '| Integer array indices are not allowed at all. | **Strictness** | With the
    exception of 0-D arrays, which are treated like integers. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 整数数组索引根本不允许。 | **严格性** | 除了被视为整数的 0-D 数组之外。'
- en: '### Type Strictness'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型严格性'
- en: 'Functions in `numpy.array_api` restrict their inputs to only those dtypes that
    are explicitly required by the spec, even when the wrapped corresponding NumPy
    function would allow a broader set. Here, we list each function and the dtypes
    that are allowed in `numpy.array_api`. These are **strictness** differences because
    the spec does not require that other dtypes result in an error. The categories
    here are defined as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.array_api` 中的函数将它们的输入限制为规范明确要求的那些数据类型，即使包装的对应 NumPy 函数允许更广泛的数据类型。在这里，我们列出每个函数及在
    `numpy.array_api` 中允许的数据类型。这些是**严格性**差异，因为规范并不要求其他数据类型会导致错误。这里的类别定义如下：'
- en: '**Floating-point**: `float32` or `float64`.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**：`float32` 或 `float64`。'
- en: '**Integer**: Any signed or unsigned integer dtype (`int8`, `int16`, `int32`,
    `int64`, `uint8`, `uint16`, `uint32`, or `uint64`).'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**：任何有符号或无符号整数类型（`int8`、`int16`、`int32`、`int64`、`uint8`、`uint16`、`uint32`
    或 `uint64`）。'
- en: '**Boolean**: `bool`.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**：`bool`。'
- en: '**Integer or boolean**: Any signed or unsigned integer dtype, or `bool`. For
    two-argument functions, both arguments must be integer or both must be `bool`.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数或布尔值**：任何有符号或无符号整数类型，或 `bool`。对于两个参数的函数，两个参数必须都是整数或都是 `bool`。'
- en: '**Numeric**: Any integer or floating-point dtype. For two-argument functions,
    both arguments must be integer or both must be floating-point.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值**：任何整数或浮点数类型。对于两个参数的函数，两个参数必须都是整数或都是浮点数。'
- en: '**All**: Any of the above dtype categories. For two-argument functions, both
    arguments must be the same kind (integer, floating-point, or boolean).'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部**：上述数据类型类别中的任何类型。对于两个参数的函数，两个参数必须是相同类型（整数、浮点数或布尔值）。'
- en: In all cases, the return dtype is chosen according to [the rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html),
    and does not differ from NumPy’s return dtype for any of the allowed input dtypes,
    except in the cases mentioned specifically in the subsections below.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，返回的数据类型根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html)选择，并且对于允许的任何输入数据类型，与
    NumPy 的返回数据类型没有区别，除非在下面的子节中明确提到的情况。
- en: Elementwise Functions
  id: totrans-340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐元素函数
- en: '| Function Name | Dtypes |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `abs` | Numeric |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 数值 |'
- en: '| `acos` | Floating-point |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | 浮点数 |'
- en: '| `acosh` | Floating-point |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | 浮点数 |'
- en: '| `add` | Numeric |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 数值 |'
- en: '| `asin` (*) | Floating-point |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `asin` (*) | 浮点数 |'
- en: '| `asinh` (*) | Floating-point |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` (*) | 浮点数 |'
- en: '| `atan` (*) | Floating-point |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `atan` (*) | 浮点数 |'
- en: '| `atan2` (*) | Floating-point |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` (*) | 浮点数 |'
- en: '| `atanh` (*) | Floating-point |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` (*) | 浮点数 |'
- en: '| `bitwise_and` | Integer or boolean |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_and` | 整数或布尔值 |'
- en: '| `bitwise_invert` | Integer or boolean |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | 整数或布尔值 |'
- en: '| `bitwise_left_shift` (*) | Integer |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` (*) | 整数 |'
- en: '| `bitwise_or` | Integer or boolean |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or` | 整数或布尔值 |'
- en: '| `bitwise_right_shift` (*) | Integer |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` (*) | 整数 |'
- en: '| `bitwise_xor` | Integer or boolean |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor` | 整数或布尔值 |'
- en: '| `ceil` | Numeric |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `ceil` | 数值 |'
- en: '| `cos` | Floating-point |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `cos` | 浮点数 |'
- en: '| `cosh` | Floating-point |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `cosh` | 浮点数 |'
- en: '| `divide` | Floating-point |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `divide` | 浮点数 |'
- en: '| `equal` | All |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `equal` | 所有 |'
- en: '| `exp` | Floating-point |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| `exp` | 浮点数 |'
- en: '| `expm1` | Floating-point |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `expm1` | 浮点数 |'
- en: '| `floor` | Numeric |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `floor` | 数值 |'
- en: '| `floor_divide` | Numeric |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `floor_divide` | 数值 |'
- en: '| `greater` | Numeric |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `greater` | 数值 |'
- en: '| `greater_equal` | Numeric |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `greater_equal` | 数值 |'
- en: '| `isfinite` | Numeric |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `isfinite` | 数值 |'
- en: '| `isinf` | Numeric |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `isinf` | 数值 |'
- en: '| `isnan` | Numeric |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `isnan` | 数值 |'
- en: '| `less` | Numeric |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `less` | 数值 |'
- en: '| `less_equal` | Numeric |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `less_equal` | 数值 |'
- en: '| `log` | Floating-point |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 浮点数 |'
- en: '| `logaddexp` | Floating-point |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp` | 浮点数 |'
- en: '| `log10` | Floating-point |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `log10` | 浮点数 |'
- en: '| `log1p` | Floating-point |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `log1p` | 浮点数 |'
- en: '| `log2` | Floating-point |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `log2` | 浮点数 |'
- en: '| `logical_and` | Boolean |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `logical_and` | 布尔值 |'
- en: '| `logical_not` | Boolean |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `logical_not` | 布尔值 |'
- en: '| `logical_or` | Boolean |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `logical_or` | 布尔值 |'
- en: '| `logical_xor` | Boolean |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `logical_xor` | 布尔值 |'
- en: '| `multiply` | Numeric |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `multiply` | 数值 |'
- en: '| `negative` | Numeric |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `negative` | 数值 |'
- en: '| `not_equal` | All |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `not_equal` | 所有 |'
- en: '| `positive` | Numeric |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `positive` | 数值 |'
- en: '| `pow` (*) | Numeric |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `pow` (*) | 数值 |'
- en: '| `remainder` | Numeric |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `remainder` | 数值 |'
- en: '| `round` | Numeric |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `round` | 数值 |'
- en: '| `sign` | Numeric |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `sign` | 数值 |'
- en: '| `sin` | Floating-point |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `sin` | 浮点数 |'
- en: '| `sinh` | Floating-point |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| `sinh` | 浮点数 |'
- en: '| `sqrt` | Floating-point |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt` | 浮点数 |'
- en: '| `square` | Numeric |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| `square` | 数值 |'
- en: '| `subtract` | Numeric |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| `subtract` | 数值 |'
- en: '| `tan` | Floating-point |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| `tan` | 浮点数 |'
- en: '| `tanh` | Floating-point |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `tanh` | 浮点数 |'
- en: '| `trunc` | Numeric |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `trunc` | 数值 |'
- en: (*) These functions have different names from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数与主`numpy`命名空间中的名称不同。请参阅[函数名称更改](#array-api-name-changes)。
- en: Creation Functions
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建函数
- en: '| Function Name | Dtypes |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `meshgrid` | Any (all input dtypes must be the same) |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid` | 任意（所有输入数据类型必须相同） |'
- en: Linear Algebra Functions
  id: totrans-404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性代数函数
- en: '| Function Name | Dtypes |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cholesky` | Floating-point |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` | 浮点数 |'
- en: '| `cross` | Numeric |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| `cross` | 数值 |'
- en: '| `det` | Floating-point |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `det` | 浮点数 |'
- en: '| `diagonal` | Any |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` | 任意 |'
- en: '| `eigh` | Floating-point |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| `eigh` | 浮点数 |'
- en: '| `eighvals` | Floating-point |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| `eighvals` | 浮点数 |'
- en: '| `inv` | Floating-point |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| `inv` | 浮点数 |'
- en: '| `matmul` | Numeric |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| `matmul` | 数值 |'
- en: '| `matrix_norm` (*) | Floating-point |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` (*) | 浮点数 |'
- en: '| `matrix_power` | Floating-point |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_power` | 浮点数 |'
- en: '| `matrix_rank` | Floating-point |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | 浮点数 |'
- en: '| `matrix_transpose` (**) | Any |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose` (**) | 任意 |'
- en: '| `outer` | Numeric |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| `outer` | 数值 |'
- en: '| `pinv` | Floating-point |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | 浮点数 |'
- en: '| `qr` | Floating-point |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| `qr` | 浮点数 |'
- en: '| `slogdet` | Floating-point |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| `slogdet` | 浮点数 |'
- en: '| `solve` | Floating-point |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| `solve` | 浮点数 |'
- en: '| `svd` | Floating-point |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `svd` | 浮点数 |'
- en: '| `svdvals` (**) | Floating-point |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `svdvals` (**) | 浮点数 |'
- en: '| `tensordot` | Numeric |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` | 数值 |'
- en: '| `trace` | Numeric |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `trace` | 数值 |'
- en: '| `vecdot` (**) | Numeric |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot` (**) | 数值 |'
- en: '| `vector_norm` (*) | Floating-point |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `vector_norm` (*) | 浮点数 |'
- en: (*) These functions are split from `norm` from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数是从主`numpy`命名空间中的`norm`中拆分出来的。请参阅[函数名称更改](#array-api-name-changes)。
- en: (**) These functions are new in the array API and are not in the main `numpy`
    namespace.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: (**) 这些函数是数组API中的新功能，不在主`numpy`命名空间中。
- en: Array Object
  id: totrans-432
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数组对象
- en: All the special `__operator__` methods on the array object behave identically
    to their corresponding functions (see [the spec](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)
    for a list of which methods correspond to which functions). The exception is that
    operators explicitly allow Python scalars according to the [rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)
    (see [Type Promotion Differences](#array-api-type-promotion-differences)).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 数组对象上的所有特殊 `__operator__` 方法的行为与其对应的函数完全相同（请参阅 [规范](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)
    以获取哪些方法对应哪些函数的列表）。唯一的例外是运算符根据 [规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)
    明确允许 Python 标量（请参阅 [类型提升差异](#array-api-type-promotion-differences)）。
- en: Array Object Differences
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组对象差异
- en: '| Feature | Type | Notes |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No array scalars | **Strictness** | The spec does not have array scalars,
    only 0-D arrays. However, other than the promotion differences outlined in [Type
    Promotion Differences](#array-api-type-promotion-differences), scalars duck type
    as 0-D arrays for the purposes of the spec. The are immutable, but the spec [does
    not require mutability](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html).
    |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| 无数组标量 | **严格性** | 规范中没有数组标量，只有 0-D 数组。然而，除了 [类型提升差异](#array-api-type-promotion-differences)
    中概述的提升差异外，标量在规范中作为 0-D 数组进行鸭子类型。它们是不可变的，但规范 [不要求可变性](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html)。
    |'
- en: '| `bool()`, `int()`, and `float()` only work on 0-D arrays. | **Strictness**
    | See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| `bool()`, `int()`, 和 `float()` 仅适用于 0-D 数组。 | **严格性** | 查看 [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。
    |'
- en: '| `__imatmul__` | **Compatible** | `np.ndarray` does not currently implement
    `__imatmul`. Note that `a @= b` should only defined when it does not change the
    shape of `a`. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| `__imatmul__` | **兼容性** | `np.ndarray` 目前未实现 `__imatmul__`。请注意，只有当 `a` 的形状不发生变化时，`a
    @= b` 才会被定义。 |'
- en: '| The `mT` attribute for matrix transpose. | **Compatible** | See [the spec
    definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)
    for `mT`. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| 矩阵转置的 `mT` 属性。 | **兼容性** | 查看 [规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)
    中的 `mT`。 |'
- en: '| The `T` attribute should error if the input is not 2-dimensional. | **Breaking**
    | See [the note in the spec](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html).
    |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| `T` 属性应在输入不是 2 维时报错。 | **破坏性变化** | 查看 [规范中的注释](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html)。
    |'
- en: '| New method `to_device` and attribute `device` | **Compatible** | The methods
    would effectively not do anything since NumPy is CPU only |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| 新方法 `to_device` 和属性 `device` | **兼容性** | 这些方法实际上不会起作用，因为 NumPy 仅支持 CPU |'
- en: Creation Functions Differences
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `copy` keyword argument to `asarray` | **Compatible** |  |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| `asarray` 的 `copy` 关键字参数 | **兼容性** |  |'
- en: '| New `device` keyword argument to all array creation functions (`asarray`,
    `arange`, `empty`, `empty_like`, `eye`, `full`, `full_like`, `linspace`, `ones`,
    `ones_like`, `zeros`, and `zeros_like`). | **Compatible** | `device` would effectively
    do nothing, since NumPy is CPU only. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| 所有数组创建函数（`asarray`、`arange`、`empty`、`empty_like`、`eye`、`full`、`full_like`、`linspace`、`ones`、`ones_like`、`zeros`
    和 `zeros_like`）新增 `device` 关键字参数。 | **兼容性** | `device` 实际上不会起作用，因为 NumPy 仅支持 CPU。
    |'
- en: Elementwise Functions Differences
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐元素函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed. | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已更名。 | **兼容性** | 查看 [函数名称更改](#array-api-name-changes)。 |'
- en: '| Elementwise functions are only defined for given input type combinations.
    | **Strictness** | See [Type Strictness](#array-api-type-strictness). |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| 逐元素函数仅对给定的输入类型组合定义。 | **严格性** | 查看 [类型严格性](#array-api-type-strictness)。 |'
- en: '| `bitwise_left_shift` and `bitwise_right_shift` are only defined for `x2`
    nonnegative. | **Strictness** |  |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` 和 `bitwise_right_shift` 仅对 `x2` 非负数定义。 | **严格性** |  |'
- en: '| `ceil`, `floor`, and `trunc` return an integer with integer input. | **Breaking**
    | `np.ceil`, `np.floor`, and `np.trunc` return a floating-point dtype on integer
    dtype input. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| `ceil`、`floor` 和 `trunc` 对整数输入返回整数。 | **破坏性更改** | `np.ceil`、`np.floor` 和
    `np.trunc` 在整数类型输入时返回浮点数类型。'
- en: '### Linear Algebra Differences'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '### 线性代数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cholesky` includes an `upper` keyword argument. | **Compatible** |  |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` 包括一个 `upper` 关键字参数。 | **兼容的** | '
- en: '| `cross` does not allow size 2 vectors (only size 3). | **Breaking** |  |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| `cross` 不允许大小为 2 的向量（仅大小为 3）。 | **破坏性更改** | '
- en: '| `diagonal` operates on the last two axes. | **Breaking** | Strictly speaking
    this can be **compatible** because `diagonal` is moved to the `linalg` namespace.
    |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` 操作在最后两个轴上。 | **破坏性更改** | 严格来说这可能是**兼容的**，因为 `diagonal` 被移动到 `linalg`
    命名空间中。'
- en: '| `eigh`, `qr`, `slogdet` and `svd` return a named tuple. | **Compatible**
    | The corresponding `numpy` functions return a `tuple`, with the resulting arrays
    in the same order. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`、`qr`、`slogdet` 和 `svd` 返回一个命名元组。 | **兼容的** | 相应的 `numpy` 函数返回一个 `tuple`，其中结果数组的顺序相同。'
- en: '| New functions `matrix_norm` and `vector_norm`. | **Compatible** | The `norm`
    function has been omitted from the array API and split into `matrix_norm` for
    matrix norms and `vector_norm` for vector norms. Note that `vector_norm` supports
    any number of axes, whereas `np.linalg.norm` only supports a single axis for vector
    norms. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `matrix_norm` 和 `vector_norm`。 | **兼容的** | `norm` 函数已从数组 API 中省略，并分为
    `matrix_norm` 用于矩阵范数和 `vector_norm` 用于向量范数。请注意，`vector_norm` 支持任意数量的轴，而 `np.linalg.norm`
    仅支持向量范数的单个轴。'
- en: '| `matrix_rank` has an `rtol` keyword argument instead of `tol`. | **Breaking**
    | In the array API, `rtol` filters singular values smaller than `rtol * largest_singular_value`.
    In `np.linalg.matrix_rank`, `tol` filters singular values smaller than `tol`.
    Furthermore, the default value for `rtol` is `max(M, N) * eps`, whereas the default
    value of `tol` in `np.linalg.matrix_rank` is `S.max() * max(M, N) * eps`, where
    `S` is the singular values of the input. The new flag name is compatible but the
    default change is breaking |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 具有 `rtol` 关键字参数而不是 `tol`。 | **破坏性更改** | 在数组 API 中，`rtol` 过滤比
    `rtol * largest_singular_value` 小的奇异值。在 `np.linalg.matrix_rank` 中，`tol` 过滤比 `tol`
    小的奇异值。此外，`rtol` 的默认值是 `max(M, N) * eps`，而 `np.linalg.matrix_rank` 中 `tol` 的默认值是
    `S.max() * max(M, N) * eps`，其中 `S` 是输入的奇异值。新标志名称是兼容的，但默认更改是破坏性的。'
- en: '| `matrix_rank` does not support 1-dimensional arrays. | **Breaking** |  |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 不支持 1 维数组。 | **破坏性更改** | '
- en: '| New function `matrix_transpose`. | **Compatible** | Unlike `np.transpose`,
    `matrix_transpose` only transposes the last two axes. See [the spec definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)
    |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `matrix_transpose`。 | **兼容的** | 与 `np.transpose` 不同，`matrix_transpose`
    只对最后两个轴进行转置。查看[规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)。'
- en: '| `outer` only supports 1-dimensional arrays. | **Breaking** | The spec currently
    only specifies behavior on 1-D arrays but future behavior will likely be to broadcast,
    rather than flatten, which is what `np.outer` does. |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| `outer` 仅支持 1 维数组。 | **破坏性更改** | 规范目前仅指定了对 1-D 数组的行为，但未来的行为可���是广播，而不是展平，这是
    `np.outer` 的行为。'
- en: '| `pinv` has an `rtol` keyword argument instead of `rcond` | **Breaking** |
    The meaning of `rtol` and `rcond` is the same, but the default value for `rtol`
    is `max(M, N) * eps`, whereas the default value for `rcond` is `1e-15`. The new
    flag name is compatible but the default change is breaking. |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` 具有 `rtol` 关键字参数而不是 `rcond`。 | **破坏性更改** | `rtol` 和 `rcond` 的含义相同，但
    `rtol` 的默认值是 `max(M, N) * eps`，而 `rcond` 的默认值是 `1e-15`。新标志名称是兼容的，但默认更改是破坏性的。'
- en: '| `solve` only accepts `x2` as a vector when it is exactly 1-dimensional. |
    **Breaking** | The `np.linalg.solve` behavior is ambiguous. See [this numpy issue](https://github.com/numpy/numpy/issues/15349)
    and [this array API specification issue](https://github.com/data-apis/array-api/issues/285)
    for more details. |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| `solve` 仅在 `x2` 精确为 1 维向量时才接受。 | **破坏性更改** | `np.linalg.solve` 的行为是模棱两可的。更多细节请参阅[此
    numpy 问题](https://github.com/numpy/numpy/issues/15349)和[此数组 API 规范问题](https://github.com/data-apis/array-api/issues/285)。'
- en: '| New function `svdvals`. | **Compatible** | Equivalent to `np.linalg.svd(compute_uv=False)`.
    |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `svdvals`。 | **兼容的** | 等同于 `np.linalg.svd(compute_uv=False)`。'
- en: '| The `axis` keyword to `tensordot` must be a tuple. | **Compatible** | In
    `np.tensordot`, it can also be an array or array-like. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` 的 `axis` 关键字必须是一个元组。 | **兼容性更改** | 在 `np.tensordot` 中��它也可以是一个数组或类似数组。
    |'
- en: '| `trace` operates on the last two axes. | **Breaking** | `np.trace` operates
    on the first two axes by default. Note that the array API `trace` does not allow
    specifying which axes to operate on. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| `trace` 在最后两个轴上操作。 | **破坏性更改** | `np.trace` 默认在前两个轴上操作。请注意，数组 API 的 `trace`
    不允许指定要操作的轴。 |'
- en: Manipulation Functions Differences
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已被重命名 | **兼容性更改** | 请参阅 [函数名称更改](#array-api-name-changes)。 |'
- en: '| `concat` has different default casting rules from `np.concatenate` | **Strictness**
    | No cross-kind casting. No value-based casting on scalars (when axis=None). |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| `concat` 具有与 `np.concatenate` 不同的默认转换规则 | **严格性** | 没有跨类型的转换。对于标量（当 axis=None
    时）不进行基于值的转换。 |'
- en: '| `stack` has different default casting rules from `np.stack` | **Strictness**
    | No cross-kind casting. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| `stack` 具有与 `np.stack` 不同的默认转换规则 | **严格性** | 没有跨类型的转换。 |'
- en: '| New function `permute_dims`. | **Compatible** | Unlike `np.transpose`, the
    `axis` keyword argument to `permute_dims` is required. |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `permute_dims`。 | **兼容性更改** | 与 `np.transpose` 不同，`permute_dims` 的 `axis`
    关键字参数是必需的。 |'
- en: '| `reshape` function has a `copy` keyword argument | **Compatible** | See [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818).
    |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` 函数现在有一个 `copy` 关键字参数 | **兼容性更改** | 请参阅 [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818)。
    |'
- en: Set Functions Differences
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| New functions `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values`.
    | **Compatible** | See [Function Name Changes](#array-api-name-changes). |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `unique_all`, `unique_counts`, `unique_inverse`, 和 `unique_values`。 |
    **兼容性更改** | 请参阅 [函数名称更改](#array-api-name-changes)。 |'
- en: '| The four `unique_*` functions return a named tuple. | **Compatible** |  |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| 四个 `unique_*` 函数返回一个命名元组。 | **兼容性更改** |  |'
- en: '| `unique_all` and `unique_indices` return indices with the same shape as `x`.
    | **Compatible** | See [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638).
    |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all` 和 `unique_indices` 返回与 `x` 相同形状的索引。 | **兼容性更改** | 请参阅 [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638)。
    |'
- en: '### Set Functions Differences'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '### 集合函数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `argsort` and `sort` have a `stable` keyword argument instead of `kind`.
    | **Breaking** | `stable` is a boolean keyword argument, defaulting to `True`.
    `kind` takes a string, defaulting to `"quicksort"`. `stable=True` is equivalent
    to `kind="stable"` and `kind=False` is equivalent to `kind="quicksort"`, although
    any sorting algorithm is allowed by the spec when `stable=False`. The new flag
    name is compatible but the default change is breaking. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 现在有一个 `stable` 关键字参数，而不是 `kind`。 | **破坏性更改** | `stable`
    是一个布尔关键字参数，默认为 `True`。 `kind` 接受一个字符串，默认为 `"quicksort"`。 `stable=True` 等同于 `kind="stable"`，`kind=False`
    等同于 `kind="quicksort"`，尽管规范允许任何排序算法当 `stable=False` 时。新的标志名称是兼容的，但默认更改是破坏性的。 |'
- en: '| `argsort` and `sort` have a `descending` keyword argument. | **Compatible**
    |  |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 现在有一个 `descending` 关键字参数。 | **兼容性更改** |  |'
- en: Statistical Functions Differences
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| `sum` 和 `prod` 在 `dtype=None` 时总是将 `float32` 上升为 `float64`。 | **破坏性更改** |  |'
- en: '| The `std` and `var` functions have a `correction` keyword argument instead
    of `ddof`. | **Compatible** |  |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` 函数现在有一个 `correction` 关键字参数，而不是 `ddof`。 | **兼容性更改** |  |'
- en: Other Differences
  id: totrans-496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他差异
- en: '| Feature | Type | Notes |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Dtypes can only be spelled as dtype objects. | **Strictness** | For example,
    `numpy.array_api.asarray([0], dtype=''int32'')` is not allowed. |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型只能以 dtype 对象的形式拼写。 | **严格性** | 例如，`numpy.array_api.asarray([0], dtype=''int32'')`
    是不允许的。 |'
- en: '| `asarray` is not implicitly called in any function. | **Strictness** | The
    exception is Python operators, which accept Python scalars in certain cases (see
    [Type Promotion Differences](#array-api-type-promotion-differences)). |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| `asarray` 不会在任何函数中隐式调用。 | **严格性** | 例外情况是 Python 运算符，在某些情况下接受 Python 标量（请参阅
    [类型提升差异](#array-api-type-promotion-differences)）。 |'
- en: '| `tril` and `triu` require the input to be at least 2-D. | **Strictness**
    |  |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| `tril` 和 `triu` 要求输入至少为 2-D。 | **严格性** |  |'
- en: '| finfo() return type uses `float` for the various attributes. | **Strictness**
    | The spec allows duck typing, so `finfo` returning dtype scalars is considered
    type compatible with `float`. |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| finfo() 返回类型使用`float`作为各属性。 | **严格性** | 规范允许鸭子类型，因此`finfo`返回 dtype 标量被视为与`float`兼容。
    |'
- en: '| Positional arguments in every function are positional-only. | **Breaking**
    | See the spec for the exact signature of each function. Note that NumPy ufuncs
    already use positional-only arguments, but non-ufuncs like `asarray` generally
    do not. |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| 每个函数的位置参数都是位置参数。 | **Breaking** | 查看规范以获取每个函数的确切签名。请注意，NumPy 的 ufuncs 已经使用位置参数，但非
    ufuncs 如`asarray`通常不使用。 |'
- en: Name Differences
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称差异
- en: Many functions have been renamed in the spec from NumPy. These are otherwise
    identical in behavior, and are thus all **compatible** changes, unless otherwise
    noted.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 规范中有许多函数从 NumPy 中重命名。除非另有说明，否则这些函数在行为上是相同的，因此都是**兼容**更改。
- en: '#### Function Name Changes'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 函数名称更改'
- en: The following functions are named differently in the array API
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数在数组 API 中的命名不同
- en: '| Array API name | NumPy namespace name | Notes |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| 数组 API 名称 | NumPy 命名空间名称 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `acos` | `arccos` |  |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | `arccos` |  |'
- en: '| `acosh` | `arccosh` |  |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | `arccosh` |  |'
- en: '| `asin` | `arcsin` |  |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| `asin` | `arcsin` |  |'
- en: '| `asinh` | `arcsinh` |  |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` | `arcsinh` |  |'
- en: '| `atan` | `arctan` |  |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
  zh: '| `atan` | `arctan` |  |'
- en: '| `atan2` | `arctan2` |  |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` | `arctan2` |  |'
- en: '| `atanh` | `arctanh` |  |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` | `arctanh` |  |'
- en: '| `bitwise_left_shift` | `left_shift` |  |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` | `left_shift` |  |'
- en: '| `bitwise_invert` | `invert` |  |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | `invert` |  |'
- en: '| `bitwise_right_shift` | `right_shift` |  |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` | `right_shift` |  |'
- en: '| `bool` | `bool_` | This is **breaking** because `np.bool` is currently a
    deprecated alias for the built-in `bool`. |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | `bool_` | 这是**破坏性**的，因为`np.bool`目前是内置`bool`的弃用别名。 |'
- en: '| `concat` | `concatenate` |  |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| `concat` | `concatenate` |  |'
- en: '| `matrix_norm` and `vector_norm` | `norm` | `matrix_norm` and `vector_norm`
    each do a limited subset of what `np.norm` does. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` 和 `vector_norm` | `norm` | `matrix_norm` 和 `vector_norm` 分别执行`np.norm`的有限子集。
    |'
- en: '| `permute_dims` | `transpose` | Unlike `np.transpose`, the `axis` keyword-argument
    to `permute_dims` is required. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| `permute_dims` | `transpose` | 与`np.transpose`不同，`permute_dims`需要`axis`关键字参数。
    |'
- en: '| `pow` | `power` |  |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| `pow` | `power` |  |'
- en: '| `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values` | `unique`
    | Each is equivalent to `np.unique` with certain flags set. |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all`, `unique_counts`, `unique_inverse`, 和 `unique_values` | `unique`
    | 每个函数等同于设置了特定标志的`np.unique`。 |'
- en: Function instead of method
  id: totrans-526
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数而非方法
- en: '`astype` is a function in the array API, whereas it is a method on `ndarray`
    in `numpy`.'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astype`是数组 API 中的函数，而在`numpy`中是`ndarray`的方法。'
- en: '`linalg` Namespace Differences'
  id: totrans-528
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`linalg` 命名空间差异'
- en: 'These functions are in the `linalg` sub-namespace in the array API, but are
    only in the top-level namespace in NumPy:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在数组 API 中的`linalg`子命名空间中，但在 NumPy 中仅在顶层命名空间中：
- en: '`cross`'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross`'
- en: '`diagonal`'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diagonal`'
- en: '`matmul` (*)'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul` (*)'
- en: '`outer`'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outer`'
- en: '`tensordot` (*)'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensordot` (*)'
- en: '`trace`'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace`'
- en: '(*): These functions are also in the top-level namespace in the array API.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '(*): 这些函数也在数组 API 的顶层命名空间中。'
- en: Keyword Argument Renames
  id: totrans-537
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键字参数重命名
- en: The following functions have keyword arguments that have been renamed. The functionality
    of the keyword argument is identical unless otherwise stated. Renamed keyword
    arguments with the same semantic definition may be considered either **compatible**
    or **breaking**, depending on how the change is implemented.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数的关键字参数已被重命名。除非另有说明，否则关键字参数的功能是相同的。具有相同语义定义的重命名关键字参数可能被视为**兼容**或**破坏**，具体取决于更改的实现方式。
- en: Note, this page does not list function keyword arguments that are in the main
    `numpy` namespace but not in the array API. Such keyword arguments are omitted
    from `numpy.array_api` for **strictness**, as the spec allows functions to include
    additional keyword arguments from those required.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此页面不列出主`numpy`命名空间中但不在数组 API 中的函数关键字参数。出于**严格性**的考虑，这些关键字参数在`numpy.array_api`中被省略，因为规范允许函数包含额外的关键字参数，而不仅限于所需的参数。
- en: '| Function | Array API keyword name | NumPy keyword name | Notes |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 数组 API 关键字名称 | NumPy 关键字名称 | 备注 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `argsort` and `sort` | `stable` | `kind` | The definitions of `stable` and
    `kind` differ, as do the default values. The change of the default value makes
    this **breaking**. See [Set Functions Differences](#array-api-set-functions-differences).
    |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` | `stable` | `kind` | `stable` 和 `kind` 的定义不同， 默认值也不同。
    默认值的更改使得这是一个**破坏性**的更改。 请参阅[集合函数差异](#array-api-set-functions-differences)。 |'
- en: '| `matrix_rank` | `rtol` | `tol` | The definitions of `rtol` and `tol` differ,
    as do the default values. The change of the default value makes this **breaking**.
    See [Linear Algebra Differences](#array-api-linear-algebra-differences). |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | `rtol` | `tol` | `rtol` 和 `tol` 的定义不同， 默认值也不同。 默认值的更改使得这是一个**破坏性**的更改。
    请参阅[线性代数差异](#array-api-linear-algebra-differences)。 |'
- en: '| `pinv` | `rtol` | `rcond` | The definitions of `rtol` and `rcond` are the
    same, but their default values differ, making this **breaking**. See [Linear Algebra
    Differences](#array-api-linear-algebra-differences). |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | `rtol` | `rcond` | `rtol` 和 `rcond` 的定义相同，但默认值不同，这是一个**破坏性**的更改。
    请参阅[线性代数差异](#array-api-linear-algebra-differences)。 |'
- en: '| `std` and `var` | `correction` | `ddof` |  |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` | `correction` | `ddof` |  |'
- en: '| `reshape` | `shape` | `newshape` | The argument may be passed as a positional
    or keyword argument for both NumPy and the array API. |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` | `shape` | `newshape` | 参数可以作为 NumPy 和数组 API 的位置参数或关键字参数传递。 |'
- en: '#### Function Name Changes'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 函数名称更改'
- en: The following functions are named differently in the array API
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数在数组 API 中的命名不同
- en: '| Array API name | NumPy namespace name | Notes |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
  zh: '| 数组 API 名称 | NumPy 命名空间名称 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-550
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `acos` | `arccos` |  |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | `arccos` |  |'
- en: '| `acosh` | `arccosh` |  |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | `arccosh` |  |'
- en: '| `asin` | `arcsin` |  |'
  id: totrans-553
  prefs: []
  type: TYPE_TB
  zh: '| `asin` | `arcsin` |  |'
- en: '| `asinh` | `arcsinh` |  |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` | `arcsinh` |  |'
- en: '| `atan` | `arctan` |  |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| `atan` | `arctan` |  |'
- en: '| `atan2` | `arctan2` |  |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` | `arctan2` |  |'
- en: '| `atanh` | `arctanh` |  |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` | `arctanh` |  |'
- en: '| `bitwise_left_shift` | `left_shift` |  |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` | `left_shift` |  |'
- en: '| `bitwise_invert` | `invert` |  |'
  id: totrans-559
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | `invert` |  |'
- en: '| `bitwise_right_shift` | `right_shift` |  |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` | `right_shift` |  |'
- en: '| `bool` | `bool_` | This is **breaking** because `np.bool` is currently a
    deprecated alias for the built-in `bool`. |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | `bool_` | 这是一个**破坏性**的更改，因为 `np.bool` 目前是内置 `bool` 的已弃用别名。 |'
- en: '| `concat` | `concatenate` |  |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| `concat` | `concatenate` |  |'
- en: '| `matrix_norm` and `vector_norm` | `norm` | `matrix_norm` and `vector_norm`
    each do a limited subset of what `np.norm` does. |'
  id: totrans-563
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` 和 `vector_norm` | `norm` | `matrix_norm` 和 `vector_norm` 仅执行
    `np.norm` 的有限子集。 |'
- en: '| `permute_dims` | `transpose` | Unlike `np.transpose`, the `axis` keyword-argument
    to `permute_dims` is required. |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| `permute_dims` | `transpose` | 与 `np.transpose` 不同，`permute_dims` 需要 `axis`
    关键字参数。 |'
- en: '| `pow` | `power` |  |'
  id: totrans-565
  prefs: []
  type: TYPE_TB
  zh: '| `pow` | `power` |  |'
- en: '| `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values` | `unique`
    | Each is equivalent to `np.unique` with certain flags set. |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all`, `unique_counts`, `unique_inverse`, 和 `unique_values` | `unique`
    | 每个等价于带有特定标志设置的 `np.unique`。 |'
- en: Function instead of method
  id: totrans-567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数而不是方法
- en: '`astype` is a function in the array API, whereas it is a method on `ndarray`
    in `numpy`.'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`astype` 是数组 API 中的函数，而在 `numpy` 中是 `ndarray` 的方法。'
- en: '`linalg` Namespace Differences'
  id: totrans-569
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`linalg` 命名空间差异'
- en: 'These functions are in the `linalg` sub-namespace in the array API, but are
    only in the top-level namespace in NumPy:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在数组 API 中的 `linalg` 子命名空间中，但在 NumPy 中仅在顶层命名空间中：
- en: '`cross`'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross`'
- en: '`diagonal`'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diagonal`'
- en: '`matmul` (*)'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul` (*)'
- en: '`outer`'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outer`'
- en: '`tensordot` (*)'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tensordot` (*)'
- en: '`trace`'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace`'
- en: '(*): These functions are also in the top-level namespace in the array API.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '(*): 这些函数也在数组 API 的顶层命名空间中。'
- en: Keyword Argument Renames
  id: totrans-578
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关键字参数重命名
- en: The following functions have keyword arguments that have been renamed. The functionality
    of the keyword argument is identical unless otherwise stated. Renamed keyword
    arguments with the same semantic definition may be considered either **compatible**
    or **breaking**, depending on how the change is implemented.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数的关键字参数已被重命名。 除非另有说明，否则关键字参数的功能是相同的。 除非另有说明，具有相同语义定义的重命名关键字参数可能被视为**兼容**或**破坏**，具体取决于更改的实现方式。
- en: Note, this page does not list function keyword arguments that are in the main
    `numpy` namespace but not in the array API. Such keyword arguments are omitted
    from `numpy.array_api` for **strictness**, as the spec allows functions to include
    additional keyword arguments from those required.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此页面不列出主 `numpy` 命名空间中存在但不在数组 API 中的函数关键字参数。 为了**严格性**，`numpy.array_api`
    中省略了这些关键字参数，因为规范允许函数包含额外的关键字参数，而不是所需的参数。
- en: '| Function | Array API keyword name | NumPy keyword name | Notes |'
  id: totrans-581
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 数组 API 关键字名称 | NumPy 关键字名称 | 注释 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-582
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `argsort` and `sort` | `stable` | `kind` | The definitions of `stable` and
    `kind` differ, as do the default values. The change of the default value makes
    this **breaking**. See [Set Functions Differences](#array-api-set-functions-differences).
    |'
  id: totrans-583
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` | `stable` | `kind` | `stable` 和 `kind` 的定义不同，且默认值也不同。默认值的更改导致了这一**变动**。请参见[集合函数差异](#array-api-set-functions-differences)。
    |'
- en: '| `matrix_rank` | `rtol` | `tol` | The definitions of `rtol` and `tol` differ,
    as do the default values. The change of the default value makes this **breaking**.
    See [Linear Algebra Differences](#array-api-linear-algebra-differences). |'
  id: totrans-584
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | `rtol` | `tol` | `rtol` 和 `tol` 的定义不同，且默认值也不同。默认值的更改导致了这一**变动**。请参见[线性代数差异](#array-api-linear-algebra-differences)。
    |'
- en: '| `pinv` | `rtol` | `rcond` | The definitions of `rtol` and `rcond` are the
    same, but their default values differ, making this **breaking**. See [Linear Algebra
    Differences](#array-api-linear-algebra-differences). |'
  id: totrans-585
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | `rtol` | `rcond` | `rtol` 和 `rcond` 的定义相同，但它们的默认值不同，导致了这一**变动**。请参见[线性代数差异](#array-api-linear-algebra-differences)。
    |'
- en: '| `std` and `var` | `correction` | `ddof` |  |'
  id: totrans-586
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` | `correction` | `ddof` |  |'
- en: '| `reshape` | `shape` | `newshape` | The argument may be passed as a positional
    or keyword argument for both NumPy and the array API. |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` | `shape` | `newshape` | 对于 NumPy 和数组 API，参数可以作为位置参数或关键字参数传递。 |'
- en: '### Type Promotion Differences'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型提升差异'
- en: Type promotion is the biggest area where NumPy deviates from the spec. The most
    notable difference is that NumPy does value-based casting in many cases. The spec
    explicitly disallows value-based casting. In the array API, the result type of
    any operation is always determined entirely by the input types, independently
    of values or shapes.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提升是 NumPy 与规范偏离最大的领域。最显著的区别是 NumPy 在许多情况下进行基于值的转换。规范明确禁止基于值的转换。在数组 API 中，任何操作的结果类型完全由输入类型确定，与值或形状无关。
- en: '| Feature | Type | Notes |'
  id: totrans-590
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-591
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Limited set of dtypes. | **Strictness** | `numpy.array_api` only implements
    those [dtypes that are required by the spec](https://data-apis.org/array-api/latest/API_specification/data_types.html).
    |'
  id: totrans-592
  prefs: []
  type: TYPE_TB
  zh: '| 有限的数据类型集合。 | **严格性** | `numpy.array_api` 仅实现了规范所需的那些[数据类型](https://data-apis.org/array-api/latest/API_specification/data_types.html)。
    |'
- en: '| Operators (like `+`) with Python scalars only accept matching scalar types.
    | **Strictness** | For example, `<int32 array> + 1.0` is not allowed. See [the
    spec rules for mixing arrays and Python scalars](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars).
    |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| 仅接受与 Python 标量匹配的标量类型的操作符（如 `+`）。 | **严格性** | 例如，不允许 `<int32 array> + 1.0`。请参见[规范中有关混合数组和
    Python 标量的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)。
    |'
- en: '| Operators (like `+`) with Python scalars always return the same dtype as
    the array. | **Breaking** | For example, `numpy.array_api.asarray(0., dtype=float32)
    + 1e64` is a `float32` array. |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| 与 Python 标量进行操作（如 `+`）始终返回与数组相同的数据类型。 | **变动** | 例如，`numpy.array_api.asarray(0.,
    dtype=float32) + 1e64` 是一个 `float32` 数组。 |'
- en: '| In-place operators are disallowed when the left-hand side would be promoted.
    | **Breaking** | Example: `a = np.array(1, dtype=np.int8); a += np.array(1, dtype=np.int16)`.
    The spec explicitly disallows this. |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| 当左侧操作数将被提升时，不允许原地操作符。 | **变动** | 例如：`a = np.array(1, dtype=np.int8); a +=
    np.array(1, dtype=np.int16)`。规范明确禁止这种情况。 |'
- en: '| In-place operators are disallowed when the right-hand side operand cannot
    broadcast to the shape of the left-hand side operand. | **Strictness** | This
    so-called “reverse broadcasting” should not be allowed. Example: `a = np.empty((2,
    3, 4)); a += np.empty((3, 4))` should error. See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
  zh: '| 当右侧操作数无法广播到左侧操作数的形状时，不允许原地操作符。 | **严格性** | 这种所谓的“反向广播”不应被允许。例如：`a = np.empty((2,
    3, 4)); a += np.empty((3, 4))` 应该报错。请参见[https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。
    |'
- en: '| `int` promotion for operators is only specified for integers within the bounds
    of the dtype. | **Strictness** | `numpy.array_api` fallsback to `np.ndarray` behavior
    (either cast or raise `OverflowError`). |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
  zh: '| 仅对数据类型范围内的整数指定运算符的`int`提升。 | **严格性** | `numpy.array_api` 回退到 `np.ndarray`
    行为（要么转换，要么引发 `OverflowError`）。 |'
- en: '| `__pow__` and `__rpow__` do not do value-based casting for 0-D arrays. |
    **Breaking** | For example, `np.array(0., dtype=float32)**np.array(0., dtype=float64)`
    is `float32`. Note that this is value-based casting on 0-D arrays, not scalars.
    |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
  zh: '| `__pow__`和`__rpow__`不对0维数组进行基于值的转换。 | **破坏性变化** | 例如，`np.array(0., dtype=float32)**np.array(0.,
    dtype=float64)`是`float32`。请注意，这是对0维数组的基于值的转换，而不是标量。'
- en: '| No cross-kind casting. | **Strictness** | Namely, boolean, integer, and floating-point
    data types do not cast to each other, except explicitly with `astype` (this is
    separate from the behavior with Python scalars). |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| 不允许不同种类之间的转换。 | **严格性** | 即，布尔值、整数和浮点数数据类型不会相互转换，除非使用`astype`（这与Python标量的行为是分开的）。'
- en: '| No casting unsigned integer dtypes to floating dtypes (e.g., `int64 + uint64
    -> float64`. | **Strictness** |  |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| 不允许将无符号整数数据类型转换为浮点数据类型（例如，`int64 + uint64 -> float64`）。 | **严格性** |  |'
- en: '| `can_cast` and `result_type` are restricted. | **Strictness** | The `numpy.array_api`
    implementations disallow cross-kind casting. |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| `can_cast`和`result_type`受限制。 | **严格性** | `numpy.array_api`实现不允许不同种类之间的转换。'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
  zh: '| 当`dtype=None`时，`sum`和`prod`总是将`float32`向上转换为`float64`。 | **破坏性变化** |  |'
- en: Indexing Differences
  id: totrans-603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引差异
- en: The spec requires only a subset of indexing, but all indexing rules in the spec
    are compatible with NumPy’s more broad indexing rules.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 规范仅要求索引的子集，但规范中的所有索引规则与NumPy更广泛的索引规则兼容。
- en: '| Feature | Type | Notes |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No implicit ellipses (`...`). | **Strictness** | If an index does not include
    an ellipsis, all axes must be indexed. |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| 不允许隐式省略号（`...`）。 | **严格性** | 如果索引不包括省略号，则必须对所有轴进行索引。'
- en: '| The start and stop of a slice may not be out of bounds. | **Strictness**
    | For a slice `i:j:k`, only the following are allowed:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '| 切片的起始和结束不能超出边界。 | **严格性** | 对于切片`i:j:k`，只允许以下情况：'
- en: '`i` or `j` omitted (`None`).'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 省略`i`或`j`（`None`）。
- en: '`-n <= i <= max(0, n - 1)`.'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n <= i <= max(0, n - 1)`。'
- en: For `k > 0` or `k` omitted (`None`), `-n <= j <= n`.
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`k > 0`或省略`k`（`None`），`-n <= j <= n`。
- en: For `k < 0`, `-n - 1 <= j <= max(0, n - 1)`.
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`k < 0`，`-n - 1 <= j <= max(0, n - 1)`。
- en: '|'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Boolean array indices are only allowed as the sole index. | **Strictness**
    |  |'
  id: totrans-614
  prefs: []
  type: TYPE_TB
  zh: '| 布尔数组索引仅允许作为唯一索引。 | **严格性** |  |'
- en: '| Integer array indices are not allowed at all. | **Strictness** | With the
    exception of 0-D arrays, which are treated like integers. |'
  id: totrans-615
  prefs: []
  type: TYPE_TB
  zh: '| 不允许整数数组索引。 | **严格性** | 除了0维数组，它们被视为整数。'
- en: '### Type Strictness'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '### 类型严格性'
- en: 'Functions in `numpy.array_api` restrict their inputs to only those dtypes that
    are explicitly required by the spec, even when the wrapped corresponding NumPy
    function would allow a broader set. Here, we list each function and the dtypes
    that are allowed in `numpy.array_api`. These are **strictness** differences because
    the spec does not require that other dtypes result in an error. The categories
    here are defined as follows:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.array_api`中的函数限制其输入仅限于规范明确要求的那些数据类型，即使包装的对应NumPy函数允许更广泛的数据类型。在这里，我们列出每个函数以及在`numpy.array_api`中允许的数据类型。这些是**严格性**差异，因为规范不要求其他数据类型会导致错误。这里的类别定义如下：'
- en: '**Floating-point**: `float32` or `float64`.'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**：`float32`或`float64`。'
- en: '**Integer**: Any signed or unsigned integer dtype (`int8`, `int16`, `int32`,
    `int64`, `uint8`, `uint16`, `uint32`, or `uint64`).'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**：任何有符号或无符号整数数据类型（`int8`、`int16`、`int32`、`int64`、`uint8`、`uint16`、`uint32`或`uint64`）。'
- en: '**Boolean**: `bool`.'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**：`bool`。'
- en: '**Integer or boolean**: Any signed or unsigned integer dtype, or `bool`. For
    two-argument functions, both arguments must be integer or both must be `bool`.'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数或布尔值**：任何有符号或无符号整数数据类型，或`bool`。对于两个参数的函数，两个参数必须是整数或都是`bool`。'
- en: '**Numeric**: Any integer or floating-point dtype. For two-argument functions,
    both arguments must be integer or both must be floating-point.'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值**：任何整数或浮点数数据类型。对于两个参数的函数，两个参数必须是整数或浮点数。'
- en: '**All**: Any of the above dtype categories. For two-argument functions, both
    arguments must be the same kind (integer, floating-point, or boolean).'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部**：上述数据类型类别中的任何一个。对于两个参数的函数，两个参数必须是相同种类（整数、浮点数或布尔值）。'
- en: In all cases, the return dtype is chosen according to [the rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html),
    and does not differ from NumPy’s return dtype for any of the allowed input dtypes,
    except in the cases mentioned specifically in the subsections below.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，返回的数据类型根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html)选择，并且与NumPy对于任何允许的输入数据类型的返回数据类型没有区别，除非在下面的子章节中明确提到的情况。
- en: Elementwise Functions
  id: totrans-625
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐元素函数
- en: '| Function Name | Dtypes |'
  id: totrans-626
  prefs: []
  type: TYPE_TB
  zh: 函数名称 | 数据类型 |
- en: '| --- | --- |'
  id: totrans-627
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `abs` | Numeric |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 数值 |'
- en: '| `acos` | Floating-point |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | 浮点数 |'
- en: '| `acosh` | Floating-point |'
  id: totrans-630
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | 浮点数 |'
- en: '| `add` | Numeric |'
  id: totrans-631
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 数值 |'
- en: '| `asin` (*) | Floating-point |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
  zh: '| `asin` (*) | 浮点数 |'
- en: '| `asinh` (*) | Floating-point |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` (*) | 浮点数 |'
- en: '| `atan` (*) | Floating-point |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
  zh: '| `atan` (*) | 浮点数 |'
- en: '| `atan2` (*) | Floating-point |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` (*) | 浮点数 |'
- en: '| `atanh` (*) | Floating-point |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` (*) | 浮点数 |'
- en: '| `bitwise_and` | Integer or boolean |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_and` | 整数或布尔值 |'
- en: '| `bitwise_invert` | Integer or boolean |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | 整数或布尔值 |'
- en: '| `bitwise_left_shift` (*) | Integer |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` (*) | 整数 |'
- en: '| `bitwise_or` | Integer or boolean |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or` | 整数或布尔值 |'
- en: '| `bitwise_right_shift` (*) | Integer |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` (*) | 整数 |'
- en: '| `bitwise_xor` | Integer or boolean |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor` | 整数或布尔值 |'
- en: '| `ceil` | Numeric |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
  zh: '| `ceil` | 数值 |'
- en: '| `cos` | Floating-point |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| `cos` | 浮点数 |'
- en: '| `cosh` | Floating-point |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| `cosh` | 浮点数 |'
- en: '| `divide` | Floating-point |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
  zh: '| `divide` | 浮点数 |'
- en: '| `equal` | All |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
  zh: '| `equal` | 所有 |'
- en: '| `exp` | Floating-point |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
  zh: '| `exp` | 浮点数 |'
- en: '| `expm1` | Floating-point |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
  zh: '| `expm1` | 浮点数 |'
- en: '| `floor` | Numeric |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| `floor` | 数值 |'
- en: '| `floor_divide` | Numeric |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| `floor_divide` | 数值 |'
- en: '| `greater` | Numeric |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| `greater` | 数值 |'
- en: '| `greater_equal` | Numeric |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
  zh: '| `greater_equal` | 数值 |'
- en: '| `isfinite` | Numeric |'
  id: totrans-654
  prefs: []
  type: TYPE_TB
  zh: '| `isfinite` | 数值 |'
- en: '| `isinf` | Numeric |'
  id: totrans-655
  prefs: []
  type: TYPE_TB
  zh: '| `isinf` | 数值 |'
- en: '| `isnan` | Numeric |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| `isnan` | 数值 |'
- en: '| `less` | Numeric |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
  zh: '| `less` | 数值 |'
- en: '| `less_equal` | Numeric |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
  zh: '| `less_equal` | 数值 |'
- en: '| `log` | Floating-point |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 浮点数 |'
- en: '| `logaddexp` | Floating-point |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp` | 浮点数 |'
- en: '| `log10` | Floating-point |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| `log10` | 浮点数 |'
- en: '| `log1p` | Floating-point |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| `log1p` | 浮点数 |'
- en: '| `log2` | Floating-point |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| `log2` | 浮点数 |'
- en: '| `logical_and` | Boolean |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| `logical_and` | 布尔值 |'
- en: '| `logical_not` | Boolean |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| `logical_not` | 布尔值 |'
- en: '| `logical_or` | Boolean |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| `logical_or` | 布尔值 |'
- en: '| `logical_xor` | Boolean |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| `logical_xor` | 布尔值 |'
- en: '| `multiply` | Numeric |'
  id: totrans-668
  prefs: []
  type: TYPE_TB
  zh: '| `multiply` | 数值 |'
- en: '| `negative` | Numeric |'
  id: totrans-669
  prefs: []
  type: TYPE_TB
  zh: '| `negative` | 数值 |'
- en: '| `not_equal` | All |'
  id: totrans-670
  prefs: []
  type: TYPE_TB
  zh: '| `not_equal` | 所有 |'
- en: '| `positive` | Numeric |'
  id: totrans-671
  prefs: []
  type: TYPE_TB
  zh: '| `positive` | 数值 |'
- en: '| `pow` (*) | Numeric |'
  id: totrans-672
  prefs: []
  type: TYPE_TB
  zh: '| `pow` (*) | 数值 |'
- en: '| `remainder` | Numeric |'
  id: totrans-673
  prefs: []
  type: TYPE_TB
  zh: '| `remainder` | 数值 |'
- en: '| `round` | Numeric |'
  id: totrans-674
  prefs: []
  type: TYPE_TB
  zh: '| `round` | 数值 |'
- en: '| `sign` | Numeric |'
  id: totrans-675
  prefs: []
  type: TYPE_TB
  zh: '| `sign` | 数值 |'
- en: '| `sin` | Floating-point |'
  id: totrans-676
  prefs: []
  type: TYPE_TB
  zh: '| `sin` | 浮点数 |'
- en: '| `sinh` | Floating-point |'
  id: totrans-677
  prefs: []
  type: TYPE_TB
  zh: '| `sinh` | 浮点数 |'
- en: '| `sqrt` | Floating-point |'
  id: totrans-678
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt` | 浮点数 |'
- en: '| `square` | Numeric |'
  id: totrans-679
  prefs: []
  type: TYPE_TB
  zh: '| `square` | 数值 |'
- en: '| `subtract` | Numeric |'
  id: totrans-680
  prefs: []
  type: TYPE_TB
  zh: '| `subtract` | 数值 |'
- en: '| `tan` | Floating-point |'
  id: totrans-681
  prefs: []
  type: TYPE_TB
  zh: '| `tan` | 浮点数 |'
- en: '| `tanh` | Floating-point |'
  id: totrans-682
  prefs: []
  type: TYPE_TB
  zh: '| `tanh` | 浮点数 |'
- en: '| `trunc` | Numeric |'
  id: totrans-683
  prefs: []
  type: TYPE_TB
  zh: '| `trunc` | 数值 |'
- en: (*) These functions have different names from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数与主`numpy`命名空间中的名称不同。请参阅[函数名称更改](#array-api-name-changes)。
- en: Creation Functions
  id: totrans-685
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建函数
- en: '| Function Name | Dtypes |'
  id: totrans-686
  prefs: []
  type: TYPE_TB
  zh: 函数名称 | 数据类型 |
- en: '| --- | --- |'
  id: totrans-687
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `meshgrid` | Any (all input dtypes must be the same) |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid` | 任意（所有输入数据类型必须相同） |'
- en: Linear Algebra Functions
  id: totrans-689
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性代数函数
- en: '| Function Name | Dtypes |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: 函数名称 | 数据类型 |
- en: '| --- | --- |'
  id: totrans-691
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cholesky` | Floating-point |'
  id: totrans-692
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` | 浮点数 |'
- en: '| `cross` | Numeric |'
  id: totrans-693
  prefs: []
  type: TYPE_TB
  zh: '| `cross` | 数值 |'
- en: '| `det` | Floating-point |'
  id: totrans-694
  prefs: []
  type: TYPE_TB
  zh: '| `det` | 浮点数 |'
- en: '| `diagonal` | Any |'
  id: totrans-695
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` | 任意 |'
- en: '| `eigh` | Floating-point |'
  id: totrans-696
  prefs: []
  type: TYPE_TB
  zh: '| `eigh` | 浮点数 |'
- en: '| `eighvals` | Floating-point |'
  id: totrans-697
  prefs: []
  type: TYPE_TB
  zh: '| `eighvals` | 浮点数 |'
- en: '| `inv` | Floating-point |'
  id: totrans-698
  prefs: []
  type: TYPE_TB
  zh: '| `inv` | 浮点数 |'
- en: '| `matmul` | Numeric |'
  id: totrans-699
  prefs: []
  type: TYPE_TB
  zh: '| `matmul` | 数值 |'
- en: '| `matrix_norm` (*) | Floating-point |'
  id: totrans-700
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` (*) | 浮点数 |'
- en: '| `matrix_power` | Floating-point |'
  id: totrans-701
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_power` | 浮点数 |'
- en: '| `matrix_rank` | Floating-point |'
  id: totrans-702
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | 浮点数 |'
- en: '| `matrix_transpose` (**) | Any |'
  id: totrans-703
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose` (**) | 任意 |'
- en: '| `outer` | Numeric |'
  id: totrans-704
  prefs: []
  type: TYPE_TB
  zh: '| `outer` | 数值 |'
- en: '| `pinv` | Floating-point |'
  id: totrans-705
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | 浮点数 |'
- en: '| `qr` | Floating-point |'
  id: totrans-706
  prefs: []
  type: TYPE_TB
  zh: '| `qr` | 浮点数 |'
- en: '| `slogdet` | Floating-point |'
  id: totrans-707
  prefs: []
  type: TYPE_TB
  zh: '| `slogdet` | 浮点数 |'
- en: '| `solve` | Floating-point |'
  id: totrans-708
  prefs: []
  type: TYPE_TB
  zh: '| `solve` | 浮点数 |'
- en: '| `svd` | Floating-point |'
  id: totrans-709
  prefs: []
  type: TYPE_TB
  zh: '| `svd` | 浮点数 |'
- en: '| `svdvals` (**) | Floating-point |'
  id: totrans-710
  prefs: []
  type: TYPE_TB
  zh: '| `svdvals` (**) | 浮点数 |'
- en: '| `tensordot` | Numeric |'
  id: totrans-711
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` | 数值 |'
- en: '| `trace` | Numeric |'
  id: totrans-712
  prefs: []
  type: TYPE_TB
  zh: '| `trace` | 数值 |'
- en: '| `vecdot` (**) | Numeric |'
  id: totrans-713
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot` (**) | 数值 |'
- en: '| `vector_norm` (*) | Floating-point |'
  id: totrans-714
  prefs: []
  type: TYPE_TB
  zh: '| `vector_norm` (*) | 浮点数 |'
- en: (*) These functions are split from `norm` from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数从主要的 `numpy` 命名空间中的 `norm` 中分离出来。请参阅[函数名称更改](#array-api-name-changes)。
- en: (**) These functions are new in the array API and are not in the main `numpy`
    namespace.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: (**) 这些函数是数组 API 中的新功能，不在主要的 `numpy` 命名空间中。
- en: Array Object
  id: totrans-717
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数组对象
- en: All the special `__operator__` methods on the array object behave identically
    to their corresponding functions (see [the spec](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)
    for a list of which methods correspond to which functions). The exception is that
    operators explicitly allow Python scalars according to the [rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)
    (see [Type Promotion Differences](#array-api-type-promotion-differences)).
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 数组对象上的所有特殊 `__operator__` 方法的行为与其对应的函数完全相同（请参阅[规范](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)以获取哪些方法对应于哪��函数的列表）。唯一的例外是运算符明确允许
    Python 标量，根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)（请参阅[类型提升差异](#array-api-type-promotion-differences)）。
- en: Elementwise Functions
  id: totrans-719
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐元素函数
- en: '| Function Name | Dtypes |'
  id: totrans-720
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-721
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `abs` | Numeric |'
  id: totrans-722
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 数值型 |'
- en: '| `acos` | Floating-point |'
  id: totrans-723
  prefs: []
  type: TYPE_TB
  zh: '| `acos` | 浮点型 |'
- en: '| `acosh` | Floating-point |'
  id: totrans-724
  prefs: []
  type: TYPE_TB
  zh: '| `acosh` | 浮点型 |'
- en: '| `add` | Numeric |'
  id: totrans-725
  prefs: []
  type: TYPE_TB
  zh: '| `add` | 数值型 |'
- en: '| `asin` (*) | Floating-point |'
  id: totrans-726
  prefs: []
  type: TYPE_TB
  zh: '| `asin` (*) | 浮点型 |'
- en: '| `asinh` (*) | Floating-point |'
  id: totrans-727
  prefs: []
  type: TYPE_TB
  zh: '| `asinh` (*) | 浮点型 |'
- en: '| `atan` (*) | Floating-point |'
  id: totrans-728
  prefs: []
  type: TYPE_TB
  zh: '| `atan` (*) | 浮点型 |'
- en: '| `atan2` (*) | Floating-point |'
  id: totrans-729
  prefs: []
  type: TYPE_TB
  zh: '| `atan2` (*) | 浮点型 |'
- en: '| `atanh` (*) | Floating-point |'
  id: totrans-730
  prefs: []
  type: TYPE_TB
  zh: '| `atanh` (*) | 浮点型 |'
- en: '| `bitwise_and` | Integer or boolean |'
  id: totrans-731
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_and` | 整数型或布尔型 |'
- en: '| `bitwise_invert` | Integer or boolean |'
  id: totrans-732
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_invert` | 整数型或布尔型 |'
- en: '| `bitwise_left_shift` (*) | Integer |'
  id: totrans-733
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` (*) | 整数型 |'
- en: '| `bitwise_or` | Integer or boolean |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or` | 整数型或布尔型 |'
- en: '| `bitwise_right_shift` (*) | Integer |'
  id: totrans-735
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_right_shift` (*) | 整数型 |'
- en: '| `bitwise_xor` | Integer or boolean |'
  id: totrans-736
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor` | 整数型或布尔型 |'
- en: '| `ceil` | Numeric |'
  id: totrans-737
  prefs: []
  type: TYPE_TB
  zh: '| `ceil` | 数值型 |'
- en: '| `cos` | Floating-point |'
  id: totrans-738
  prefs: []
  type: TYPE_TB
  zh: '| `cos` | 浮点型 |'
- en: '| `cosh` | Floating-point |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
  zh: '| `cosh` | 浮点型 |'
- en: '| `divide` | Floating-point |'
  id: totrans-740
  prefs: []
  type: TYPE_TB
  zh: '| `divide` | 浮点型 |'
- en: '| `equal` | All |'
  id: totrans-741
  prefs: []
  type: TYPE_TB
  zh: '| `equal` | 全部 |'
- en: '| `exp` | Floating-point |'
  id: totrans-742
  prefs: []
  type: TYPE_TB
  zh: '| `exp` | 浮点型 |'
- en: '| `expm1` | Floating-point |'
  id: totrans-743
  prefs: []
  type: TYPE_TB
  zh: '| `expm1` | 浮点型 |'
- en: '| `floor` | Numeric |'
  id: totrans-744
  prefs: []
  type: TYPE_TB
  zh: '| `floor` | 数值型 |'
- en: '| `floor_divide` | Numeric |'
  id: totrans-745
  prefs: []
  type: TYPE_TB
  zh: '| `floor_divide` | 数值型 |'
- en: '| `greater` | Numeric |'
  id: totrans-746
  prefs: []
  type: TYPE_TB
  zh: '| `greater` | 数值型 |'
- en: '| `greater_equal` | Numeric |'
  id: totrans-747
  prefs: []
  type: TYPE_TB
  zh: '| `greater_equal` | 数值型 |'
- en: '| `isfinite` | Numeric |'
  id: totrans-748
  prefs: []
  type: TYPE_TB
  zh: '| `isfinite` | 数值型 |'
- en: '| `isinf` | Numeric |'
  id: totrans-749
  prefs: []
  type: TYPE_TB
  zh: '| `isinf` | 数值型 |'
- en: '| `isnan` | Numeric |'
  id: totrans-750
  prefs: []
  type: TYPE_TB
  zh: '| `isnan` | 数值型 |'
- en: '| `less` | Numeric |'
  id: totrans-751
  prefs: []
  type: TYPE_TB
  zh: '| `less` | 数值型 |'
- en: '| `less_equal` | Numeric |'
  id: totrans-752
  prefs: []
  type: TYPE_TB
  zh: '| `less_equal` | 数值型 |'
- en: '| `log` | Floating-point |'
  id: totrans-753
  prefs: []
  type: TYPE_TB
  zh: '| `log` | 浮点型 |'
- en: '| `logaddexp` | Floating-point |'
  id: totrans-754
  prefs: []
  type: TYPE_TB
  zh: '| `logaddexp` | 浮点型 |'
- en: '| `log10` | Floating-point |'
  id: totrans-755
  prefs: []
  type: TYPE_TB
  zh: '| `log10` | 浮点型 |'
- en: '| `log1p` | Floating-point |'
  id: totrans-756
  prefs: []
  type: TYPE_TB
  zh: '| `log1p` | 浮点型 |'
- en: '| `log2` | Floating-point |'
  id: totrans-757
  prefs: []
  type: TYPE_TB
  zh: '| `log2` | 浮点型 |'
- en: '| `logical_and` | Boolean |'
  id: totrans-758
  prefs: []
  type: TYPE_TB
  zh: '| `logical_and` | 布尔型 |'
- en: '| `logical_not` | Boolean |'
  id: totrans-759
  prefs: []
  type: TYPE_TB
  zh: '| `logical_not` | 布尔型 |'
- en: '| `logical_or` | Boolean |'
  id: totrans-760
  prefs: []
  type: TYPE_TB
  zh: '| `logical_or` | 布尔型 |'
- en: '| `logical_xor` | Boolean |'
  id: totrans-761
  prefs: []
  type: TYPE_TB
  zh: '| `logical_xor` | 布尔型 |'
- en: '| `multiply` | Numeric |'
  id: totrans-762
  prefs: []
  type: TYPE_TB
  zh: '| `multiply` | 数值型 |'
- en: '| `negative` | Numeric |'
  id: totrans-763
  prefs: []
  type: TYPE_TB
  zh: '| `negative` | 数值型 |'
- en: '| `not_equal` | All |'
  id: totrans-764
  prefs: []
  type: TYPE_TB
  zh: '| `not_equal` | 全部 |'
- en: '| `positive` | Numeric |'
  id: totrans-765
  prefs: []
  type: TYPE_TB
  zh: '| `positive` | 数值型 |'
- en: '| `pow` (*) | Numeric |'
  id: totrans-766
  prefs: []
  type: TYPE_TB
  zh: '| `pow` (*) | 数值型 |'
- en: '| `remainder` | Numeric |'
  id: totrans-767
  prefs: []
  type: TYPE_TB
  zh: '| `remainder` | 数值型 |'
- en: '| `round` | Numeric |'
  id: totrans-768
  prefs: []
  type: TYPE_TB
  zh: '| `round` | 数值型 |'
- en: '| `sign` | Numeric |'
  id: totrans-769
  prefs: []
  type: TYPE_TB
  zh: '| `sign` | 数值型 |'
- en: '| `sin` | Floating-point |'
  id: totrans-770
  prefs: []
  type: TYPE_TB
  zh: '| `sin` | 浮点型 |'
- en: '| `sinh` | Floating-point |'
  id: totrans-771
  prefs: []
  type: TYPE_TB
  zh: '| `sinh` | 浮点型 |'
- en: '| `sqrt` | Floating-point |'
  id: totrans-772
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt` | 浮点型 |'
- en: '| `square` | Numeric |'
  id: totrans-773
  prefs: []
  type: TYPE_TB
  zh: '| `square` | 数值型 |'
- en: '| `subtract` | Numeric |'
  id: totrans-774
  prefs: []
  type: TYPE_TB
  zh: '| `subtract` | 数值型 |'
- en: '| `tan` | Floating-point |'
  id: totrans-775
  prefs: []
  type: TYPE_TB
  zh: '| `tan` | 浮点型 |'
- en: '| `tanh` | Floating-point |'
  id: totrans-776
  prefs: []
  type: TYPE_TB
  zh: '| `tanh` | 浮点型 |'
- en: '| `trunc` | Numeric |'
  id: totrans-777
  prefs: []
  type: TYPE_TB
  zh: '| `trunc` | 数值型 |'
- en: (*) These functions have different names from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数与主要的 `numpy` 命名空间中的名称不同。请参阅[函数名称更改](#array-api-name-changes)。
- en: Creation Functions
  id: totrans-779
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建函数
- en: '| Function Name | Dtypes |'
  id: totrans-780
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-781
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `meshgrid` | Any (all input dtypes must be the same) |'
  id: totrans-782
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid` | 任意（所有输入数据类型必须相同） |'
- en: Linear Algebra Functions
  id: totrans-783
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 线性代数函数
- en: '| Function Name | Dtypes |'
  id: totrans-784
  prefs: []
  type: TYPE_TB
  zh: '| 函数名称 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-785
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cholesky` | Floating-point |'
  id: totrans-786
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` | 浮点型 |'
- en: '| `cross` | Numeric |'
  id: totrans-787
  prefs: []
  type: TYPE_TB
  zh: '| `cross` | 数值型 |'
- en: '| `det` | Floating-point |'
  id: totrans-788
  prefs: []
  type: TYPE_TB
  zh: '| `det` | 浮点型 |'
- en: '| `diagonal` | Any |'
  id: totrans-789
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` | 任意 |'
- en: '| `eigh` | Floating-point |'
  id: totrans-790
  prefs: []
  type: TYPE_TB
  zh: '| `eigh` | 浮点型 |'
- en: '| `eighvals` | Floating-point |'
  id: totrans-791
  prefs: []
  type: TYPE_TB
  zh: '| `eighvals` | 浮点型 |'
- en: '| `inv` | Floating-point |'
  id: totrans-792
  prefs: []
  type: TYPE_TB
  zh: '| `inv` | 浮点型 |'
- en: '| `matmul` | Numeric |'
  id: totrans-793
  prefs: []
  type: TYPE_TB
  zh: '| `matmul` | 数值型 |'
- en: '| `matrix_norm` (*) | Floating-point |'
  id: totrans-794
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_norm` (*) | 浮点型 |'
- en: '| `matrix_power` | Floating-point |'
  id: totrans-795
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_power` | 浮点数 |'
- en: '| `matrix_rank` | Floating-point |'
  id: totrans-796
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` | 浮点数 |'
- en: '| `matrix_transpose` (**) | Any |'
  id: totrans-797
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_transpose` (**) | 任意 |'
- en: '| `outer` | Numeric |'
  id: totrans-798
  prefs: []
  type: TYPE_TB
  zh: '| `outer` | 数值 |'
- en: '| `pinv` | Floating-point |'
  id: totrans-799
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` | 浮点数 |'
- en: '| `qr` | Floating-point |'
  id: totrans-800
  prefs: []
  type: TYPE_TB
  zh: '| `qr` | 浮点数 |'
- en: '| `slogdet` | Floating-point |'
  id: totrans-801
  prefs: []
  type: TYPE_TB
  zh: '| `slogdet` | 浮点数 |'
- en: '| `solve` | Floating-point |'
  id: totrans-802
  prefs: []
  type: TYPE_TB
  zh: '| `solve` | 浮点数 |'
- en: '| `svd` | Floating-point |'
  id: totrans-803
  prefs: []
  type: TYPE_TB
  zh: '| `svd` | 浮点数 |'
- en: '| `svdvals` (**) | Floating-point |'
  id: totrans-804
  prefs: []
  type: TYPE_TB
  zh: '| `svdvals` (**) | 浮点数 |'
- en: '| `tensordot` | Numeric |'
  id: totrans-805
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` | 数值 |'
- en: '| `trace` | Numeric |'
  id: totrans-806
  prefs: []
  type: TYPE_TB
  zh: '| `trace` | 数值 |'
- en: '| `vecdot` (**) | Numeric |'
  id: totrans-807
  prefs: []
  type: TYPE_TB
  zh: '| `vecdot` (**) | 数值 |'
- en: '| `vector_norm` (*) | Floating-point |'
  id: totrans-808
  prefs: []
  type: TYPE_TB
  zh: '| `vector_norm` (*) | 浮点数 |'
- en: (*) These functions are split from `norm` from the main `numpy` namespace. See
    [Function Name Changes](#array-api-name-changes).
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: (*) 这些函数是从主`numpy`命名空间的`norm`中拆分出来的。请参见[函数名称更改](#array-api-name-changes)。
- en: (**) These functions are new in the array API and are not in the main `numpy`
    namespace.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: (**) 这些函数是数组API中的新功能，不在主`numpy`命名空间中。
- en: Array Object
  id: totrans-811
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数组对象
- en: All the special `__operator__` methods on the array object behave identically
    to their corresponding functions (see [the spec](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)
    for a list of which methods correspond to which functions). The exception is that
    operators explicitly allow Python scalars according to the [rules outlined in
    the spec](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)
    (see [Type Promotion Differences](#array-api-type-promotion-differences)).
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 数组对象上的所有特殊`__operator__`方法的行为与其对应的函数完全相同（请参见[规范](https://data-apis.org/array-api/latest/API_specification/array_object.html#methods)中哪些方法对应哪些函数的列表）。唯一的例外是，根据[规范中概述的规则](https://data-apis.org/array-api/latest/API_specification/type_promotion.html#mixing-arrays-with-python-scalars)（请参见[类型提升差异](#array-api-type-promotion-differences)），运算符明确允许Python标量。
- en: Array Object Differences
  id: totrans-813
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组对象差异
- en: '| Feature | Type | Notes |'
  id: totrans-814
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-815
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| No array scalars | **Strictness** | The spec does not have array scalars,
    only 0-D arrays. However, other than the promotion differences outlined in [Type
    Promotion Differences](#array-api-type-promotion-differences), scalars duck type
    as 0-D arrays for the purposes of the spec. The are immutable, but the spec [does
    not require mutability](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html).
    |'
  id: totrans-816
  prefs: []
  type: TYPE_TB
  zh: '| 无数组标量 | **严格性** | 规范中没有数组标量，只有0-D数组。然而，除了[类型提升差异](#array-api-type-promotion-differences)中概述的提升差异之外，标量在规范中作为0-D数组进行鸭子类型处理。它们是不可变的，但规范[不要求可变性](https://data-apis.org/array-api/latest/design_topics/copies_views_and_mutation.html)。'
- en: '| `bool()`, `int()`, and `float()` only work on 0-D arrays. | **Strictness**
    | See [https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404).
    |'
  id: totrans-817
  prefs: []
  type: TYPE_TB
  zh: '| `bool()`、`int()`和`float()`仅适用于0-D数组。 | **严格性** | 请参见[https://github.com/numpy/numpy/issues/10404](https://github.com/numpy/numpy/issues/10404)。'
- en: '| `__imatmul__` | **Compatible** | `np.ndarray` does not currently implement
    `__imatmul`. Note that `a @= b` should only defined when it does not change the
    shape of `a`. |'
  id: totrans-818
  prefs: []
  type: TYPE_TB
  zh: '| `__imatmul__` | **兼容性** | `np.ndarray`目前没有实现`__imatmul`。请注意，仅当`a`的形状不发生变化时，`a
    @= b`才应该被定义。'
- en: '| The `mT` attribute for matrix transpose. | **Compatible** | See [the spec
    definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)
    for `mT`. |'
  id: totrans-819
  prefs: []
  type: TYPE_TB
  zh: '| 用于矩阵转置的`mT`属性。 | **兼容性** | 请参见[mT的规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.mT.html)。'
- en: '| The `T` attribute should error if the input is not 2-dimensional. | **Breaking**
    | See [the note in the spec](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html).
    |'
  id: totrans-820
  prefs: []
  type: TYPE_TB
  zh: '| 如果输入不是二维的，则`T`属性应该报错。 | **破坏性** | 请参见[规范中的注释](https://data-apis.org/array-api/latest/API_specification/generated/signatures.array_object.array.T.html)。'
- en: '| New method `to_device` and attribute `device` | **Compatible** | The methods
    would effectively not do anything since NumPy is CPU only |'
  id: totrans-821
  prefs: []
  type: TYPE_TB
  zh: '| 新方法`to_device`和属性`device` | **兼容性** | 这些方法实际上不会做任何事情，因为NumPy仅支持CPU。'
- en: Creation Functions Differences
  id: totrans-822
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-823
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-824
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `copy` keyword argument to `asarray` | **Compatible** |  |'
  id: totrans-825
  prefs: []
  type: TYPE_TB
  zh: '| `copy`关键字参数传递给`asarray` | **兼容性** |'
- en: '| New `device` keyword argument to all array creation functions (`asarray`,
    `arange`, `empty`, `empty_like`, `eye`, `full`, `full_like`, `linspace`, `ones`,
    `ones_like`, `zeros`, and `zeros_like`). | **Compatible** | `device` would effectively
    do nothing, since NumPy is CPU only. |'
  id: totrans-826
  prefs: []
  type: TYPE_TB
  zh: '| 所有数组创建函数（`asarray`、`arange`、`empty`、`empty_like`、`eye`、`full`、`full_like`、`linspace`、`ones`、`ones_like`、`zeros`
    和 `zeros_like`）新增 `device` 关键字参数。 | **兼容** | `device` 实际上不会起作用，因为 NumPy 仅支持 CPU。
    |'
- en: Elementwise Functions Differences
  id: totrans-827
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元素函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-828
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-829
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed. | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-830
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已更名。 | **兼容** | 请参阅[函数名称更改](#array-api-name-changes)。 |'
- en: '| Elementwise functions are only defined for given input type combinations.
    | **Strictness** | See [Type Strictness](#array-api-type-strictness). |'
  id: totrans-831
  prefs: []
  type: TYPE_TB
  zh: '| 仅为给定输入类型组合定义元素函数。 | **严格性** | 请参阅[类型严格性](#array-api-type-strictness)。 |'
- en: '| `bitwise_left_shift` and `bitwise_right_shift` are only defined for `x2`
    nonnegative. | **Strictness** |  |'
  id: totrans-832
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_left_shift` 和 `bitwise_right_shift` 仅对 `x2` 非负定义。 | **严格性** |  |'
- en: '| `ceil`, `floor`, and `trunc` return an integer with integer input. | **Breaking**
    | `np.ceil`, `np.floor`, and `np.trunc` return a floating-point dtype on integer
    dtype input. |'
  id: totrans-833
  prefs: []
  type: TYPE_TB
  zh: '| `ceil`、`floor` 和 `trunc` 对整数输入返回整数。 | **破坏性变更** | `np.ceil`、`np.floor` 和
    `np.trunc` 对整数类型的输入返回浮点数类型。 |'
- en: '### Linear Algebra Differences'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '### 线性代数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-835
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-836
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cholesky` includes an `upper` keyword argument. | **Compatible** |  |'
  id: totrans-837
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky` 包括一个 `upper` 关键字参数。 | **兼容** |  |'
- en: '| `cross` does not allow size 2 vectors (only size 3). | **Breaking** |  |'
  id: totrans-838
  prefs: []
  type: TYPE_TB
  zh: '| `cross` 不允许大小为 2 的向量（仅允许大小为 3）。 | **破坏性变更** |  |'
- en: '| `diagonal` operates on the last two axes. | **Breaking** | Strictly speaking
    this can be **compatible** because `diagonal` is moved to the `linalg` namespace.
    |'
  id: totrans-839
  prefs: []
  type: TYPE_TB
  zh: '| `diagonal` 在最后两个轴上操作。 | **破坏性变更** | 严格来说这可以是**兼容**的，因为 `diagonal` 移至 `linalg`
    命名空间。 |'
- en: '| `eigh`, `qr`, `slogdet` and `svd` return a named tuple. | **Compatible**
    | The corresponding `numpy` functions return a `tuple`, with the resulting arrays
    in the same order. |'
  id: totrans-840
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`、`qr`、`slogdet` 和 `svd` 返回一个命名元组。 | **兼容** | 相应的 `numpy` 函数返回一个 `tuple`，其中结果数组的顺序相同。
    |'
- en: '| New functions `matrix_norm` and `vector_norm`. | **Compatible** | The `norm`
    function has been omitted from the array API and split into `matrix_norm` for
    matrix norms and `vector_norm` for vector norms. Note that `vector_norm` supports
    any number of axes, whereas `np.linalg.norm` only supports a single axis for vector
    norms. |'
  id: totrans-841
  prefs: []
  type: TYPE_TB
  zh: '| 新功能 `matrix_norm` 和 `vector_norm`。 | **兼容** | `norm` 函数已从数组 API 中省略，并分为 `matrix_norm`
    用于矩阵范数和 `vector_norm` 用于向量范数。请注意，`vector_norm` 支持任意数量的轴，而 `np.linalg.norm` 仅支持向量范数的单个轴。
    |'
- en: '| `matrix_rank` has an `rtol` keyword argument instead of `tol`. | **Breaking**
    | In the array API, `rtol` filters singular values smaller than `rtol * largest_singular_value`.
    In `np.linalg.matrix_rank`, `tol` filters singular values smaller than `tol`.
    Furthermore, the default value for `rtol` is `max(M, N) * eps`, whereas the default
    value of `tol` in `np.linalg.matrix_rank` is `S.max() * max(M, N) * eps`, where
    `S` is the singular values of the input. The new flag name is compatible but the
    default change is breaking |'
  id: totrans-842
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 使用 `rtol` 关键字参数代替 `tol`。 | **破坏性变更** | 在数组 API 中，`rtol` 用于过滤比
    `rtol * largest_singular_value` 小的奇异值。在 `np.linalg.matrix_rank` 中，`tol` 用于过滤比
    `tol` 小的奇异值。此外，`rtol` 的默认值为 `max(M, N) * eps`，而 `np.linalg.matrix_rank` 中 `tol`
    的默认值为 `S.max() * max(M, N) * eps`，其中 `S` 是输入的奇异值。新标志名称兼容，但默认更改是破坏性的 |'
- en: '| `matrix_rank` does not support 1-dimensional arrays. | **Breaking** |  |'
  id: totrans-843
  prefs: []
  type: TYPE_TB
  zh: '| `matrix_rank` 不支持 1 维数组。 | **破坏性变更** |  |'
- en: '| New function `matrix_transpose`. | **Compatible** | Unlike `np.transpose`,
    `matrix_transpose` only transposes the last two axes. See [the spec definition](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)
    |'
  id: totrans-844
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `matrix_transpose`。 | **兼容** | 与 `np.transpose` 不同，`matrix_transpose`
    仅对最后两个轴进行转置。请参阅[规范定义](https://data-apis.org/array-api/latest/API_specification/generated/signatures.linear_algebra_functions.matrix_transpose.html#signatures.linear_algebra_functions.matrix_transpose)
    |'
- en: '| `outer` only supports 1-dimensional arrays. | **Breaking** | The spec currently
    only specifies behavior on 1-D arrays but future behavior will likely be to broadcast,
    rather than flatten, which is what `np.outer` does. |'
  id: totrans-845
  prefs: []
  type: TYPE_TB
  zh: '| `outer` 仅支持 1 维数组。 | **破坏性变更** | 规范目前仅指定了 1-D 数组的行为，但未来的行为可能是广播，而不是展平，这是
    `np.outer` 的行为。 |'
- en: '| `pinv` has an `rtol` keyword argument instead of `rcond` | **Breaking** |
    The meaning of `rtol` and `rcond` is the same, but the default value for `rtol`
    is `max(M, N) * eps`, whereas the default value for `rcond` is `1e-15`. The new
    flag name is compatible but the default change is breaking. |'
  id: totrans-846
  prefs: []
  type: TYPE_TB
  zh: '| `pinv` 有一个 `rtol` 关键字参数，而不是 `rcond` | **兼容性破坏** | `rtol` 和 `rcond` 的含义相同，但
    `rtol` 的默认值是 `max(M, N) * eps`，而 `rcond` 的默认值是 `1e-15`。 新标志名称是兼容的，但默认更改是破坏性的。
    |'
- en: '| `solve` only accepts `x2` as a vector when it is exactly 1-dimensional. |
    **Breaking** | The `np.linalg.solve` behavior is ambiguous. See [this numpy issue](https://github.com/numpy/numpy/issues/15349)
    and [this array API specification issue](https://github.com/data-apis/array-api/issues/285)
    for more details. |'
  id: totrans-847
  prefs: []
  type: TYPE_TB
  zh: '| `solve` 仅在 `x2` 确切为 1 维时才接受其为向量。 | **兼容性破坏** | `np.linalg.solve` 的行为是模糊的。有关更多详细信息，请参阅
    [此 numpy 问题](https://github.com/numpy/numpy/issues/15349) 和 [此数组 API 规范问题](https://github.com/data-apis/array-api/issues/285)。
    |'
- en: '| New function `svdvals`. | **Compatible** | Equivalent to `np.linalg.svd(compute_uv=False)`.
    |'
  id: totrans-848
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `svdvals`。 | **兼容性** | 等效于 `np.linalg.svd(compute_uv=False)`。 |'
- en: '| The `axis` keyword to `tensordot` must be a tuple. | **Compatible** | In
    `np.tensordot`, it can also be an array or array-like. |'
  id: totrans-849
  prefs: []
  type: TYPE_TB
  zh: '| `tensordot` 的 `axis` 关键字必须是一个元组。 | **兼容性** | 在 `np.tensordot` 中，它也可以是数组或类似数组。
    |'
- en: '| `trace` operates on the last two axes. | **Breaking** | `np.trace` operates
    on the first two axes by default. Note that the array API `trace` does not allow
    specifying which axes to operate on. |'
  id: totrans-850
  prefs: []
  type: TYPE_TB
  zh: '| `trace` 在最后两个轴上操作。 | **兼容性破坏** | `np.trace` 默认在前两个轴上操作。请注意，数组 API 的 `trace`
    不允许指定要操作的轴。 |'
- en: Manipulation Functions Differences
  id: totrans-851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-852
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-853
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Various functions have been renamed | **Compatible** | See [Function Name
    Changes](#array-api-name-changes). |'
  id: totrans-854
  prefs: []
  type: TYPE_TB
  zh: '| 各种函数已更名 | **兼容性** | 查看 [函数名称更改](#array-api-name-changes)。 |'
- en: '| `concat` has different default casting rules from `np.concatenate` | **Strictness**
    | No cross-kind casting. No value-based casting on scalars (when axis=None). |'
  id: totrans-855
  prefs: []
  type: TYPE_TB
  zh: '| `concat` 具有与 `np.concatenate` 不同的默认转换规则 | **严格性** | 没有跨类型转换。标量的值基转换（当 axis=None
    时）。 |'
- en: '| `stack` has different default casting rules from `np.stack` | **Strictness**
    | No cross-kind casting. |'
  id: totrans-856
  prefs: []
  type: TYPE_TB
  zh: '| `stack` 具有与 `np.stack` 不同的默认转换规则 | **严格性** | 没有跨类型转换。 |'
- en: '| New function `permute_dims`. | **Compatible** | Unlike `np.transpose`, the
    `axis` keyword argument to `permute_dims` is required. |'
  id: totrans-857
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `permute_dims`。 | **兼容性** | 与 `np.transpose` 不同，`permute_dims` 的 `axis`
    关键字参数是必需的。 |'
- en: '| `reshape` function has a `copy` keyword argument | **Compatible** | See [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818).
    |'
  id: totrans-858
  prefs: []
  type: TYPE_TB
  zh: '| `reshape` 函数具有 `copy` 关键字参数 | **兼容性** | 查看 [https://github.com/numpy/numpy/issues/9818](https://github.com/numpy/numpy/issues/9818)。
    |'
- en: Set Functions Differences
  id: totrans-859
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-860
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-861
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| New functions `unique_all`, `unique_counts`, `unique_inverse`, and `unique_values`.
    | **Compatible** | See [Function Name Changes](#array-api-name-changes). |'
  id: totrans-862
  prefs: []
  type: TYPE_TB
  zh: '| 新函数 `unique_all`, `unique_counts`, `unique_inverse` 和 `unique_values`。 |
    **兼容性** | 查看 [函数名称更改](#array-api-name-changes)。 |'
- en: '| The four `unique_*` functions return a named tuple. | **Compatible** |  |'
  id: totrans-863
  prefs: []
  type: TYPE_TB
  zh: '| 四个 `unique_*` 函数返回一个命名元组。 | **兼容性** |  |'
- en: '| `unique_all` and `unique_indices` return indices with the same shape as `x`.
    | **Compatible** | See [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638).
    |'
  id: totrans-864
  prefs: []
  type: TYPE_TB
  zh: '| `unique_all` 和 `unique_indices` 返回与 `x` 相同形状的索引。 | **兼容性** | 查看 [https://github.com/numpy/numpy/issues/20638](https://github.com/numpy/numpy/issues/20638)。
    |'
- en: '### Set Functions Differences'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '### 集合函数差异'
- en: '| Feature | Type | Notes |'
  id: totrans-866
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `argsort` and `sort` have a `stable` keyword argument instead of `kind`.
    | **Breaking** | `stable` is a boolean keyword argument, defaulting to `True`.
    `kind` takes a string, defaulting to `"quicksort"`. `stable=True` is equivalent
    to `kind="stable"` and `kind=False` is equivalent to `kind="quicksort"`, although
    any sorting algorithm is allowed by the spec when `stable=False`. The new flag
    name is compatible but the default change is breaking. |'
  id: totrans-868
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 有一个 `stable` 关键字参数，而不是 `kind`。 | **兼容性破坏** | `stable`
    是一个布尔关键字参数，默认为 `True`。 `kind` 接受一个字符串，默认为 `"quicksort"`。 `stable=True` 等效于 `kind="stable"`，`kind=False`
    等效于 `kind="quicksort"`，尽管规范允许在 `stable=False` 时使用任何排序算法。 新标志名称是兼容的，但默认更改是破坏性的。
    |'
- en: '| `argsort` and `sort` have a `descending` keyword argument. | **Compatible**
    |  |'
  id: totrans-869
  prefs: []
  type: TYPE_TB
  zh: '| `argsort` 和 `sort` 有一个 `descending` 关键字参数。 | **兼容性** |  |'
- en: Statistical Functions Differences
  id: totrans-870
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计函数差异
- en: '| Feature | Type | Notes |'
  id: totrans-871
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-872
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `sum` and `prod` always upcast `float32` to `float64` when `dtype=None`.
    | **Breaking** |  |'
  id: totrans-873
  prefs: []
  type: TYPE_TB
  zh: '| `sum` 和 `prod` 在 `dtype=None` 时总是将 `float32` 上转型为 `float64`。 | **破坏性变化**
    |  |'
- en: '| The `std` and `var` functions have a `correction` keyword argument instead
    of `ddof`. | **Compatible** |  |'
  id: totrans-874
  prefs: []
  type: TYPE_TB
  zh: '| `std` 和 `var` 函数具有 `correction` 关键字参数而不是 `ddof`。 | **兼容性** |  |'
- en: Other Differences
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他差异
- en: '| Feature | Type | Notes |'
  id: totrans-876
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 类型 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-877
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Dtypes can only be spelled as dtype objects. | **Strictness** | For example,
    `numpy.array_api.asarray([0], dtype=''int32'')` is not allowed. |'
  id: totrans-878
  prefs: []
  type: TYPE_TB
  zh: '| Dtypes 只能以 dtype 对象的形式表示。 | **严格性** | 例如，`numpy.array_api.asarray([0], dtype=''int32'')`
    是不允许的。 |'
- en: '| `asarray` is not implicitly called in any function. | **Strictness** | The
    exception is Python operators, which accept Python scalars in certain cases (see
    [Type Promotion Differences](#array-api-type-promotion-differences)). |'
  id: totrans-879
  prefs: []
  type: TYPE_TB
  zh: '| `asarray` 在任何函数中都不会被隐式调用。 | **严格性** | 例外情况是 Python 运算符，在某些情况下接受 Python 标量（参见[类型提升差异](#array-api-type-promotion-differences)）。
    |'
- en: '| `tril` and `triu` require the input to be at least 2-D. | **Strictness**
    |  |'
  id: totrans-880
  prefs: []
  type: TYPE_TB
  zh: '| `tril` 和 `triu` 要求输入至少是 2-D。 | **严格性** |  |'
- en: '| finfo() return type uses `float` for the various attributes. | **Strictness**
    | The spec allows duck typing, so `finfo` returning dtype scalars is considered
    type compatible with `float`. |'
  id: totrans-881
  prefs: []
  type: TYPE_TB
  zh: '| finfo() 返回类型使用 `float` 来表示各种属性。 | **严格性** | 规范允许鸭子类型，因此 `finfo` 返回的 dtype
    标量被认为与 `float` 兼容。 |'
- en: '| Positional arguments in every function are positional-only. | **Breaking**
    | See the spec for the exact signature of each function. Note that NumPy ufuncs
    already use positional-only arguments, but non-ufuncs like `asarray` generally
    do not. |'
  id: totrans-882
  prefs: []
  type: TYPE_TB
  zh: '| 每个函数中的位置参数都是仅限位置的。 | **破坏性变化** | 请查看每个函数的确切签名规范。请注意，NumPy 的 ufuncs 已经使用了仅限位置的参数，但非
    ufunc 的函数如 `asarray` 通常不会。 |'
