- en: scipy.special.nbdtr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.nbdtr.html#scipy.special.nbdtr](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.nbdtr.html#scipy.special.nbdtr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Negative binomial cumulative distribution function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the sum of the terms 0 through *k* of the negative binomial distribution
    probability mass function,
  prefs: []
  type: TYPE_NORMAL
- en: \[F = \sum_{j=0}^k {{n + j - 1}\choose{j}} p^n (1 - p)^j.\]
  prefs: []
  type: TYPE_NORMAL
- en: In a sequence of Bernoulli trials with individual success probabilities *p*,
    this is the probability that *k* or fewer failures precede the nth success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of allowed failures (nonnegative int).
  prefs: []
  type: TYPE_NORMAL
- en: '**n**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The target number of successes (positive int).
  prefs: []
  type: TYPE_NORMAL
- en: '**p**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Probability of success in a single event (float).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function results
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**F**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The probability of *k* or fewer failures before *n* successes in a sequence
    of events with individual success probability *p*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtrc`](scipy.special.nbdtrc.html#scipy.special.nbdtrc "scipy.special.nbdtrc")'
  prefs: []
  type: TYPE_NORMAL
- en: Negative binomial survival function
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtrik`](scipy.special.nbdtrik.html#scipy.special.nbdtrik "scipy.special.nbdtrik")'
  prefs: []
  type: TYPE_NORMAL
- en: Negative binomial quantile function
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")'
  prefs: []
  type: TYPE_NORMAL
- en: Negative binomial distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If floating point values are passed for *k* or *n*, they will be truncated to
    integers.
  prefs: []
  type: TYPE_NORMAL
- en: The terms are not summed directly; instead the regularized incomplete beta function
    is employed, according to the formula,
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{nbdtr}(k, n, p) = I_{p}(n, k + 1).\]
  prefs: []
  type: TYPE_NORMAL
- en: Wrapper for the Cephes [[1]](#rb09274340cef-1) routine [`nbdtr`](#scipy.special.nbdtr
    "scipy.special.nbdtr").
  prefs: []
  type: TYPE_NORMAL
- en: The negative binomial distribution is also available as [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom"). Using [`nbdtr`](#scipy.special.nbdtr "scipy.special.nbdtr")
    directly can improve performance compared to the `cdf` method of [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom") (see last example).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Cephes Mathematical Functions Library, [http://www.netlib.org/cephes/](http://www.netlib.org/cephes/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Compute the function for `k=10` and `n=5` at `p=0.5`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Compute the function for `n=10` and `p=0.5` at several points by providing a
    NumPy array or list for *k*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Plot the function for four different parameter sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-nbdtr-1_00_00.png](../Images/763f409555829a519ff4b13976fb5d19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The negative binomial distribution is also available as [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom"). Using [`nbdtr`](#scipy.special.nbdtr "scipy.special.nbdtr")
    directly can be much faster than calling the `cdf` method of [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom"), especially for small arrays or individual values. To get
    the same results one must use the following parametrization: `nbinom(n, p).cdf(k)=nbdtr(k,
    n, p)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[`nbdtr`](#scipy.special.nbdtr "scipy.special.nbdtr") can evaluate different
    parameter sets by providing arrays with shapes compatible for broadcasting for
    *k*, *n* and *p*. Here we compute the function for three different *k* at four
    locations *p*, resulting in a 3x4 array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
