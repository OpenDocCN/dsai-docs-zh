- en: scipy.interpolate.splrep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splrep.html#scipy.interpolate.splrep](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splrep.html#scipy.interpolate.splrep)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the B-spline representation of a 1-D curve.
  prefs: []
  type: TYPE_NORMAL
- en: Given the set of data points `(x[i], y[i])` determine a smooth spline approximation
    of degree k on the interval `xb <= x <= xe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x, y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The data points defining a curve y = f(x).
  prefs: []
  type: TYPE_NORMAL
- en: '**w**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Strictly positive rank-1 array of weights the same length as x and y. The weights
    are used in computing the weighted least-squares spline fit. If the errors in
    the y values have standard-deviation given by the vector d, then w should be 1/d.
    Default is ones(len(x)).
  prefs: []
  type: TYPE_NORMAL
- en: '**xb, xe**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The interval to fit. If None, these default to x[0] and x[-1] respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The degree of the spline fit. It is recommended to use cubic splines. Even values
    of k should be avoided especially with small s values. 1 <= k <= 5
  prefs: []
  type: TYPE_NORMAL
- en: '**task**{1, 0, -1}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If task==0 find t and c for a given smoothing factor, s.
  prefs: []
  type: TYPE_NORMAL
- en: If task==1 find t and c for another value of the smoothing factor, s. There
    must have been a previous call with task=0 or task=1 for the same set of data
    (t will be stored an used internally)
  prefs: []
  type: TYPE_NORMAL
- en: If task=-1 find the weighted least square spline for a given set of knots, t.
    These should be interior knots as knots on the ends will be added automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A smoothing condition. The amount of smoothness is determined by satisfying
    the conditions: `sum((w * (y - g))**2,axis=0) <= s` where g(x) is the smoothed
    interpolation of (x,y). The user can use s to control the tradeoff between closeness
    and smoothness of fit. Larger s means more smoothing while smaller values of s
    indicate less smoothing. Recommended values of s depend on the weights, w. If
    the weights represent the inverse of the standard-deviation of y, then a good
    s value should be found in the range (m-sqrt(2*m),m+sqrt(2*m)) where m is the
    number of datapoints in x, y, and w. default : s=m-sqrt(2*m) if weights are supplied.
    s = 0.0 (interpolating) if no weights are supplied.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The knots needed for task=-1\. If given then task is automatically set to -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If non-zero, then return optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**per**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If non-zero, data points are considered periodic with period x[m-1] - x[0] and
    a smooth periodic spline approximation is returned. Values of y[m-1] and w[m-1]
    are not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**quiet**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Non-zero to suppress messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tck**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple (t,c,k) containing the vector of knots, the B-spline coefficients, and
    the degree of the spline.
  prefs: []
  type: TYPE_NORMAL
- en: '**fp**array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The weighted sum of squared residuals of the spline approximation.
  prefs: []
  type: TYPE_NORMAL
- en: '**ier**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An integer flag about splrep success. Success is indicated if ier<=0. If ier
    in [1,2,3] an error occurred but was not raised. Otherwise an error is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**msg**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A message corresponding to the integer flag, ier.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline"), [`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep "scipy.interpolate.splprep"),
    [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev"),
    [`sproot`](scipy.interpolate.sproot.html#scipy.interpolate.sproot "scipy.interpolate.sproot"),
    [`spalde`](scipy.interpolate.spalde.html#scipy.interpolate.spalde "scipy.interpolate.spalde"),
    [`splint`](scipy.interpolate.splint.html#scipy.interpolate.splint "scipy.interpolate.splint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep"),
    [`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_interp_spline`](scipy.interpolate.make_interp_spline.html#scipy.interpolate.make_interp_spline
    "scipy.interpolate.make_interp_spline")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev")
    for evaluation of the spline and its derivatives. Uses the FORTRAN routine `curfit`
    from FITPACK.
  prefs: []
  type: TYPE_NORMAL
- en: The user is responsible for assuring that the values of *x* are unique. Otherwise,
    [`splrep`](#scipy.interpolate.splrep "scipy.interpolate.splrep") will not return
    sensible results.
  prefs: []
  type: TYPE_NORMAL
- en: If provided, knots *t* must satisfy the Schoenberg-Whitney conditions, i.e.,
    there must be a subset of data points `x[j]` such that `t[j] < x[j] < t[j+k+1]`,
    for `j=0, 1,...,n-k-2`.
  prefs: []
  type: TYPE_NORMAL
- en: This routine zero-pads the coefficients array `c` to have the same length as
    the array of knots `t` (the trailing `k + 1` coefficients are ignored by the evaluation
    routines, [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev")
    and [`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline").)
    This is in contrast with [`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep
    "scipy.interpolate.splprep"), which does not zero-pad the coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on algorithms described in [[1]](#r045602924b7b-1), [[2]](#r045602924b7b-2),
    [[3]](#r045602924b7b-3), and [[4]](#r045602924b7b-4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “An algorithm for smoothing, differentiation and integration of
    experimental data using spline functions”, J.Comp.Appl.Maths 1 (1975) 165-184.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “A fast algorithm for smoothing data on a rectangular grid while
    using spline functions”, SIAM J.Numer.Anal. 19 (1982) 1286-1304.
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “An improved algorithm for curve fitting with spline functions”,
    report tw54, Dept. Computer Science,K.U. Leuven, 1981.
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Curve and surface fitting with splines”, Monographs on Numerical
    Analysis, Oxford University Press, 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: You can interpolate 1-D points with a B-spline curve. Further examples are given
    in [in the tutorial](../../tutorial/interpolate/smoothing_splines.html#tutorial-interpolate-splxxx).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-splrep-1.png](../Images/b91b3d08445f6369b92eeabf555c826d.png)'
  prefs: []
  type: TYPE_IMG
