["```py\nscipy.stats.nbinom = <scipy.stats._discrete_distns.nbinom_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import nbinom\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> n, p = 5, 0.5\n>>> mean, var, skew, kurt = nbinom.stats(n, p, moments='mvsk') \n```", "```py\n>>> x = np.arange(nbinom.ppf(0.01, n, p),\n...               nbinom.ppf(0.99, n, p))\n>>> ax.plot(x, nbinom.pmf(x, n, p), 'bo', ms=8, label='nbinom pmf')\n>>> ax.vlines(x, 0, nbinom.pmf(x, n, p), colors='b', lw=5, alpha=0.5) \n```", "```py\n>>> rv = nbinom(n, p)\n>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,\n...         label='frozen pmf')\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> prob = nbinom.cdf(x, n, p)\n>>> np.allclose(x, nbinom.ppf(prob, n, p))\nTrue \n```", "```py\n>>> r = nbinom.rvs(n, p, size=1000) \n```"]