- en: Logic functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑函数
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.logic.html](https://numpy.org/doc/1.26/reference/routines.logic.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.logic.html](https://numpy.org/doc/1.26/reference/routines.logic.html)
- en: Truth value testing
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真值测试
- en: '| [`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims, where])
    | Test whether all array elements along a given axis evaluate to True. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '[`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims,
    where]) | 测试数组沿给定轴的所有元素是否都为 True。'
- en: '| [`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims, where])
    | Test whether any array element along a given axis evaluates to True. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '[`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims,
    where]) | 测试数组沿给定轴是否存在任意元素为 True。'
- en: Array contents
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组内容
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '[`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x,
    /[, out, where, casting, order, ...]) | 测试元素级是否为有限数(非无穷大且非 NaN)。'
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '[`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out,
    where, casting, order, ...]) | 测试元素级是否为正无穷大或负无穷大。'
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '[`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out,
    where, casting, order, ...]) | 测试元素级是否为 NaN，并以布尔数组形式返回结果。'
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '[`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out,
    where, casting, order, ...]) | 测试元素级是否为非时间(NaT)，并以布尔数组形式返回结果。'
- en: '| [`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[, out])
    | Test element-wise for negative infinity, return result as bool array. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '[`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[,
    out]) | 测试元素级是否为负无穷大，并以布尔数组形式返回结果。'
- en: '| [`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[, out])
    | Test element-wise for positive infinity, return result as bool array. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '[`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[,
    out]) | 测试元素级是否为正无穷大，并以布尔数组形式返回结果。'
- en: Array type testing
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组类型测试
- en: '| [`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | Returns a bool array, where True if input element is complex. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '[`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | 返回一个布尔数组，如果输入元素是复数则为 True。'
- en: '| [`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | Check for a complex type or an array of complex numbers. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '[`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | 检查是否为复数类型或复数数组。'
- en: '| [`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | Check if the array is Fortran contiguous but *not* C contiguous. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '[`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | 检查数组是否为 Fortran 连续但*不*为 C 连续。'
- en: '| [`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) |
    Returns a bool array, where True if input element is real. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '[`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) | 返回一个布尔数组，如果输入元素是实数则为
    True。'
- en: '| [`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | Return True if x is a not complex type or an array of complex numbers. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '[`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | 如果 x 是非复数类型或复数数组，则返回 True。'
- en: '| [`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | Returns True if the type of *element* is a scalar type. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '[`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | 如果 *element* 的类型是标量类型，则返回 True。'
- en: Logical operations
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '[`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1,
    x2, /[, out, where, ...]) | 逐元素计算 x1 和 x2 的真值。'
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '[`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1,
    x2, /[, out, where, casting, ...]) | 逐元素计算 x1 或 x2 的真值。'
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | 逐元素计算NOT x的真值。 |'
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | 逐元素计算x1 XOR x2的真值。 |'
- en: Comparison
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | 如果两个数组在容差内逐元素相等则返回True。 |'
- en: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | Returns a boolean array where two arrays are element-wise equal within a tolerance.
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | 返回一个布尔数组，其中两个数组在容差内逐元素相等。 |'
- en: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | True if two arrays have the same shape and elements, False otherwise. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | 如果两个数组具有相同的形状和元素，则返回True，否则返回False。 |'
- en: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | Returns True if input arrays are shape consistent and all elements equal. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | 如果输入数组形状一致且所有元素相等则返回True。 |'
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 > x2）的逐元素真值。 |'
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | 返回（x1 >= x2）的逐元素真值。 |'
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: ' | [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 < x2）的逐元素真值。 |'
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 <= x2）的逐元素真值。 |'
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: ' | [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 == x2）的逐元素真值。 |'
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | 逐元素返回（x1 != x2）。 |'
- en: Truth value testing
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真值测试
- en: '| [`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims, where])
    | Test whether all array elements along a given axis evaluate to True. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims, where])
    | 测试沿给定轴的所有数组元素是否求值为True。 |'
- en: '| [`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims, where])
    | Test whether any array element along a given axis evaluates to True. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: ' | [`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims, where])
    | 测试沿给定轴的任何数组元素是否求值为True。 |'
- en: Array contents
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组内容
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为有限值（既不是无穷大也不是非数）。 |'
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为正无穷或负无穷。 |'
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为NaN，并将结果作为布尔数组返回。 |'
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaT（不是时间），并返回布尔数组结果。 |'
- en: '| [`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[, out])
    | Test element-wise for negative infinity, return result as bool array. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[, out])
    | 逐元素测试是否为负无穷大，返回布尔数组结果。 |'
- en: '| [`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[, out])
    | Test element-wise for positive infinity, return result as bool array. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[, out])
    | 逐元素测试是否为正无穷大，返回布尔数组结果。 |'
- en: Array type testing
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组类型测试
- en: '| [`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | Returns a bool array, where True if input element is complex. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | 返回一个布尔数组，输入元素为复数时返回 True。 |'
- en: '| [`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | Check for a complex type or an array of complex numbers. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | 检查复数类型或复数数组。 |'
- en: '| [`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | Check if the array is Fortran contiguous but *not* C contiguous. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | 检查数组是否是 Fortran 连续但*不是*C 连续。 |'
- en: '| [`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) |
    Returns a bool array, where True if input element is real. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) |
    返回一个布尔数组，输入元素为实数时返回 True。 |'
- en: '| [`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | Return True if x is a not complex type or an array of complex numbers. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | 如果 x 是非复数类型或复数数组，则返回 True。 |'
- en: '| [`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | Returns True if the type of *element* is a scalar type. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | 如果 *element* 的类型是标量类型，则返回 True。 |'
- en: Logical operations
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑运算
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | 逐元素计算 x1 AND x2 的真值。 |'
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | 逐元素计算 x1 OR x2 的真值。 |'
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | 逐元素计算 NOT x 的真值。 |'
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | 逐元素计算 x1 XOR x2 的真值。 |'
- en: Comparison
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | 如果两个数组在容差范围内逐元素相等，则返回 True。 |'
- en: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | Returns a boolean array where two arrays are element-wise equal within a tolerance.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | 返回一个布尔数组，在容差范围内两个数组逐元素相等。 |'
- en: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | True if two arrays have the same shape and elements, False otherwise. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | 如果两个数组具有相同的形状和元素，则为 True，否则为 False。 |'
- en: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | Returns True if input arrays are shape consistent and all elements equal. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | 如果输入数组形状一致且所有元素相等，则返回 True。 |'
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素 (x1 > x2) 的真值。'
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | 返回逐元素 (x1 >= x2) 的真值。'
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素 (x1 < x2) 的真值。'
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素 (x1 <= x2) 的真值。'
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素 (x1 == x2) 的真值。'
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素 (x1 != x2) 的真值。'
