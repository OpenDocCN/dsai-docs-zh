- en: NumPy 1.8.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.8.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.8.0-notes.html](https://numpy.org/doc/1.26/release/1.8.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.8.0-notes.html](https://numpy.org/doc/1.26/release/1.8.0-notes.html)
- en: This release supports Python 2.6 -2.7 and 3.2 - 3.3.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本次发布支持 Python 2.6 - 2.7 和 3.2 - 3.3。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: New, no 2to3, Python 2 and Python 3 are supported by a common code base.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，无需2to3，Python 2和Python 3由一个共同的代码库支持。
- en: New, gufuncs for linear algebra, enabling operations on stacked arrays.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，用于线性代数的gufuncs，使堆叠数组上的操作成为可能。
- en: New, inplace fancy indexing for ufuncs with the `.at` method.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，使用`.at`方法的ufunc的原地花式索引。
- en: New, `partition` function, partial sorting via selection for fast median.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，`partition` 函数，通过选择进行部分排序以获得快速中位数。
- en: New, `nanmean`, `nanvar`, and `nanstd` functions skipping NaNs.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，`nanmean`，`nanvar`和`nanstd`函数跳过NaN。
- en: New, `full` and `full_like` functions to create value initialized arrays.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，`full` 和 `full_like` 函数用于创建值初始化的数组。
- en: New, `PyUFunc_RegisterLoopForDescr`, better ufunc support for user dtypes.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，`PyUFunc_RegisterLoopForDescr`，更好地支持用户数据类型的ufunc。
- en: Numerous performance improvements in many areas.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多领域进行了大量性能改进。
- en: Dropped Support
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已停止支持
- en: Support for Python versions 2.4 and 2.5 has been dropped,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 已停止支持 Python 版本 2.4 和 2.5。
- en: Support for SCons has been removed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 已移除对 SCons 的支持。
- en: Future Changes
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的变化
- en: The Datetime64 type remains experimental in this release. In 1.9 there will
    probably be some changes to make it more usable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在此版本中，Datetime64 类型仍处于实验阶段。在 1.9 版本中可能会有一些更改以使其更易于使用。
- en: The diagonal method currently returns a new array and raises a FutureWarning.
    In 1.9 it will return a readonly view.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的对角线方法返回一个新数组并引发 FutureWarning。在 1.9 版本中，它将返回一个只读视图。
- en: Multiple field selection from an array of structured type currently returns
    a new array and raises a FutureWarning. In 1.9 it will return a readonly view.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构化类型数组中进行多字段选择目前返回一个新数组并引发 FutureWarning。在 1.9 版本中，它将返回一个只读视图。
- en: The numpy/oldnumeric and numpy/numarray compatibility modules will be removed
    in 1.9.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/oldnumeric 和 numpy/numarray 兼容性模块将在 1.9 版本中被移除。
- en: Compatibility notes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The doc/sphinxext content has been moved into its own github repository, and
    is included in numpy as a submodule. See the instructions in doc/HOWTO_BUILD_DOCS.rst
    for how to access the content.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: doc/sphinxext 内容已移至自己的 github 存储库，并作为 numpy 的子模块包含在其中。请参阅 doc/HOWTO_BUILD_DOCS.rst
    中的说明以访问内容。
- en: The hash function of numpy.void scalars has been changed. Previously the pointer
    to the data was hashed as an integer. Now, the hash function uses the tuple-hash
    algorithm to combine the hash functions of the elements of the scalar, but only
    if the scalar is read-only.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: numpy.void标量的哈希函数已更改。以前，数据指针被哈希为整数。现在，哈希函数使用元组哈希算法来组合标量元素的哈希函数，但仅当标量是只读时。
- en: Numpy has switched its build system to using ‘separate compilation’ by default.
    In previous releases this was supported, but not default. This should produce
    the same results as the old system, but if you’re trying to do something complicated
    like link numpy statically or using an unusual compiler, then it’s possible you
    will encounter problems. If so, please file a bug and as a temporary workaround
    you can re-enable the old build system by exporting the shell variable NPY_SEPARATE_COMPILATION=0.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 已将其构建系统默认切换为使用‘separate compilation’。在以前的版本中，这是受支持的，但不是默认的。这应该产生与旧系统相同的结果，但如果您尝试做一些复杂的事情，比如静态链接
    numpy 或使用不寻常的编译器，那么可能会遇到问题。如果是这样，请报告一个 bug，并且作为临时解决方法，您可以通过导出 shell 变量 NPY_SEPARATE_COMPILATION=0
    来重新启用旧的构建系统。
- en: For the AdvancedNew iterator the `oa_ndim` flag should now be -1 to indicate
    that no `op_axes` and `itershape` are passed in. The `oa_ndim == 0` case, now
    indicates a 0-D iteration and `op_axes` being NULL and the old usage is deprecated.
    This does not effect the `NpyIter_New` or `NpyIter_MultiNew` functions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AdvancedNew 迭代器，`oa_ndim` 标志现在应为 -1，表示不传递 `op_axes` 和 `itershape`。现在，`oa_ndim
    == 0` 情况表示一个 0-D 迭代，`op_axes` 为 NULL，旧用法已被弃用。这不影响 `NpyIter_New` 或 `NpyIter_MultiNew`
    函数。
- en: The functions nanargmin and nanargmax now return np.iinfo[‘intp’].min for the
    index in all-NaN slices. Previously the functions would raise a ValueError for
    array returns and NaN for scalar returns.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `nanargmin` 和 `nanargmax` 现在在所有-NaN切片中返回 np.iinfo[‘intp’].min 作为索引。以前，这些函数对于数组返回会引发
    ValueError，对于标量返回会引发 NaN。
- en: NPY_RELAXED_STRIDES_CHECKING
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NPY_RELAXED_STRIDES_CHECKING
- en: 'There is a new compile time environment variable `NPY_RELAXED_STRIDES_CHECKING`.
    If this variable is set to 1, then numpy will consider more arrays to be C- or
    F-contiguous – for example, it becomes possible to have a column vector which
    is considered both C- and F-contiguous simultaneously. The new definition is more
    accurate, allows for faster code that makes fewer unnecessary copies, and simplifies
    numpy’s code internally. However, it may also break third-party libraries that
    make too-strong assumptions about the stride values of C- and F-contiguous arrays.
    (It is also currently known that this breaks Cython code using memoryviews, which
    will be fixed in Cython.) THIS WILL BECOME THE DEFAULT IN A FUTURE RELEASE, SO
    PLEASE TEST YOUR CODE NOW AGAINST NUMPY BUILT WITH:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 新的编译时环境变量`NPY_RELAXED_STRIDES_CHECKING`。如果将此变量设置为1，则numpy将考虑更多数组为C-或F-连续的情况
    - 例如，现在可以同时将列向量视为C-和F-连续。新的定义更准确，允许更快速的代码，减少不必要的复制，并简化numpy内部的代码。但是，这也可能破坏对C-和F-连续数组的步幅值做出过于强烈假设的第三方库。（目前已知这会破坏使用memoryviews的Cython代码，这将在Cython中修复。）这将在未来的发布中成为默认设置，请立即使用以下方式测试您的代码与使用NUMPY构建的代码：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can check whether NPY_RELAXED_STRIDES_CHECKING is in effect by running:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查NPY_RELAXED_STRIDES_CHECKING是否生效：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will be `True` if relaxed strides checking is enabled, and `False` otherwise.
    The typical problem we’ve seen so far is C code that works with C-contiguous arrays,
    and assumes that the itemsize can be accessed by looking at the last element in
    the `PyArray_STRIDES(arr)` array. When relaxed strides are in effect, this is
    not true (and in fact, it never was true in some corner cases). Instead, use `PyArray_ITEMSIZE(arr)`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了放松的步幅检查，则为`True`，否则为`False`。到目前为止，我们看到的典型问题是使用C代码处理C连续数组，并假设可以通过查看`PyArray_STRIDES(arr)`数组中的最后一个元素来访问itemsize。当启用放松的步幅时，这是不正确的（实际上，在某些极端情况下从未正确）。而应使用`PyArray_ITEMSIZE(arr)`。
- en: For more information check the “Internal memory layout of an ndarray” section
    in the documentation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查看文档中的“ndarray的内部内存布局”部分。
- en: Binary operations with non-arrays as second argument
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制操作的第二个参数为非数组时
- en: Binary operations of the form `<array-or-subclass> * <non-array-subclass>` where
    `<non-array-subclass>` declares an `__array_priority__` higher than that of `<array-or-subclass>`
    will now unconditionally return *NotImplemented*, giving `<non-array-subclass>`
    a chance to handle the operation. Previously, *NotImplemented* would only be returned
    if `<non-array-subclass>` actually implemented the reversed operation, and after
    a (potentially expensive) array conversion of `<non-array-subclass>` had been
    attempted. ([bug](https://github.com/numpy/numpy/issues/3375), [pull request](https://github.com/numpy/numpy/pull/3501))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制操作形式为`<array-or-subclass> * <non-array-subclass>`，其中`<non-array-subclass>`声明的`__array_priority__`高于`<array-or-subclass>`，现在将无条件返回*NotImplemented*，给予`<non-array-subclass>`处理该操作的机会。之前，只有在`<non-array-subclass>`实际实现了反向操作，并且尝试了对`<non-array-subclass>`进行（可能昂贵的）数组转换后，才会返回*NotImplemented*。([bug](https://github.com/numpy/numpy/issues/3375),
    [pull request](https://github.com/numpy/numpy/pull/3501))
- en: Function *median* used with *overwrite_input* only partially sorts array
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用*overwrite_input*选项的函数*median*仅部分排序数组
- en: If *median* is used with *overwrite_input* option the input array will now only
    be partially sorted instead of fully sorted.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用*overwrite_input*选项与*median*一起使用，则输入数组现在将仅部分排序而不是完全排序。
- en: Fix to financial.npv
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复了financial.npv
- en: The npv function had a bug. Contrary to what the documentation stated, it summed
    from indexes `1` to `M` instead of from `0` to `M - 1`. The fix changes the returned
    value. The mirr function called the npv function, but worked around the problem,
    so that was also fixed and the return value of the mirr function remains unchanged.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: npv函数存在一个错误。与文档所述相反，它从索引`1`到`M`而不是从`0`到`M - 1`求和。修复更改了返回值。mirr函数调用了npv函数，但解决了问题，因此也进行了修复，并且mirr函数的返回值保持不变。
- en: Runtime warnings when comparing NaN numbers
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较NaN数字时的运行时警告
- en: 'Comparing `NaN` floating point numbers now raises the `invalid` runtime warning.
    If a `NaN` is expected the warning can be ignored using np.errstate. E.g.:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 比较浮点数`NaN`现在会引发`invalid`运行时警告。如果预期有`NaN`，则可以使用np.errstate忽略警告。例如：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: New Features
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Support for linear algebra on stacked arrays
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对堆叠数组进行线性代数支持
- en: 'The gufunc machinery is now used for np.linalg, allowing operations on stacked
    arrays and vectors. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: gufunc机制现在用于np.linalg，允许对堆叠数组和向量进行操作。例如：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In place fancy indexing for ufuncs
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对ufunc的原地花式索引
- en: 'The function `at` has been added to ufunc objects to allow in place ufuncs
    with no buffering when fancy indexing is used. For example, the following will
    increment the first and second items in the array, and will increment the third
    item twice: `numpy.add.at(arr, [0, 1, 2, 2], 1)`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`at`已添加到ufunc对象中，允许在使用花式索引时进行原地ufunc操作而无需缓冲。例如，以下操作将增加数组中的第一个和第二个项目，并将第三个项目增加两次：`numpy.add.at(arr,
    [0, 1, 2, 2], 1)`
- en: This is what many have mistakenly thought `arr[[0, 1, 2, 2]] += 1` would do,
    but that does not work as the incremented value of `arr[2]` is simply copied into
    the third slot in `arr` twice, not incremented twice.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多人错误认为`arr[[0, 1, 2, 2]] += 1`会做的事情，但实际上不会，因为`arr[2]`的增量值只是简单地复制到`arr`的第三个槽位两次，而不是增加两次。
- en: New functions *partition* and *argpartition*
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*partition*和*argpartition*
- en: New functions to partially sort arrays via a selection algorithm.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择算法部分排序数组的新函数。
- en: A `partition` by index `k` moves the `k` smallest element to the front of an
    array. All elements before `k` are then smaller or equal than the value in position
    `k` and all elements following `k` are then greater or equal than the value in
    position `k`. The ordering of the values within these bounds is undefined. A sequence
    of indices can be provided to sort all of them into their sorted position at once
    iterative partitioning. This can be used to efficiently obtain order statistics
    like median or percentiles of samples. `partition` has a linear time complexity
    of `O(n)` while a full sort has `O(n log(n))`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过索引`k`进行分区将`k`个最小元素移动到数组的前面。然后`k`之前的所有元素都小于或等于位置`k`处的值，而`k`之后的所有元素都大于或等于位置`k`处的值。这些边界内的值的排序是未定义的。可以提供一系列索引来一次性将它们全部排序到其排序位置，这可以用于高效地获取样本的中位数或百分位数等顺序统计量。`partition`具有线性时间复杂度为`O(n)`，而完全排序的时间复杂度为`O(n
    log(n))`。
- en: New functions *nanmean*, *nanvar* and *nanstd*
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*nanmean*、*nanvar*和*nanstd*
- en: New nan aware statistical functions are added. In these functions the results
    are what would be obtained if nan values were omitted from all computations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了nan感知统计函数。在这些函数中，结果是如果从所有计算中省略nan值后获得的结果。
- en: New functions *full* and *full_like*
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*full*和*full_like*
- en: New convenience functions to create arrays filled with a specific value; complementary
    to the existing *zeros* and *zeros_like* functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 新的便利函数用于创建填充特定值的数组；与现有的*zeros*和*zeros_like*函数相辅相成。
- en: IO compatibility with large files
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与大文件的IO兼容性
- en: Large NPZ files >2GB can be loaded on 64-bit systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大于2GB的大型NPZ文件可以在64位系统上加载。
- en: Building against OpenBLAS
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对OpenBLAS的构建
- en: It is now possible to build numpy against OpenBLAS by editing site.cfg.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过编辑site.cfg来构建针对OpenBLAS的numpy。
- en: New constant
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新常数
- en: Euler’s constant is now exposed in numpy as euler_gamma.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉常数现在在numpy中作为euler_gamma暴露出来。
- en: New modes for qr
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: qr的新模式
- en: New modes ‘complete’, ‘reduced’, and ‘raw’ have been added to the qr factorization
    and the old ‘full’ and ‘economic’ modes are deprecated. The ‘reduced’ mode replaces
    the old ‘full’ mode and is the default as was the ‘full’ mode, so backward compatibility
    can be maintained by not specifying the mode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: qr分解新增了‘complete’、‘reduced’和‘raw’三种模式，旧的‘full’和‘economic’模式已被弃用。‘reduced’模式取代了旧的‘full’模式，并且是默认模式，因此可以通过不指定模式来保持向后兼容性。
- en: The ‘complete’ mode returns a full dimensional factorization, which can be useful
    for obtaining a basis for the orthogonal complement of the range space. The ‘raw’
    mode returns arrays that contain the Householder reflectors and scaling factors
    that can be used in the future to apply q without needing to convert to a matrix.
    The ‘economic’ mode is simply deprecated, there isn’t much use for it and it isn’t
    any more efficient than the ‘raw’ mode.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ‘complete’模式返回完整维度的分解，可用于获取正交补空间的基础。‘raw’模式返回包含Householder反射器和缩放因子的数组，可用于将来应用q而无需转换为矩阵。‘economic’模式已被弃用，几乎没有什么用处，也不比‘raw’模式更有效率。
- en: New *invert* argument to *in1d*
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*in1d*新增了*invert*参数'
- en: The function *in1d* now accepts a *invert* argument which, when *True*, causes
    the returned array to be inverted.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 函数*in1d*现在接受一个*invert*参数，当为*True*时，返回的数组将被反转。
- en: Advanced indexing using *np.newaxis*
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用*np.newaxis*进行高级索引
- en: It is now possible to use *np.newaxis*/*None* together with index arrays instead
    of only in simple indices. This means that `array[np.newaxis, [0, 1]]` will now
    work as expected and select the first two rows while prepending a new axis to
    the array.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在索引数组中使用*np.newaxis*/*None*，而不仅仅是在简单索引中。这意味着`array[np.newaxis, [0, 1]]`现在可以按预期工作，并选择前两行，同时在数组前添加一个新轴。
- en: C-API
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: New ufuncs can now be registered with builtin input types and a custom output
    type. Before this change, NumPy wouldn’t be able to find the right ufunc loop
    function when the ufunc was called from Python, because the ufunc loop signature
    matching logic wasn’t looking at the output operand type. Now the correct ufunc
    loop is found, as long as the user provides an output argument with the correct
    output type.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用内置输入类型和自定义输出类型注册新的ufuncs。在此更改之前，当从Python调用ufunc时，NumPy无法找到正确的ufunc循环函数，因为ufunc循环签名匹配逻辑没有查看输出操作数类型。现在只要用户提供具有正确输出类型的输出参数，就可以找到正确的ufunc循环。
- en: runtests.py
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: runtests.py
- en: A simple test runner script `runtests.py` was added. It also builds Numpy via
    `setup.py build` and can be used to run tests easily during development.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个简单的测试运行脚本`runtests.py`。它还通过`setup.py build`构建Numpy，并可在开发过程中轻松运行测试。
- en: Improvements
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: IO performance improvements
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IO性能改进
- en: Performance in reading large files was improved by chunking (see also IO compatibility).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分块改进了读取大文件的性能（另请参阅IO兼容性）。
- en: Performance improvements to *pad*
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*pad*的性能改进'
- en: The *pad* function has a new implementation, greatly improving performance for
    all inputs except *mode=* (retained for backwards compatibility). Scaling with
    dimensionality is dramatically improved for rank >= 4.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*pad*函数有一个新的实现，大大提高了所有输入的性能，除了*mode=*（保留了向后兼容性）。对于rank >= 4，随着维度的增加，性能得到了显著改善。'
- en: Performance improvements to *isnan*, *isinf*, *isfinite* and *byteswap*
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*isnan*、*isinf*、*isfinite*和*byteswap*的性能改进'
- en: '*isnan*, *isinf*, *isfinite* and *byteswap* have been improved to take advantage
    of compiler builtins to avoid expensive calls to libc. This improves performance
    of these operations by about a factor of two on gnu libc systems.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*isnan*、*isinf*、*isfinite*和*byteswap*已经改进，利用编译器内置功能避免了对libc的昂贵调用。这将在gnu libc系统上将这些操作的性能提高约两倍。'
- en: Performance improvements via SSE2 vectorization
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过SSE2矢量化实现性能改进
- en: Several functions have been optimized to make use of SSE2 CPU SIMD instructions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 几个函数已经经过优化，以利用SSE2 CPU SIMD指令。
- en: 'Float32 and float64:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Float32和float64：
- en: base math (*add*, *subtract*, *divide*, *multiply*)
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本数学（*加法*、*减法*、*除法*、*乘法*）
- en: '*sqrt*'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*平方根*'
- en: '*minimum/maximum*'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最小值/最大值*'
- en: '*absolute*'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绝对值*'
- en: 'Bool:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔：
- en: '*logical_or*'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑或*'
- en: '*logical_and*'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑与*'
- en: '*logical_not*'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑非*'
- en: This improves performance of these operations up to 4x/2x for float32/float64
    and up to 10x for bool depending on the location of the data in the CPU caches.
    The performance gain is greatest for in-place operations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使这些操作的性能提高至多4倍/2倍（对于float32/float64），并且取决于数据在CPU缓存中的位置，对于bool类型的性能提高最多可达10倍。对于原地操作，性能提升最大。
- en: In order to use the improved functions the SSE2 instruction set must be enabled
    at compile time. It is enabled by default on x86_64 systems. On x86_32 with a
    capable CPU it must be enabled by passing the appropriate flag to the CFLAGS build
    variable (-msse2 with gcc).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用改进的函数，必须在编译时启用SSE2指令集。在x86_64系统上，默认启用它。在具有能力的CPU的x86_32上，必须通过向CFLAGS构建变量传递适当的标志（使用gcc时为-msse2）来启用它。
- en: Performance improvements to *median*
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*中位数*的性能改进'
- en: '*median* is now implemented in terms of *partition* instead of *sort* which
    reduces its time complexity from O(n log(n)) to O(n). If used with the *overwrite_input*
    option the array will now only be partially sorted instead of fully sorted.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*中位数*现在是基于*partition*而不是*sort*实现的，这将其时间复杂度从O(n log(n))降低到O(n)。如果与*overwrite_input*选项一起使用，则数组现在只会部分排序而不是完全排序。'
- en: Overridable operand flags in ufunc C-API
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufunc C-API中可覆盖的操作数标志
- en: 'When creating a ufunc, the default ufunc operand flags can be overridden via
    the new op_flags attribute of the ufunc object. For example, to set the operand
    flag for the first input to read/write:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建ufunc时，可以通过ufunc对象的新op_flags属性覆盖默认的ufunc操作数标志。例如，要将第一个输入的操作数标志设置为读/写：
- en: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
- en: 'This allows a ufunc to perform an operation in place. Also, global nditer flags
    can be overridden via the new iter_flags attribute of the ufunc object. For example,
    to set the reduce flag for a ufunc:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许ufunc在原地执行操作。此外，全局nditer标志可以通过ufunc对象的新iter_flags属性进行覆盖。例如，要为ufunc设置reduce标志：
- en: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
- en: Changes
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: General
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The function np.take now allows 0-d arrays as indices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 函数np.take现在允许0维数组作为索引。
- en: The separate compilation mode is now enabled by default.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在默认启用了分离编译模式。
- en: 'Several changes to np.insert and np.delete:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对np.insert和np.delete进行了几处更改：
- en: Previously, negative indices and indices that pointed past the end of the array
    were simply ignored. Now, this will raise a Future or Deprecation Warning. In
    the future they will be treated like normal indexing treats them – negative indices
    will wrap around, and out-of-bound indices will generate an error.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，负索引和指向数组末尾的索引会被简单地忽略。现在，这将引发一个Future或Deprecation Warning。将来，它们将像正常索引处理它们一样处理
    - 负索引将会循环，超出边界的索引将生成错误。
- en: Previously, boolean indices were treated as if they were integers (always referring
    to either the 0th or 1st item in the array). In the future, they will be treated
    as masks. In this release, they raise a FutureWarning warning of this coming change.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，布尔索引被视为整数（始终指向数组中的第0或第1项）。将来，它们将被视为掩码。在此版本中，它们引发一个FutureWarning警告，指出即将发生的更改。
- en: In Numpy 1.7\. np.insert already allowed the syntax *np.insert(arr, 3, [1,2,3])*
    to insert multiple items at a single position. In Numpy 1.8\. this is also possible
    for *np.insert(arr, [3], [1, 2, 3])*.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Numpy 1.7中，np.insert已经允许语法*np.insert(arr, 3, [1,2,3])*在单个位置插入多个项目。在Numpy 1.8中，这也适用于*np.insert(arr,
    [3], [1, 2, 3])*。
- en: Padded regions from np.pad are now correctly rounded, not truncated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从np.pad中的填充区域现在正确地四舍五入，而不是截断。
- en: C-API Array Additions
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API Array Additions
- en: Four new functions have been added to the array C-API.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 数组C-API中添加了四个新函数。
- en: PyArray_Partition
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_Partition
- en: PyArray_ArgPartition
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_ArgPartition
- en: PyArray_SelectkindConverter
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_SelectkindConverter
- en: PyDataMem_NEW_ZEROED
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyDataMem_NEW_ZEROED
- en: C-API Ufunc Additions
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API Ufunc Additions
- en: One new function has been added to the ufunc C-API that allows to register an
    inner loop for user types using the descr.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数组C-API中添加了一个新函数，允许使用descr为用户类型注册内部循环。
- en: PyUFunc_RegisterLoopForDescr
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyUFunc_RegisterLoopForDescr
- en: C-API Developer Improvements
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API开发者改进
- en: The `PyArray_Type` instance creation function `tp_new` now uses `tp_basicsize`
    to determine how much memory to allocate. In previous releases only `sizeof(PyArrayObject)`
    bytes of memory were allocated, often requiring C-API subtypes to reimplement
    `tp_new`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_Type`实例创建函数`tp_new`现在使用`tp_basicsize`来确定分配多少内存。在之前的版本中，只分配了`sizeof(PyArrayObject)`字节的内存，通常需要C-API子类型重新实现`tp_new`。'
- en: Deprecations
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: The ‘full’ and ‘economic’ modes of qr factorization are deprecated.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: qr分解的‘full’和‘economic’模式已被弃用。
- en: General
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The use of non-integer for indices and most integer arguments has been deprecated.
    Previously float indices and function arguments such as axes or shapes were truncated
    to integers without warning. For example *arr.reshape(3., -1)* or *arr[0.]* will
    trigger a deprecation warning in NumPy 1.8., and in some future version of NumPy
    they will raise an error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用使用非整数作为索引和大多数整数参数。以前，浮点索引和函数参数（如轴或形状）会被截断为整数而不发出警告。例如*arr.reshape(3., -1)*或*arr[0.]*将在NumPy
    1.8中触发弃用警告，并且在将来的某个NumPy版本中它们将引发错误。
- en: Authors
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作者
- en: 'This release contains work by the following people who contributed at least
    one patch to this release. The names are in alphabetical order by first name:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本包含以下至少贡献了一个补丁的人员的工作。这些名称按名字的字母顺序排列：
- en: '87'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '87'
- en: Adam Ginsburg +
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adam Ginsburg +
- en: Adam Griffiths +
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adam Griffiths +
- en: Alexander Belopolsky +
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alexander Belopolsky +
- en: Alex Barth +
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alex Barth +
- en: Alex Ford +
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alex Ford +
- en: Andreas Hilboll +
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andreas Hilboll +
- en: Andreas Kloeckner +
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andreas Kloeckner +
- en: Andreas Schwab +
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andreas Schwab +
- en: Andrew Horton +
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andrew Horton +
- en: argriffing +
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: argriffing +
- en: Arink Verma +
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arink Verma +
- en: Bago Amirbekian +
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bago Amirbekian +
- en: Bartosz Telenczuk +
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bartosz Telenczuk +
- en: bebert218 +
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bebert218 +
- en: Benjamin Root +
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Benjamin Root +
- en: Bill Spotz +
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bill Spotz +
- en: Bradley M. Froehle
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bradley M. Froehle
- en: Carwyn Pelley +
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Carwyn Pelley +
- en: Charles Harris
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Charles Harris
- en: Chris
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chris
- en: Christian Brueffer +
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Christian Brueffer +
- en: Christoph Dann +
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Christoph Dann +
- en: Christoph Gohlke
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Christoph Gohlke
- en: Dan Hipschman +
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dan Hipschman +
- en: Daniel +
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Daniel +
- en: Dan Miller +
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dan Miller +
- en: daveydave400 +
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: daveydave400 +
- en: David Cournapeau
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: David Cournapeau
- en: David Warde-Farley
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: David Warde-Farley
- en: Denis Laxalde
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Denis Laxalde
- en: dmuellner +
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dmuellner +
- en: Edward Catmur +
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Edward Catmur +
- en: Egor Zindy +
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Egor Zindy +
- en: endolith
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: endolith
- en: Eric Firing
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Firing
- en: Eric Fode
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Fode
- en: Eric Moore +
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Moore +
- en: Eric Price +
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eric Price +
- en: Fazlul Shahriar +
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fazlul Shahriar +
- en: Félix Hartmann +
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Félix Hartmann +
- en: Fernando Perez
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fernando Perez
- en: Frank B +
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Frank B +
- en: Frank Breitling +
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Frank Breitling +
- en: Frederic
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Frederic
- en: Gabriel
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gabriel
- en: GaelVaroquaux
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GaelVaroquaux
- en: Guillaume Gay +
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Guillaume Gay +
- en: Han Genuit
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Han Genuit
- en: HaroldMills +
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HaroldMills +
- en: hklemm +
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: hklemm +
- en: jamestwebber +
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jamestwebber +
- en: Jason Madden +
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jason Madden +
- en: Jay Bourque
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jay Bourque
- en: jeromekelleher +
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jeromekelleher +
- en: Jesús Gómez +
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jesús Gómez +
- en: jmozmoz +
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jmozmoz +
- en: jnothman +
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jnothman +
- en: Johannes Schönberger +
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Johannes Schönberger +
- en: John Benediktsson +
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John Benediktsson +
- en: John Salvatier +
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John Salvatier +
- en: John Stechschulte +
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: John Stechschulte +
- en: Jonathan Waltman +
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jonathan Waltman +
- en: Joon Ro +
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joon Ro +
- en: Jos de Kloe +
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jos de Kloe +
- en: Joseph Martinot-Lagarde +
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joseph Martinot-Lagarde +
- en: Josh Warner (Mac) +
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Josh Warner (Mac) +
- en: Jostein Bø Fløystad +
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jostein Bø Fløystad +
- en: Juan Luis Cano Rodríguez +
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Juan Luis Cano Rodríguez +
- en: Julian Taylor +
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julian Taylor +
- en: Julien Phalip +
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Julien Phalip +
- en: K.-Michael Aye +
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K.-Michael Aye +
- en: Kumar Appaiah +
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kumar Appaiah +
- en: Lars Buitinck
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lars Buitinck
- en: Leon Weber +
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Leon Weber +
- en: Luis Pedro Coelho
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Luis Pedro Coelho
- en: Marcin Juszkiewicz
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Marcin Juszkiewicz
- en: Mark Wiebe
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mark Wiebe
- en: Marten van Kerkwijk +
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Marten van Kerkwijk +
- en: Martin Baeuml +
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Martin Baeuml +
- en: Martin Spacek
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Martin Spacek
- en: Martin Teichmann +
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Martin Teichmann +
- en: Matt Davis +
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matt Davis +
- en: Matthew Brett
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matthew Brett
- en: Maximilian Albert +
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maximilian Albert +
- en: m-d-w +
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: m-d-w +
- en: Michael Droettboom
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Michael Droettboom
- en: mwtoews +
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mwtoews +
- en: Nathaniel J. Smith
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nathaniel J. Smith
- en: Nicolas Scheffer +
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nicolas Scheffer +
- en: Nils Werner +
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nils Werner +
- en: ochoadavid +
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ochoadavid +
- en: Ondřej Čertík
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ondřej Čertík
- en: ovillellas +
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ovillellas +
- en: Paul Ivanov
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Paul Ivanov
- en: Pauli Virtanen
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pauli Virtanen
- en: peterjc
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: peterjc
- en: Ralf Gommers
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ralf Gommers
- en: Raul Cota +
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raul Cota +
- en: Richard Hattersley +
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Richard Hattersley +
- en: Robert Costa +
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robert Costa +
- en: Robert Kern
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robert Kern
- en: Rob Ruana +
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rob Ruana +
- en: Ronan Lamy
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ronan Lamy
- en: Sandro Tosi
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sandro Tosi
- en: Sascha Peilicke +
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sascha Peilicke +
- en: Sebastian Berg
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastian Berg
- en: Skipper Seabold
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skipper Seabold
- en: Stefan van der Walt
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stefan van der Walt
- en: Steve +
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Steve +
- en: Takafumi Arakaki +
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Takafumi Arakaki +
- en: Thomas Robitaille +
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thomas Robitaille +
- en: Tomas Tomecek +
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomas Tomecek +
- en: Travis E. Oliphant
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis E. Oliphant
- en: Valentin Haenel
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Valentin Haenel
- en: Vladimir Rutsky +
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vladimir Rutsky +
- en: Warren Weckesser
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Warren Weckesser
- en: Yaroslav Halchenko
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yaroslav Halchenko
- en: Yury V. Zaytsev +
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yury V. Zaytsev +
- en: A total of 119 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有119人为此版本做出了贡献。名字后带有“+”符号的人第一次贡献了补丁。
- en: Highlights
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: New, no 2to3, Python 2 and Python 3 are supported by a common code base.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，不再使用2to3，Python 2和Python 3由一个共同的代码库支持。
- en: New, gufuncs for linear algebra, enabling operations on stacked arrays.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，用于线性代数的gufuncs，可以对堆叠数组进行操作。
- en: New, inplace fancy indexing for ufuncs with the `.at` method.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的，用于ufunc的原位花式索引，使用`.at`方法。
- en: New, `partition` function, partial sorting via selection for fast median.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`partition`函数，通过选择进行部分排序以获得快速中位数。
- en: New, `nanmean`, `nanvar`, and `nanstd` functions skipping NaNs.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`nanmean`，`nanvar`和`nanstd`函数跳过NaN值。
- en: New, `full` and `full_like` functions to create value initialized arrays.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`full`和`full_like`函数用于创建值初始化的数组。
- en: New, `PyUFunc_RegisterLoopForDescr`, better ufunc support for user dtypes.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`PyUFunc_RegisterLoopForDescr`，为用户定义的数据类型提供更好的ufunc支持。
- en: Numerous performance improvements in many areas.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多领域进行了许多性能改进。
- en: Dropped Support
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再支持
- en: Support for Python versions 2.4 and 2.5 has been dropped,
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不再支持Python 2.4和2.5版本，
- en: Support for SCons has been removed.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 不再支持SCons。
- en: Future Changes
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的变化
- en: The Datetime64 type remains experimental in this release. In 1.9 there will
    probably be some changes to make it more usable.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Datetime64类型在此版本中仍处于实验阶段。在1.9版本中可能会进行一些更改以使其更易于使用。
- en: The diagonal method currently returns a new array and raises a FutureWarning.
    In 1.9 it will return a readonly view.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的对角方法会返回一个新数组并引发FutureWarning。在1.9版本中，它将返回一个只读视图。
- en: Multiple field selection from an array of structured type currently returns
    a new array and raises a FutureWarning. In 1.9 it will return a readonly view.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构化类型的数组中进行多字段选择目前会返回一个新数组并引发FutureWarning。在1.9版本中，它将返回一个只读视图。
- en: The numpy/oldnumeric and numpy/numarray compatibility modules will be removed
    in 1.9.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/oldnumeric和numpy/numarray兼容模块将在1.9版本中被移除。
- en: Compatibility notes
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The doc/sphinxext content has been moved into its own github repository, and
    is included in numpy as a submodule. See the instructions in doc/HOWTO_BUILD_DOCS.rst
    for how to access the content.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: doc/sphinxext内容已移至自己的github存储库，并作为numpy的子模块包含在其中。请参阅doc/HOWTO_BUILD_DOCS.rst中的说明以访问内容。
- en: The hash function of numpy.void scalars has been changed. Previously the pointer
    to the data was hashed as an integer. Now, the hash function uses the tuple-hash
    algorithm to combine the hash functions of the elements of the scalar, but only
    if the scalar is read-only.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: numpy.void标量的哈希函数已更改。以前，数据指针被哈希为整数。现在，哈希函数使用元组哈希算法来组合标量元素的哈希函数，但仅当标量为只读时。
- en: Numpy has switched its build system to using ‘separate compilation’ by default.
    In previous releases this was supported, but not default. This should produce
    the same results as the old system, but if you’re trying to do something complicated
    like link numpy statically or using an unusual compiler, then it’s possible you
    will encounter problems. If so, please file a bug and as a temporary workaround
    you can re-enable the old build system by exporting the shell variable NPY_SEPARATE_COMPILATION=0.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy已将其构建系统默认切换为使用“分开编译”。在先前的版本中，这是受支持的，但不是默认设置。这应该产生与旧系统相同的结果，但如果您尝试做一些复杂的事情，比如静态链接numpy或使用不寻常的编译器，那么您可能会遇到问题。如果是这样，请提交错误报告，并且作为临时解决方法，您可以通过导出shell变量NPY_SEPARATE_COMPILATION=0重新启用旧的构建系统。
- en: For the AdvancedNew iterator the `oa_ndim` flag should now be -1 to indicate
    that no `op_axes` and `itershape` are passed in. The `oa_ndim == 0` case, now
    indicates a 0-D iteration and `op_axes` being NULL and the old usage is deprecated.
    This does not effect the `NpyIter_New` or `NpyIter_MultiNew` functions.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于AdvancedNew迭代器，`oa_ndim`标志现在应为-1，表示不传递`op_axes`和`itershape`。现在，`oa_ndim ==
    0`情况表示0-D迭代，`op_axes`为NULL，旧用法已被弃用。这不会影响`NpyIter_New`或`NpyIter_MultiNew`函数。
- en: The functions nanargmin and nanargmax now return np.iinfo[‘intp’].min for the
    index in all-NaN slices. Previously the functions would raise a ValueError for
    array returns and NaN for scalar returns.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 函数nanargmin和nanargmax现在对所有NaN切片的索引返回np.iinfo['intp'].min。以前，这些函数对于数组返回会引发ValueError，对于标量返回会返回NaN。
- en: NPY_RELAXED_STRIDES_CHECKING
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NPY_RELAXED_STRIDES_CHECKING
- en: 'There is a new compile time environment variable `NPY_RELAXED_STRIDES_CHECKING`.
    If this variable is set to 1, then numpy will consider more arrays to be C- or
    F-contiguous – for example, it becomes possible to have a column vector which
    is considered both C- and F-contiguous simultaneously. The new definition is more
    accurate, allows for faster code that makes fewer unnecessary copies, and simplifies
    numpy’s code internally. However, it may also break third-party libraries that
    make too-strong assumptions about the stride values of C- and F-contiguous arrays.
    (It is also currently known that this breaks Cython code using memoryviews, which
    will be fixed in Cython.) THIS WILL BECOME THE DEFAULT IN A FUTURE RELEASE, SO
    PLEASE TEST YOUR CODE NOW AGAINST NUMPY BUILT WITH:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的编译时环境变量`NPY_RELAXED_STRIDES_CHECKING`。如果将此变量设置为1，则numpy将考虑更多数组为C-或F-连续的情况
    - 例如，现在可以同时拥有被视为C-和F-连续的列向量。新的定义更准确，允许编写更快速且减少不必要复制的代码，并简化了numpy内部的代码。但是，这也可能会破坏对C-和F-连续数组的步幅值做出过于强烈假设的第三方库。（目前已知这会破坏使用memoryviews的Cython代码，这将在Cython中修复。）这将在未来的发布中成为默认设置，请立即使用以下方式针对使用NUMPY构建的代码进行测试：
- en: '[PRE4]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can check whether NPY_RELAXED_STRIDES_CHECKING is in effect by running:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来检查NPY_RELAXED_STRIDES_CHECKING是否生效：
- en: '[PRE5]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will be `True` if relaxed strides checking is enabled, and `False` otherwise.
    The typical problem we’ve seen so far is C code that works with C-contiguous arrays,
    and assumes that the itemsize can be accessed by looking at the last element in
    the `PyArray_STRIDES(arr)` array. When relaxed strides are in effect, this is
    not true (and in fact, it never was true in some corner cases). Instead, use `PyArray_ITEMSIZE(arr)`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了宽松的步幅检查，则此值将为`True`，否则为`False`。到目前为止，我们所见过的典型问题是处理C连续数组的C代码，并假设可以通过查看`PyArray_STRIDES(arr)`数组中的最后一个元素来访问itemsize。当启用宽松步幅时，这不成立（实际上，在某些极端情况下从未成立）。相反，请使用`PyArray_ITEMSIZE(arr)`。
- en: For more information check the “Internal memory layout of an ndarray” section
    in the documentation.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请查看文档中的“ndarray的内部内存布局”部分。
- en: Binary operations with non-arrays as second argument
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制操作的第二个参数为非数组时
- en: Binary operations of the form `<array-or-subclass> * <non-array-subclass>` where
    `<non-array-subclass>` declares an `__array_priority__` higher than that of `<array-or-subclass>`
    will now unconditionally return *NotImplemented*, giving `<non-array-subclass>`
    a chance to handle the operation. Previously, *NotImplemented* would only be returned
    if `<non-array-subclass>` actually implemented the reversed operation, and after
    a (potentially expensive) array conversion of `<non-array-subclass>` had been
    attempted. ([bug](https://github.com/numpy/numpy/issues/3375), [pull request](https://github.com/numpy/numpy/pull/3501))
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为`<array-or-subclass> * <non-array-subclass>`的二进制操作，其中`<non-array-subclass>`声明的`__array_priority__`高于`<array-or-subclass>`，现在将无条件返回*NotImplemented*，给`<non-array-subclass>`处理操作的机会。以前，只有在`<non-array-subclass>`实际实现了反向操作，并且尝试了`<non-array-subclass>`的（可能昂贵的）数组转换后，才会返回*NotImplemented*。
    ([bug](https://github.com/numpy/numpy/issues/3375), [pull request](https://github.com/numpy/numpy/pull/3501))
- en: Function *median* used with *overwrite_input* only partially sorts array
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数*median*只与*overwrite_input*一起使用时，数组只会被部分排序。
- en: If *median* is used with *overwrite_input* option the input array will now only
    be partially sorted instead of fully sorted.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*median*与*overwrite_input*选项一起使用，则输入数组现在只会部分排序而不是完全排序。
- en: Fix to financial.npv
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复了 `financial.npv` 函数的问题。
- en: The npv function had a bug. Contrary to what the documentation stated, it summed
    from indexes `1` to `M` instead of from `0` to `M - 1`. The fix changes the returned
    value. The mirr function called the npv function, but worked around the problem,
    so that was also fixed and the return value of the mirr function remains unchanged.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: npv函数存在一个错误。与文档所述相反，它从索引`1`到`M`而不是从`0`到`M - 1`求和。修复更改了返回值。mirr函数调用了npv函数，但解决了问题，因此也进行了修复，并且mirr函数的返回值保持不变。
- en: Runtime warnings when comparing NaN numbers
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较 `NaN` 数字时会出现运行时警告。
- en: 'Comparing `NaN` floating point numbers now raises the `invalid` runtime warning.
    If a `NaN` is expected the warning can be ignored using np.errstate. E.g.:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 比较`NaN`浮点数现在会引发`invalid`运行时警告。如果预期有`NaN`，则可以使用np.errstate忽略警告。例如：
- en: '[PRE6]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: NPY_RELAXED_STRIDES_CHECKING
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NPY_RELAXED_STRIDES_CHECKING
- en: 'There is a new compile time environment variable `NPY_RELAXED_STRIDES_CHECKING`.
    If this variable is set to 1, then numpy will consider more arrays to be C- or
    F-contiguous – for example, it becomes possible to have a column vector which
    is considered both C- and F-contiguous simultaneously. The new definition is more
    accurate, allows for faster code that makes fewer unnecessary copies, and simplifies
    numpy’s code internally. However, it may also break third-party libraries that
    make too-strong assumptions about the stride values of C- and F-contiguous arrays.
    (It is also currently known that this breaks Cython code using memoryviews, which
    will be fixed in Cython.) THIS WILL BECOME THE DEFAULT IN A FUTURE RELEASE, SO
    PLEASE TEST YOUR CODE NOW AGAINST NUMPY BUILT WITH:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 新的编译时环境变量`NPY_RELAXED_STRIDES_CHECKING`。如果将此变量设置为1，则numpy将考虑更多的数组为C-或F-contiguous
    - 例如，可能同时考虑为C-和F-contiguous的列向量。新的定义更准确，允许更快速的代码，减少不必要的复制，并简化numpy内部的代码。但是，这也可能破坏对C-和F-contiguous数组的步幅值做出过于强烈假设的第三方库。
    （目前已知这会破坏使用memoryviews的Cython代码，这将在Cython中修复。）这将成为未来版本的默认设置，请立即使用已构建的NUMPY测试您的代码：
- en: '[PRE7]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can check whether NPY_RELAXED_STRIDES_CHECKING is in effect by running:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行来检查NPY_RELAXED_STRIDES_CHECKING是否生效：
- en: '[PRE8]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will be `True` if relaxed strides checking is enabled, and `False` otherwise.
    The typical problem we’ve seen so far is C code that works with C-contiguous arrays,
    and assumes that the itemsize can be accessed by looking at the last element in
    the `PyArray_STRIDES(arr)` array. When relaxed strides are in effect, this is
    not true (and in fact, it never was true in some corner cases). Instead, use `PyArray_ITEMSIZE(arr)`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了放松步幅检查，则此值为`True`，否则为`False`。到目前为止，我们看到的典型问题是使用C-contiguous数组的C代码，并假设可以通过查看`PyArray_STRIDES(arr)`数组中的最后一个元素来访问itemsize。当放松步幅时，这不是真的（实际上，在某些边缘情况下从未是真的）。而是使用`PyArray_ITEMSIZE(arr)`。
- en: For more information check the “Internal memory layout of an ndarray” section
    in the documentation.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请查看文档中的“ndarray的内部内存布局”部分。
- en: Binary operations with non-arrays as second argument
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制操作的第二个参数不是数组时。
- en: Binary operations of the form `<array-or-subclass> * <non-array-subclass>` where
    `<non-array-subclass>` declares an `__array_priority__` higher than that of `<array-or-subclass>`
    will now unconditionally return *NotImplemented*, giving `<non-array-subclass>`
    a chance to handle the operation. Previously, *NotImplemented* would only be returned
    if `<non-array-subclass>` actually implemented the reversed operation, and after
    a (potentially expensive) array conversion of `<non-array-subclass>` had been
    attempted. ([bug](https://github.com/numpy/numpy/issues/3375), [pull request](https://github.com/numpy/numpy/pull/3501))
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为`<array-or-subclass> * <non-array-subclass>`的二进制操作，其中`<non-array-subclass>`声明的`__array_priority__`高于`<array-or-subclass>`的操作现在将无条件返回*NotImplemented*，给予`<non-array-subclass>`处理该操作的机会。以前，只有在`<non-array-subclass>`实际实现了反向操作，并且尝试了`<non-array-subclass>`的（可能昂贵的）数组转换后，才会返回*NotImplemented*。([bug](https://github.com/numpy/numpy/issues/3375),
    [pull request](https://github.com/numpy/numpy/pull/3501))
- en: Function *median* used with *overwrite_input* only partially sorts array
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用*overwrite_input*选项的*median*函数仅部分排序数组
- en: If *median* is used with *overwrite_input* option the input array will now only
    be partially sorted instead of fully sorted.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*median*与*overwrite_input*选项一起使用，则输入数组现在将仅部分排序，而不是完全排序。
- en: Fix to financial.npv
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复了 financial.npv
- en: The npv function had a bug. Contrary to what the documentation stated, it summed
    from indexes `1` to `M` instead of from `0` to `M - 1`. The fix changes the returned
    value. The mirr function called the npv function, but worked around the problem,
    so that was also fixed and the return value of the mirr function remains unchanged.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: npv函数存在一个错误。与文档所述相反，它从索引`1`到`M`求和，而不是从`0`到`M - 1`。修复后更改了返回值。mirr函数调用了npv函数，但解决了问题，因此也进行了修复，mirr函数的返回值保持不变。
- en: Runtime warnings when comparing NaN numbers
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较NaN数字时出现运行时警告
- en: 'Comparing `NaN` floating point numbers now raises the `invalid` runtime warning.
    If a `NaN` is expected the warning can be ignored using np.errstate. E.g.:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 比较`NaN`浮点数现在会引发`invalid`运行时警告。如果预期会出现`NaN`，则可以使用 np.errstate 忽略警告。例如：
- en: '[PRE9]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: New Features
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Support for linear algebra on stacked arrays
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对堆叠数组进行线性代数支持
- en: 'The gufunc machinery is now used for np.linalg, allowing operations on stacked
    arrays and vectors. For example:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，gufunc 机制被用于 np.linalg，允许对堆叠的数组和向量进行操作。例如：
- en: '[PRE10]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In place fancy indexing for ufuncs
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于ufunc的原地花式索引
- en: 'The function `at` has been added to ufunc objects to allow in place ufuncs
    with no buffering when fancy indexing is used. For example, the following will
    increment the first and second items in the array, and will increment the third
    item twice: `numpy.add.at(arr, [0, 1, 2, 2], 1)`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`at`已添加到ufunc对象中，允许在使用花式索引时进行原地ufunc操作而无需缓冲。例如，以下操作将增加数组中的第一个和第二个项目，并将第三个项目增加两次：`numpy.add.at(arr,
    [0, 1, 2, 2], 1)`
- en: This is what many have mistakenly thought `arr[[0, 1, 2, 2]] += 1` would do,
    but that does not work as the incremented value of `arr[2]` is simply copied into
    the third slot in `arr` twice, not incremented twice.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多人错误地认为`arr[[0, 1, 2, 2]] += 1`会做的事情，但这并不起作用，因为`arr[2]`的增量值只是简单地复制到`arr`中的第三个槽位两次，而不是增加两次。
- en: New functions *partition* and *argpartition*
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*partition*和*argpartition*
- en: New functions to partially sort arrays via a selection algorithm.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数通过选择算法部分排序数组。
- en: A `partition` by index `k` moves the `k` smallest element to the front of an
    array. All elements before `k` are then smaller or equal than the value in position
    `k` and all elements following `k` are then greater or equal than the value in
    position `k`. The ordering of the values within these bounds is undefined. A sequence
    of indices can be provided to sort all of them into their sorted position at once
    iterative partitioning. This can be used to efficiently obtain order statistics
    like median or percentiles of samples. `partition` has a linear time complexity
    of `O(n)` while a full sort has `O(n log(n))`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通过索引`k`进行的`partition`将`k`个最小元素移动到数组的前面。`k`之前的所有元素都小于或等于位置`k`处的值，`k`之后的所有元素都大于或等于位置`k`处的值。这些边界内的值的排序是未定义的。可以提供一系列索引来一次性对它们进行排序，进行迭代分区。这可用于有效地获取样本的顺序统计量，如中位数或百分位数。`partition`的时间复杂度为`O(n)`，而完全排序的时间复杂度为`O(n
    log(n))`。
- en: New functions *nanmean*, *nanvar* and *nanstd*
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*nanmean*、*nanvar*和*nanstd*
- en: New nan aware statistical functions are added. In these functions the results
    are what would be obtained if nan values were omitted from all computations.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了新的nan感知统计函数。在这些函数中，结果是如果从所有计算中省略nan值将获得的结果。
- en: New functions *full* and *full_like*
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数*full*和*full_like*
- en: New convenience functions to create arrays filled with a specific value; complementary
    to the existing *zeros* and *zeros_like* functions.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 创建填充特定值的数组的新便利函数；与现有的*zeros*和*zeros_like*函数相辅相成。
- en: IO compatibility with large files
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与大文件的IO兼容性
- en: Large NPZ files >2GB can be loaded on 64-bit systems.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在64位系统上加载大于2GB的大NPZ文件。
- en: Building against OpenBLAS
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对OpenBLAS构建
- en: It is now possible to build numpy against OpenBLAS by editing site.cfg.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过编辑site.cfg构建numpy针对OpenBLAS。
- en: New constant
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新常数
- en: Euler’s constant is now exposed in numpy as euler_gamma.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉常数现在在numpy中作为euler_gamma暴露出来。
- en: New modes for qr
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: qr的新模式
- en: New modes ‘complete’, ‘reduced’, and ‘raw’ have been added to the qr factorization
    and the old ‘full’ and ‘economic’ modes are deprecated. The ‘reduced’ mode replaces
    the old ‘full’ mode and is the default as was the ‘full’ mode, so backward compatibility
    can be maintained by not specifying the mode.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: qr分解添加了新的模式‘complete’、‘reduced’和‘raw’，旧的‘full’和‘economic’模式已被弃用。‘reduced’模式取代了旧的‘full’模式，并且是默认的，因此通过不指定模式可以保持向后兼容性。
- en: The ‘complete’ mode returns a full dimensional factorization, which can be useful
    for obtaining a basis for the orthogonal complement of the range space. The ‘raw’
    mode returns arrays that contain the Householder reflectors and scaling factors
    that can be used in the future to apply q without needing to convert to a matrix.
    The ‘economic’ mode is simply deprecated, there isn’t much use for it and it isn’t
    any more efficient than the ‘raw’ mode.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ‘complete’模式返回完整的维数分解，这对于获取范围空间的正交补基是有用的。‘raw’模式返回包含Householder反射器和缩放因子的数组，可以在将来应用q时使用，而无需转换为矩阵。‘economic’模式已经被弃用，没有太多用途，也不比‘raw’模式更有效。
- en: New *invert* argument to *in1d*
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*in1d*的新*invert*参数'
- en: The function *in1d* now accepts a *invert* argument which, when *True*, causes
    the returned array to be inverted.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 函数*in1d*现在接受一个*invert*参数，当为*True*时，导致返回的数组被反转。
- en: Advanced indexing using *np.newaxis*
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用*np.newaxis*进行高级索引
- en: It is now possible to use *np.newaxis*/*None* together with index arrays instead
    of only in simple indices. This means that `array[np.newaxis, [0, 1]]` will now
    work as expected and select the first two rows while prepending a new axis to
    the array.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在索引数组中使用*np.newaxis*/*None*，而不仅仅是在简单索引中。这意味着`array[np.newaxis, [0, 1]]`现在可以按预期工作，并选择前两行，同时在数组前添加一个新轴。
- en: C-API
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: New ufuncs can now be registered with builtin input types and a custom output
    type. Before this change, NumPy wouldn’t be able to find the right ufunc loop
    function when the ufunc was called from Python, because the ufunc loop signature
    matching logic wasn’t looking at the output operand type. Now the correct ufunc
    loop is found, as long as the user provides an output argument with the correct
    output type.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用内置输入类型和自定义输出类型注册新的ufunc。在此更改之前，当从Python调用ufunc时，NumPy无法找到正确的ufunc循环函数，因为ufunc循环签名匹配逻辑没有查看输出操作数类型。现在只要用户提供具有正确输出类型的输出参数，就可以找到正确的ufunc循环。
- en: runtests.py
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: runtests.py
- en: A simple test runner script `runtests.py` was added. It also builds Numpy via
    `setup.py build` and can be used to run tests easily during development.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个简单的测试运行脚本`runtests.py`。它还通过`setup.py build`构建Numpy，并可用于在开发过程中轻松运行测试。
- en: Support for linear algebra on stacked arrays
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对堆叠数组进行线性代数支持
- en: 'The gufunc machinery is now used for np.linalg, allowing operations on stacked
    arrays and vectors. For example:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在np.linalg中使用gufunc机制，允许对堆叠数组和向量进行操作。例如：
- en: '[PRE11]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In place fancy indexing for ufuncs
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对ufunc进行就地花式索引
- en: 'The function `at` has been added to ufunc objects to allow in place ufuncs
    with no buffering when fancy indexing is used. For example, the following will
    increment the first and second items in the array, and will increment the third
    item twice: `numpy.add.at(arr, [0, 1, 2, 2], 1)`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`at`已添加到ufunc对象中，允许在使用花式索引时进行无缓冲的就地ufunc。例如，以下操作将增加数组中的第一个和第二个项目，并将第三个项目增加两次：`numpy.add.at(arr,
    [0, 1, 2, 2], 1)`
- en: This is what many have mistakenly thought `arr[[0, 1, 2, 2]] += 1` would do,
    but that does not work as the incremented value of `arr[2]` is simply copied into
    the third slot in `arr` twice, not incremented twice.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: New functions *partition* and *argpartition*
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New functions to partially sort arrays via a selection algorithm.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: A `partition` by index `k` moves the `k` smallest element to the front of an
    array. All elements before `k` are then smaller or equal than the value in position
    `k` and all elements following `k` are then greater or equal than the value in
    position `k`. The ordering of the values within these bounds is undefined. A sequence
    of indices can be provided to sort all of them into their sorted position at once
    iterative partitioning. This can be used to efficiently obtain order statistics
    like median or percentiles of samples. `partition` has a linear time complexity
    of `O(n)` while a full sort has `O(n log(n))`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: New functions *nanmean*, *nanvar* and *nanstd*
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New nan aware statistical functions are added. In these functions the results
    are what would be obtained if nan values were omitted from all computations.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: New functions *full* and *full_like*
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New convenience functions to create arrays filled with a specific value; complementary
    to the existing *zeros* and *zeros_like* functions.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: IO compatibility with large files
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Large NPZ files >2GB can be loaded on 64-bit systems.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Building against OpenBLAS
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is now possible to build numpy against OpenBLAS by editing site.cfg.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: New constant
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Euler’s constant is now exposed in numpy as euler_gamma.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: New modes for qr
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New modes ‘complete’, ‘reduced’, and ‘raw’ have been added to the qr factorization
    and the old ‘full’ and ‘economic’ modes are deprecated. The ‘reduced’ mode replaces
    the old ‘full’ mode and is the default as was the ‘full’ mode, so backward compatibility
    can be maintained by not specifying the mode.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: The ‘complete’ mode returns a full dimensional factorization, which can be useful
    for obtaining a basis for the orthogonal complement of the range space. The ‘raw’
    mode returns arrays that contain the Householder reflectors and scaling factors
    that can be used in the future to apply q without needing to convert to a matrix.
    The ‘economic’ mode is simply deprecated, there isn’t much use for it and it isn’t
    any more efficient than the ‘raw’ mode.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: New *invert* argument to *in1d*
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function *in1d* now accepts a *invert* argument which, when *True*, causes
    the returned array to be inverted.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Advanced indexing using *np.newaxis*
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is now possible to use *np.newaxis*/*None* together with index arrays instead
    of only in simple indices. This means that `array[np.newaxis, [0, 1]]` will now
    work as expected and select the first two rows while prepending a new axis to
    the array.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: C-API
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New ufuncs can now be registered with builtin input types and a custom output
    type. Before this change, NumPy wouldn’t be able to find the right ufunc loop
    function when the ufunc was called from Python, because the ufunc loop signature
    matching logic wasn’t looking at the output operand type. Now the correct ufunc
    loop is found, as long as the user provides an output argument with the correct
    output type.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用内置输入类型和自定义输出类型注册新的ufunc。在此更改之前，当从Python调用ufunc时，NumPy无法找到正确的ufunc循环函数，因为ufunc循环签名匹配逻辑没有查看输出操作数类型。现在只要用户提供具有正确输出类型的输出参数，就可以找到正确的ufunc循环。
- en: runtests.py
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: runtests.py
- en: A simple test runner script `runtests.py` was added. It also builds Numpy via
    `setup.py build` and can be used to run tests easily during development.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个简单的测试运行脚本`runtests.py`。它还通过`setup.py build`构建了Numpy，并且可以在开发过程中轻松运行测试。
- en: Improvements
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: IO performance improvements
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IO性能改进
- en: Performance in reading large files was improved by chunking (see also IO compatibility).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分块改进了读取大文件的性能（另请参阅IO兼容性）。
- en: Performance improvements to *pad*
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*pad*的性能改进'
- en: The *pad* function has a new implementation, greatly improving performance for
    all inputs except *mode=* (retained for backwards compatibility). Scaling with
    dimensionality is dramatically improved for rank >= 4.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '*pad*函数有一个新的实现，大大提高了除*mode=*之外的所有输入的性能（保留以确保向后兼容性）。对于rank >= 4，随着维度的增加，缩放得到了显着改善。'
- en: Performance improvements to *isnan*, *isinf*, *isfinite* and *byteswap*
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*isnan*、*isinf*、*isfinite*和*byteswap*的性能改进'
- en: '*isnan*, *isinf*, *isfinite* and *byteswap* have been improved to take advantage
    of compiler builtins to avoid expensive calls to libc. This improves performance
    of these operations by about a factor of two on gnu libc systems.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '*isnan*、*isinf*、*isfinite*和*byteswap*已经改进，以利用编译器内置函数，避免对libc的昂贵调用。这将在gnu libc系统上将这些操作的性能提高约两倍。'
- en: Performance improvements via SSE2 vectorization
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过SSE2矢量化改进性能
- en: Several functions have been optimized to make use of SSE2 CPU SIMD instructions.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 优化了几个函数，以利用SSE2 CPU SIMD指令。
- en: 'Float32 and float64:'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Float32和float64：
- en: base math (*add*, *subtract*, *divide*, *multiply*)
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本数学（*加法*、*减法*、*除法*、*乘法*）
- en: '*sqrt*'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*平方根*'
- en: '*minimum/maximum*'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最小值/最大值*'
- en: '*absolute*'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绝对值*'
- en: 'Bool:'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔：
- en: '*logical_or*'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑或*'
- en: '*logical_and*'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑与*'
- en: '*logical_not*'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑非*'
- en: This improves performance of these operations up to 4x/2x for float32/float64
    and up to 10x for bool depending on the location of the data in the CPU caches.
    The performance gain is greatest for in-place operations.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这将这些操作的性能提高了4倍/2倍，对于float32/float64，对于bool，根据数据在CPU缓存中的位置，性能提高了10倍。对于就地操作，性能增益最大。
- en: In order to use the improved functions the SSE2 instruction set must be enabled
    at compile time. It is enabled by default on x86_64 systems. On x86_32 with a
    capable CPU it must be enabled by passing the appropriate flag to the CFLAGS build
    variable (-msse2 with gcc).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用改进的函数，必须在编译时启用SSE2指令集。在x86_64系统上默认启用。在具有能力的CPU的x86_32上，必须通过向CFLAGS构建变量传递适当的标志（使用gcc时为-msse2）来启用它。
- en: Performance improvements to *median*
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*中位数*的性能改进'
- en: '*median* is now implemented in terms of *partition* instead of *sort* which
    reduces its time complexity from O(n log(n)) to O(n). If used with the *overwrite_input*
    option the array will now only be partially sorted instead of fully sorted.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '*中位数*现在是基于*partition*而不是*sort*实现的，这将其时间复杂度从O(n log(n))降低到O(n)。如果与*overwrite_input*选项一起使用，则数组现在只会部分排序而不是完全排序。'
- en: Overridable operand flags in ufunc C-API
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufunc C-API中可覆盖操作数标志
- en: 'When creating a ufunc, the default ufunc operand flags can be overridden via
    the new op_flags attribute of the ufunc object. For example, to set the operand
    flag for the first input to read/write:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 创建ufunc时，可以通过ufunc对象的新op_flags属性覆盖默认的ufunc操作数标志。���如，要设置第一个输入的操作数标志为读/写：
- en: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
- en: 'This allows a ufunc to perform an operation in place. Also, global nditer flags
    can be overridden via the new iter_flags attribute of the ufunc object. For example,
    to set the reduce flag for a ufunc:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许ufunc就地执行操作。此外，全局nditer标志可以通过ufunc对象的新iter_flags属性覆盖。例如，要为ufunc设置reduce标志：
- en: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
- en: IO performance improvements
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IO性能改进
- en: Performance in reading large files was improved by chunking (see also IO compatibility).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分块改进了读取大文件的性能（另请参阅IO兼容性）。
- en: Performance improvements to *pad*
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 *pad* 进行了性能改进
- en: The *pad* function has a new implementation, greatly improving performance for
    all inputs except *mode=* (retained for backwards compatibility). Scaling with
    dimensionality is dramatically improved for rank >= 4.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '*pad* 函数有了新的实现，大大提高了除 *mode=* 外的所有输入的性能。对于秩 >= 4 的情况，随着维度的增加，性能显著提高。'
- en: Performance improvements to *isnan*, *isinf*, *isfinite* and *byteswap*
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 *isnan*、*isinf*、*isfinite* 和 *byteswap* 进行了性能改进
- en: '*isnan*, *isinf*, *isfinite* and *byteswap* have been improved to take advantage
    of compiler builtins to avoid expensive calls to libc. This improves performance
    of these operations by about a factor of two on gnu libc systems.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '*isnan*、*isinf*、*isfinite* 和 *byteswap* 已经改进，以利用编译器内置函数避免对 libc 的昂贵调用。这将在 gnu
    libc 系统上将这些操作的性能提高约两倍。'
- en: Performance improvements via SSE2 vectorization
  id: totrans-395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 SSE2 向量化实现性能改进
- en: Several functions have been optimized to make use of SSE2 CPU SIMD instructions.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 几个函数已经被优化以利用 SSE2 CPU SIMD 指令。
- en: 'Float32 and float64:'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Float32 和 float64：
- en: base math (*add*, *subtract*, *divide*, *multiply*)
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本数学运算（*加法*、*减法*、*除法*、*乘法*）
- en: '*sqrt*'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*平方根*'
- en: '*minimum/maximum*'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最小值/最大值*'
- en: '*absolute*'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绝对值*'
- en: 'Bool:'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值：
- en: '*logical_or*'
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑或*'
- en: '*logical_and*'
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑与*'
- en: '*logical_not*'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑非*'
- en: This improves performance of these operations up to 4x/2x for float32/float64
    and up to 10x for bool depending on the location of the data in the CPU caches.
    The performance gain is greatest for in-place operations.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作的性能提升最多可达到 float32/float64 的 4 倍/2 倍，对于 bool 类型最多可达到 10 倍，具体取决于数据在 CPU 缓存中的位置。对于原地操作，性能提升最大。
- en: In order to use the improved functions the SSE2 instruction set must be enabled
    at compile time. It is enabled by default on x86_64 systems. On x86_32 with a
    capable CPU it must be enabled by passing the appropriate flag to the CFLAGS build
    variable (-msse2 with gcc).
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用改进的函数，必须在编译时启用 SSE2 指令集。在 x86_64 系统上，默认启用。在具有能力的 CPU 的 x86_32 上，必须通过向 CFLAGS
    构建变量传递适当的标志（使用 gcc 的 -msse2）来启用。
- en: Performance improvements to *median*
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 *中位数* 进行了性能改进
- en: '*median* is now implemented in terms of *partition* instead of *sort* which
    reduces its time complexity from O(n log(n)) to O(n). If used with the *overwrite_input*
    option the array will now only be partially sorted instead of fully sorted.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '*中位数* 现在是基于 *partition* 而不是 *sort* 实现的，将其时间复杂度从 O(n log(n)) 降低到 O(n)。如果与 *overwrite_input*
    选项一起使用，数组现在只会部分排序而不是完全排序。'
- en: Overridable operand flags in ufunc C-API
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufunc C-API 中可覆盖的操作数标志
- en: 'When creating a ufunc, the default ufunc operand flags can be overridden via
    the new op_flags attribute of the ufunc object. For example, to set the operand
    flag for the first input to read/write:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 ufunc 时，可以通过 ufunc 对象的新 op_flags 属性覆盖默认的 ufunc 操作数标志。例如，要设置第一个输入的操作数标志为读/写：
- en: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: PyObject *ufunc = PyUFunc_FromFuncAndData(…); ufunc->op_flags[0] = NPY_ITER_READWRITE;
- en: 'This allows a ufunc to perform an operation in place. Also, global nditer flags
    can be overridden via the new iter_flags attribute of the ufunc object. For example,
    to set the reduce flag for a ufunc:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许 ufunc 在原地执行操作。此外，全局 nditer 标志可以通过 ufunc 对象的新 iter_flags 属性覆盖。例如，要为 ufunc
    设置减少标志：
- en: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc->iter_flags = NPY_ITER_REDUCE_OK;
- en: Changes
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: General
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The function np.take now allows 0-d arrays as indices.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 np.take 现在允许将 0 维数组用作索引。
- en: The separate compilation mode is now enabled by default.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 现在默认启用了分离编译模式。
- en: 'Several changes to np.insert and np.delete:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 对 np.insert 和 np.delete 进行了几处更改：
- en: Previously, negative indices and indices that pointed past the end of the array
    were simply ignored. Now, this will raise a Future or Deprecation Warning. In
    the future they will be treated like normal indexing treats them – negative indices
    will wrap around, and out-of-bound indices will generate an error.
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，负索引和指向数组末尾的索引会被简单地忽略。现在，这将引发一个未来或弃用警告。将来，它们将被视为正常索引对待 - 负索引将会循环，超出边界的索引将生成错误。
- en: Previously, boolean indices were treated as if they were integers (always referring
    to either the 0th or 1st item in the array). In the future, they will be treated
    as masks. In this release, they raise a FutureWarning warning of this coming change.
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，布尔索引被视为整数（始终引用数组中的第 0 或第 1 项）。将来，它们将被视为掩码。在此版本中，它们引发一个未来警告，警告即将发生的变化。
- en: In Numpy 1.7\. np.insert already allowed the syntax *np.insert(arr, 3, [1,2,3])*
    to insert multiple items at a single position. In Numpy 1.8\. this is also possible
    for *np.insert(arr, [3], [1, 2, 3])*.
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Numpy 1.7 中，np.insert 已经允许使用 *np.insert(arr, 3, [1,2,3])* 语法在单个位置插入多个项。在 Numpy
    1.8 中，对于 *np.insert(arr, [3], [1, 2, 3])* 也是可能的。
- en: Padded regions from np.pad are now correctly rounded, not truncated.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 从 np.pad 中的填充区域现在正确地四舍五入，而不是截断。
- en: C-API Array Additions
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API 数组新增功能
- en: Four new functions have been added to the array C-API.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 四个新函数已添加到数组 C-API 中。
- en: PyArray_Partition
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_Partition
- en: PyArray_ArgPartition
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_ArgPartition
- en: PyArray_SelectkindConverter
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_SelectkindConverter
- en: PyDataMem_NEW_ZEROED
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyDataMem_NEW_ZEROED
- en: C-API Ufunc Additions
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API Ufunc 新增功能
- en: One new function has been added to the ufunc C-API that allows to register an
    inner loop for user types using the descr.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 已向 ufunc C-API 添加了一个新函数，允许使用 descr 为用户类型注册内部循环。
- en: PyUFunc_RegisterLoopForDescr
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyUFunc_RegisterLoopForDescr
- en: C-API Developer Improvements
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API 开发者改进
- en: The `PyArray_Type` instance creation function `tp_new` now uses `tp_basicsize`
    to determine how much memory to allocate. In previous releases only `sizeof(PyArrayObject)`
    bytes of memory were allocated, often requiring C-API subtypes to reimplement
    `tp_new`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_Type` 实例创建函数 `tp_new` 现在使用 `tp_basicsize` 来确定要分配多少内存。在先前的版本中，只分配了
    `sizeof(PyArrayObject)` 字节的内存，通常需要 C-API 子类型重新实现 `tp_new`。'
- en: General
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The function np.take now allows 0-d arrays as indices.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 np.take 现在允许将 0-d 数组作为索引。
- en: The separate compilation mode is now enabled by default.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 现在默认启用了分离编译模式。
- en: 'Several changes to np.insert and np.delete:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 对 np.insert 和 np.delete 进行了几处更改：
- en: Previously, negative indices and indices that pointed past the end of the array
    were simply ignored. Now, this will raise a Future or Deprecation Warning. In
    the future they will be treated like normal indexing treats them – negative indices
    will wrap around, and out-of-bound indices will generate an error.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，负索引和指向数组末尾的索引会被简单地忽略。现在，这将引发一个 Future 或 Deprecation Warning。将来，它们将像正常索引一样对待
    - 负索引将会循环，超出边界的索引将生成错误。
- en: Previously, boolean indices were treated as if they were integers (always referring
    to either the 0th or 1st item in the array). In the future, they will be treated
    as masks. In this release, they raise a FutureWarning warning of this coming change.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，布尔索引被视为整数（始终指向数组中的第 0 或第 1 项）。将来，它们将被视为掩码。在此版本中，它们会引发一个关于即将发生的更改的 FutureWarning
    警告。
- en: In Numpy 1.7\. np.insert already allowed the syntax *np.insert(arr, 3, [1,2,3])*
    to insert multiple items at a single position. In Numpy 1.8\. this is also possible
    for *np.insert(arr, [3], [1, 2, 3])*.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Numpy 1.7 中，np.insert 已经允许使用 *np.insert(arr, 3, [1,2,3])* 语法在单个位置插入多个项。在 Numpy
    1.8 中，对于 *np.insert(arr, [3], [1, 2, 3])* 也是可能的。
- en: Padded regions from np.pad are now correctly rounded, not truncated.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 从 np.pad 中的填充区域现在正确地四舍五入，而不是截断。
- en: C-API Array Additions
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API 数组新增功能
- en: Four new functions have been added to the array C-API.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 四个新函数已添加到数组 C-API 中。
- en: PyArray_Partition
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_Partition
- en: PyArray_ArgPartition
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_ArgPartition
- en: PyArray_SelectkindConverter
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyArray_SelectkindConverter
- en: PyDataMem_NEW_ZEROED
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyDataMem_NEW_ZEROED
- en: C-API Ufunc Additions
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API Ufunc 新增功能
- en: One new function has been added to the ufunc C-API that allows to register an
    inner loop for user types using the descr.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 已向 ufunc C-API 添加了一个新函数，允许使用 descr 为用户类型注册内部循环。
- en: PyUFunc_RegisterLoopForDescr
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyUFunc_RegisterLoopForDescr
- en: C-API Developer Improvements
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API 开发者改进
- en: The `PyArray_Type` instance creation function `tp_new` now uses `tp_basicsize`
    to determine how much memory to allocate. In previous releases only `sizeof(PyArrayObject)`
    bytes of memory were allocated, often requiring C-API subtypes to reimplement
    `tp_new`.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_Type` 实例创建函数 `tp_new` 现在使用 `tp_basicsize` 来确定要分配多少内存。在先前的版本中，只分配了
    `sizeof(PyArrayObject)` 字节的内存，通常需要 C-API 子类型重新实现 `tp_new`。'
- en: Deprecations
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: The ‘full’ and ‘economic’ modes of qr factorization are deprecated.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '''full'' 和 ''economic'' 模式的 qr 分解已被弃用。'
- en: General
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The use of non-integer for indices and most integer arguments has been deprecated.
    Previously float indices and function arguments such as axes or shapes were truncated
    to integers without warning. For example *arr.reshape(3., -1)* or *arr[0.]* will
    trigger a deprecation warning in NumPy 1.8., and in some future version of NumPy
    they will raise an error.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用非整数用于索引和大多数整数参数的用法。以前，浮点索引和函数参数（如轴或形状）会被截断为整数而不发出警告。例如 *arr.reshape(3., -1)*
    或 *arr[0.]* 将在 NumPy 1.8 中触发弃用警告，并且在将来的某个版本中它们将引发错误。
- en: General
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The use of non-integer for indices and most integer arguments has been deprecated.
    Previously float indices and function arguments such as axes or shapes were truncated
    to integers without warning. For example *arr.reshape(3., -1)* or *arr[0.]* will
    trigger a deprecation warning in NumPy 1.8., and in some future version of NumPy
    they will raise an error.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: Authors
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This release contains work by the following people who contributed at least
    one patch to this release. The names are in alphabetical order by first name:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '87'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Ginsburg +
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Griffiths +
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alexander Belopolsky +
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Barth +
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Ford +
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andreas Hilboll +
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andreas Kloeckner +
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andreas Schwab +
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew Horton +
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: argriffing +
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arink Verma +
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bago Amirbekian +
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bartosz Telenczuk +
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bebert218 +
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benjamin Root +
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bill Spotz +
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bradley M. Froehle
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carwyn Pelley +
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charles Harris
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Brueffer +
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Dann +
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Gohlke
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dan Hipschman +
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel +
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dan Miller +
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: daveydave400 +
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Cournapeau
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Warde-Farley
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denis Laxalde
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dmuellner +
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edward Catmur +
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Egor Zindy +
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: endolith
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Firing
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Fode
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Moore +
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Price +
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fazlul Shahriar +
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Félix Hartmann +
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fernando Perez
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frank B +
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frank Breitling +
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frederic
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabriel
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GaelVaroquaux
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillaume Gay +
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Han Genuit
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HaroldMills +
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hklemm +
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jamestwebber +
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jason Madden +
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jay Bourque
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jeromekelleher +
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jesús Gómez +
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jmozmoz +
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jnothman +
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Johannes Schönberger +
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Benediktsson +
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Salvatier +
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Stechschulte +
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jonathan Waltman +
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joon Ro +
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jos de Kloe +
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joseph Martinot-Lagarde +
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Josh Warner (Mac) +
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jostein Bø Fløystad +
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Juan Luis Cano Rodríguez +
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Julian Taylor +
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Julien Phalip +
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K.-Michael Aye +
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kumar Appaiah +
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lars Buitinck
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leon Weber +
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luis Pedro Coelho
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marcin Juszkiewicz
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark Wiebe
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marten van Kerkwijk +
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Baeuml +
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Spacek
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Martin Teichmann +
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Davis +
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Brett
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximilian Albert +
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: m-d-w +
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Droettboom
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mwtoews +
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nathaniel J. Smith
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Scheffer +
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nils Werner +
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ochoadavid +
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ondřej Čertík
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ovillellas +
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Ivanov
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pauli Virtanen
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: peterjc
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralf Gommers
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raul Cota +
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Richard Hattersley +
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Costa +
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Kern
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rob Ruana +
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ronan Lamy
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sandro Tosi
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sascha Peilicke +
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Berg
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skipper Seabold
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stefan van der Walt
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve +
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Takafumi Arakaki +
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas Robitaille +
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomas Tomecek +
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis E. Oliphant
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valentin Haenel
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vladimir Rutsky +
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warren Weckesser
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yaroslav Halchenko
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yury V. Zaytsev +
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A total of 119 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
