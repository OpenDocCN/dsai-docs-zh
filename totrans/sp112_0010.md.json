["```py\n>>> import scipy as sp\n>>> import numpy\n>>> dense = numpy.array([[1, 0, 0, 2], [0, 4, 1, 0], [0, 0, 5, 0]])\n>>> sparse = sp.sparse.coo_array(dense)\n>>> dense\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]])\n>>> sparse\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 5 stored elements in COOrdinate format> \n```", "```py\n>>> sparse.max()\n5\n>>> dense.max()\n5\n>>> sparse.argmax()\n10\n>>> dense.argmax()\n10\n>>> sparse.mean()\n1.0833333333333333\n>>> dense.mean()\n1.0833333333333333 \n```", "```py\n>>> sparse.nnz\n5 \n```", "```py\n>>> sparse.mean(axis=1)\narray([0.75, 1.25, 1.25]) \n```", "```py\n>>> dense[2, 2]\n5\n>>> sparse[2, 2]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'coo_array' object is not subscriptable \n```", "```py\n>>> sparse.tocsr()[2, 2]\n5 \n```", "```py\n>>> sparse @ sparse.T\n<3x3 sparse array of type '<class 'numpy.int64'>'\n with 5 stored elements in Compressed Sparse Row format> \n```", "```py\n>>> dense\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]]) \n```", "```py\n>>> row = [0,0,1,1,2]\n>>> col = [0,3,1,2,2]\n>>> data = [1,2,4,1,5] \n```", "```py\n>>> csr = sp.sparse.csr_array((data, (row, col)))\n>>> csr\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 5 stored elements in Compressed Sparse Row format> \n```", "```py\n>>> row = [0,0,1,1,2,2]\n>>> col = [0,3,1,2,2,3]\n>>> data = [1,2,4,1,5,0] \n```", "```py\n>>> csr = sp.sparse.csr_array((data, (row, col)))\n>>> csr\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 6 stored elements in Compressed Sparse Row format> \n```", "```py\n>>> csr.todense()\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]])\n>>> dense\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]]) \n```", "```py\n>>> csr\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 6 stored elements in Compressed Sparse Row format>\n>>> csr.eliminate_zeros()\n>>> csr\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 5 stored elements in Compressed Sparse Row format> \n```", "```py\n>>> row = [0,0,1,1,1,2]\n>>> col = [0,3,1,1,2,2]\n>>> data = [1,2,1,3,1,5] \n```", "```py\n>>> dupes = sp.sparse.coo_array((data, (row, col)))\n>>> dupes\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 6 stored elements in COOrdinate format> \n```", "```py\n>>> dupes.todense()\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]]) \n```", "```py\n>>> dupes.sum_duplicates()\n>>> dupes\n<3x4 sparse array of type '<class 'numpy.int64'>'\n with 5 stored elements in COOrdinate format> \n```", "```py\n>>> dupes.todense()\narray([[1, 0, 0, 2],\n [0, 4, 1, 0],\n [0, 0, 5, 0]]) \n```", "```py\n>>> coo = sp.sparse.coo_array(([1, 1, 1], ([0, 2, 1], [0, 1, 2])))\n>>> coo.has_canonical_format\nFalse \n```", "```py\n>>> coo.sum_duplicates()\n>>> coo.has_canonical_format\nTrue \n```"]