- en: scipy.interpolate.barycentric_interpolate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.barycentric_interpolate.html#scipy.interpolate.barycentric_interpolate](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.barycentric_interpolate.html#scipy.interpolate.barycentric_interpolate)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convenience function for polynomial interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Constructs a polynomial that passes through a given set of points, then evaluates
    the polynomial. For reasons of numerical stability, this function does not compute
    the coefficients of the polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: This function uses a “barycentric interpolation” method that treats the problem
    as a special case of rational function interpolation. This algorithm is quite
    stable, numerically, but even in a world of exact computation, unless the *x*
    coordinates are chosen very carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are
    a good choice - polynomial interpolation itself is a very ill-conditioned process
    due to the Runge phenomenon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xi**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array of x coordinates of the points the polynomial should pass through
  prefs: []
  type: TYPE_NORMAL
- en: '**yi**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The y coordinates of the points the polynomial should pass through.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**scalar or array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Point or points at which to evaluate the interpolant.
  prefs: []
  type: TYPE_NORMAL
- en: '**der**int or list or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: How many derivatives to evaluate, or None for all potentially nonzero derivatives
    (that is, a number equal to the number of points), or a list of derivatives to
    evaluate. This number includes the function value as the ‘0th’ derivative.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis in the *yi* array corresponding to the x-coordinate values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**scalar or array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolated values. Shape is determined by replacing the interpolation axis
    in the original array with the shape of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BarycentricInterpolator`](scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator
    "scipy.interpolate.BarycentricInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Barycentric interpolator
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Construction of the interpolation weights is a relatively slow process. If you
    want to call this many times with the same xi (but possibly varying yi or x) you
    should use the class [`BarycentricInterpolator`](scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator
    "scipy.interpolate.BarycentricInterpolator"). This is what this function uses
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We can interpolate 2D observed data using barycentric interpolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-barycentric_interpolate-1.png](../Images/9e1425b4aed26d1b422fd46aef23ce07.png)'
  prefs: []
  type: TYPE_IMG
