["```py\nclass sympy.physics.quantum.spin.J2Op(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.spin.JxBra(j, m)\n```", "```py\nclass sympy.physics.quantum.spin.JxBraCoupled(j, m, jn, *jcoupling)\n```", "```py\nclass sympy.physics.quantum.spin.JxKet(j, m)\n```", "```py\nclass sympy.physics.quantum.spin.JxKetCoupled(j, m, jn, *jcoupling)\n```", "```py\nclass sympy.physics.quantum.spin.JyBra(j, m)\n```", "```py\nclass sympy.physics.quantum.spin.JyBraCoupled(j, m, jn, *jcoupling)\n```", "```py\nclass sympy.physics.quantum.spin.JyKet(j, m)\n```", "```py\nclass sympy.physics.quantum.spin.JyKetCoupled(j, m, jn, *jcoupling)\n```", "```py\nclass sympy.physics.quantum.spin.JzBra(j, m)\n```", "```py\nclass sympy.physics.quantum.spin.JzBraCoupled(j, m, jn, *jcoupling)\n```", "```py\nclass sympy.physics.quantum.spin.JzKet(j, m)\n```", "```py\n>>> from sympy.physics.quantum.spin import JzKet, JxKet\n>>> from sympy import symbols\n>>> JzKet(1, 0)\n|1,0>\n>>> j, m = symbols('j m')\n>>> JzKet(j, m)\n|j,m> \n```", "```py\n>>> JzKet(1,1).rewrite(\"Jx\")\n|1,-1>/2 - sqrt(2)*|1,0>/2 + |1,1>/2 \n```", "```py\n>>> from sympy.physics.quantum.represent import represent\n>>> from sympy.physics.quantum.spin import Jx, Jz\n>>> represent(JzKet(1,-1), basis=Jx)\nMatrix([\n[      1/2],\n[sqrt(2)/2],\n[      1/2]]) \n```", "```py\n>>> from sympy.physics.quantum.innerproduct import InnerProduct\n>>> from sympy.physics.quantum.spin import JxBra\n>>> i = InnerProduct(JxBra(1,1), JzKet(1,1))\n>>> i\n<1,1|1,1>\n>>> i.doit()\n1/2 \n```", "```py\n>>> from sympy.physics.quantum.tensorproduct import TensorProduct\n>>> j1,m1,j2,m2 = symbols('j1 m1 j2 m2')\n>>> TensorProduct(JzKet(1,0), JzKet(1,1))\n|1,0>x|1,1>\n>>> TensorProduct(JzKet(j1,m1), JzKet(j2,m2))\n|j1,m1>x|j2,m2> \n```", "```py\n>>> TensorProduct(JzKet(1,1),JxKet(1,1)).rewrite('Jz')\n|1,1>x|1,-1>/2 + sqrt(2)*|1,1>x|1,0>/2 + |1,1>x|1,1>/2 \n```", "```py\n>>> represent(TensorProduct(JzKet(1,0),JzKet(1,1)))\nMatrix([\n[0],\n[0],\n[0],\n[1],\n[0],\n[0],\n[0],\n[0],\n[0]])\n>>> represent(TensorProduct(JzKet(1,1),JxKet(1,1)), basis=Jz)\nMatrix([\n[      1/2],\n[sqrt(2)/2],\n[      1/2],\n[        0],\n[        0],\n[        0],\n[        0],\n[        0],\n[        0]]) \n```", "```py\nclass sympy.physics.quantum.spin.JzKetCoupled(j, m, jn, *jcoupling)\n```", "```py\n>>> from sympy.physics.quantum.spin import JzKetCoupled\n>>> from sympy import symbols\n>>> JzKetCoupled(1, 0, (1, 1))\n|1,0,j1=1,j2=1>\n>>> j, m, j1, j2 = symbols('j m j1 j2')\n>>> JzKetCoupled(j, m, (j1, j2))\n|j,m,j1=j1,j2=j2> \n```", "```py\n>>> JzKetCoupled(2, 1, (1, 1, 1))\n|2,1,j1=1,j2=1,j3=1,j(1,2)=2>\n>>> JzKetCoupled(2, 1, (1, 1, 1), ((1,2,2),(1,3,2)) )\n|2,1,j1=1,j2=1,j3=1,j(1,2)=2>\n>>> JzKetCoupled(2, 1, (1, 1, 1), ((2,3,1),(1,2,2)) )\n|2,1,j1=1,j2=1,j3=1,j(2,3)=1> \n```", "```py\n>>> JzKetCoupled(1,1,(1,1)).rewrite(\"Jx\")\n|1,-1,j1=1,j2=1>/2 - sqrt(2)*|1,0,j1=1,j2=1>/2 + |1,1,j1=1,j2=1>/2 \n```", "```py\n>>> JzKetCoupled(1, 0, (1, 1)).rewrite('Jz', coupled=False)\n-sqrt(2)*|1,-1>x|1,1>/2 + sqrt(2)*|1,1>x|1,-1>/2 \n```", "```py\n>>> from sympy.physics.quantum.represent import represent\n>>> from sympy.physics.quantum.spin import Jx\n>>> from sympy import S\n>>> represent(JzKetCoupled(1,-1,(S(1)/2,S(1)/2)), basis=Jx)\nMatrix([\n[        0],\n[      1/2],\n[sqrt(2)/2],\n[      1/2]]) \n```", "```py\nclass sympy.physics.quantum.spin.JzOp(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.spin.Rotation(*args, **kwargs)\n```", "```py\n>>> from sympy import pi\n>>> from sympy.physics.quantum.spin import Rotation\n>>> Rotation(pi, 0, pi/2)\nR(pi,0,pi/2) \n```", "```py\n>>> from sympy import symbols\n>>> a, b, c = symbols('a b c')\n>>> Rotation(a, b, c)\nR(a,b,c)\n>>> Rotation(a, b, c).inverse()\nR(-c,-b,-a) \n```", "```py\nclassmethod D(j, m, mp, alpha, beta, gamma)\n```", "```py\n>>> from sympy.physics.quantum.spin import Rotation\n>>> from sympy import pi, symbols\n>>> alpha, beta, gamma = symbols('alpha beta gamma')\n>>> Rotation.D(1, 1, 0,pi, pi/2,-pi)\nWignerD(1, 1, 0, pi, pi/2, -pi) \n```", "```py\nclassmethod d(j, m, mp, beta)\n```", "```py\n>>> from sympy.physics.quantum.spin import Rotation\n>>> from sympy import pi, symbols\n>>> beta = symbols('beta')\n>>> Rotation.d(1, 1, 0, pi/2)\nWignerD(1, 1, 0, 0, pi/2, 0) \n```", "```py\nclass sympy.physics.quantum.spin.WignerD(*args, **hints)\n```", "```py\n>>> from sympy.physics.quantum.spin import Rotation\n>>> from sympy import pi\n>>> rot = Rotation.D(1, 1, 0, pi, pi/2, 0)\n>>> rot\nWignerD(1, 1, 0, pi, pi/2, 0)\n>>> rot.doit()\nsqrt(2)/2 \n```", "```py\n>>> rot = Rotation.d(1, 1, 0, pi/2)\n>>> rot\nWignerD(1, 1, 0, 0, pi/2, 0)\n>>> rot.doit()\n-sqrt(2)/2 \n```", "```py\nsympy.physics.quantum.spin.couple(expr, jcoupling_list=None)\n```", "```py\n>>> from sympy.physics.quantum.spin import JzKet, couple\n>>> from sympy.physics.quantum.tensorproduct import TensorProduct\n>>> couple(TensorProduct(JzKet(1,0), JzKet(1,1)))\n-sqrt(2)*|1,1,j1=1,j2=1>/2 + sqrt(2)*|2,1,j1=1,j2=1>/2 \n```", "```py\n>>> couple(TensorProduct(JzKet(1,1), JzKet(1,1), JzKet(1,0)))\nsqrt(6)*|2,2,j1=1,j2=1,j3=1,j(1,2)=2>/3 + sqrt(3)*|3,2,j1=1,j2=1,j3=1,j(1,2)=2>/3 \n```", "```py\n>>> couple(TensorProduct(JzKet(1,1), JzKet(1,1), JzKet(1,0)), ((1,3),(1,2)) )\nsqrt(2)*|2,2,j1=1,j2=1,j3=1,j(1,3)=1>/2 - sqrt(6)*|2,2,j1=1,j2=1,j3=1,j(1,3)=2>/6 + sqrt(3)*|3,2,j1=1,j2=1,j3=1,j(1,3)=2>/3 \n```", "```py\n>>> from sympy import symbols\n>>> j1,m1,j2,m2 = symbols('j1 m1 j2 m2')\n>>> couple(TensorProduct(JzKet(j1,m1), JzKet(j2,m2)))\nSum(CG(j1, m1, j2, m2, j, m1 + m2)*|j,m1 + m2,j1=j1,j2=j2>, (j, m1 + m2, j1 + j2)) \n```", "```py\nsympy.physics.quantum.spin.uncouple(expr, jn=None, jcoupling_list=None)\n```", "```py\n>>> from sympy.physics.quantum.spin import JzKetCoupled, uncouple\n>>> from sympy import S\n>>> uncouple(JzKetCoupled(1, 0, (S(1)/2, S(1)/2)))\nsqrt(2)*|1/2,-1/2>x|1/2,1/2>/2 + sqrt(2)*|1/2,1/2>x|1/2,-1/2>/2 \n```", "```py\n>>> from sympy.physics.quantum.spin import JzKet\n>>> uncouple(JzKet(1, 0), (S(1)/2, S(1)/2))\nsqrt(2)*|1/2,-1/2>x|1/2,1/2>/2 + sqrt(2)*|1/2,1/2>x|1/2,-1/2>/2 \n```", "```py\n>>> uncouple(JzKetCoupled(1, 1, (1, 1, 1), ((1,3,1),(1,2,1)) ))\n|1,-1>x|1,1>x|1,1>/2 - |1,0>x|1,0>x|1,1>/2 + |1,1>x|1,0>x|1,0>/2 - |1,1>x|1,1>x|1,-1>/2 \n```", "```py\n>>> uncouple(JzKet(1, 1), (1, 1, 1), ((1,3,1),(1,2,1)) )\n|1,-1>x|1,1>x|1,1>/2 - |1,0>x|1,0>x|1,1>/2 + |1,1>x|1,0>x|1,0>/2 - |1,1>x|1,1>x|1,-1>/2 \n```", "```py\n>>> from sympy import symbols\n>>> j,m,j1,j2 = symbols('j m j1 j2')\n>>> uncouple(JzKetCoupled(j, m, (j1, j2)))\nSum(CG(j1, m1, j2, m2, j, m)*|j1,m1>x|j2,m2>, (m1, -j1, j1), (m2, -j2, j2)) \n```", "```py\n>>> uncouple(JzKet(j, m), (j1, j2))\nSum(CG(j1, m1, j2, m2, j, m)*|j1,m1>x|j2,m2>, (m1, -j1, j1), (m2, -j2, j2)) \n```"]