["```py\nscipy.signal.bessel(N, Wn, btype='low', analog=False, output='ba', norm='phase', fs=None)\n```", "```py\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np \n```", "```py\n>>> b, a = signal.butter(4, 100, 'low', analog=True)\n>>> w, h = signal.freqs(b, a)\n>>> plt.semilogx(w, 20 * np.log10(np.abs(h)), color='silver', ls='dashed')\n>>> b, a = signal.bessel(4, 100, 'low', analog=True, norm='phase')\n>>> w, h = signal.freqs(b, a)\n>>> plt.semilogx(w, 20 * np.log10(np.abs(h)))\n>>> plt.title('Bessel filter magnitude response (with Butterworth)')\n>>> plt.xlabel('Frequency [radians / second]')\n>>> plt.ylabel('Amplitude [dB]')\n>>> plt.margins(0, 0.1)\n>>> plt.grid(which='both', axis='both')\n>>> plt.axvline(100, color='green')  # cutoff frequency\n>>> plt.show() \n```", "```py\n>>> plt.figure()\n>>> plt.semilogx(w, np.unwrap(np.angle(h)))\n>>> plt.axvline(100, color='green')  # cutoff frequency\n>>> plt.axhline(-np.pi, color='red')  # phase midpoint\n>>> plt.title('Bessel filter phase response')\n>>> plt.xlabel('Frequency [radians / second]')\n>>> plt.ylabel('Phase [radians]')\n>>> plt.margins(0, 0.1)\n>>> plt.grid(which='both', axis='both')\n>>> plt.show() \n```", "```py\n>>> b, a = signal.bessel(3, 10, 'low', analog=True, norm='mag')\n>>> w, h = signal.freqs(b, a)\n>>> plt.semilogx(w, 20 * np.log10(np.abs(h)))\n>>> plt.axhline(-3, color='red')  # -3 dB magnitude\n>>> plt.axvline(10, color='green')  # cutoff frequency\n>>> plt.title('Magnitude-normalized Bessel filter frequency response')\n>>> plt.xlabel('Frequency [radians / second]')\n>>> plt.ylabel('Amplitude [dB]')\n>>> plt.margins(0, 0.1)\n>>> plt.grid(which='both', axis='both')\n>>> plt.show() \n```", "```py\n>>> b, a = signal.bessel(5, 1/0.1, 'low', analog=True, norm='delay')\n>>> w, h = signal.freqs(b, a)\n>>> plt.figure()\n>>> plt.semilogx(w[1:], -np.diff(np.unwrap(np.angle(h)))/np.diff(w))\n>>> plt.axhline(0.1, color='red')  # 0.1 seconds group delay\n>>> plt.title('Bessel filter group delay')\n>>> plt.xlabel('Frequency [radians / second]')\n>>> plt.ylabel('Group delay [seconds]')\n>>> plt.margins(0, 0.1)\n>>> plt.grid(which='both', axis='both')\n>>> plt.show() \n```"]