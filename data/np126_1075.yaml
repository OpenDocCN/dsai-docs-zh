- en: Generalized Universal Function API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广义通用函数 API
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/generalized-ufuncs.html](https://numpy.org/doc/1.26/reference/c-api/generalized-ufuncs.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/c-api/generalized-ufuncs.html](https://numpy.org/doc/1.26/reference/c-api/generalized-ufuncs.html)
- en: There is a general need for looping over not only functions on scalars but also
    over functions on vectors (or arrays). This concept is realized in NumPy by generalizing
    the universal functions (ufuncs). In regular ufuncs, the elementary function is
    limited to element-by-element operations, whereas the generalized version (gufuncs)
    supports “sub-array” by “sub-array” operations. The Perl vector library PDL provides
    a similar functionality and its terms are re-used in the following.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅需要在标量函数上循环，还需要在向量（或数组）函数上循环。这个概念在 NumPy 中通过对通用函数（ufuncs）进行泛化来实现。在常规的 ufuncs
    中，基本函数被限制为逐元素操作，而广义版本（gufuncs）支持“子数组”按“子数组”操作。Perl 矢量库 PDL 提供类似的功能，在下文中重新使用其术语。
- en: Each generalized ufunc has information associated with it that states what the
    “core” dimensionality of the inputs is, as well as the corresponding dimensionality
    of the outputs (the element-wise ufuncs have zero core dimensions). The list of
    the core dimensions for all arguments is called the “signature” of a ufunc. For
    example, the ufunc numpy.add has signature `(),()->()` defining two scalar inputs
    and one scalar output.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个广义通用函数都有与之相关的信息，说明输入的“核心”维度是什么，以及相应的输出维度（逐元素 ufunc 的核心维度为零）。所有参数的核心维度列表称为ufunc的“签名”。例如，ufunc
    numpy.add 签名为`(),()->()`，定义了两个标量输入和一个标量输出。
- en: Another example is the function `inner1d(a, b)` with a signature of `(i),(i)->()`.
    This applies the inner product along the last axis of each input, but keeps the
    remaining indices intact. For example, where `a` is of shape `(3, 5, N)` and `b`
    is of shape `(5, N)`, this will return an output of shape `(3,5)`. The underlying
    elementary function is called `3 * 5` times. In the signature, we specify one
    core dimension `(i)` for each input and zero core dimensions `()` for the output,
    since it takes two 1-d arrays and returns a scalar. By using the same name `i`,
    we specify that the two corresponding dimensions should be of the same size.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是函数`inner1d(a, b)`，签名为`(i),(i)->()`。这将沿着每个输入的最后一个轴应用内积，但保持其余索引不变。例如，当`a`的形状为`(3,
    5, N)`，`b`的形状为`(5, N)`时，这将返回形状为`(3,5)`的输出。基础的基本功能被调用`3 * 5`次。在签名中，我们为每个输入指定一个核心维度`(i)`，并为输出指定零个核心维度`()`，因为它需要两个
    1-d 数组并返回一个标量。通过使用相同的名称`i`，我们指定两个对应的维度应该是相同大小。
- en: The dimensions beyond the core dimensions are called “loop” dimensions. In the
    above example, this corresponds to `(3, 5)`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 超出核心尺寸的维度被称为“循环”维度。在上面的示例中，这对应于`(3, 5)`。
- en: 'The signature determines how the dimensions of each input/output array are
    split into core and loop dimensions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 签名确定每个输入/输出数组的维度如何分割为核心和循环维度：
- en: Each dimension in the signature is matched to a dimension of the corresponding
    passed-in array, starting from the end of the shape tuple. These are the core
    dimensions, and they must be present in the arrays, or an error will be raised.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在签名中，每个维度与相应传入数组的维度匹配，从形状元组的末尾开始。这些是核心维度，它们必须存在于数组中，否则会引发错误。
- en: Core dimensions assigned to the same label in the signature (e.g. the `i` in
    `inner1d`’s `(i),(i)->()`) must have exactly matching sizes, no broadcasting is
    performed.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在签名中分配给相同标签的核心维度（例如`inner1d`中的`(i),(i)->()`中的`i`）必须具有完全匹配的大小，不执行广播。
- en: The core dimensions are removed from all inputs and the remaining dimensions
    are broadcast together, defining the loop dimensions.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有输入中去除核心维度，剩余维度进行广播，定义循环维度。
- en: The shape of each output is determined from the loop dimensions plus the output’s
    core dimensions
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个输出的形状取决于循环维度加上输出的核心维度
- en: Typically, the size of all core dimensions in an output will be determined by
    the size of a core dimension with the same label in an input array. This is not
    a requirement, and it is possible to define a signature where a label comes up
    for the first time in an output, although some precautions must be taken when
    calling such a function. An example would be the function `euclidean_pdist(a)`,
    with signature `(n,d)->(p)`, that given an array of `n` `d`-dimensional vectors,
    computes all unique pairwise Euclidean distances among them. The output dimension
    `p` must therefore be equal to `n * (n - 1) / 2`, but it is the caller’s responsibility
    to pass in an output array of the right size. If the size of a core dimension
    of an output cannot be determined from a passed in input or output array, an error
    will be raised.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，输出中所有核心维度的大小将由输入数组中具有相同标签的核心维度的大小决定。这不是必须的，也可以定义一个签名，其中一个标签在输出中首次出现，尽管在调用这样的函数时必须采取一些预防措施。一个例子是函数`euclidean_pdist(a)`，其签名为`(n,d)->(p)`，给定一个包含`n`个`d`维向量的数组，计算它们之间所有唯一的成对欧几里德距离。因此，输出维度`p`必须等于`n
    * (n - 1) / 2`，但调用者有责任传入正确大小的输出数组。如果无法从传入的输入或输出数组确定输出的核心维度的大小，则会引发错误。
- en: 'Note: Prior to NumPy 1.10.0, less strict checks were in place: missing core
    dimensions were created by prepending 1’s to the shape as necessary, core dimensions
    with the same label were broadcast together, and undetermined dimensions were
    created with size 1.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在NumPy 1.10.0之前，存在较少严格的检查：缺少的核心维度会根据需要在形状前添加1，具有相同标签的核心维度会一起广播，并且未确定的维度将创建为大小为1的维度。
- en: Definitions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义
- en: Elementary Function
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基本函数
- en: Each ufunc consists of an elementary function that performs the most basic operation
    on the smallest portion of array arguments (e.g. adding two numbers is the most
    basic operation in adding two arrays). The ufunc applies the elementary function
    multiple times on different parts of the arrays. The input/output of elementary
    functions can be vectors; e.g., the elementary function of inner1d takes two vectors
    as input.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ufunc由一个基本函数组成，该函数在数组参数的最小部分上执行最基本的操作（例如，将两个数字相加是将两个数组相加的最基本操作）。ufunc在数组的不同部分上多次应用基本函数。基本函数的输入/输出可以是向量；例如，inner1d的基本函数将两个向量作为输入。
- en: Signature
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 签名
- en: A signature is a string describing the input/output dimensions of the elementary
    function of a ufunc. See section below for more details.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 签名是描述ufunc基本函数的输入/输出维度的字符串。有关更多详细信息，请参阅下面的部分。
- en: Core Dimension
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 核心维度
- en: The dimensionality of each input/output of an elementary function is defined
    by its core dimensions (zero core dimensions correspond to a scalar input/output).
    The core dimensions are mapped to the last dimensions of the input/output arrays.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个基本函数的输入/输出的维度由其核心维度定义（零核心维度对应于标量输入/输出）。核心维度映射到输入/输出数组的最后维度。
- en: Dimension Name
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 维度名称
- en: A dimension name represents a core dimension in the signature. Different dimensions
    may share a name, indicating that they are of the same size.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 维度名称表示签名中的核心维度。不同的维度可以共享一个名称，表示它们具有相同的大小。
- en: Dimension Index
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 维度索引
- en: A dimension index is an integer representing a dimension name. It enumerates
    the dimension names according to the order of the first occurrence of each name
    in the signature.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 维度索引是表示维度名称的整数。它根据签名中每个名称的第一次出现的顺序对维度名称进行枚举。
- en: '## Details of Signature'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '## 签名详细信息'
- en: 'The signature defines “core” dimensionality of input and output variables,
    and thereby also defines the contraction of the dimensions. The signature is represented
    by a string of the following format:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 签名定义了输入和输出变量的“核心”维度，从而也定义了维度的收缩。签名由以下格式的字符串表示：
- en: Core dimensions of each input or output array are represented by a list of dimension
    names in parentheses, `(i_1,...,i_N)`; a scalar input/output is denoted by `()`.
    Instead of `i_1`, `i_2`, etc, one can use any valid Python variable name.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个输入或输出数组的核心维度由括号中的维度名称列表`(i_1,...,i_N)`表示；标量输入/输出用`()`表示。可以使用任何有效的Python变量名，而不是`i_1`，`i_2`等。
- en: Dimension lists for different arguments are separated by `","`. Input/output
    arguments are separated by `"->"`.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同参数的维度列表由`","`分隔。输入/输出参数由`"->"`分隔。
- en: If one uses the same dimension name in multiple locations, this enforces the
    same size of the corresponding dimensions.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在多个位置使用相同的维度名称，则强制相应维度的相同大小。
- en: 'The formal syntax of signatures is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的正式语法如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: All quotes are for clarity.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有引用都是为了清晰。
- en: Unmodified core dimensions that share the same name must have the same size.
    Each dimension name typically corresponds to one level of looping in the elementary
    function’s implementation.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 未修改的共享相同名称的核心维度必须具有相同的大小。每个维度名称通常对应基本函数实现中的一个循环级别。
- en: White spaces are ignored.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空格将被忽略。
- en: An integer as a dimension name freezes that dimension to the value.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字作为维度名称将冻结该维度为该值。
- en: If the name is suffixed with the “?” modifier, the dimension is a core dimension
    only if it exists on all inputs and outputs that share it; otherwise it is ignored
    (and replaced by a dimension of size 1 for the elementary function).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果名称后缀带有“?”修饰符，则该维度仅在所有输入和输出共享该维度时才是核心维度；否则将被忽略（并由元素函数的大小为1的维度替换）。
- en: 'Here are some examples of signatures:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些签名的示例：
- en: '| name | signature | common usage |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| name | signature | 常见用法 |'
- en: '| --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| add | `(),()->()` | binary ufunc |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| add | `(),()->()` | 二进制ufunc |'
- en: '| sum1d | `(i)->()` | reduction |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| sum1d | `(i)->()` | 减少 |'
- en: '| inner1d | `(i),(i)->()` | vector-vector multiplication |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| inner1d | `(i),(i)->()` | 向量-向量乘法 |'
- en: '| matmat | `(m,n),(n,p)->(m,p)` | matrix multiplication |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| matmat | `(m,n),(n,p)->(m,p)` | 矩阵乘法 |'
- en: '| vecmat | `(n),(n,p)->(p)` | vector-matrix multiplication |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| vecmat | `(n),(n,p)->(p)` | 向量-矩阵乘法 |'
- en: '| matvec | `(m,n),(n)->(m)` | matrix-vector multiplication |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| matvec | `(m,n),(n)->(m)` | 矩阵-向量乘法 |'
- en: '| matmul | `(m?,n),(n,p?)->(m?,p?)` | combination of the four above |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| matmul | `(m?,n),(n,p?)->(m?,p?)` | 上述四种的组合 |'
- en: '| outer_inner | `(i,t),(j,t)->(i,j)` | inner over the last dimension, outer
    over the second to last, and loop/broadcast over the rest. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| outer_inner | `(i,t),(j,t)->(i,j)` | 最后一个维度内积，倒数第二个维度外积，并循环/广播其他维度 |'
- en: '| cross1d | `(3),(3)->(3)` | cross product where the last dimension is frozen
    and must be 3 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| cross1d | `(3),(3)->(3)` | 叉积，其中最后一个维度被冻结并且必须为3 |'
- en: The last is an instance of freezing a core dimension and can be used to improve
    ufunc performance
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个是冻结核心维度的实例，并可用于改善ufunc性能
- en: C-API for implementing Elementary Functions
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于实现基本函数的C-API
- en: The current interface remains unchanged, and `PyUFunc_FromFuncAndData` can still
    be used to implement (specialized) ufuncs, consisting of scalar elementary functions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当前接口保持不变，`PyUFunc_FromFuncAndData`仍可用于实现（专门化的）ufunc，包括标量基本函数。
- en: One can use `PyUFunc_FromFuncAndDataAndSignature` to declare a more general
    ufunc. The argument list is the same as `PyUFunc_FromFuncAndData`, with an additional
    argument specifying the signature as C string.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可以使用`PyUFunc_FromFuncAndDataAndSignature`声明更通用的ufunc。参数列表与`PyUFunc_FromFuncAndData`相同，还有一个额外的参数指定签名为C字符串。
- en: Furthermore, the callback function is of the same type as before, `void (*foo)(char
    **args, intp *dimensions, intp *steps, void *func)`. When invoked, `args` is a
    list of length `nargs` containing the data of all input/output arguments. For
    a scalar elementary function, `steps` is also of length `nargs`, denoting the
    strides used for the arguments. `dimensions` is a pointer to a single integer
    defining the size of the axis to be looped over.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，回调函数的类型与以前相同，`void (*foo)(char **args, intp *dimensions, intp *steps, void
    *func)`。调用时，`args`是一个长度为`nargs`的列表，其中包含所有输入/输出参数的数据。对于标量基本函数，`steps`也是长度为`nargs`，表示参数的步进。`dimensions`是一个指向定义要循环的轴的大小的单个整数的指针。
- en: For a non-trivial signature, `dimensions` will also contain the sizes of the
    core dimensions as well, starting at the second entry. Only one size is provided
    for each unique dimension name and the sizes are given according to the first
    occurrence of a dimension name in the signature.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非平凡签名，`dimensions`还将包含核心维度的大小，从第二个条目开始。对于每个惟一的维度名称，仅提供一个大小，并且大小根据签名中维度名称的第一次出现给出。
- en: The first `nargs` elements of `steps` remain the same as for scalar ufuncs.
    The following elements contain the strides of all core dimensions for all arguments
    in order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`nargs`的前几个元素与标量ufunc相同。接下来的元素包含按顺序所有参数的所有核心维度的步进。'
- en: For example, consider a ufunc with signature `(i,j),(i)->()`. In this case,
    `args` will contain three pointers to the data of the input/output arrays `a`,
    `b`, `c`. Furthermore, `dimensions` will be `[N, I, J]` to define the size of
    `N` of the loop and the sizes `I` and `J` for the core dimensions `i` and `j`.
    Finally, `steps` will be `[a_N, b_N, c_N, a_i, a_j, b_i]`, containing all necessary
    strides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个签名为`(i,j),(i)->()`的ufunc。在这种情况下，`args`将包含对输入/输出数组`a`、`b`、`c`的数据的三个指针。此外，`dimensions`将为`[N,
    I, J]`，以定义循环的大小`N`和核心维度`i`和`j`的大小`I`和`J`。最后，`steps`将为`[a_N, b_N, c_N, a_i, a_j,
    b_i]`，包含所有必要的步幅。
- en: Definitions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义
- en: Elementary Function
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基本函数
- en: Each ufunc consists of an elementary function that performs the most basic operation
    on the smallest portion of array arguments (e.g. adding two numbers is the most
    basic operation in adding two arrays). The ufunc applies the elementary function
    multiple times on different parts of the arrays. The input/output of elementary
    functions can be vectors; e.g., the elementary function of inner1d takes two vectors
    as input.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ufunc由一个执行最基本操作的基本函数组成，该操作在最小的数组部分上执行（例如，将两个数字相加是在两个数组上添加的最基本操作）。ufunc将基本函数多次应用于数组的不同部分。基本函数的输入/输出可以是向量；例如，inner1d的基本函数以两个向量作为输入。
- en: Signature
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 签名
- en: A signature is a string describing the input/output dimensions of the elementary
    function of a ufunc. See section below for more details.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 签名是描述ufunc的基本函数的输入/输出维度的字符串。有关详细信息，请参见下面的部分。
- en: Core Dimension
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 核心维度
- en: The dimensionality of each input/output of an elementary function is defined
    by its core dimensions (zero core dimensions correspond to a scalar input/output).
    The core dimensions are mapped to the last dimensions of the input/output arrays.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基本函数的每个输入/输出的维度由其核心维度定义（零个核心维度对应于标量输入/输出）。核心维度映射到输入/输出数组的最后维度。
- en: Dimension Name
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 维度名称
- en: A dimension name represents a core dimension in the signature. Different dimensions
    may share a name, indicating that they are of the same size.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 维度名称表示签名中的核心维度。不同的维度可以共享一个名称，表示它们具有相同的大小。
- en: Dimension Index
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 维度索引
- en: A dimension index is an integer representing a dimension name. It enumerates
    the dimension names according to the order of the first occurrence of each name
    in the signature.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 维度索引是表示维度名称的整数。它根据签名中每个名称的第一次出现的顺序列举维度名称。
- en: '## Details of Signature'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '## 签名的详细信息'
- en: 'The signature defines “core” dimensionality of input and output variables,
    and thereby also defines the contraction of the dimensions. The signature is represented
    by a string of the following format:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 签名定义了输入和输出变量的“核心”维度，并因此定义维度的合并。签名由以下格式的字符串表示：
- en: Core dimensions of each input or output array are represented by a list of dimension
    names in parentheses, `(i_1,...,i_N)`; a scalar input/output is denoted by `()`.
    Instead of `i_1`, `i_2`, etc, one can use any valid Python variable name.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个输入或输出数组的核心维度由括号内的维度名称列表`(i_1,...,i_N)`表示；标量输入/输出用`()`表示。可以使用任何有效的Python变量名称代替`i_1`、`i_2`等。
- en: Dimension lists for different arguments are separated by `","`. Input/output
    arguments are separated by `"->"`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同参数的维度列表由逗号`","`分隔。输入/输出参数由箭头`"->"`分隔。
- en: If one uses the same dimension name in multiple locations, this enforces the
    same size of the corresponding dimensions.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在多个位置使用相同的维度名称，这将强制相应维度的相同大小。
- en: 'The formal syntax of signatures is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的形式语法如下：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: All quotes are for clarity.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有引用只是为了清晰起见。
- en: Unmodified core dimensions that share the same name must have the same size.
    Each dimension name typically corresponds to one level of looping in the elementary
    function’s implementation.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有相同名称的未修改的核心维度必须具有相同的大小。每个维度名称通常对应于基本函数实现中的一个循环级别。
- en: White spaces are ignored.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空格将被忽略。
- en: An integer as a dimension name freezes that dimension to the value.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为维度名称的整数会将该维度冻结为特定的值。
- en: If the name is suffixed with the “?” modifier, the dimension is a core dimension
    only if it exists on all inputs and outputs that share it; otherwise it is ignored
    (and replaced by a dimension of size 1 for the elementary function).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果名称后缀有“？”修饰符，则该维度仅在存在于共享它的所有输入和输出上时才是核心维度；否则，它会被忽略（并用一个具有大小为1的维度替换基本函数）。
- en: 'Here are some examples of signatures:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些签名的示例：
- en: '| name | signature | common usage |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| name | signature | common usage |'
- en: '| --- | --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| add | `(),()->()` | binary ufunc |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| add | `(),()->()` | 二元 ufunc。'
- en: '| sum1d | `(i)->()` | reduction |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| sum1d | `(i)->()` | 归约。'
- en: '| inner1d | `(i),(i)->()` | vector-vector multiplication |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| inner1d | `(i),(i)->()` | 向量-向量乘法。'
- en: '| matmat | `(m,n),(n,p)->(m,p)` | matrix multiplication |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| matmat | `(m,n),(n,p)->(m,p)` | 矩阵乘法。'
- en: '| vecmat | `(n),(n,p)->(p)` | vector-matrix multiplication |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| vecmat | `(n),(n,p)->(p)` | 向量-矩阵乘法。'
- en: '| matvec | `(m,n),(n)->(m)` | matrix-vector multiplication |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| matvec | `(m,n),(n)->(m)` | 矩阵-向量乘法。'
- en: '| matmul | `(m?,n),(n,p?)->(m?,p?)` | combination of the four above |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| matmul | `(m?,n),(n,p?)->(m?,p?)` | 以上四种的组合。'
- en: '| outer_inner | `(i,t),(j,t)->(i,j)` | inner over the last dimension, outer
    over the second to last, and loop/broadcast over the rest. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| outer_inner | `(i,t),(j,t)->(i,j)` | 最后一个维度内积，倒数第二个维度外积，并在其余维度上进行循环/广播。'
- en: '| cross1d | `(3),(3)->(3)` | cross product where the last dimension is frozen
    and must be 3 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| cross1d | `(3),(3)->(3)` | 交叉积，其中最后一个维度是固定的，必须为 3。'
- en: The last is an instance of freezing a core dimension and can be used to improve
    ufunc performance
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例是一个核心维度的冻结实例，可用于提高 ufunc 的性能。
- en: C-API for implementing Elementary Functions
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于实现基本函数的 C-API。
- en: The current interface remains unchanged, and `PyUFunc_FromFuncAndData` can still
    be used to implement (specialized) ufuncs, consisting of scalar elementary functions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当前接口保持不变，仍然可以使用`PyUFunc_FromFuncAndData`来实现（专用的）ufunc，由标量基本函数组成。
- en: One can use `PyUFunc_FromFuncAndDataAndSignature` to declare a more general
    ufunc. The argument list is the same as `PyUFunc_FromFuncAndData`, with an additional
    argument specifying the signature as C string.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`PyUFunc_FromFuncAndDataAndSignature`来声明更通用的 ufunc。参数列表与`PyUFunc_FromFuncAndData`相同，额外增加了一个参数来指定
    C 字符串形式的签名。
- en: Furthermore, the callback function is of the same type as before, `void (*foo)(char
    **args, intp *dimensions, intp *steps, void *func)`. When invoked, `args` is a
    list of length `nargs` containing the data of all input/output arguments. For
    a scalar elementary function, `steps` is also of length `nargs`, denoting the
    strides used for the arguments. `dimensions` is a pointer to a single integer
    defining the size of the axis to be looped over.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，回调函数的类型与之前相同，即`void (*foo)(char **args, intp *dimensions, intp *steps, void
    *func)`。调用时，`args`是一个长度为`nargs`的列表，包含所有输入/输出参数的数据。对于标量基本函数，`steps`的长度也是`nargs`，表示用于参数的步幅。`dimensions`是一个指向定义要循环的轴大小的单个整数的指针。
- en: For a non-trivial signature, `dimensions` will also contain the sizes of the
    core dimensions as well, starting at the second entry. Only one size is provided
    for each unique dimension name and the sizes are given according to the first
    occurrence of a dimension name in the signature.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非平凡的签名，`dimensions`还将包含核心维度的大小，从第二个条目开始。对于每个唯一的维度名称，只提供一个大小，并且根据签名中维度名称的首次出现给出大小。
- en: The first `nargs` elements of `steps` remain the same as for scalar ufuncs.
    The following elements contain the strides of all core dimensions for all arguments
    in order.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps`的前 `nargs` 元素与标量 ufunc 相同。接下来的元素按顺序包含所有参数的所有核心维度的步幅。'
- en: For example, consider a ufunc with signature `(i,j),(i)->()`. In this case,
    `args` will contain three pointers to the data of the input/output arrays `a`,
    `b`, `c`. Furthermore, `dimensions` will be `[N, I, J]` to define the size of
    `N` of the loop and the sizes `I` and `J` for the core dimensions `i` and `j`.
    Finally, `steps` will be `[a_N, b_N, c_N, a_i, a_j, b_i]`, containing all necessary
    strides.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个带有签名`(i,j),(i)->()`的 ufunc。在这种情况下，`args`将包含指向输入/输出数组 `a`、`b`、`c` 数据的三个指针。此外，`dimensions`将是`[N,
    I, J]`，定义了循环的大小 `N` 和核心维度 `i` 和 `j` 的大小 `I` 和 `J`。最后，`steps`将是`[a_N, b_N, c_N,
    a_i, a_j, b_i]`，包含所有必要的步幅。
