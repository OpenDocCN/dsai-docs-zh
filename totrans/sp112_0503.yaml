- en: scipy.signal.convolve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.convolve.html#scipy.signal.convolve](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.convolve.html#scipy.signal.convolve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convolve two N-dimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Convolve *in1* and *in2*, with the output size determined by the *mode* argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**in1**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: First input.
  prefs: []
  type: TYPE_NORMAL
- en: '**in2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Second input. Should have the same number of dimensions as *in1*.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str {‘full’, ‘valid’, ‘same’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A string indicating the size of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`full`'
  prefs: []
  type: TYPE_NORMAL
- en: The output is the full discrete linear convolution of the inputs. (Default)
  prefs: []
  type: TYPE_NORMAL
- en: '`valid`'
  prefs: []
  type: TYPE_NORMAL
- en: The output consists only of those elements that do not rely on the zero-padding.
    In ‘valid’ mode, either *in1* or *in2* must be at least as large as the other
    in every dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '`same`'
  prefs: []
  type: TYPE_NORMAL
- en: The output is the same size as *in1*, centered with respect to the ‘full’ output.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str {‘auto’, ‘direct’, ‘fft’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A string indicating which method to use to calculate the convolution.
  prefs: []
  type: TYPE_NORMAL
- en: '`direct`'
  prefs: []
  type: TYPE_NORMAL
- en: The convolution is determined directly from sums, the definition of convolution.
  prefs: []
  type: TYPE_NORMAL
- en: '`fft`'
  prefs: []
  type: TYPE_NORMAL
- en: The Fourier Transform is used to perform the convolution by calling [`fftconvolve`](scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "scipy.signal.fftconvolve").
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically chooses direct or Fourier method based on an estimate of which
    is faster (default). See Notes for more detail.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**convolve**array'
  prefs: []
  type: TYPE_NORMAL
- en: An N-dimensional array containing a subset of the discrete linear convolution
    of *in1* with *in2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: RuntimeWarning
  prefs: []
  type: TYPE_NORMAL
- en: Use of the FFT convolution on input containing NAN or INF will lead to the entire
    output being NAN or INF. Use method=’direct’ when your input contains NAN or INF
    values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.polymul`](https://numpy.org/devdocs/reference/generated/numpy.polymul.html#numpy.polymul
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: performs polynomial multiplication (same operation, but also accepts poly1d
    objects)
  prefs: []
  type: TYPE_NORMAL
- en: '[`choose_conv_method`](scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method")'
  prefs: []
  type: TYPE_NORMAL
- en: chooses the fastest appropriate convolution method
  prefs: []
  type: TYPE_NORMAL
- en: '[`fftconvolve`](scipy.signal.fftconvolve.html#scipy.signal.fftconvolve "scipy.signal.fftconvolve")'
  prefs: []
  type: TYPE_NORMAL
- en: Always uses the FFT method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`oaconvolve`](scipy.signal.oaconvolve.html#scipy.signal.oaconvolve "scipy.signal.oaconvolve")'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the overlap-add method to do convolution, which is generally faster when
    the input arrays are large and significantly different in size.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: By default, [`convolve`](#scipy.signal.convolve "scipy.signal.convolve") and
    [`correlate`](scipy.signal.correlate.html#scipy.signal.correlate "scipy.signal.correlate")
    use `method='auto'`, which calls [`choose_conv_method`](scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method") to choose the fastest method using pre-computed
    values ([`choose_conv_method`](scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method") can also measure real-world timing with a keyword
    argument). Because [`fftconvolve`](scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "scipy.signal.fftconvolve") relies on floating point numbers, there are certain
    constraints that may force *method=direct* (more detail in [`choose_conv_method`](scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method
    "scipy.signal.choose_conv_method") docstring).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Smooth a square pulse using a Hann window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-convolve-1.png](../Images/6b195380a13a9d1c6a70780b6b8e669c.png)'
  prefs: []
  type: TYPE_IMG
