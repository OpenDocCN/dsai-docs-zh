- en: scipy.optimize.newton_krylov
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.newton_krylov
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find a root of a function, using Krylov approximation for inverse Jacobian.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找函数的根，使用基于克里洛夫逆雅可比矩阵近似的方法。
- en: This method is suitable for solving large-scale problems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法适用于解决大规模问题。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**F**function(x) -> f'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**F**function(x) -> f'
- en: Function whose root to find; should take and return an array-like object.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要找根的函数；应接受并返回类似数组的对象。
- en: '**xin**array_like'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**xin**array_like'
- en: Initial guess for the solution
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 解的初始猜测
- en: '**rdiff**float, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**rdiff**float，可选'
- en: Relative step size to use in numerical differentiation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在数值微分中使用的相对步长。
- en: '**method**str or callable, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**method**str或可调用对象，可选'
- en: 'Krylov method to use to approximate the Jacobian. Can be a string, or a function
    implementing the same interface as the iterative solvers in [`scipy.sparse.linalg`](../sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg"). If a string, needs to be one of: `''lgmres''`, `''gmres''`,
    `''bicgstab''`, `''cgs''`, `''minres''`, `''tfqmr''`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于近似雅可比矩阵的克里洛夫方法。可以是字符串，或者实现与[`scipy.sparse.linalg`](../sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg")中迭代求解器相同接口的函数。如果是字符串，则必须是以下之一：`'lgmres'`、`'gmres'`、`'bicgstab'`、`'cgs'`、`'minres'`、`'tfqmr'`。
- en: The default is [`scipy.sparse.linalg.lgmres`](scipy.sparse.linalg.lgmres.html#scipy.sparse.linalg.lgmres
    "scipy.sparse.linalg.lgmres").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为[`scipy.sparse.linalg.lgmres`](../sparse.linalg.html#scipy.sparse.linalg
    "scipy.sparse.linalg.lgmres")。
- en: '**inner_maxiter**int, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**inner_maxiter**int，可选'
- en: 'Parameter to pass to the “inner” Krylov solver: maximum number of iterations.
    Iteration will stop after maxiter steps even if the specified tolerance has not
    been achieved.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给“内部”克里洛夫求解器的参数：最大迭代次数。即使未达到指定的容差，迭代也将在maxiter步之后停止。
- en: '**inner_M**LinearOperator or InverseJacobian'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**inner_M**LinearOperator或InverseJacobian'
- en: Preconditioner for the inner Krylov iteration. Note that you can use also inverse
    Jacobians as (adaptive) preconditioners. For example,
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 内部克里洛夫迭代的预处理器。注意，您也可以使用逆雅可比矩阵作为（自适应）预处理器。例如，
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the preconditioner has a method named ‘update’, it will be called as `update(x,
    f)` after each nonlinear step, with `x` giving the current point, and `f` the
    current function value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果预处理器有一个名为‘update’的方法，它将在每个非线性步骤后被调用，参数为`update(x, f)`，其中`x`为当前点，`f`为当前函数值。
- en: '**outer_k**int, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**outer_k**int，可选'
- en: Size of the subspace kept across LGMRES nonlinear iterations. See [`scipy.sparse.linalg.lgmres`](scipy.sparse.linalg.lgmres.html#scipy.sparse.linalg.lgmres
    "scipy.sparse.linalg.lgmres") for details.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在LGMRES非线性迭代过程中保留的子空间大小。详见[`scipy.sparse.linalg.lgmres`](../sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg")了解详情。
- en: '**inner_kwargs**kwargs'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**inner_kwargs**kwargs'
- en: Keyword parameters for the “inner” Krylov solver (defined with *method*). Parameter
    names must start with the *inner_* prefix which will be stripped before passing
    on the inner method. See, e.g., [`scipy.sparse.linalg.gmres`](scipy.sparse.linalg.gmres.html#scipy.sparse.linalg.gmres
    "scipy.sparse.linalg.gmres") for details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: “内部”克里洛夫求解器的关键参数（由*method*定义）。参数名必须以*inner_*前缀开头，在传递给内部方法之前将被剥离。详见，例如[`scipy.sparse.linalg.gmres`](../sparse.linalg.html#scipy.sparse.linalg.gmres
    "scipy.sparse.linalg.gmres")了解详情。
- en: '**iter**int, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**iter**int，可选'
- en: Number of iterations to make. If omitted (default), make as many as required
    to meet tolerances.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行的迭代次数。如果省略（默认），则进行所需数量的迭代以满足容差。
- en: '**verbose**bool, optional'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**bool，可选'
- en: Print status to stdout on every iteration.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代时将状态打印到标准输出。
- en: '**maxiter**int, optional'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxiter**int，可选'
- en: Maximum number of iterations to make. If more are needed to meet convergence,
    *NoConvergence* is raised.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最大迭代次数。如果需要更多次迭代以满足收敛性，将引发*NoConvergence*异常。
- en: '**f_tol**float, optional'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**f_tol**float，可选'
- en: Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 残差的绝对容差（在最大范数下）。如果省略，默认为6e-6。
- en: '**f_rtol**float, optional'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**f_rtol**float，可选'
- en: Relative tolerance for the residual. If omitted, not used.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 残差的相对容差。如果省略，则不使用。
- en: '**x_tol**float, optional'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**x_tol**float，可选'
- en: Absolute minimum step size, as determined from the Jacobian approximation. If
    the step size is smaller than this, optimization is terminated as successful.
    If omitted, not used.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对最小步长，根据雅可比近似确定。如果步长小于此值，则优化成功终止。如果省略，则不使用。
- en: '**x_rtol**float, optional'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**x_rtol**浮点数，可选'
- en: Relative minimum step size. If omitted, not used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相对最小步长。如果省略，则不使用。
- en: '**tol_norm**function(vector) -> scalar, optional'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**tol_norm**函数（向量）->标量，可选'
- en: Norm to use in convergence check. Default is the maximum norm.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于收敛检查的范数。默认为最大范数。
- en: '**line_search**{None, ‘armijo’ (default), ‘wolfe’}, optional'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**line_search**{None, ‘armijo’ (default), ‘wolfe’}, 可选'
- en: Which type of a line search to use to determine the step size in the direction
    given by the Jacobian approximation. Defaults to ‘armijo’.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定由雅可比近似给出的方向上的步长的线搜索类型。默认为‘armijo’。
- en: '**callback**function, optional'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**callback**函数，可选'
- en: Optional callback function. It is called on every iteration as `callback(x,
    f)` where *x* is the current solution and *f* the corresponding residual.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可选回调函数。每次迭代时调用`callback(x, f)`，其中*x*是当前解决方案，*f*是相应的残差。
- en: 'Returns:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**sol**ndarray'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**sol**ndarray'
- en: An array (of similar array type as *x0*) containing the final solution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含最终解决方案的数组（与*x0*类型相似）。
- en: 'Raises:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'Raises:'
- en: NoConvergence
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: NoConvergence
- en: When a solution was not found.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当未找到解决方案时。
- en: See also
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
- en: Interface to root finding algorithms for multivariate functions. See `method='krylov'`
    in particular.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 多变量函数根查找算法的接口。特别查看`method='krylov'`。
- en: '[`scipy.sparse.linalg.gmres`](scipy.sparse.linalg.gmres.html#scipy.sparse.linalg.gmres
    "scipy.sparse.linalg.gmres")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.sparse.linalg.gmres`](scipy.sparse.linalg.gmres.html#scipy.sparse.linalg.gmres
    "scipy.sparse.linalg.gmres")'
- en: '[`scipy.sparse.linalg.lgmres`](scipy.sparse.linalg.lgmres.html#scipy.sparse.linalg.lgmres
    "scipy.sparse.linalg.lgmres")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.sparse.linalg.lgmres`](scipy.sparse.linalg.lgmres.html#scipy.sparse.linalg.lgmres
    "scipy.sparse.linalg.lgmres")'
- en: Notes
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'This function implements a Newton-Krylov solver. The basic idea is to compute
    the inverse of the Jacobian with an iterative Krylov method. These methods require
    only evaluating the Jacobian-vector products, which are conveniently approximated
    by a finite difference:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数实现了一个牛顿-克莱罗夫求解器。其基本思想是使用迭代的克莱罗夫方法计算雅可比矩阵的逆。这些方法只需要评估雅可比向量乘积，这些乘积可以方便地通过有限差分近似：
- en: \[J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega\]
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: \[J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega\]
- en: Due to the use of iterative matrix inverses, these methods can deal with large
    nonlinear problems.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用迭代矩阵逆，这些方法可以处理大型非线性问题。
- en: SciPy’s [`scipy.sparse.linalg`](../sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg") module offers a selection of Krylov solvers to choose from.
    The default here is *lgmres*, which is a variant of restarted GMRES iteration
    that reuses some of the information obtained in the previous Newton steps to invert
    Jacobians in subsequent steps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy的[`scipy.sparse.linalg`](../sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg")模块提供了一系列可供选择的克莱罗夫求解器。默认选择*lgmres*，这是一种重启的GMRES迭代的变体，它重复利用先前牛顿步骤中获取的某些信息来反转雅可比矩阵。
- en: For a review on Newton-Krylov methods, see for example [[1]](#rbbc42047c80d-1),
    and for the LGMRES sparse inverse method, see [[2]](#rbbc42047c80d-2).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关牛顿-克莱罗夫方法的评论，请参见例如[[1]](#rbbc42047c80d-1)，以及关于LGMRES稀疏逆方法，请参见[[2]](#rbbc42047c80d-2)。
- en: References
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id1)]'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: C. T. Kelley, Solving Nonlinear Equations with Newton’s Method, SIAM, pp.57-83,
    2003. [DOI:10.1137/1.9780898718898.ch3](https://doi.org/10.1137/1.9780898718898.ch3)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: C. T. Kelley，《使用牛顿法解非线性方程》，SIAM，第57-83页，2003年。[DOI:10.1137/1.9780898718898.ch3](https://doi.org/10.1137/1.9780898718898.ch3)
- en: '[[2](#id2)]'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id2)]'
- en: D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004). [DOI:10.1016/j.jcp.2003.08.010](https://doi.org/10.1016/j.jcp.2003.08.010)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: D.A. Knoll和D.E. Keyes，《J. Comp. Phys. 193，357（2004年）》。[DOI:10.1016/j.jcp.2003.08.010](https://doi.org/10.1016/j.jcp.2003.08.010)
- en: '[3]'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[3]'
- en: A.H. Baker and E.R. Jessup and T. Manteuffel, SIAM J. Matrix Anal. Appl. 26,
    962 (2005). [DOI:10.1137/S0895479803422014](https://doi.org/10.1137/S0895479803422014)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: A.H. Baker和E.R. Jessup和T. Manteuffel，《SIAM J. Matrix Anal. Appl. 26，962（2005年）》。[DOI:10.1137/S0895479803422014](https://doi.org/10.1137/S0895479803422014)
- en: Examples
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: The following functions define a system of nonlinear equations
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数定义了一个非线性方程系统
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A solution can be obtained as follows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过以下方式获得解决方案。
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
