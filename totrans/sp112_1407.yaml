- en: SciPy Core Developer Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy核心开发者指南
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/dev/core-dev/index.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/core-dev/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/dev/core-dev/index.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/core-dev/index.html)
- en: '## Decision making process'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 决策过程'
- en: SciPy has a formal governance model, documented in [SciPy Project Governance](../governance.html#governance).
    The section below documents in an informal way what happens in practice for decision
    making about code and commit rights. The formal governance model is leading, the
    below is only provided for context.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy有一个正式的治理模型，详见[SciPy项目治理](../governance.html#governance)。以下部分以非正式方式记录了关于代码和提交权限决策的实际情况。正式的治理模型为主导，以下内容仅供参考。
- en: Code
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码
- en: Any significant decisions on adding (or not adding) new features, breaking backwards
    compatibility or making other significant changes to the codebase should be made
    on the scipy-dev mailing list after a discussion (preferably with full consensus).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于添加（或不添加）新功能、破坏向后兼容性或对代码库进行其他重大更改的任何重大决策，应在scipy-dev邮件列表上进行讨论（最好达成全体一致）。
- en: Any non-trivial change (where trivial means a typo, or a one-liner maintenance
    commit) has to go in through a pull request (PR). It has to be reviewed by another
    developer. In case review doesn’t happen quickly enough and it is important that
    the PR is merged quickly, the submitter of the PR should send a message to mailing
    list saying he/she intends to merge that PR without review at time X for reason
    Y unless someone reviews it before then.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非微不足道的更改（微不足道指拼写错误或一行维护提交）都必须通过拉取请求（PR）进行。它必须由另一名开发者审查。如果审查不及时发生，并且重要的是快速合并PR，提交者应该向邮件列表发送消息，表示他/她打算在时间X之前合并该PR，理由是Y，除非有人在那之前审查它。
- en: Changes and new additions should be tested. Untested code is broken code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 更改和新添加应该进行测试。未经测试的代码是有问题的代码。
- en: Commit rights
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交权限
- en: Who gets commit rights is decided by the SciPy Steering Council; changes in
    commit rights will then be announced on the scipy-dev mailing list.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 谁拥有提交权限由SciPy指导委员会决定；提交权限的更改将在scipy-dev邮件列表上宣布。
- en: '## Deciding on new features'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 决定新增功能'
- en: 'The general decision rule to accept a proposed new feature has so far been
    conditional on:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，接受建议的新功能的一般决策规则一直是有条件的：
- en: The method is applicable in many fields and “generally agreed” to be useful,
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种方法在许多领域都适用，并且“普遍认为”是有用的，
- en: It fits the topic of the submodule, and does not require extensive support frameworks
    to operate,
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它适合于子模块的主题，且不需要大量支持框架来运行，
- en: The implementation looks sound and unlikely to need much tweaking in the future
    (e.g., limited expected maintenance burden),
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现看起来很合理，并且未来不太可能需要太多调整（例如，预期的维护负担有限），
- en: Someone wants to contribute it, and
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有人希望贡献它，以及
- en: Someone wants to review it.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有人希望审查它。
- en: The last criterion is often a sticking point for proposed features. Code cannot
    be merged until it has been thoroughly reviewed, and there is always a backlog
    of maintenance tasks that compete for reviewers’ time. Ideally, contributors should
    line up a reviewer with suitable domain expertise before beginning work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的标准通常是建议功能的一个槽点。在代码经过彻底审查之前，代码是不能合并的，而且总是有维护任务积压，竞争审阅者的时间。理想情况下，贡献者在开始工作之前应该找到一个具有适当领域专业知识的审阅者。
- en: 'Although it’s difficult to give hard rules on what “generally useful and generally
    agreed to work” means, it may help to weigh the following against each other:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然很难对“普遍有用和普遍认为有效”给出明确的规则，但可以将以下因素相互对比：
- en: Is the method used/useful in different domains in practice? How much domain-specific
    background knowledge is needed to use it properly?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法在实践中在不同领域中使用/有用吗？使用它需要多少领域特定的背景知识？
- en: Consider the code already in the module. Is what you are adding an omission?
    Does it solve a problem that you’d expect the module be able to solve? Does it
    supplement an existing feature in a significant way?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑已经在模块中的代码。你所添加的是一种遗漏吗？它解决了你期望模块能够解决的问题吗？它是否以显著方式补充了现有功能？
- en: Consider the equivalence class of similar methods / features usually expected.
    Among them, what would in principle be the minimal set so that there’s not a glaring
    omission in the offered features remaining? How much stuff would that be? Does
    including a representative one of them cover most use cases? Would it in principle
    sound reasonable to include everything from the minimal set in the module?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑通常预期的类似方法/功能的等价类。其中，原则上哪些是最小集合，以便所提供的功能中没有明显遗漏？那会是多少东西？包括代表性的一个是否涵盖了大多数用例？原则上，将最小集合中的所有内容都包括在模块中是否合理？
- en: Is what you are adding something that is well understood in the literature?
    If not, how sure are you that it will turn out well? Does the method perform well
    compared to other similar ones?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在添加的内容是否在文献中有很好的理解？如果不是，您对它能够成功的信心有多大？该方法与其他类似方法相比表现如何？
- en: Note that the twice-a-year release cycle and backward-compatibility policy makes
    correcting things later on more difficult.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，每年两次的发布周期和向后兼容性政策使得稍后纠正事物变得更加困难。
- en: The scopes of the submodules also vary, so it’s probably best to consider each
    as if it’s a separate project - “numerical evaluation of special functions” is
    relatively well-defined, but “commonly needed optimization algorithms” less so.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 子模块的范围也有所不同，因此最好将每个子模块视为单独的项目 - “特殊函数的数值评估”相对而言定义较好，但“常用的优化算法”则较少定义。
- en: Development on GitHub
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在GitHub上开发
- en: SciPy development largely takes place on GitHub; this section describes the
    expected way of working for issues, pull requests and managing the main `scipy`
    repository.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy的开发主要在GitHub上进行；本节描述了处理问题、拉取请求和管理主要`scipy`存储库的预期工作方式。
- en: '### Labels and Milestones'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '### 标签和里程碑'
- en: 'Each issue and pull request normally gets at least two labels: one for the
    topic or component (`scipy.stats`, `Documentation`, etc.), and one for the nature
    of the issue or pull request (`enhancement`, `maintenance`, `defect`, etc.). Other
    labels that may be added depending on the situation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题和拉取请求通常至少会获得两个标签：一个用于主题或组件（`scipy.stats`，`Documentation`等），另一个用于问题或拉取请求的性质（`enhancement`，`maintenance`，`defect`等）。根据情况可能添加其他标签：
- en: '`easy-fix`: for issues suitable to be tackled by new contributors.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easy-fix`：适合新贡献者解决的问题。'
- en: '`needs-work`: for pull requests that have review comments that haven’t been
    addressed.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`needs-work`：具有未解决审查评论的拉取请求。'
- en: '`needs-decision`: for issues or pull requests that need a decision.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`needs-decision`：需要决策的问题或拉取请求。'
- en: '`needs-champion`: for pull requests that were not finished by the original
    author, but are worth resurrecting.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`needs-champion`：适用于原始作者未完成但值得恢复的拉取请求。'
- en: '`backport-candidate`: bugfixes that should be considered for backporting by
    the release manager.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backport-candidate`：应由发布经理考虑将其回溯修复的bug修复。'
- en: A milestone is created for each version number for which a release is planned.
    Issues that need to be addressed and pull requests that need to be merged for
    a particular release should be set to the corresponding milestone. After a pull
    request is merged, its milestone (and that of the issue it closes) should be set
    to the next upcoming release - this makes it easy to get an overview of changes
    and to add a complete list of those to the release notes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为计划发布的每个版本号创建一个里程碑。需要为特定版本解决的问题和需要合并的拉取请求应设置为相应的里程碑。在合并拉取请求后，其里程碑（以及关闭的问题的里程碑）应设置为即将到来的下一个版本
    - 这样可以轻松查看更改的概述，并将其完整列表添加到发布说明中。
- en: Pull request review workflow
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拉取请求审查工作流程
- en: When reviewing pull requests, please make use of pull request workflow features,
    see [Using workflow features](../contributor/reviewing_prs.html#pull-request-workflow-features).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，请利用拉取请求工作流程功能，参见[使用工作流程功能](../contributor/reviewing_prs.html#pull-request-workflow-features)。
- en: Dealing with pull requests
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理拉取请求
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in [Contributing to SciPy](https://github.com/scipy/scipy/blob/main/doc/source/dev/hacking.rst).
    Also check that new features and backwards compatibility breaks were discussed
    on the scipy-dev mailing list.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当合并贡献时，提交者负责确保这些贡献符合[贡献SciPy](https://github.com/scipy/scipy/blob/main/doc/source/dev/hacking.rst)中概述的要求。还要检查新功能和向后兼容性破坏是否在scipy-dev邮件列表上进行了讨论。
- en: New code goes in via a pull request (PR).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新代码通过拉取请求（PR）进入。
- en: Merge new code with the green button. In case of merge conflicts, ask the PR
    submitter to rebase (this may require providing some git instructions).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用绿色按钮合并新代码。如果出现合并冲突，请要求PR提交者进行变基（可能需要提供一些git指令）。
- en: Backports and trivial additions to finish a PR (really trivial, like a typo
    or PEP8 fix) can be pushed directly.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回溯和微不足道的添加以完成PR（确实微不足道，比如拼写错误或PEP8修复）可以直接推送。
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于添加新功能或以某种方式复杂的PR，请至少等待一两天再合并。这样，其他人有机会在代码进入之前进行评论。
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Make sure though to retain the original author name when doing this.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挤压提交或清理您认为太混乱的PR提交消息是可以的。但在此过程中，请务必保留原作者的姓名。
- en: Make sure that the labels and milestone on a merged PR are set correctly.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保合并的PR上的标签和里程碑设置正确。
- en: 'When you want to reject a PR: if it’s very obvious you can just close it and
    explain why, if not obvious then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in SciPy and then let a second committer
    comment or close.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要拒绝一个PR时：如果非常明显，您可以直接关闭并解释原因；如果不明显，则最好首先解释为什么您认为PR不适合包含在SciPy中，然后让第二个合作者进行评论或关闭。
- en: '### Backporting'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '### 回溯'
- en: All pull requests (whether they contain enhancements, bug fixes or something
    else), should be made against main. Only bug fixes are candidates for backporting
    to a maintenance branch. The backport strategy for SciPy is to (a) only backport
    fixes that are important, and (b) to only backport when it’s reasonably sure that
    a new bugfix release on the relevant maintenance branch will be made. Typically,
    the developer who merges an important bugfix adds the `backport-candidate` label
    and pings the release manager, who decides on whether and when the backport is
    done. After the backport is completed, the `backport-candidate` label has to be
    removed again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的PR（无论是增强、错误修复还是其他内容）都应该提交到主分支。只有错误修复才有资格回溯到维护分支。SciPy的回溯策略是：（a）只回溯重要的修复；（b）只有在合理确定相关维护分支上会发布新的bug修复版本时才回溯。通常，合并重要bug修复的开发人员会添加`backport-candidate`标签并联系发布经理，后者决定是否以及何时进行回溯。回溯完成后，必须再次删除`backport-candidate`标签。
- en: A good strategy for a backport pull request is to combine several main branch
    pull requests, to reduce the burden on continuous integration tests and to reduce
    the merge commit cluttering of maintenance branch history. It is generally best
    to have a single commit for each of the main branch pull requests represented
    in the backport pull request. This way, history is clear and can be reverted in
    a straightforward manner if needed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯PR的一个好策略是将几个主分支的PR合并在一起，以减少持续集成测试的负担并减少维护分支历史记录中的合并提交混乱。通常最好为回溯PR中代表的每个主分支PR保留一个提交。这样，历史记录清晰，并且如果需要的话可以直接撤销。
- en: Release notes
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布说明
- en: 'When a PR gets merged, consider if the changes need to be mentioned in the
    release notes. What needs mentioning: new features, backwards incompatible changes,
    deprecations, and “other changes” (anything else noteworthy enough, see older
    release notes for the kinds of things worth mentioning).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当PR合并时，请考虑是否需要在发布说明中提及更改内容。需要提及的内容包括：新功能、不向后兼容的更改、弃用以及“其他更改”（任何其他值得注意的内容，请参阅较早的发布说明，了解值得提及的内容种类）。
- en: Release note entries are maintained on the wiki, (e.g. [https://github.com/scipy/scipy/wiki/Release-note-entries-for-SciPy-1.2.0](https://github.com/scipy/scipy/wiki/Release-note-entries-for-SciPy-1.2.0)).
    The release manager will gather content from there and integrate it into the html
    docs. We use this mechanism to avoid merge conflicts that would happen if every
    PR touched the same file under `doc/release/` directly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发布说明条目在wiki上维护（例如[https://github.com/scipy/scipy/wiki/Release-note-entries-for-SciPy-1.2.0](https://github.com/scipy/scipy/wiki/Release-note-entries-for-SciPy-1.2.0)）。发布经理将从那里收集内容，并将其整合到html文档中。我们使用这种机制来避免每个PR直接触及`doc/release/`下同一文件时可能发生的合并冲突。
- en: 'Changes can be monitored ([Atom feed](https://github.com/scipy/scipy/wiki.atom))
    and pulled (the wiki is a git repo: `https://github.com/scipy/scipy.wiki.git`).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更改可以通过[Atom feed](https://github.com/scipy/scipy/wiki.atom)进行监控，并进行拉取（wiki是一个git仓库：`https://github.com/scipy/scipy.wiki.git`）。
- en: Other
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '*PR status page:* When new commits get added to a pull request, GitHub doesn’t
    send out any notifications. The `needs-work` label may not be justified anymore
    though. [This page](https://pav.iki.fi/scipy-needs-work/) gives an overview of
    PRs that were updated, need review, need a decision, etc.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*PR状态页面：* 当向拉取请求添加新提交时，GitHub不会发送任何通知。然而，`needs-work`标签可能已不再适用。[此页面](https://pav.iki.fi/scipy-needs-work/)提供了更新的PR、需要审查、需要决策等概述。'
- en: '*Cross-referencing:* Cross-referencing issues and pull requests on GitHub is
    often useful. GitHub allows doing that by using `gh-xxxx` or `#xxxx` with `xxxx`
    the issue/PR number. The `gh-xxxx` format is strongly preferred, because it’s
    clear that that is a GitHub link. Older issues contain `#xxxx` which is about
    Trac (what we used pre-GitHub) tickets.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*交叉引用：* 在GitHub上交叉引用问题和拉取请求通常很有用。GitHub允许使用`gh-xxxx`或`#xxxx`来进行引用，其中`xxxx`是问题/PR编号。强烈推荐使用`gh-xxxx`格式，因为清楚表明这是一个GitHub链接。旧问题包含Trac（我们在GitHub之前使用的系统）票据的`#xxxx`。'
- en: '*PR naming convention:* Pull requests, issues and commit messages usually start
    with a three-letter abbreviation like `ENH:` or `BUG:`. This is useful to quickly
    see what the nature of the commit/PR/issue is. For the full list of abbreviations,
    see [writing the commit message](https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
    "(in NumPy v2.0.dev0)").'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*PR命名约定：* 拉取请求、问题和提交消息通常以`ENH:`或`BUG:`等三个字母缩写开头。这对于快速了解提交/PR/问题的性质非常有用。有关缩写的完整列表，请参见[编写提交消息](https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
    "(in NumPy v2.0.dev0)")。'
- en: '## Licensing'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '## 许可证'
- en: SciPy is distributed under the [modified (3-clause) BSD license](https://opensource.org/licenses/BSD-3-Clause).
    All code, documentation and other files added to SciPy by contributors is licensed
    under this license, unless another license is explicitly specified in the source
    code. Contributors keep the copyright for code they wrote and submit for inclusion
    to SciPy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy采用修改后的[BSD许可证（3条款）](https://opensource.org/licenses/BSD-3-Clause)进行分发。所有由贡献者添加到SciPy的代码、文档和其他文件均根据此许可证授权，除非源代码明确指定了另一许可证。贡献者保留他们编写并提交到SciPy的代码的版权。
- en: Other licenses that are compatible with the modified BSD license that SciPy
    uses are 2-clause BSD, MIT and PSF. Incompatible licenses are GPL, Apache and
    custom licenses that require attribution/citation or prohibit use for commercial
    purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其他与SciPy使用的修改后BSD许可证兼容的许可证包括2条款BSD、MIT和PSF。不兼容的许可证包括GPL、Apache以及要求归属/引用或禁止商业用途的自定义许可证。
- en: PRs are often submitted with content copied or derived from unlicensed code
    or code from a default license that is not compatible with SciPy’s license. For
    instance, code published on StackOverflow is covered by a CC-BY-SA license, which
    is not compatible due to the share-alike clause. These contributions cannot be
    accepted for inclusion in SciPy unless the original code author is willing to
    (re)license his/her code under the modified BSD (or compatible) license. If the
    original author agrees, add a comment saying so to the source files and forward
    the relevant communication to the scipy-dev mailing list.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: PR通常包含从未经许可的代码或来自不兼容SciPy许可证的默认许可的代码或其派生的内容。例如，在StackOverflow上发布的代码受CC-BY-SA许可证保护，由于共享条款的存在，这些贡献无法被纳入SciPy。除非原始代码的作者愿意根据修改后的BSD（或兼容的）许可证重新许可其代码，否则这些贡献将无法被接受。如果原始作者同意，请在源文件中添加一条注释以此说明，并将相关通信转发给scipy-dev邮件列表。
- en: 'Another common occurrence is for code to be translated or derived from code
    in R, Octave (both GPL-licensed) or a commercial application. Such code also cannot
    be included in SciPy. Simply implementing functionality with the same API as found
    in R/Octave/… is fine though, as long as the author doesn’t look at the original
    incompatibly-licensed source code.  ## Version numbering'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见情况是代码是从R、Octave（都是GPL许可）或商业应用程序的代码翻译或派生而来。此类代码也无法包含在SciPy中。但是，只要作者没有查看不兼容许可源代码的原始实现，通过相同API实现功能是可以的。##
    版本编号
- en: 'SciPy version numbering complies to [PEP 440](https://www.python.org/dev/peps/pep-0440).
    Released final versions, which are the only versions appearing on [PyPI](https://pypi.org/),
    are numbered `MAJOR.MINOR.MICRO` where:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy版本编号遵循[PEP 440](https://www.python.org/dev/peps/pep-0440)。发布的最终版本（这些版本是唯一出现在[PyPI](https://pypi.org/)上的版本）编号为`MAJOR.MINOR.MICRO`，其中：
- en: '`MAJOR` is an integer indicating the major version. It changes very rarely;
    a change in `MAJOR` indicates large (possibly backwards-incompatible) changes.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAJOR`是一个整数，表示主要版本。它很少更改；`MAJOR`的变化表示大（可能不兼容）的更改。'
- en: '`MINOR` is an integer indicating the minor version. Minor versions are typically
    released twice a year and can contain new features, deprecations and bug-fixes.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MINOR`是一个整数，表示次要版本。次要版本通常每年发布两次，可能包含新功能、弃用和错误修复。'
- en: '`MICRO` is an integer indicating a bug-fix version. Bug-fix versions are released
    when needed, typically one or two per minor version. They cannot contain new features
    or deprecations.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MICRO`是一个整数，表示错误修复版本。错误修复版本在需要时发布，通常每个次要版本一到两个版本。它们不能包含新功能或弃用。'
- en: Released alpha, beta and rc (release candidate) versions are numbered like final
    versions but with postfixes `a#`, `b#` and `rc#` respectively, with `#` an integer.
    Development versions are postfixed with `.dev0+<git-commit-hash>`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 发布的alpha、beta和rc（发行候选）版本编号与最终版本相同，但分别带有后缀`a#`、`b#`和`rc#`，`#`为整数。开发版本带有后缀`.dev0+<git-commit-hash>`。
- en: 'Examples of valid SciPy version strings are:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的SciPy版本字符串示例：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An installed SciPy version contains these version identifiers:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的SciPy版本包含这些版本标识符：
- en: '[PRE1]  ## Deprecations'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]## 弃用'
- en: 'There are various reasons for wanting to remove existing functionality: it’s
    buggy, the API isn’t understandable, it’s superseded by functionality with better
    performance, it needs to be moved to another SciPy submodule, etc.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的原因希望删除现有功能：它有bug，API难以理解，它被性能更好的功能所取代，它需要移动到另一个SciPy子模块等等。
- en: 'In general it’s not a good idea to remove something without warning users about
    that removal first. Therefore this is what should be done before removing something
    from the public API:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不建议在未事先警告用户的情况下删除某些内容。因此，在从公共API中删除某些内容之前，应执行以下操作：
- en: Propose to deprecate the functionality on the scipy-dev mailing list and get
    agreement that that’s OK.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建议在scipy-dev邮件列表上提议弃用该功能，并获得同意认为这样做是可以接受的。
- en: Add a `DeprecationWarning` for it, which states that the functionality was deprecated,
    and in which release. For Cython APIs, see [Deprecating public Cython APIs](../contributor/public_cython_api.html#deprecating-public-cython-api)
    for the practical steps.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此添加一个`DeprecationWarning`，指出该功能已被弃用，并指明是在哪个版本中。对于Cython API，请参阅[Deprecating
    public Cython APIs](../contributor/public_cython_api.html#deprecating-public-cython-api)获取实际步骤。
- en: Mention the deprecation in the release notes for that release.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该版本的发布说明中提及该弃用。
- en: Wait till at least 6 months after the release date of the release that introduced
    the `DeprecationWarning` before removing the functionality.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引入`DeprecationWarning`的发布日期后至少等待6个月，然后再删除该功能。
- en: Mention the removal of the functionality in the release notes.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布说明中提及该功能的移除。
- en: The 6 months waiting period in practice usually means waiting two releases.
    When introducing the warning, also ensure that those warnings are filtered out
    when running the test suite so they don’t pollute the output.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，6个月的等待期通常意味着等待两个版本。在引入警告时，还要确保在运行测试套件时过滤掉这些警告，以免污染输出。
- en: 'It’s possible that there is reason to want to ignore this deprecation policy
    for a particular deprecation; this can always be discussed on the scipy-dev mailing
    list.  ## Distributing'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有理由希望忽略某个特定弃用策略：这总是可以在scipy-dev邮件列表上讨论的。## 分发
- en: Distributing Python packages is nontrivial - especially for a package with complex
    build requirements like SciPy - and subject to change. For an up-to-date overview
    of recommended tools and techniques, see the [Python Packaging User Guide](https://packaging.python.org).
    This document discusses some of the main issues and considerations for SciPy.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分发Python包是一个非常棘手的问题 - 特别是对于像SciPy这样具有复杂构建要求的包 - 并且可能会发生变化。有关推荐工具和技术的最新概述，请参阅[Python
    Packaging User Guide](https://packaging.python.org)。本文档讨论了SciPy的一些主要问题和考虑事项。
- en: Dependencies
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖项
- en: 'Dependencies are things that a user has to install in order to use (or build/test)
    a package. They usually cause trouble, especially if they’re not optional. SciPy
    tries to keep its dependencies to a minimum; currently they are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项是用户必须安装的东西，以便使用（或构建/测试）一个包。它们通常会带来麻烦，特别是如果它们是必需的。SciPy试图将其依赖项保持在最低限度；目前它们包括：
- en: '*Unconditional run-time dependencies:*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*无条件运行时依赖：*'
- en: '[Numpy](https://numpy.org)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NumPy](https://numpy.org)'
- en: '*Conditional run-time dependencies:*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件运行时依赖：*'
- en: pytest (to run the test suite)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pytest（用于运行测试套件）
- en: '[asv](https://asv.readthedocs.org) (to run the benchmarks)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asv](https://asv.readthedocs.org)（用于运行基准测试）'
- en: '[matplotlib](https://matplotlib.org) (for some functions that can produce plots)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[matplotlib](https://matplotlib.org)（用于一些可以生成图形的函数）'
- en: '[pooch](https://www.fatiando.org/pooch/latest/) (for the scipy.datasets module)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pooch](https://www.fatiando.org/pooch/latest/)（用于scipy.datasets模块）'
- en: '[Pillow](https://pillow.readthedocs.org) (for image loading/saving)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pillow](https://pillow.readthedocs.org)（用于图像加载/保存）'
- en: '[scikits.umfpack](https://pypi.org/project/scikit-umfpack) (optionally used
    in `sparse.linalg`)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scikits.umfpack](https://pypi.org/project/scikit-umfpack)（在`sparse.linalg`中可选使用）'
- en: '[mpmath](http://mpmath.org) (for more extended tests in `special`)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[mpmath](http://mpmath.org)（用于`special`中更多的扩展测试）'
- en: pydata/sparse (compatibility support in `scipy.sparse`)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pydata/sparse（在`scipy.sparse`中的兼容性支持）
- en: '[threadpoolctl](https://github.com/joblib/threadpoolctl) (to control BLAS/LAPACK
    threading in test suite)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[threadpoolctl](https://github.com/joblib/threadpoolctl)（用于控制测试套件中的BLAS/LAPACK线程）'
- en: '[Hypothesis](https://hypothesis.readthedocs.io/en/latest/index.html) (to run
    certain unit tests)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hypothesis](https://hypothesis.readthedocs.io/en/latest/index.html)（用于运行特定的单元测试）'
- en: '*Unconditional build-time dependencies:*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*无条件的构建时依赖：*'
- en: '[Numpy](https://numpy.org)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Numpy](https://numpy.org)'
- en: A BLAS and LAPACK implementation (reference BLAS/LAPACK, ATLAS, OpenBLAS, MKL
    are all known to work)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLAS和LAPACK实现（参考BLAS/LAPACK，ATLAS，OpenBLAS，MKL都已知可用）
- en: '[Cython](https://cython.org)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cython](https://cython.org)'
- en: '[setuptools](https://github.com/pypa/setuptools)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[setuptools](https://github.com/pypa/setuptools)'
- en: '[pybind11](https://github.com/pybind/pybind11)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pybind11](https://github.com/pybind/pybind11)'
- en: '*Conditional build-time dependencies:*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*有条件的构建时依赖：*'
- en: '[wheel](https://wheel.readthedocs.io/) (`python setup.py bdist_wheel`)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[wheel](https://wheel.readthedocs.io/)（`python setup.py bdist_wheel`）'
- en: '[Sphinx](http://www.sphinx-doc.org/) (docs)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sphinx](http://www.sphinx-doc.org/)（文档）'
- en: '[PyData Sphinx theme](https://pydata-sphinx-theme.readthedocs.io/en/latest/)
    (docs)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyData Sphinx主题](https://pydata-sphinx-theme.readthedocs.io/en/latest/)（文档）'
- en: '[Sphinx-Design](https://sphinx-design.readthedocs.io) (docs)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sphinx-Design](https://sphinx-design.readthedocs.io)（文档）'
- en: '[matplotlib](https://matplotlib.org) (docs)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[matplotlib](https://matplotlib.org)（文档）'
- en: '[MyST-NB](https://myst-nb.readthedocs.io/) (docs)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MyST-NB](https://myst-nb.readthedocs.io/)（文档）'
- en: Furthermore of course one needs C, C++ and Fortran compilers to build SciPy,
    but those we don’t consider to be dependencies and are therefore not discussed
    here. For details, see [https://scipy.github.io/devdocs/dev/contributor/building.html](https://scipy.github.io/devdocs/dev/contributor/building.html).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，构建SciPy还需要C、C++和Fortran编译器，但我们不认为这些是依赖关系，因此这里不讨论它们。详情请参见[https://scipy.github.io/devdocs/dev/contributor/building.html](https://scipy.github.io/devdocs/dev/contributor/building.html)。
- en: When a package provides useful functionality and it’s proposed as a new dependency,
    consider also if it makes sense to vendor (i.e. ship a copy of it with scipy)
    the package instead. For example, [decorator](https://github.com/micheles/decorator)
    is vendored in `scipy._lib`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个软件包提供了有用的功能并且被提议作为一个新的依赖时，考虑是否有必要代理（即与scipy一起提供该软件包的副本）。例如，[decorator](https://github.com/micheles/decorator)
    在 `scipy._lib` 中被代理。
- en: The only dependency that is reported to [pip](https://pip.pypa.io/en/stable/)
    is [Numpy](https://numpy.org), see `install_requires` in SciPy’s main `setup.py`.
    The other dependencies aren’t needed for SciPy to function correctly
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一报告给[pip](https://pip.pypa.io/en/stable/)的依赖是[Numpy](https://numpy.org)，请参阅SciPy主要的`setup.py`中的`install_requires`。其他依赖项对于SciPy的正确功能并不需要。
- en: Issues with dependency handling
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 依赖处理的问题
- en: There are some issues with how Python packaging tools handle dependencies reported
    by projects. Because SciPy gets regular bug reports about this, we go in a bit
    of detail here.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Python打包工具如何处理项目报告的依赖关系存在一些问题。由于SciPy定期收到此类错误报告，我们在这里稍作详细说明。
- en: SciPy only reports its dependency on NumPy via `install_requires` if NumPy isn’t
    installed at all on a system, or when building wheels with `bdist_wheel`. SciPy
    no longer uses `setup_requires` (which in the past invoked `easy_install`); build
    dependencies are now handled only via `pyproject.toml`. `pyproject.toml` relies
    on PEP 517; `pip` has `--no-use-pep517` and `--no-build-isolation` flags that
    may ignore `pyproject.toml` or treat it differently - if users use those flags,
    they are responsible for installing the correct build dependencies themselves.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统上完全未安装 NumPy，或者在使用 `bdist_wheel` 构建 wheels 时，SciPy 仅通过 `install_requires`
    报告其对 NumPy 的依赖。SciPy 不再使用 `setup_requires`（过去调用 `easy_install`），构建依赖项现在仅通过 `pyproject.toml`
    处理。`pyproject.toml` 遵循 PEP 517；`pip` 提供了 `--no-use-pep517` 和 `--no-build-isolation`
    标志，可能会忽略或以不同方式处理 `pyproject.toml` - 如果用户使用这些标志，则需要自行安装正确的构建依赖项。
- en: '#### Version ranges for NumPy and other dependencies'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '#### NumPy 和其他依赖项的版本范围'
- en: For dependencies it’s important to set lower and upper bounds on their versions.
    For *build-time* dependencies, they are specified in `pyproject.toml` and the
    versions will *only* apply to the SciPy build itself. It’s fine to specify either
    a range or a specific version for a dependency like `wheel` or `setuptools`. For
    NumPy we have to worry about ABI compatibility too, hence we specify the version
    with `==` to the lowest supported version (because NumPy’s ABI is backward but
    not forward compatible).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖项，设置它们版本的下限和上限非常重要。对于*构建时*依赖项，它们在`pyproject.toml`中指定，并且版本仅适用于 SciPy 本身的构建。对于诸如`wheel`或`setuptools`之类的依赖项，可以指定范围或特定版本。对于
    NumPy，我们还必须考虑 ABI 兼容性，因此我们使用`==`指定到最低支持的版本（因为 NumPy 的 ABI 是向后兼容但不是向前兼容）。
- en: 'For *run-time dependencies* (currently only `numpy`), we specify the range
    of versions in `pyproject.toml` and in `install_requires` in `setup.py`. Getting
    the upper bound right is slightly tricky. If we don’t set any bound, a too-new
    version will be pulled in a few years down the line, and NumPy may have deprecated
    and removed some API that SciPy depended on by then. On the other hand if we set
    the upper bound to the newest already-released version, then as soon as a new
    NumPy version is released there will be no matching SciPy version that works with
    it. Given that NumPy and SciPy both release in a 6-monthly cadence and that features
    that get deprecated in NumPy should stay around for another two releases, we specify
    the upper bound as `<1.xx+3.0` (where `xx` is the minor version of the latest
    already-released NumPy.  ### Supported Python and NumPy versions'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*运行时依赖项*（目前仅有 `numpy`），我们在`pyproject.toml`和`setup.py`的`install_requires`中指定版本范围。设置正确的上限值略微棘手。如果我们不设置任何限制，那么几年后可能会引入一个太新的版本，并且
    NumPy 可能会在此期间弃用并删除 SciPy 依赖的某些 API。另一方面，如果我们将上限设置为最新已发布的版本，那么一旦发布新的 NumPy 版本，将不会有与之兼容的
    SciPy 版本。考虑到 NumPy 和 SciPy 都以每年两次的节奏发布，并且在 NumPy 中弃用的功能应该在未来两个版本中保留，我们将上限设置为 `<1.xx+3.0`（其中
    `xx` 是最新已发布的 NumPy 的次要版本）。### 支持的 Python 和 NumPy 版本
- en: The [Python](https://www.python.org) versions that SciPy supports are listed
    in the list of PyPI classifiers in `setup.py`, and mentioned in the release notes
    for each release. All newly released Python versions will be supported as soon
    as possible. For the general policy on dropping support for a Python or NumPy
    version, see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). The final decision on dropping support is
    always taken on the scipy-dev mailing list.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 支持的 [Python](https://www.python.org) 版本在`setup.py`的 PyPI 分类列表中列出，并且在每个发布的发行说明中提到。所有新发布的
    Python 版本将尽快得到支持。关于放弃支持 Python 或 NumPy 版本的一般政策，请参阅 [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(在 NumPy Enhancement Proposals 中)")。最终放弃支持的决定始终由 scipy-dev 邮件列表决定。
- en: 'The lowest supported [Numpy](https://numpy.org) version for a SciPy version
    is mentioned in the release notes and is encoded in `pyproject.toml`, `scipy/__init__.py`
    and the `install_requires` field of `setup.py`. Typically the latest SciPy release
    supports ~5-7 minor versions of NumPy: up to 2.5 years’ old NumPy versions, (given
    that the frequency of NumPy releases is about 2x/year at the time of writing)
    plus two versions into the future.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 版本对应的最低支持的 [NumPy](https://numpy.org) 版本在发行说明中提到，并且编码在`pyproject.toml`、`scipy/__init__.py`以及`setup.py`的`install_requires`字段中。通常，最新的
    SciPy 发布支持约 5-7 个 NumPy 的次要版本：最多支持 2.5 年前的 NumPy 版本（考虑到 NumPy 发布频率约为每年 2 次），再加上未来两个版本。
- en: Supported versions of optional dependencies and compilers is documented in [Toolchain
    Roadmap](../toolchain.html#toolchain-roadmap). Note that not all versions of optional
    dependencies that are supported are tested well or at all by SciPy’s Continuous
    Integration setup. Issues regarding this are dealt with as they come up in the
    issue tracker or mailing list.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可选依赖项和编译器支持的受支持版本在 [Toolchain Roadmap](../toolchain.html#toolchain-roadmap)
    中有文档化。请注意，并非所有受支持的可选依赖项版本都经过 SciPy 的持续集成设置的充分测试或根本未经测试。有关此问题的问题已在问题跟踪器或邮件列表中解决。
- en: Building binary installers
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建二进制安装程序
- en: Note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section is only about building SciPy binary installers to *distribute*.
    For info on building SciPy on the same machine as where it will be used, see [this
    scipy.org page](https://scipy.github.io/devdocs/dev/contributor/building.html).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本节仅关于构建 SciPy 二进制安装程序以 *分发*。有关在将来使用的同一台计算机上构建 SciPy 的信息，请参阅 [此 scipy.org 页面](https://scipy.github.io/devdocs/dev/contributor/building.html)。
- en: There are a number of things to take into consideration when building binaries
    and distributing them on PyPI or elsewhere.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建二进制文件并在 PyPI 或其他地方分发它们时，有许多需要考虑的因素。
- en: '**General**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**General**'
- en: A binary is specific for a single Python version (because different Python versions
    aren’t ABI-compatible, at least up to Python 3.4).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个二进制文件特定于单个 Python 版本（因为不同的 Python 版本在至少到 Python 3.4 之前不兼容 ABI）。
- en: Build against the lowest NumPy version that you need to support, then it will
    work for all NumPy versions with the same major version number (NumPy does maintain
    backwards ABI compatibility).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建时请针对需要支持的最低 NumPy 版本进行构建，然后它将适用于所有具有相同主版本号的 NumPy 版本（NumPy 确实保持向后 ABI 兼容性）。
- en: The easiest available toolchain for building portable SciPy binaries is our
    `cibuildwheel` infrastructure for common platforms, with details available in
    our CI infrastructure code and available via the `cibuildwheel` command on Windows,
    Linux, and MacOS, albeit with some extra external dependencies required in some
    cases
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建可移植 SciPy 二进制文件的最简单可用工具链是我们的 `cibuildwheel` 基础设施，适用于常见平台，详细信息可在我们的 CI 基础设施代码中找到，并通过
    Windows、Linux 和 MacOS 上的 `cibuildwheel` 命令使用，尽管在某些情况下可能需要一些额外的外部依赖项。
- en: '**Windows**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: For 64-bit Windows installers built with a free toolchain, use the method documented
    at [https://github.com/numpy/numpy/wiki/Mingw-static-toolchain](https://github.com/numpy/numpy/wiki/Mingw-static-toolchain).
    That method will likely be used for SciPy itself once it’s clear that the maintenance
    of that toolchain is sustainable long-term. See the [MingwPy](https://mingwpy.github.io)
    project and [this thread](https://mail.python.org/pipermail/numpy-discussion/2015-October/074056.html)
    for details.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用免费工具链构建的 64 位 Windows 安装程序，请使用文档化方法，位于 [https://github.com/numpy/numpy/wiki/Mingw-static-toolchain](https://github.com/numpy/numpy/wiki/Mingw-static-toolchain)。一旦确保该工具链的维护是可持续的长期，该方法可能会被用于
    SciPy 本身。有关详细信息，请参阅 [MingwPy](https://mingwpy.github.io) 项目和 [此线程](https://mail.python.org/pipermail/numpy-discussion/2015-October/074056.html)。
- en: The other way to produce 64-bit Windows installers is with `icc`, `ifort` plus
    `MKL` (or `MSVC` instead of `icc`). For Intel toolchain instructions see [this
    article](https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl)
    and for (partial) MSVC instructions see [this wiki page](https://github.com/numpy/numpy/wiki/Building-with-MSVC).
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上生成 64 位安装程序的另一种方法是使用 `icc`、`ifort` 和 `MKL`（或者使用 `MSVC` 替代 `icc`）。有关
    Intel 工具链的详细说明，请参阅 [本文](https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl)，而有关（部分）MSVC
    说明，请参阅 [此 wiki 页面](https://github.com/numpy/numpy/wiki/Building-with-MSVC)。
- en: Older SciPy releases contained a .exe “superpack” installer. Those contain 3
    complete builds (no SSE, SSE2, SSE3), and were built with [https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor).
    That build setup is known to not work well anymore and is no longer supported.
    It used g77 instead of gfortran, due to complex DLL distribution issues (see [gh-2829](https://github.com/scipy/scipy/issues/2829)).
    Because the toolchain is no longer supported, g77 support isn’t needed anymore
    and SciPy can now include Fortran 90/95 code.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧版 SciPy 发布包含一个 `.exe` 的“超级包”安装程序。这些包含了 3 个完整的构建版本（没有 SSE、SSE2、SSE3），并且是使用 [https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)
    构建的。这种构建设置已经众所周知不再有效并且不再受支持。它使用的是 g77 而不是 gfortran，这是由于复杂的 DLL 分发问题（参见 [gh-2829](https://github.com/scipy/scipy/issues/2829)）。由于该工具链不再受支持，不再需要
    g77 支持，现在 SciPy 可以包含 Fortran 90/95 代码。
- en: '**Linux**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: PyPI-compatible Linux wheels can be produced via the [manylinux](https://github.com/pypa/manylinux/)
    project, which is used under the hood by our `cibuildwheel` infrastructure.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过[manylinux](https://github.com/pypa/manylinux/)项目生成与 PyPI 兼容的 Linux 轮子，这在我们的
    `cibuildwheel` 基础设施中使用。
- en: 'Other Linux build-setups result in PyPI incompatible wheels, which would need
    to be distributed via custom channels, e.g. in a [Wheelhouse](https://pypi.org/project/Wheelhouse),
    see at the [wheel](https://wheel.readthedocs.io/) and [Wheelhouse](https://pypi.org/project/Wheelhouse)
    docs.  ## Making a SciPy release'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 Linux 构建设置导致 PyPI 不兼容的轮子，这些轮子需要通过自定义渠道分发，例如在[Wheelhouse](https://pypi.org/project/Wheelhouse)中查看，在[wheel](https://wheel.readthedocs.io/)和[Wheelhouse](https://pypi.org/project/Wheelhouse)文档中。##
    Making a SciPy release
- en: 'At the highest level, this is what the release manager does to release a new
    SciPy version:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在最高层次上，这是发布经理发布新的 SciPy 版本所做的事情：
- en: Propose a release schedule on the scipy-dev mailing list.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 scipy-dev 邮件列表上提出一个发布时间表。
- en: Create the maintenance branch for the release.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为发布创建维护分支。
- en: Tag the release.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给发布版本打标签。
- en: Build all release artifacts (sources, installers, docs).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建所有发布工件（源代码、安装程序、文档）。
- en: Upload the release artifacts.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传发布工件。
- en: Announce the release.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公布发布消息。
- en: Port relevant changes to release notes and build scripts to main.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相关更改移植到发布说明和构建脚本到主分支。
- en: 'In this guide we attempt to describe in detail how to perform each of the above
    steps. In addition to those steps, which have to be performed by the release manager,
    here are descriptions of release-related activities and conventions of interest:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们试图详细描述如何执行上述每个步骤。除了必须由发布经理执行的步骤外，这里还描述了与发布相关的活动和利益的约定：
- en: '[Backporting](#backporting)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[后移操作](#backporting)'
- en: '[Labels and Milestones](#labels-and-milestones)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[标签和里程碑](#labels-and-milestones)'
- en: '[Version numbering](#version-numbering)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[版本编号](#version-numbering)'
- en: '[Supported Python and NumPy versions](#supported-py-numpy-versions)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[支持的 Python 和 NumPy 版本](#supported-py-numpy-versions)'
- en: '[Deprecations](#deprecations)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[弃用信息](#deprecations)'
- en: Proposing a release schedule
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出发布时间表。
- en: 'A typical release cycle looks like:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的发布周期如下：
- en: Create the maintenance branch
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建维护分支。
- en: Release a beta version
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 beta 版本。
- en: Release a “release candidate” (RC)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布“发布候选版”（RC）。
- en: If needed, release one or more new RCs
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，发布一个或多个新的 RC。
- en: Release the final version once there are no issues with the last release candidate
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦最后一个发布候选版没有问题，发布最终版本。
- en: There’s usually at least one week between each of the above steps. Experience
    shows that a cycle takes between 4 and 8 weeks for a new minor version. Bug-fix
    versions don’t need a beta or RC, and can be done much quicker.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通常每个步骤之间至少有一周的时间。经验表明，新的次要版本需要 4 到 8 周的周期。Bug 修复版本不需要 beta 或 RC，并且可以更快完成。
- en: Ideally the final release is identical to the last RC, however there may be
    minor difference - it’s up to the release manager to judge the risk of that. Typically,
    if compiled code or complex pure Python code changes then a new RC is needed,
    while a simple bug-fix that’s backported from main doesn’t require a new RC.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，最终发布与最后一个 RC 相同，但可能会有轻微差异 - 由发布经理判断风险。通常情况下，如果编译代码或复杂的纯 Python 代码发生变化，则需要新的
    RC，而从主分支后移的简单错误修复则不需要新的 RC。
- en: To propose a schedule, send a list with estimated dates for branching and beta/rc/final
    releases to scipy-dev. In the same email, ask everyone to check if there are important
    issues/PRs that need to be included and aren’t tagged with the Milestone for the
    release or the “backport-candidate” label.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要提出时间表，请发送一个列表，包含分支、beta/rc/final 发布的预计日期给 scipy-dev。在同一封电子邮件中，请大家检查是否有重要问题/PR需要包含，但未标记为发布里程碑或“backport-candidate”标签。
- en: Creating the maintenance branch
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建维护分支。
- en: Before branching, ensure that the release notes are updated as far as possible.
    Include the output of `tools/gh_lists.py` and `tools/authors.py` in the release
    notes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支之前，请尽可能更新发布说明。在发布说明中包括 `tools/gh_lists.py` 和 `tools/authors.py` 的输出。
- en: Maintenance branches are named `maintenance/<major>.<minor>.x` (e.g. 0.19.x).
    To create one, simply push a branch with the correct name to the scipy repo. Immediately
    after, push a commit where you increment the version number on the main branch
    and add release notes for that new version. Send an email to scipy-dev to let
    people know that you’ve done this.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 维护分支命名为 `maintenance/<major>.<minor>.x`（例如 0.19.x）。要创建一个分支，只需将带有正确名称的分支推送到 scipy
    仓库。立即在主分支上推送一个增加版本号并添加该新版本发布说明的提交。发送电子邮件到 scipy-dev，让人们知道您已完成此操作。
- en: Updating the version switcher
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新版本切换器
- en: The version switcher dropdown needs to be updated with the new release information.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 需要更新版本切换器下拉菜单中的新发布信息。
- en: '`doc/source/_static/version_switcher.json`: add the new release as well as
    the new development version.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc/source/_static/version_switcher.json`：添加新发布版本以及新的开发版本。'
- en: Updating upper bounds of dependencies
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新依赖项的上限
- en: 'In main we do not set upper bounds, because we want to test new releases or
    development versions of dependencies there. In a maintenance branch however, the
    goal is to be able to create releases that stay working for years. Hence correct
    upper bounds must be set. The following places must be updated after creating
    a maintenance branch:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支中，我们不设置上限，因为我们希望在那里测试新的发布版或开发版本的依赖项。但是，在维护分支中，目标是能够创建多年有效的发布版本。因此，必须设置正确的上限。创建维护分支后，必须更新以下位置：
- en: '`pyproject.toml`: all build-time dependencies, as well as supported Python'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyproject.toml`：所有构建时的依赖项，以及支持的 Python 版本'
- en: and NumPy versions
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和 NumPy 版本
- en: '`setup.py`: supported Python and NumPy versions'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup.py`：支持的 Python 和 NumPy 版本'
- en: '`scipy/__init__.py`: for NumPy version check'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scipy/__init__.py`：用于 NumPy 版本检查'
- en: Each file has comments describing how to set the correct upper bounds.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件都有描述如何设置正确上限的注释。
- en: Tagging a release
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记发布
- en: First ensure that you have set up GPG correctly. See [https://github.com/scipy/scipy/issues/4919](https://github.com/scipy/scipy/issues/4919)
    for a discussion of signing release tags, and [https://keyring.debian.org/creating-key.html](https://keyring.debian.org/creating-key.html)
    for instructions on creating a GPG key if you do not have one. Note that on some
    platforms it may be more suitable to use `gpg2` instead of `gpg` so that passwords
    may be stored by `gpg-agent` as discussed in [https://github.com/scipy/scipy/issues/10189](https://github.com/scipy/scipy/issues/10189).
    When preparing a release remotely, it may be necessary to set `pinentry-mode loopback`
    in `~/.gnupg/gpg-agent.conf` because use of `gpg2` will otherwise proceed via
    an inaccessible graphical password prompt.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保您已正确设置 GPG。参见 [https://github.com/scipy/scipy/issues/4919](https://github.com/scipy/scipy/issues/4919)
    关于签署发布标签的讨论，以及 [https://keyring.debian.org/creating-key.html](https://keyring.debian.org/creating-key.html)
    创建 GPG 密钥的说明（如果您没有）。请注意，在某些平台上，使用 `gpg2` 而不是 `gpg` 可能更适合，以便密码可以由 `gpg-agent` 存储，如
    [https://github.com/scipy/scipy/issues/10189](https://github.com/scipy/scipy/issues/10189)
    中讨论的那样。在远程准备发布时，可能需要在 `~/.gnupg/gpg-agent.conf` 中设置 `pinentry-mode loopback`，因为否则使用
    `gpg2` 将通过无法访问的图形密码提示进行。
- en: 'To make your key more readily identifiable as you, consider sending your key
    to public key servers, with a command such as:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要使您的密钥更容易被识别为您自己，考虑发送您的密钥到公共密钥服务器，使用像以下命令一样：
- en: '[PRE2]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Check that all relevant commits are in the branch. In particular, check issues
    and PRs under the Milestone for the release ([https://github.com/scipy/scipy/milestones](https://github.com/scipy/scipy/milestones)),
    PRs labeled “backport-candidate”, and that the release notes are up-to-date and
    included in the html docs.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 检查分支中是否有所有相关的提交。特别是检查里程碑下的问题和 PR（[https://github.com/scipy/scipy/milestones](https://github.com/scipy/scipy/milestones)），标记为“backport-candidate”的
    PR，以及更新并包含在 html 文档中的发布说明。
- en: 'Then edit `meson.build` and `tools/version_utils.py` to get the correct version
    number (set `version:` in the former, and `ISRELEASED = True` in the latter) and
    commit it with a message like `REL: set version to <version-number>`. Don’t push
    this commit to the SciPy repo yet.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '然后编辑 `meson.build` 和 `tools/version_utils.py` 来获取正确的版本号（在前者中设置 `version:`，在后者中设置
    `ISRELEASED = True`），并使用像 `REL: set version to <version-number>` 这样的消息提交。但不要立即将此提交推送到
    SciPy 仓库。'
- en: Finally tag the release locally with `git tag -s <v1.x.y>` (the `-s` ensures
    the tag is signed). If `gpg2` is preferred, then `git config --global gpg.program
    gpg2` may be appropriate. Continue with building release artifacts (next section).
    Only push the release commit to the scipy repo once you have built the sdists
    and docs successfully. Then continue with building wheels. Only push the release
    tag to the repo once all wheels have been built successfully on TravisCI and Appveyor
    (if it fails, you have to move the tag otherwise - which is bad practice). Finally,
    after pushing the tag, also push a second commit which increments the version
    number and appends `.dev0` for `version:` and sets `ISRELEASED` to False again.
    This also applies with new release candidates, and for removing the `rc` affix
    when switching from release candidate to release proper.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后在本地标记发布版本使用 `git tag -s <v1.x.y>` （`-s` 确保标签已签名）。如果首选 `gpg2`，则可以适当执行 `git
    config --global gpg.program gpg2`。继续构建发布的工件（下一节）。只有在成功构建了 sdists 和文档后才将发布提交推送到
    scipy 存储库。然后继续构建 wheels。只有在 TravisCI 和 Appveyor 上所有 wheels 成功构建后才将发布标签推送到存储库（如果失败，则必须移动标签，这是不良实践）。最后，在推送标签后，还需推送第二个提交，增加版本号并为
    `version:` 追加 `.dev0`，并再次将 `ISRELEASED` 设置为 False。对于新的发布候选版本以及从发布候选版本到正式发布时移除
    `rc` 附加内容也适用。
- en: Building release artifacts
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建发布的工件
- en: 'Here is a complete list of artifacts created for a release:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发布时创建的所有工件的完整列表：
- en: sdist (`scipy-x.y.y.tar.gz`, for both PyPI and GitHub Releases)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sdist (`scipy-x.y.y.tar.gz`，用于 PyPI 和 GitHub 发布）
- en: Binary wheels for Windows, Linux and macOS
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于 Windows、Linux 和 macOS 的二进制 wheels
- en: Documentation (html)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档（html）
- en: A `README.txt` file
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `README.txt` 文件
- en: A `Changelog` file
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `Changelog` 文件
- en: 'An `sdist` is generated by running `python -m build --sdist` (note: we still
    need to move this into a CI job!), and the Changelog and README are built by running
    `python dev.py notes` (with tags, see `python dev.py notes --help`) in the repo
    root, and end up in `REPO_ROOT/release/`. Do this after you’ve created the signed
    tag locally. If this completes without issues, push the release commit (not the
    tag, see section above) to the scipy repo.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `python -m build --sdist` 生成一个 `sdist`（注意：我们仍需将其移入 CI 作业！），并通过运行 `python
    dev.py notes`（带有标签，请参阅 `python dev.py notes --help`）在存储库根目录生成 Changelog 和 README，最终在
    `REPO_ROOT/release/` 中生成。在本地创建签名标签后执行此操作。如果完成无误，请推送发布提交（不是标签，请参见上文）至 scipy 存储库。
- en: To build wheels, push a commit containing the text `[wheel build]` to the branch
    used for the current release. This triggers `cibuildwheel` builds for all needed
    Python versions and platforms. The appropriate version pins for NumPy and other
    dependencies should have been updated in `pyproject.toml` just after branching.
    If the wheel builds reveal issues that need to be fixed with backports on the
    maintenance branch, you may remove the local tags (for example `git tag -d v1.2.0rc1`)
    and restart with tagging above on the new candidate commit.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 wheels，请推送一个包含文本 `[wheel build]` 的提交到用于当前发布的分支。这将触发所有需要的 Python 版本和平台的 `cibuildwheel`
    构建。应该已在分支后立即更新了 NumPy 和其他依赖项的适当版本固定。如果 wheel 构建显示需要通过维护分支上的后向移植修复的问题，可以删除本地标签（例如
    `git tag -d v1.2.0rc1`）并重新在新的候选提交上执行上述标记。
- en: The `cibuildwheel` infrastructure runs the tests from the built wheels and if
    they pass, uploads the wheels to [https://anaconda.org/multibuild-wheels-staging/scipy](https://anaconda.org/multibuild-wheels-staging/scipy).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`cibuildwheel` 基础设施从构建的 wheels 运行测试，如果测试通过，则将 wheels 上传至 [https://anaconda.org/multibuild-wheels-staging/scipy](https://anaconda.org/multibuild-wheels-staging/scipy)。'
- en: 'From there you can download them for uploading to PyPI. This can be done in
    an automated fashion using `tools/download-wheels.py`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里可以下载它们以上传到 PyPI。可以使用 `tools/download-wheels.py` 自动完成此操作：
- en: '[PRE3]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After this, we want to regenerate the README file, in order to have the MD5
    and SHA256 checksums of the just downloaded wheels in it. Run `python dev.py notes`
    again.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们希望重新生成 README 文件，以便在其中包含刚刚下载的 wheels 的 MD5 和 SHA256 校验和。再次运行 `python dev.py
    notes`。
- en: Uploading release artifacts
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传发布的工件
- en: 'For a release there are currently five places on the web to upload things to:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发布，目前有五个网络位置可用于上传内容：
- en: PyPI (sdist, wheels)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyPI（sdist, wheels）
- en: GitHub Releases (sdist, release notes, Changelog)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 发布（sdist、发布说明、Changelog）
- en: scipy.org (an announcement of the release)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scipy.org（发布公告）
- en: docs.scipy.org (html docs)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: docs.scipy.org（html 文档）
- en: '**PyPI:**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyPI：**'
- en: 'Upload first the wheels and then the sdist:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 首先上传 wheels，然后上传 sdist：
- en: '[PRE4]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Github Releases:**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**Github 发布：**'
- en: Use GUI on [https://github.com/scipy/scipy/releases](https://github.com/scipy/scipy/releases)
    to create release and upload all release artifacts. At this stage, it is appropriate
    to push the tag and associate the new release (candidate) with this tag in the
    GUI. For example, `git push upstream v1.2.0rc1`, where `upstream` represents `scipy/scipy`.
    It is useful to check a previous release to determine exactly which artifacts
    should be included in the GUI upload process. Also, note that the release notes
    are not automatically populated into the release description on GitHub, and some
    manual reformatting to markdown can be quite helpful to match the formatting of
    previous releases on the site. We generally do not include Issue and Pull Request
    lists in these GUI descriptions.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://github.com/scipy/scipy/releases](https://github.com/scipy/scipy/releases)上使用GUI创建发布，并上传所有发布的工件。在这个阶段，推送标签并将新发布（候选版）与该标签关联是适当的。例如，`git
    push upstream v1.2.0rc1`，其中`upstream`表示`scipy/scipy`。检查之前的发布，确切确定应包括哪些工件在GUI上传过程中非常有用。还请注意，发布说明不会自动填充到GitHub上的发布描述中，手动重新格式化为Markdown以匹配网站上以前的发布格式是非常有帮助的。一般情况下，我们不在这些GUI描述中包含问题和拉取请求列表。
- en: '**scipy.org:**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**scipy.org:**'
- en: Sources for the site are in [https://github.com/scipy/scipy.org](https://github.com/scipy/scipy.org).
    Update the News section in `content/en/news.md` via a PR. This is only for proper
    releases, not release candidates.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 该站点的源码位于[https://github.com/scipy/scipy.org](https://github.com/scipy/scipy.org)。通过PR更新`content/en/news.md`中的新闻部分。这仅适用于正式发布，不包括发布候选版。
- en: '**docs.scipy.org:**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**docs.scipy.org:**'
- en: First build the scipy docs, by running `make dist` in `scipy/doc/`. Verify that
    they look OK, then upload them to the doc server with `make upload USERNAME=rgommers
    RELEASE=0.19.0`. Note that SSH access to the doc server is needed; ask @pv (server
    admin), @tylerjereddy or @rgommers (can upload) if you don’t have that.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`scipy/doc/`中运行`make dist`来构建scipy文档。确认它们看起来正常，然后使用`make upload USERNAME=rgommers
    RELEASE=0.19.0`将它们上传到文档服务器。请注意，需要SSH访问文档服务器；如果没有，请向@pv（服务器管理员）、@tylerjereddy或@rgommers（可以上传）询问。
- en: The sources for the website itself are maintained in [https://github.com/scipy/docs.scipy.org/](https://github.com/scipy/docs.scipy.org/).
    Add the new SciPy version in the table of releases in `index.rst`. Push that commit,
    then do `make upload USERNAME=yourusername`. This is only for proper releases,
    not release candidates.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站本身的源码维护在[https://github.com/scipy/docs.scipy.org/](https://github.com/scipy/docs.scipy.org/)。在`index.rst`的发布表中添加新的SciPy版本。推送该提交，然后运行`make
    upload USERNAME=yourusername`。这仅适用于正式发布，不包括发布候选版。
- en: Wrapping up
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结束
- en: 'Send an email announcing the release to the following mailing lists:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 发送邮件宣布以下邮件列表的发布：
- en: scipy-dev
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scipy-dev
- en: numpy-discussion
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy-discussion
- en: python-announce (not for beta/rc releases)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: python-announce（不包括beta/rc版本）
- en: For beta and rc versions, ask people in the email to test (run the scipy tests
    and test against their own code) and report issues on Github or scipy-dev.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于beta和rc版本，请在邮件中要求人们测试（运行scipy测试并针对其自己的代码测试），并在GitHub或scipy-dev上报告问题。
- en: After the final release is done, port relevant changes to release notes, build
    scripts, author name mapping in `tools/authors.py` and any other changes that
    were only made on the maintenance branch to main.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 完成最终发布后，将相关更改移植到发布说明、构建脚本、`tools/authors.py`中的作者名称映射以及仅在维护分支上进行的任何其他更改到主分支。
