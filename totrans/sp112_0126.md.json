["```py\nscipy.integrate.quad(func, a, b, args=(), full_output=0, epsabs=1.49e-08, epsrel=1.49e-08, limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50, limlst=50, complex_func=False)\n```", "```py\ndouble func(double x)\ndouble func(double x, void *user_data)\ndouble func(int n, double *xx)\ndouble func(int n, double *xx, void *user_data) \n```", "```py\n>>> from scipy import integrate\n>>> import numpy as np\n>>> x2 = lambda x: x**2\n>>> integrate.quad(x2, 0, 4)\n(21.333333333333332, 2.3684757858670003e-13)\n>>> print(4**3 / 3.)  # analytical result\n21.3333333333 \n```", "```py\n>>> invexp = lambda x: np.exp(-x)\n>>> integrate.quad(invexp, 0, np.inf)\n(1.0, 5.842605999138044e-11) \n```", "```py\n>>> f = lambda x, a: a*x\n>>> y, err = integrate.quad(f, 0, 1, args=(1,))\n>>> y\n0.5\n>>> y, err = integrate.quad(f, 0, 1, args=(3,))\n>>> y\n1.5 \n```", "```py\ntestlib.c =>\n    double func(int n, double args[n]){\n        return args[0]*args[0] + args[1]*args[1];}\ncompile to library testlib.* \n```", "```py\nfrom scipy import integrate\nimport ctypes\nlib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\nlib.func.restype = ctypes.c_double\nlib.func.argtypes = (ctypes.c_int,ctypes.c_double)\nintegrate.quad(lib.func,0,1,(1))\n#(1.3333333333333333, 1.4802973661668752e-14)\nprint((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result\n# 1.3333333333333333 \n```", "```py\n>>> y = lambda x: 1 if x<=0 else 0\n>>> integrate.quad(y, -1, 1)\n(1.0, 1.1102230246251565e-14)\n>>> integrate.quad(y, -1, 100)\n(1.0000000002199108, 1.0189464580163188e-08)\n>>> integrate.quad(y, -1, 10000)\n(0.0, 0.0) \n```"]