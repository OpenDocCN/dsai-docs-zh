- en: scipy.optimize.brentq
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.brentq
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brentq.html#scipy.optimize.brentq](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brentq.html#scipy.optimize.brentq)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brentq.html#scipy.optimize.brentq](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brentq.html#scipy.optimize.brentq)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find a root of a function in a bracketing interval using Brent’s method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Brent方法在一个包围区间内找到函数的根。
- en: Uses the classic Brent’s method to find a root of the function *f* on the sign
    changing interval [a , b]. Generally considered the best of the rootfinding routines
    here. It is a safe version of the secant method that uses inverse quadratic extrapolation.
    Brent’s method combines root bracketing, interval bisection, and inverse quadratic
    interpolation. It is sometimes known as the van Wijngaarden-Dekker-Brent method.
    Brent (1973) claims convergence is guaranteed for functions computable within
    [a,b].
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经典的Brent方法在符号变化的区间[a, b]上找到函数*f*的根。通常被认为是这里根查找例程中最好的。它是使用反向二次插值的割线法的安全版本。Brent方法结合了根的定位、区间二分和反向二次插值。有时也被称为van
    Wijngaarden-Dekker-Brent方法。Brent（1973）声称对[a, b]内可计算函数保证收敛。
- en: '[[Brent1973]](#rcf302ff4bf60-brent1973) provides the classic description of
    the algorithm. Another description can be found in a recent edition of Numerical
    Recipes, including [[PressEtal1992]](#rcf302ff4bf60-pressetal1992). A third description
    is at [http://mathworld.wolfram.com/BrentsMethod.html](http://mathworld.wolfram.com/BrentsMethod.html).
    It should be easy to understand the algorithm just by reading our code. Our code
    diverges a bit from standard presentations: we choose a different formula for
    the extrapolation step.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Brent1973]](#rcf302ff4bf60-brent1973)提供了该算法的经典描述。另一个描述可以在最近一版的《Numerical
    Recipes》中找到，包括[[PressEtal1992]](#rcf302ff4bf60-pressetal1992)。第三种描述位于[http://mathworld.wolfram.com/BrentsMethod.html](http://mathworld.wolfram.com/BrentsMethod.html)。通过阅读我们的代码，应该很容易理解该算法。我们的代码与标准表述有些不同：我们选择了不同的外推步骤公式。'
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**f**function'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**f**function'
- en: Python function returning a number. The function \(f\) must be continuous, and
    \(f(a)\) and \(f(b)\) must have opposite signs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数返回一个数字。函数\(f\)必须是连续的，并且\(f(a)\)和\(f(b)\)必须有相反的符号。
- en: '**a**scalar'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**scalar'
- en: One end of the bracketing interval \([a, b]\).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 包围区间\([a, b]\)的一个端点。
- en: '**b**scalar'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**b**scalar'
- en: The other end of the bracketing interval \([a, b]\).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 包围区间\([a, b]\)的另一个端点。
- en: '**xtol**number, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**xtol**number, optional'
- en: The computed root `x0` will satisfy `np.allclose(x, x0, atol=xtol, rtol=rtol)`,
    where `x` is the exact root. The parameter must be positive. For nice functions,
    Brent’s method will often satisfy the above condition with `xtol/2` and `rtol/2`.
    [[Brent1973]](#rcf302ff4bf60-brent1973)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的根`x0`将满足`np.allclose(x, x0, atol=xtol, rtol=rtol)`，其中*x*是精确的根。该参数必须是正的。对于良好的函数，Brent方法通常能满足`xtol/2`和`rtol/2`的上述条件。[[Brent1973]](#rcf302ff4bf60-brent1973)
- en: '**rtol**number, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol**number, optional'
- en: The computed root `x0` will satisfy `np.allclose(x, x0, atol=xtol, rtol=rtol)`,
    where `x` is the exact root. The parameter cannot be smaller than its default
    value of `4*np.finfo(float).eps`. For nice functions, Brent’s method will often
    satisfy the above condition with `xtol/2` and `rtol/2`. [[Brent1973]](#rcf302ff4bf60-brent1973)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的根`x0`将满足`np.allclose(x, x0, atol=xtol, rtol=rtol)`，其中*x*是精确的根。该参数不能小于其默认值`4*np.finfo(float).eps`。对于良好的函数，Brent方法通常能满足`xtol/2`和`rtol/2`的上述条件。[[Brent1973]](#rcf302ff4bf60-brent1973)
- en: '**maxiter**int, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxiter**int, optional'
- en: If convergence is not achieved in *maxiter* iterations, an error is raised.
    Must be >= 0.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在*maxiter*次迭代中未实现收敛，则会引发错误。必须 >= 0。
- en: '**args**tuple, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**tuple, optional'
- en: Containing extra arguments for the function *f*. *f* is called by `apply(f,
    (x)+args)`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包含函数*f*的额外参数。*f*通过`apply(f, (x)+args)`调用。
- en: '**full_output**bool, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**full_output**bool, optional'
- en: If *full_output* is False, the root is returned. If *full_output* is True, the
    return value is `(x, r)`, where *x* is the root, and *r* is a [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*full_output*为False，则返回根。如果*full_output*为True，则返回值是`(x, r)`，其中*x*是根，*r*是一个[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")对象。
- en: '**disp**bool, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**bool, optional'
- en: If True, raise RuntimeError if the algorithm didn’t converge. Otherwise, the
    convergence status is recorded in any [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") return object.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则在算法未收敛时引发RuntimeError。否则，收敛状态记录在任何[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")返回对象中。
- en: 'Returns:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**root**float'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**root**float'
- en: Root of *f* between *a* and *b*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*f*在*a*和*b*之间的根。'
- en: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") (present if `full_output = True`)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")（如果`full_output = True`）'
- en: Object containing information about the convergence. In particular, `r.converged`
    is True if the routine converged.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 包含有关收敛情况的信息对象。特别地，如果例程收敛，则`r.converged`为True。
- en: Notes
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: '*f* must be continuous. f(a) and f(b) must have opposite signs.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*f*必须连续。f(a)和f(b)必须具有相反的符号。'
- en: 'Related functions fall into several classes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相关函数可分为多个类别：
- en: multivariate local optimizers
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 多元局部优化器
- en: '[`fmin`](scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin"),
    [`fmin_powell`](scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell "scipy.optimize.fmin_powell"),
    [`fmin_cg`](scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg "scipy.optimize.fmin_cg"),
    [`fmin_bfgs`](scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs "scipy.optimize.fmin_bfgs"),
    [`fmin_ncg`](scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg "scipy.optimize.fmin_ncg")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fmin`](scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin"),
    [`fmin_powell`](scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell "scipy.optimize.fmin_powell"),
    [`fmin_cg`](scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg "scipy.optimize.fmin_cg"),
    [`fmin_bfgs`](scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs "scipy.optimize.fmin_bfgs"),
    [`fmin_ncg`](scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg "scipy.optimize.fmin_ncg")'
- en: nonlinear least squares minimizer
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 非线性最小二乘最小化器
- en: '[`leastsq`](scipy.optimize.leastsq.html#scipy.optimize.leastsq "scipy.optimize.leastsq")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`leastsq`](scipy.optimize.leastsq.html#scipy.optimize.leastsq "scipy.optimize.leastsq")'
- en: constrained multivariate optimizers
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 受约束的多元优化器
- en: '[`fmin_l_bfgs_b`](scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b"), [`fmin_tnc`](scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc"), [`fmin_cobyla`](scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fmin_l_bfgs_b`](scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b"), [`fmin_tnc`](scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc"), [`fmin_cobyla`](scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")'
- en: global optimizers
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 全局优化器
- en: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping"), [`brute`](scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute"), [`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping"), [`brute`](scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute"), [`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")'
- en: local scalar minimizers
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本地标量最小化器
- en: '[`fminbound`](scipy.optimize.fminbound.html#scipy.optimize.fminbound "scipy.optimize.fminbound"),
    [`brent`](scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent"),
    [`golden`](scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden"),
    [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket "scipy.optimize.bracket")'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fminbound`](scipy.optimize.fminbound.html#scipy.optimize.fminbound "scipy.optimize.fminbound"),
    [`brent`](scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent"),
    [`golden`](scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden"),
    [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket "scipy.optimize.bracket")'
- en: N-D root-finding
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: N维根查找
- en: '[`fsolve`](scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fsolve`](scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")'
- en: 1-D root-finding
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 1维根查找
- en: '[`brenth`](scipy.optimize.brenth.html#scipy.optimize.brenth "scipy.optimize.brenth"),
    [`ridder`](scipy.optimize.ridder.html#scipy.optimize.ridder "scipy.optimize.ridder"),
    [`bisect`](scipy.optimize.bisect.html#scipy.optimize.bisect "scipy.optimize.bisect"),
    [`newton`](scipy.optimize.newton.html#scipy.optimize.newton "scipy.optimize.newton")'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`brenth`](scipy.optimize.brenth.html#scipy.optimize.brenth "scipy.optimize.brenth"),
    [`ridder`](scipy.optimize.ridder.html#scipy.optimize.ridder "scipy.optimize.ridder"),
    [`bisect`](scipy.optimize.bisect.html#scipy.optimize.bisect "scipy.optimize.bisect"),
    [`newton`](scipy.optimize.newton.html#scipy.optimize.newton "scipy.optimize.newton")'
- en: scalar fixed-point finder
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 标量固定点查找器
- en: '[`fixed_point`](scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fixed_point`](scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")'
- en: References
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[Brent1973] ([1](#id1),[2](#id3),[3](#id4))'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[Brent1973] ([1](#id1),[2](#id3),[3](#id4))'
- en: 'Brent, R. P., *Algorithms for Minimization Without Derivatives*. Englewood
    Cliffs, NJ: Prentice-Hall, 1973\. Ch. 3-4.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Brent, R. P., *无导数最小化算法*. 美国新泽西州恩格尔伍德克利夫斯：Prentice-Hall出版社，1973年。第3-4章。
- en: '[[PressEtal1992](#id2)]'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[[PressEtal1992](#id2)]'
- en: 'Press, W. H.; Flannery, B. P.; Teukolsky, S. A.; and Vetterling, W. T. *Numerical
    Recipes in FORTRAN: The Art of Scientific Computing*, 2nd ed. Cambridge, England:
    Cambridge University Press, pp. 352-355, 1992. Section 9.3: “Van Wijngaarden-Dekker-Brent
    Method.”'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'Press, W. H.; Flannery, B. P.; Teukolsky, S. A.; 和 Vetterling, W. T. *Numerical
    Recipes in FORTRAN: 科学计算艺术*, 第2版。英国剑桥：剑桥大学出版社，1992年。第9.3节：“Van Wijngaarden-Dekker-Brent
    方法”。'
- en: Examples
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
