["```py\nclass sympy.functions.special.delta_functions.DiracDelta(arg, k=0)\n```", "```py\n>>> from sympy import DiracDelta, diff, pi\n>>> from sympy.abc import x, y \n```", "```py\n>>> DiracDelta(x)\nDiracDelta(x)\n>>> DiracDelta(1)\n0\n>>> DiracDelta(-1)\n0\n>>> DiracDelta(pi)\n0\n>>> DiracDelta(x - 4).subs(x, 4)\nDiracDelta(0)\n>>> diff(DiracDelta(x))\nDiracDelta(x, 1)\n>>> diff(DiracDelta(x - 1), x, 2)\nDiracDelta(x - 1, 2)\n>>> diff(DiracDelta(x**2 - 1), x, 2)\n2*(2*x**2*DiracDelta(x**2 - 1, 2) + DiracDelta(x**2 - 1, 1))\n>>> DiracDelta(3*x).is_simple(x)\nTrue\n>>> DiracDelta(x**2).is_simple(x)\nFalse\n>>> DiracDelta((x**2 - 1)*y).expand(diracdelta=True, wrt=x)\nDiracDelta(x - 1)/(2*Abs(y)) + DiracDelta(x + 1)/(2*Abs(y)) \n```", "```py\nclassmethod eval(arg, k=0)\n```", "```py\n>>> from sympy import DiracDelta, S\n>>> from sympy.abc import x \n```", "```py\n>>> DiracDelta(x)\nDiracDelta(x) \n```", "```py\n>>> DiracDelta(-x, 1)\n-DiracDelta(x, 1) \n```", "```py\n>>> DiracDelta(1)\n0 \n```", "```py\n>>> DiracDelta(5, 1)\n0 \n```", "```py\n>>> DiracDelta(0)\nDiracDelta(0) \n```", "```py\n>>> DiracDelta(-1)\n0 \n```", "```py\n>>> DiracDelta(S.NaN)\nnan \n```", "```py\n>>> DiracDelta(x - 100).subs(x, 5)\n0 \n```", "```py\n>>> DiracDelta(x - 100).subs(x, 100)\nDiracDelta(0) \n```", "```py\nfdiff(argindex=1)\n```", "```py\n>>> from sympy import DiracDelta, diff\n>>> from sympy.abc import x \n```", "```py\n>>> DiracDelta(x).fdiff()\nDiracDelta(x, 1) \n```", "```py\n>>> DiracDelta(x, 1).fdiff()\nDiracDelta(x, 2) \n```", "```py\n>>> DiracDelta(x**2 - 1).fdiff()\nDiracDelta(x**2 - 1, 1) \n```", "```py\n>>> diff(DiracDelta(x, 1)).fdiff()\nDiracDelta(x, 3) \n```", "```py\nis_simple(x)\n```", "```py\n>>> from sympy import DiracDelta, cos\n>>> from sympy.abc import x, y \n```", "```py\n>>> DiracDelta(x*y).is_simple(x)\nTrue\n>>> DiracDelta(x*y).is_simple(y)\nTrue \n```", "```py\n>>> DiracDelta(x**2 + x - 2).is_simple(x)\nFalse \n```", "```py\n>>> DiracDelta(cos(x)).is_simple(x)\nFalse \n```", "```py\nclass sympy.functions.special.delta_functions.Heaviside(arg, H0=1 / 2)\n```", "```py\n>>> from sympy import Heaviside, nan\n>>> from sympy.abc import x\n>>> Heaviside(9)\n1\n>>> Heaviside(-9)\n0\n>>> Heaviside(0)\n1/2\n>>> Heaviside(0, nan)\nnan\n>>> (Heaviside(x) + 1).replace(Heaviside(x), Heaviside(x, 1))\nHeaviside(x, 1) + 1 \n```", "```py\nclassmethod eval(arg, H0=1 / 2)\n```", "```py\n>>> from sympy import Heaviside, S\n>>> from sympy.abc import x \n```", "```py\n>>> Heaviside(x)\nHeaviside(x) \n```", "```py\n>>> Heaviside(19)\n1 \n```", "```py\n>>> Heaviside(0)\n1/2 \n```", "```py\n>>> Heaviside(0, 1)\n1 \n```", "```py\n>>> Heaviside(-5)\n0 \n```", "```py\n>>> Heaviside(S.NaN)\nnan \n```", "```py\n>>> Heaviside(x - 100).subs(x, 5)\n0 \n```", "```py\n>>> Heaviside(x - 100).subs(x, 105)\n1 \n```", "```py\nfdiff(argindex=1)\n```", "```py\n>>> from sympy import Heaviside, diff\n>>> from sympy.abc import x \n```", "```py\n>>> Heaviside(x).fdiff()\nDiracDelta(x) \n```", "```py\n>>> Heaviside(x**2 - 1).fdiff()\nDiracDelta(x**2 - 1) \n```", "```py\n>>> diff(Heaviside(x)).fdiff()\nDiracDelta(x, 1) \n```", "```py\nproperty pargs\n```", "```py\nclass sympy.functions.special.singularity_functions.SingularityFunction(variable, offset, exponent)\n```", "```py\n>>> from sympy import SingularityFunction, diff, Piecewise, DiracDelta, Heaviside, Symbol\n>>> from sympy.abc import x, a, n\n>>> SingularityFunction(x, a, n)\nSingularityFunction(x, a, n)\n>>> y = Symbol('y', positive=True)\n>>> n = Symbol('n', nonnegative=True)\n>>> SingularityFunction(y, -10, n)\n(y + 10)**n\n>>> y = Symbol('y', negative=True)\n>>> SingularityFunction(y, 10, n)\n0\n>>> SingularityFunction(x, 4, -1).subs(x, 4)\noo\n>>> SingularityFunction(x, 10, -2).subs(x, 10)\noo\n>>> SingularityFunction(4, 1, 5)\n243\n>>> diff(SingularityFunction(x, 1, 5) + SingularityFunction(x, 1, 4), x)\n4*SingularityFunction(x, 1, 3) + 5*SingularityFunction(x, 1, 4)\n>>> diff(SingularityFunction(x, 4, 0), x, 2)\nSingularityFunction(x, 4, -2)\n>>> SingularityFunction(x, 4, 5).rewrite(Piecewise)\nPiecewise(((x - 4)**5, x >= 4), (0, True))\n>>> expr = SingularityFunction(x, a, n)\n>>> y = Symbol('y', positive=True)\n>>> n = Symbol('n', nonnegative=True)\n>>> expr.subs({x: y, a: -10, n: n})\n(y + 10)**n \n```", "```py\n>>> expr = SingularityFunction(x, 4, 5) + SingularityFunction(x, -3, -1) - SingularityFunction(x, 0, -2)\n>>> expr.rewrite(Heaviside)\n(x - 4)**5*Heaviside(x - 4, 1) + DiracDelta(x + 3) - DiracDelta(x, 1)\n>>> expr.rewrite(DiracDelta)\n(x - 4)**5*Heaviside(x - 4, 1) + DiracDelta(x + 3) - DiracDelta(x, 1)\n>>> expr.rewrite('HeavisideDiracDelta')\n(x - 4)**5*Heaviside(x - 4, 1) + DiracDelta(x + 3) - DiracDelta(x, 1) \n```", "```py\nclassmethod eval(variable, offset, exponent)\n```", "```py\n>>> from sympy import SingularityFunction, Symbol, nan\n>>> from sympy.abc import x, a, n\n>>> SingularityFunction(x, a, n)\nSingularityFunction(x, a, n)\n>>> SingularityFunction(5, 3, 2)\n4\n>>> SingularityFunction(x, a, nan)\nnan\n>>> SingularityFunction(x, 3, 0).subs(x, 3)\n1\n>>> SingularityFunction(4, 1, 5)\n243\n>>> x = Symbol('x', positive = True)\n>>> a = Symbol('a', negative = True)\n>>> n = Symbol('n', nonnegative = True)\n>>> SingularityFunction(x, a, n)\n(-a + x)**n\n>>> x = Symbol('x', negative = True)\n>>> a = Symbol('a', positive = True)\n>>> SingularityFunction(x, a, n)\n0 \n```", "```py\nfdiff(argindex=1)\n```", "```py\nclass sympy.functions.special.gamma_functions.gamma(arg)\n```", "```py\n>>> from sympy import S, I, pi, gamma\n>>> from sympy.abc import x \n```", "```py\n>>> gamma(1)\n1\n>>> gamma(4)\n6\n>>> gamma(S(3)/2)\nsqrt(pi)/2 \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(gamma(x))\ngamma(conjugate(x)) \n```", "```py\n>>> from sympy import diff\n>>> diff(gamma(x), x)\ngamma(x)*polygamma(0, x) \n```", "```py\n>>> from sympy import series\n>>> series(gamma(x), x, 0, 3)\n1/x - EulerGamma + x*(EulerGamma**2/2 + pi**2/12) + x**2*(-EulerGamma*pi**2/12 - zeta(3)/3 - EulerGamma**3/6) + O(x**3) \n```", "```py\n>>> gamma(pi).evalf(40)\n2.288037795340032417959588909060233922890\n>>> gamma(1+I).evalf(20)\n0.49801566811835604271 - 0.15494982830181068512*I \n```", "```py\nclass sympy.functions.special.gamma_functions.loggamma(z)\n```", "```py\n>>> from sympy import loggamma\n>>> loggamma(-2)\noo\n>>> loggamma(0)\noo\n>>> loggamma(1)\n0\n>>> loggamma(2)\n0\n>>> loggamma(3)\nlog(2) \n```", "```py\n>>> from sympy import Symbol\n>>> n = Symbol(\"n\", integer=True, positive=True)\n>>> loggamma(n)\nlog(gamma(n))\n>>> loggamma(-n)\noo \n```", "```py\n>>> from sympy import S\n>>> loggamma(S(5)/2)\nlog(3*sqrt(pi)/4)\n>>> loggamma(n/2)\nlog(2**(1 - n)*sqrt(pi)*gamma(n)/gamma(n/2 + 1/2)) \n```", "```py\n>>> from sympy import expand_func\n>>> L = loggamma(S(16)/3)\n>>> expand_func(L).doit()\n-5*log(3) + loggamma(1/3) + log(4) + log(7) + log(10) + log(13)\n>>> L = loggamma(S(19)/4)\n>>> expand_func(L).doit()\n-4*log(4) + loggamma(3/4) + log(3) + log(7) + log(11) + log(15)\n>>> L = loggamma(S(23)/7)\n>>> expand_func(L).doit()\n-3*log(7) + log(2) + loggamma(2/7) + log(9) + log(16) \n```", "```py\n>>> from sympy import oo\n>>> loggamma(oo)\noo\n>>> loggamma(-oo)\nzoo \n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import conjugate\n>>> conjugate(loggamma(x))\nloggamma(conjugate(x)) \n```", "```py\n>>> from sympy import diff\n>>> diff(loggamma(x), x)\npolygamma(0, x) \n```", "```py\n>>> from sympy import series\n>>> series(loggamma(x), x, 0, 4).cancel()\n-log(x) - EulerGamma*x + pi**2*x**2/12 - x**3*zeta(3)/3 + O(x**4) \n```", "```py\n>>> from sympy import I\n>>> loggamma(5).evalf(30)\n3.17805383034794561964694160130\n>>> loggamma(I).evalf(20)\n-0.65092319930185633889 - 1.8724366472624298171*I \n```", "```py\nclass sympy.functions.special.gamma_functions.polygamma(n, z)\n```", "```py\n>>> from sympy import S, polygamma\n>>> polygamma(0, 1)\n-EulerGamma\n>>> polygamma(0, 1/S(2))\n-2*log(2) - EulerGamma\n>>> polygamma(0, 1/S(3))\n-log(3) - sqrt(3)*pi/6 - EulerGamma - log(sqrt(3))\n>>> polygamma(0, 1/S(4))\n-pi/2 - log(4) - log(2) - EulerGamma\n>>> polygamma(0, 2)\n1 - EulerGamma\n>>> polygamma(0, 23)\n19093197/5173168 - EulerGamma \n```", "```py\n>>> from sympy import oo, I\n>>> polygamma(0, oo)\noo\n>>> polygamma(0, -oo)\noo\n>>> polygamma(0, I*oo)\noo\n>>> polygamma(0, -I*oo)\noo \n```", "```py\n>>> from sympy import Symbol, diff\n>>> x = Symbol(\"x\")\n>>> diff(polygamma(0, x), x)\npolygamma(1, x)\n>>> diff(polygamma(0, x), x, 2)\npolygamma(2, x)\n>>> diff(polygamma(0, x), x, 3)\npolygamma(3, x)\n>>> diff(polygamma(1, x), x)\npolygamma(2, x)\n>>> diff(polygamma(1, x), x, 2)\npolygamma(3, x)\n>>> diff(polygamma(2, x), x)\npolygamma(3, x)\n>>> diff(polygamma(2, x), x, 2)\npolygamma(4, x) \n```", "```py\n>>> n = Symbol(\"n\")\n>>> diff(polygamma(n, x), x)\npolygamma(n + 1, x)\n>>> diff(polygamma(n, x), x, 2)\npolygamma(n + 2, x) \n```", "```py\n>>> from sympy import harmonic\n>>> polygamma(0, x).rewrite(harmonic)\nharmonic(x - 1) - EulerGamma\n>>> polygamma(2, x).rewrite(harmonic)\n2*harmonic(x - 1, 3) - 2*zeta(3)\n>>> ni = Symbol(\"n\", integer=True)\n>>> polygamma(ni, x).rewrite(harmonic)\n(-1)**(n + 1)*(-harmonic(x - 1, n + 1) + zeta(n + 1))*factorial(n) \n```", "```py\nclass sympy.functions.special.gamma_functions.digamma(z)\n```", "```py\n>>> from sympy import digamma\n>>> digamma(0)\nzoo\n>>> from sympy import Symbol\n>>> z = Symbol('z')\n>>> digamma(z)\npolygamma(0, z) \n```", "```py\n>>> digamma(0, evaluate=False)\ndigamma(0)\n>>> digamma(z, evaluate=False)\ndigamma(z) \n```", "```py\nclass sympy.functions.special.gamma_functions.trigamma(z)\n```", "```py\n>>> from sympy import trigamma\n>>> trigamma(0)\nzoo\n>>> from sympy import Symbol\n>>> z = Symbol('z')\n>>> trigamma(z)\npolygamma(1, z) \n```", "```py\n>>> trigamma(0, evaluate=False)\ntrigamma(0)\n>>> trigamma(z, evaluate=False)\ntrigamma(z) \n```", "```py\nclass sympy.functions.special.gamma_functions.uppergamma(a, z)\n```", "```py\n>>> from sympy import uppergamma, S\n>>> from sympy.abc import s, x\n>>> uppergamma(s, x)\nuppergamma(s, x)\n>>> uppergamma(3, x)\n2*(x**2/2 + x + 1)*exp(-x)\n>>> uppergamma(-S(1)/2, x)\n-2*sqrt(pi)*erfc(sqrt(x)) + 2*exp(-x)/sqrt(x)\n>>> uppergamma(-2, x)\nexpint(3, x)/x**2 \n```", "```py\nclass sympy.functions.special.gamma_functions.lowergamma(a, x)\n```", "```py\n>>> from sympy import lowergamma, S\n>>> from sympy.abc import s, x\n>>> lowergamma(s, x)\nlowergamma(s, x)\n>>> lowergamma(3, x)\n-2*(x**2/2 + x + 1)*exp(-x) + 2\n>>> lowergamma(-S(1)/2, x)\n-2*sqrt(pi)*erf(sqrt(x)) - 2*exp(-x)/sqrt(x) \n```", "```py\nclass sympy.functions.special.gamma_functions.multigamma(x, p)\n```", "```py\n>>> from sympy import S, multigamma\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> p = Symbol('p', positive=True, integer=True) \n```", "```py\n>>> multigamma(x, p)\npi**(p*(p - 1)/4)*Product(gamma(-_k/2 + x + 1/2), (_k, 1, p)) \n```", "```py\n>>> multigamma(1, 1)\n1\n>>> multigamma(4, 1)\n6\n>>> multigamma(S(3)/2, 1)\nsqrt(pi)/2 \n```", "```py\n>>> multigamma(x, 1)\ngamma(x) \n```", "```py\n>>> multigamma(x, 2)\nsqrt(pi)*gamma(x)*gamma(x - 1/2) \n```", "```py\n>>> multigamma(x, 3)\npi**(3/2)*gamma(x)*gamma(x - 1)*gamma(x - 1/2) \n```", "```py\nclass sympy.functions.special.beta_functions.beta(x, y=None)\n```", "```py\n>>> from sympy import I, pi\n>>> from sympy.abc import x, y \n```", "```py\n>>> from sympy import beta, conjugate\n>>> conjugate(beta(x, y))\nbeta(conjugate(x), conjugate(y)) \n```", "```py\n>>> from sympy import beta, diff\n>>> diff(beta(x, y), x)\n(polygamma(0, x) - polygamma(0, x + y))*beta(x, y) \n```", "```py\n>>> diff(beta(x, y), y)\n(polygamma(0, y) - polygamma(0, x + y))*beta(x, y) \n```", "```py\n>>> diff(beta(x), x)\n2*(polygamma(0, x) - polygamma(0, 2*x))*beta(x, x) \n```", "```py\n>>> from sympy import beta\n>>> beta(pi).evalf(40)\n0.02671848900111377452242355235388489324562 \n```", "```py\n>>> beta(1 + I).evalf(20)\n-0.2112723729365330143 - 0.7655283165378005676*I \n```", "```py\nclass sympy.functions.special.error_functions.erf(arg)\n```", "```py\n>>> from sympy import I, oo, erf\n>>> from sympy.abc import z \n```", "```py\n>>> erf(0)\n0\n>>> erf(oo)\n1\n>>> erf(-oo)\n-1\n>>> erf(I*oo)\noo*I\n>>> erf(-I*oo)\n-oo*I \n```", "```py\n>>> erf(-z)\n-erf(z) \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(erf(z))\nerf(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(erf(z), z)\n2*exp(-z**2)/sqrt(pi) \n```", "```py\n>>> erf(4).evalf(30)\n0.999999984582742099719981147840 \n```", "```py\n>>> erf(-4*I).evalf(30)\n-1296959.73071763923152794095062*I \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.special.error_functions.erfc(arg)\n```", "```py\n>>> from sympy import I, oo, erfc\n>>> from sympy.abc import z \n```", "```py\n>>> erfc(0)\n1\n>>> erfc(oo)\n0\n>>> erfc(-oo)\n2\n>>> erfc(I*oo)\n-oo*I\n>>> erfc(-I*oo)\noo*I \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(erfc(z))\nerfc(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(erfc(z), z)\n-2*exp(-z**2)/sqrt(pi) \n```", "```py\n>>> erfc(-z)\n2 - erfc(z) \n```", "```py\n>>> erfc(4).evalf(30)\n0.0000000154172579002800188521596734869 \n```", "```py\n>>> erfc(4*I).evalf(30)\n1.0 - 1296959.73071763923152794095062*I \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.special.error_functions.erfi(z)\n```", "```py\n>>> from sympy import I, oo, erfi\n>>> from sympy.abc import z \n```", "```py\n>>> erfi(0)\n0\n>>> erfi(oo)\noo\n>>> erfi(-oo)\n-oo\n>>> erfi(I*oo)\nI\n>>> erfi(-I*oo)\n-I \n```", "```py\n>>> erfi(-z)\n-erfi(z) \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(erfi(z))\nerfi(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(erfi(z), z)\n2*exp(z**2)/sqrt(pi) \n```", "```py\n>>> erfi(2).evalf(30)\n18.5648024145755525987042919132 \n```", "```py\n>>> erfi(-2*I).evalf(30)\n-0.995322265018952734162069256367*I \n```", "```py\nclass sympy.functions.special.error_functions.erf2(x, y)\n```", "```py\n>>> from sympy import oo, erf2\n>>> from sympy.abc import x, y \n```", "```py\n>>> erf2(0, 0)\n0\n>>> erf2(x, x)\n0\n>>> erf2(x, oo)\n1 - erf(x)\n>>> erf2(x, -oo)\n-erf(x) - 1\n>>> erf2(oo, y)\nerf(y) - 1\n>>> erf2(-oo, y)\nerf(y) + 1 \n```", "```py\n>>> erf2(-x, -y)\n-erf2(x, y) \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(erf2(x, y))\nerf2(conjugate(x), conjugate(y)) \n```", "```py\n>>> from sympy import diff\n>>> diff(erf2(x, y), x)\n-2*exp(-x**2)/sqrt(pi)\n>>> diff(erf2(x, y), y)\n2*exp(-y**2)/sqrt(pi) \n```", "```py\nclass sympy.functions.special.error_functions.erfinv(z)\n```", "```py\n>>> from sympy import erfinv\n>>> from sympy.abc import x \n```", "```py\n>>> erfinv(0)\n0\n>>> erfinv(1)\noo \n```", "```py\n>>> from sympy import diff\n>>> diff(erfinv(x), x)\nsqrt(pi)*exp(erfinv(x)**2)/2 \n```", "```py\n>>> erfinv(0.2).evalf(30)\n0.179143454621291692285822705344 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.special.error_functions.erfcinv(z)\n```", "```py\n>>> from sympy import erfcinv\n>>> from sympy.abc import x \n```", "```py\n>>> erfcinv(1)\n0\n>>> erfcinv(0)\noo \n```", "```py\n>>> from sympy import diff\n>>> diff(erfcinv(x), x)\n-sqrt(pi)*exp(erfcinv(x)**2)/2 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.special.error_functions.erf2inv(x, y)\n```", "```py\n>>> from sympy import erf2inv, oo\n>>> from sympy.abc import x, y \n```", "```py\n>>> erf2inv(0, 0)\n0\n>>> erf2inv(1, 0)\n1\n>>> erf2inv(0, 1)\noo\n>>> erf2inv(0, y)\nerfinv(y)\n>>> erf2inv(oo, y)\nerfcinv(-y) \n```", "```py\n>>> from sympy import diff\n>>> diff(erf2inv(x, y), x)\nexp(-x**2 + erf2inv(x, y)**2)\n>>> diff(erf2inv(x, y), y)\nsqrt(pi)*exp(erf2inv(x, y)**2)/2 \n```", "```py\nclass sympy.functions.special.error_functions.FresnelIntegral(z)\n```", "```py\nclass sympy.functions.special.error_functions.fresnels(z)\n```", "```py\n>>> from sympy import I, oo, fresnels\n>>> from sympy.abc import z \n```", "```py\n>>> fresnels(0)\n0\n>>> fresnels(oo)\n1/2\n>>> fresnels(-oo)\n-1/2\n>>> fresnels(I*oo)\n-I/2\n>>> fresnels(-I*oo)\nI/2 \n```", "```py\n>>> fresnels(-z)\n-fresnels(z)\n>>> fresnels(I*z)\n-I*fresnels(z) \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(fresnels(z))\nfresnels(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(fresnels(z), z)\nsin(pi*z**2/2) \n```", "```py\n>>> from sympy import integrate, pi, sin, expand_func\n>>> integrate(sin(pi*z**2/2), z)\n3*fresnels(z)*gamma(3/4)/(4*gamma(7/4))\n>>> expand_func(integrate(sin(pi*z**2/2), z))\nfresnels(z) \n```", "```py\n>>> fresnels(2).evalf(30)\n0.343415678363698242195300815958 \n```", "```py\n>>> fresnels(-2*I).evalf(30)\n0.343415678363698242195300815958*I \n```", "```py\nclass sympy.functions.special.error_functions.fresnelc(z)\n```", "```py\n>>> from sympy import I, oo, fresnelc\n>>> from sympy.abc import z \n```", "```py\n>>> fresnelc(0)\n0\n>>> fresnelc(oo)\n1/2\n>>> fresnelc(-oo)\n-1/2\n>>> fresnelc(I*oo)\nI/2\n>>> fresnelc(-I*oo)\n-I/2 \n```", "```py\n>>> fresnelc(-z)\n-fresnelc(z)\n>>> fresnelc(I*z)\nI*fresnelc(z) \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(fresnelc(z))\nfresnelc(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(fresnelc(z), z)\ncos(pi*z**2/2) \n```", "```py\n>>> from sympy import integrate, pi, cos, expand_func\n>>> integrate(cos(pi*z**2/2), z)\nfresnelc(z)*gamma(1/4)/(4*gamma(5/4))\n>>> expand_func(integrate(cos(pi*z**2/2), z))\nfresnelc(z) \n```", "```py\n>>> fresnelc(2).evalf(30)\n0.488253406075340754500223503357 \n```", "```py\n>>> fresnelc(-2*I).evalf(30)\n-0.488253406075340754500223503357*I \n```", "```py\nclass sympy.functions.special.error_functions.Ei(z)\n```", "```py\n>>> from sympy import Ei, polar_lift, exp_polar, I, pi\n>>> from sympy.abc import x \n```", "```py\n>>> Ei(-1)\nEi(-1) \n```", "```py\n>>> Ei(-1).n(chop=True)\n-0.219383934395520 \n```", "```py\n>>> Ei(polar_lift(-1)).n(chop=True)\n-0.21938393439552 + 3.14159265358979*I \n```", "```py\n>>> Ei(x*exp_polar(2*I*pi))\nEi(x) + 2*I*pi \n```", "```py\n>>> Ei(x).diff(x)\nexp(x)/x \n```", "```py\n>>> from sympy import expint, Shi\n>>> Ei(x).rewrite(expint)\n-expint(1, x*exp_polar(I*pi)) - I*pi\n>>> Ei(x).rewrite(Shi)\nChi(x) + Shi(x) \n```", "```py\nclass sympy.functions.special.error_functions.expint(nu, z)\n```", "```py\n>>> from sympy import expint, S\n>>> from sympy.abc import nu, z \n```", "```py\n>>> expint(nu, z).diff(z)\n-expint(nu - 1, z) \n```", "```py\n>>> expint(nu, z).diff(nu)\n-z**(nu - 1)*meijerg(((), (1, 1)), ((0, 0, 1 - nu), ()), z) \n```", "```py\n>>> expint(0, z)\nexp(-z)/z\n>>> expint(-1, z)\nexp(-z)/z + exp(-z)/z**2 \n```", "```py\n>>> expint(S(1)/2, z)\nsqrt(pi)*erfc(sqrt(z))/sqrt(z) \n```", "```py\n>>> from sympy import expand_func\n>>> expand_func(expint(5, z))\nz**4*expint(1, z)/24 + (-z**3 + z**2 - 2*z + 6)*exp(-z)/24 \n```", "```py\n>>> from sympy import uppergamma\n>>> expint(nu, z).rewrite(uppergamma)\nz**(nu - 1)*uppergamma(1 - nu, z) \n```", "```py\n>>> from sympy import exp_polar, pi, I\n>>> expint(4, z*exp_polar(2*pi*I))\nI*pi*z**3/3 + expint(4, z)\n>>> expint(nu, z*exp_polar(2*pi*I))\nz**(nu - 1)*(exp(2*I*pi*nu) - 1)*gamma(1 - nu) + expint(nu, z) \n```", "```py\nsympy.functions.special.error_functions.E1(z)\n```", "```py\n>>> from sympy import E1\n>>> E1(0)\nexpint(1, 0) \n```", "```py\n>>> E1(5)\nexpint(1, 5) \n```", "```py\nclass sympy.functions.special.error_functions.li(z)\n```", "```py\n>>> from sympy import I, oo, li\n>>> from sympy.abc import z \n```", "```py\n>>> li(0)\n0\n>>> li(1)\n-oo\n>>> li(oo)\noo \n```", "```py\n>>> from sympy import diff\n>>> diff(li(z), z)\n1/log(z) \n```", "```py\n>>> integrate(li(z),z)\nz*li(z) - Ei(2*log(z)) \n```", "```py\n>>> from sympy import Ei\n>>> li(z).rewrite(Ei)\nEi(log(z))\n>>> diff(li(z).rewrite(Ei), z)\n1/log(z) \n```", "```py\n>>> li(2).evalf(30)\n1.04516378011749278484458888919 \n```", "```py\n>>> li(2*I).evalf(30)\n1.0652795784357498247001125598 + 3.08346052231061726610939702133*I \n```", "```py\n>>> from mpmath import findroot\n>>> findroot(li, 2)\n1.45136923488338 \n```", "```py\n>>> from sympy import Si, Ci, Shi, Chi\n>>> li(z).rewrite(Si)\n-log(I*log(z)) - log(1/log(z))/2 + log(log(z))/2 + Ci(I*log(z)) + Shi(log(z))\n>>> li(z).rewrite(Ci)\n-log(I*log(z)) - log(1/log(z))/2 + log(log(z))/2 + Ci(I*log(z)) + Shi(log(z))\n>>> li(z).rewrite(Shi)\n-log(1/log(z))/2 + log(log(z))/2 + Chi(log(z)) - Shi(log(z))\n>>> li(z).rewrite(Chi)\n-log(1/log(z))/2 + log(log(z))/2 + Chi(log(z)) - Shi(log(z)) \n```", "```py\nclass sympy.functions.special.error_functions.Li(z)\n```", "```py\n>>> from sympy import Li\n>>> from sympy.abc import z \n```", "```py\n>>> Li(2)\n0 \n```", "```py\n>>> from sympy import diff\n>>> diff(Li(z), z)\n1/log(z) \n```", "```py\n>>> from sympy import li\n>>> Li(z).rewrite(li)\nli(z) - li(2) \n```", "```py\n>>> Li(2).evalf(30)\n0 \n```", "```py\n>>> Li(4).evalf(30)\n1.92242131492155809316615998938 \n```", "```py\nclass sympy.functions.special.error_functions.Si(z)\n```", "```py\n>>> from sympy import Si\n>>> from sympy.abc import z \n```", "```py\n>>> Si(z).diff(z)\nsin(z)/z \n```", "```py\n>>> from sympy import exp_polar, I, pi\n>>> Si(z*exp_polar(2*I*pi))\nSi(z) \n```", "```py\n>>> Si(I*z)\nI*Shi(z)\n>>> Si(-z)\n-Si(z) \n```", "```py\n>>> from sympy import expint\n>>> Si(z).rewrite(expint)\n-I*(-expint(1, z*exp_polar(-I*pi/2))/2 +\n expint(1, z*exp_polar(I*pi/2))/2) + pi/2 \n```", "```py\n>>> from sympy import sinc\n>>> Si(z).rewrite(sinc)\nIntegral(sinc(_t), (_t, 0, z)) \n```", "```py\nclass sympy.functions.special.error_functions.Ci(z)\n```", "```py\n>>> from sympy import Ci\n>>> from sympy.abc import z \n```", "```py\n>>> Ci(z).diff(z)\ncos(z)/z \n```", "```py\n>>> from sympy import exp_polar, I, pi\n>>> Ci(z*exp_polar(2*I*pi))\nCi(z) + 2*I*pi \n```", "```py\n>>> from sympy import polar_lift\n>>> Ci(polar_lift(I)*z)\nChi(z) + I*pi/2\n>>> Ci(polar_lift(-1)*z)\nCi(z) + I*pi \n```", "```py\n>>> from sympy import expint\n>>> Ci(z).rewrite(expint)\n-expint(1, z*exp_polar(-I*pi/2))/2 - expint(1, z*exp_polar(I*pi/2))/2 \n```", "```py\nclass sympy.functions.special.error_functions.Shi(z)\n```", "```py\n>>> from sympy import Shi\n>>> from sympy.abc import z \n```", "```py\n>>> Shi(z).diff(z)\nsinh(z)/z \n```", "```py\n>>> from sympy import exp_polar, I, pi\n>>> Shi(z*exp_polar(2*I*pi))\nShi(z) \n```", "```py\n>>> Shi(I*z)\nI*Si(z)\n>>> Shi(-z)\n-Shi(z) \n```", "```py\n>>> from sympy import expint\n>>> Shi(z).rewrite(expint)\nexpint(1, z)/2 - expint(1, z*exp_polar(I*pi))/2 - I*pi/2 \n```", "```py\nclass sympy.functions.special.error_functions.Chi(z)\n```", "```py\n>>> from sympy import Chi\n>>> from sympy.abc import z \n```", "```py\n>>> Chi(z).diff(z)\ncosh(z)/z \n```", "```py\n>>> from sympy import exp_polar, I, pi\n>>> Chi(z*exp_polar(2*I*pi))\nChi(z) + 2*I*pi \n```", "```py\n>>> from sympy import polar_lift\n>>> Chi(polar_lift(I)*z)\nCi(z) + I*pi/2\n>>> Chi(polar_lift(-1)*z)\nChi(z) + I*pi \n```", "```py\n>>> from sympy import expint\n>>> Chi(z).rewrite(expint)\n-expint(1, z)/2 - expint(1, z*exp_polar(I*pi))/2 - I*pi/2 \n```", "```py\nclass sympy.functions.special.bessel.BesselBase(nu, z)\n```", "```py\nproperty argument\n```", "```py\nproperty order\n```", "```py\nclass sympy.functions.special.bessel.besselj(nu, z)\n```", "```py\n>>> from sympy import besselj, jn\n>>> from sympy.abc import z, n\n>>> b = besselj(n, z) \n```", "```py\n>>> b.diff(z)\nbesselj(n - 1, z)/2 - besselj(n + 1, z)/2 \n```", "```py\n>>> b.rewrite(jn)\nsqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi) \n```", "```py\n>>> b.order\nn\n>>> b.argument\nz \n```", "```py\nclass sympy.functions.special.bessel.bessely(nu, z)\n```", "```py\n>>> from sympy import bessely, yn\n>>> from sympy.abc import z, n\n>>> b = bessely(n, z)\n>>> b.diff(z)\nbessely(n - 1, z)/2 - bessely(n + 1, z)/2\n>>> b.rewrite(yn)\nsqrt(2)*sqrt(z)*yn(n - 1/2, z)/sqrt(pi) \n```", "```py\nclass sympy.functions.special.bessel.besseli(nu, z)\n```", "```py\n>>> from sympy import besseli\n>>> from sympy.abc import z, n\n>>> besseli(n, z).diff(z)\nbesseli(n - 1, z)/2 + besseli(n + 1, z)/2 \n```", "```py\nclass sympy.functions.special.bessel.besselk(nu, z)\n```", "```py\n>>> from sympy import besselk\n>>> from sympy.abc import z, n\n>>> besselk(n, z).diff(z)\n-besselk(n - 1, z)/2 - besselk(n + 1, z)/2 \n```", "```py\nclass sympy.functions.special.bessel.hankel1(nu, z)\n```", "```py\n>>> from sympy import hankel1\n>>> from sympy.abc import z, n\n>>> hankel1(n, z).diff(z)\nhankel1(n - 1, z)/2 - hankel1(n + 1, z)/2 \n```", "```py\nclass sympy.functions.special.bessel.hankel2(nu, z)\n```", "```py\n>>> from sympy import hankel2\n>>> from sympy.abc import z, n\n>>> hankel2(n, z).diff(z)\nhankel2(n - 1, z)/2 - hankel2(n + 1, z)/2 \n```", "```py\nclass sympy.functions.special.bessel.jn(nu, z)\n```", "```py\n>>> from sympy import Symbol, jn, sin, cos, expand_func, besselj, bessely\n>>> z = Symbol(\"z\")\n>>> nu = Symbol(\"nu\", integer=True)\n>>> print(expand_func(jn(0, z)))\nsin(z)/z\n>>> expand_func(jn(1, z)) == sin(z)/z**2 - cos(z)/z\nTrue\n>>> expand_func(jn(3, z))\n(-6/z**2 + 15/z**4)*sin(z) + (1/z - 15/z**3)*cos(z)\n>>> jn(nu, z).rewrite(besselj)\nsqrt(2)*sqrt(pi)*sqrt(1/z)*besselj(nu + 1/2, z)/2\n>>> jn(nu, z).rewrite(bessely)\n(-1)**nu*sqrt(2)*sqrt(pi)*sqrt(1/z)*bessely(-nu - 1/2, z)/2\n>>> jn(2, 5.2+0.3j).evalf(20)\n0.099419756723640344491 - 0.054525080242173562897*I \n```", "```py\nclass sympy.functions.special.bessel.yn(nu, z)\n```", "```py\n>>> from sympy import Symbol, yn, sin, cos, expand_func, besselj, bessely\n>>> z = Symbol(\"z\")\n>>> nu = Symbol(\"nu\", integer=True)\n>>> print(expand_func(yn(0, z)))\n-cos(z)/z\n>>> expand_func(yn(1, z)) == -cos(z)/z**2-sin(z)/z\nTrue\n>>> yn(nu, z).rewrite(besselj)\n(-1)**(nu + 1)*sqrt(2)*sqrt(pi)*sqrt(1/z)*besselj(-nu - 1/2, z)/2\n>>> yn(nu, z).rewrite(bessely)\nsqrt(2)*sqrt(pi)*sqrt(1/z)*bessely(nu + 1/2, z)/2\n>>> yn(2, 5.2+0.3j).evalf(20)\n0.18525034196069722536 + 0.014895573969924817587*I \n```", "```py\nsympy.functions.special.bessel.jn_zeros(n, k, method='sympy', dps=15)\n```", "```py\n>>> from sympy import jn_zeros\n>>> jn_zeros(2, 4, dps=5)\n[5.7635, 9.095, 12.323, 15.515] \n```", "```py\nclass sympy.functions.special.bessel.marcumq(m, a, b)\n```", "```py\n>>> from sympy import marcumq\n>>> from sympy.abc import m, a, b\n>>> marcumq(m, a, b)\nmarcumq(m, a, b) \n```", "```py\n>>> marcumq(m, 0, b)\nuppergamma(m, b**2/2)/gamma(m)\n>>> marcumq(0, 0, 0)\n0\n>>> marcumq(0, a, 0)\n1 - exp(-a**2/2)\n>>> marcumq(1, a, a)\n1/2 + exp(-a**2)*besseli(0, a**2)/2\n>>> marcumq(2, a, a)\n1/2 + exp(-a**2)*besseli(0, a**2)/2 + exp(-a**2)*besseli(1, a**2) \n```", "```py\n>>> from sympy import diff\n>>> diff(marcumq(m, a, b), a)\na*(-marcumq(m, a, b) + marcumq(m + 1, a, b))\n>>> diff(marcumq(m, a, b), b)\n-a**(1 - m)*b**m*exp(-a**2/2 - b**2/2)*besseli(m - 1, a*b) \n```", "```py\nclass sympy.functions.special.bessel.AiryBase(*args)\n```", "```py\nclass sympy.functions.special.bessel.airyai(arg)\n```", "```py\n>>> from sympy import airyai\n>>> from sympy.abc import z \n```", "```py\n>>> airyai(z)\nairyai(z) \n```", "```py\n>>> airyai(0)\n3**(1/3)/(3*gamma(2/3))\n>>> from sympy import oo\n>>> airyai(oo)\n0\n>>> airyai(-oo)\n0 \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(airyai(z))\nairyai(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(airyai(z), z)\nairyaiprime(z)\n>>> diff(airyai(z), z, 2)\nz*airyai(z) \n```", "```py\n>>> from sympy import series\n>>> series(airyai(z), z, 0, 3)\n3**(5/6)*gamma(1/3)/(6*pi) - 3**(1/6)*z*gamma(2/3)/(2*pi) + O(z**3) \n```", "```py\n>>> airyai(-2).evalf(50)\n0.22740742820168557599192443603787379946077222541710 \n```", "```py\n>>> from sympy import hyper\n>>> airyai(z).rewrite(hyper)\n-3**(2/3)*z*hyper((), (4/3,), z**3/9)/(3*gamma(1/3)) + 3**(1/3)*hyper((), (2/3,), z**3/9)/(3*gamma(2/3)) \n```", "```py\nclass sympy.functions.special.bessel.airybi(arg)\n```", "```py\n>>> from sympy import airybi\n>>> from sympy.abc import z \n```", "```py\n>>> airybi(z)\nairybi(z) \n```", "```py\n>>> airybi(0)\n3**(5/6)/(3*gamma(2/3))\n>>> from sympy import oo\n>>> airybi(oo)\noo\n>>> airybi(-oo)\n0 \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(airybi(z))\nairybi(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(airybi(z), z)\nairybiprime(z)\n>>> diff(airybi(z), z, 2)\nz*airybi(z) \n```", "```py\n>>> from sympy import series\n>>> series(airybi(z), z, 0, 3)\n3**(1/3)*gamma(1/3)/(2*pi) + 3**(2/3)*z*gamma(2/3)/(2*pi) + O(z**3) \n```", "```py\n>>> airybi(-2).evalf(50)\n-0.41230258795639848808323405461146104203453483447240 \n```", "```py\n>>> from sympy import hyper\n>>> airybi(z).rewrite(hyper)\n3**(1/6)*z*hyper((), (4/3,), z**3/9)/gamma(1/3) + 3**(5/6)*hyper((), (2/3,), z**3/9)/(3*gamma(2/3)) \n```", "```py\nclass sympy.functions.special.bessel.airyaiprime(arg)\n```", "```py\n>>> from sympy import airyaiprime\n>>> from sympy.abc import z \n```", "```py\n>>> airyaiprime(z)\nairyaiprime(z) \n```", "```py\n>>> airyaiprime(0)\n-3**(2/3)/(3*gamma(1/3))\n>>> from sympy import oo\n>>> airyaiprime(oo)\n0 \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(airyaiprime(z))\nairyaiprime(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(airyaiprime(z), z)\nz*airyai(z)\n>>> diff(airyaiprime(z), z, 2)\nz*airyaiprime(z) + airyai(z) \n```", "```py\n>>> from sympy import series\n>>> series(airyaiprime(z), z, 0, 3)\n-3**(2/3)/(3*gamma(1/3)) + 3**(1/3)*z**2/(6*gamma(2/3)) + O(z**3) \n```", "```py\n>>> airyaiprime(-2).evalf(50)\n0.61825902074169104140626429133247528291577794512415 \n```", "```py\n>>> from sympy import hyper\n>>> airyaiprime(z).rewrite(hyper)\n3**(1/3)*z**2*hyper((), (5/3,), z**3/9)/(6*gamma(2/3)) - 3**(2/3)*hyper((), (1/3,), z**3/9)/(3*gamma(1/3)) \n```", "```py\nclass sympy.functions.special.bessel.airybiprime(arg)\n```", "```py\n>>> from sympy import airybiprime\n>>> from sympy.abc import z \n```", "```py\n>>> airybiprime(z)\nairybiprime(z) \n```", "```py\n>>> airybiprime(0)\n3**(1/6)/gamma(1/3)\n>>> from sympy import oo\n>>> airybiprime(oo)\noo\n>>> airybiprime(-oo)\n0 \n```", "```py\n>>> from sympy import conjugate\n>>> conjugate(airybiprime(z))\nairybiprime(conjugate(z)) \n```", "```py\n>>> from sympy import diff\n>>> diff(airybiprime(z), z)\nz*airybi(z)\n>>> diff(airybiprime(z), z, 2)\nz*airybiprime(z) + airybi(z) \n```", "```py\n>>> from sympy import series\n>>> series(airybiprime(z), z, 0, 3)\n3**(1/6)/gamma(1/3) + 3**(5/6)*z**2/(6*gamma(2/3)) + O(z**3) \n```", "```py\n>>> airybiprime(-2).evalf(50)\n0.27879516692116952268509756941098324140300059345163 \n```", "```py\n>>> from sympy import hyper\n>>> airybiprime(z).rewrite(hyper)\n3**(5/6)*z**2*hyper((), (5/3,), z**3/9)/(6*gamma(2/3)) + 3**(1/6)*hyper((), (1/3,), z**3/9)/gamma(1/3) \n```", "```py\nsympy.functions.special.bsplines.bspline_basis(d, knots, n, x)\n```", "```py\n>>> from sympy import bspline_basis\n>>> from sympy.abc import x\n>>> d = 0\n>>> knots = tuple(range(5))\n>>> bspline_basis(d, knots, 0, x)\nPiecewise((1, (x >= 0) & (x <= 1)), (0, True)) \n```", "```py\n>>> bspline_basis(3, tuple(range(5)), 0, x)\nPiecewise((x**3/6, (x >= 0) & (x <= 1)),\n (-x**3/2 + 2*x**2 - 2*x + 2/3,\n (x >= 1) & (x <= 2)),\n (x**3/2 - 4*x**2 + 10*x - 22/3,\n (x >= 2) & (x <= 3)),\n (-x**3/6 + 2*x**2 - 8*x + 32/3,\n (x >= 3) & (x <= 4)),\n (0, True)) \n```", "```py\n>>> d = 1\n>>> knots = (0, 0, 2, 3, 4)\n>>> bspline_basis(d, knots, 0, x)\nPiecewise((1 - x/2, (x >= 0) & (x <= 2)), (0, True)) \n```", "```py\n>>> from sympy import lambdify\n>>> d = 3\n>>> knots = tuple(range(10))\n>>> b0 = bspline_basis(d, knots, 0, x)\n>>> f = lambdify(x, b0)\n>>> y = f(0.5) \n```", "```py\nsympy.functions.special.bsplines.bspline_basis_set(d, knots, x)\n```", "```py\n>>> from sympy import bspline_basis_set\n>>> from sympy.abc import x\n>>> d = 2\n>>> knots = range(5)\n>>> splines = bspline_basis_set(d, knots, x)\n>>> splines\n[Piecewise((x**2/2, (x >= 0) & (x <= 1)),\n (-x**2 + 3*x - 3/2, (x >= 1) & (x <= 2)),\n (x**2/2 - 3*x + 9/2, (x >= 2) & (x <= 3)),\n (0, True)),\nPiecewise((x**2/2 - x + 1/2, (x >= 1) & (x <= 2)),\n (-x**2 + 5*x - 11/2, (x >= 2) & (x <= 3)),\n (x**2/2 - 4*x + 8, (x >= 3) & (x <= 4)),\n (0, True))] \n```", "```py\nsympy.functions.special.bsplines.interpolating_spline(d, x, X, Y)\n```", "```py\n>>> from sympy import interpolating_spline\n>>> from sympy.abc import x\n>>> interpolating_spline(1, x, [1, 2, 4, 7], [3, 6, 5, 7])\nPiecewise((3*x, (x >= 1) & (x <= 2)),\n (7 - x/2, (x >= 2) & (x <= 4)),\n (2*x/3 + 7/3, (x >= 4) & (x <= 7)))\n>>> interpolating_spline(3, x, [-2, 0, 1, 3, 4], [4, 2, 1, 1, 3])\nPiecewise((7*x**3/117 + 7*x**2/117 - 131*x/117 + 2, (x >= -2) & (x <= 1)),\n (10*x**3/117 - 2*x**2/117 - 122*x/117 + 77/39, (x >= 1) & (x <= 4))) \n```", "```py\nclass sympy.functions.special.zeta_functions.zeta(s, a=None)\n```", "```py\n>>> from sympy import zeta\n>>> from sympy.abc import s\n>>> zeta(s, 1)\nzeta(s)\n>>> zeta(s)\nzeta(s) \n```", "```py\n>>> from sympy import dirichlet_eta\n>>> zeta(s).rewrite(dirichlet_eta)\ndirichlet_eta(s)/(1 - 2**(1 - s)) \n```", "```py\n>>> zeta(2)\npi**2/6\n>>> zeta(4)\npi**4/90\n>>> zeta(0)\n-1/2\n>>> zeta(-1)\n-1/12\n>>> zeta(-4)\n0 \n```", "```py\n>>> zeta(3).n()\n1.20205690315959 \n```", "```py\n>>> from sympy.abc import a\n>>> zeta(s, a).diff(a)\n-s*zeta(s + 1, a) \n```", "```py\n>>> zeta(s, a).diff(s)\nDerivative(zeta(s, a), s) \n```", "```py\n>>> from sympy import lerchphi\n>>> zeta(s, a).rewrite(lerchphi)\nlerchphi(1, s, a) \n```", "```py\nclass sympy.functions.special.zeta_functions.dirichlet_eta(s, a=None)\n```", "```py\n>>> from sympy import dirichlet_eta, zeta\n>>> from sympy.abc import s\n>>> dirichlet_eta(s).rewrite(zeta)\nPiecewise((log(2), Eq(s, 1)), ((1 - 2**(1 - s))*zeta(s), True)) \n```", "```py\nclass sympy.functions.special.zeta_functions.polylog(s, z)\n```", "```py\n>>> from sympy import polylog\n>>> from sympy.abc import s\n>>> polylog(s, 0)\n0\n>>> polylog(s, 1)\nzeta(s)\n>>> polylog(s, -1)\n-dirichlet_eta(s) \n```", "```py\n>>> from sympy import expand_func\n>>> from sympy.abc import z\n>>> expand_func(polylog(1, z))\n-log(1 - z)\n>>> expand_func(polylog(0, z))\nz/(1 - z) \n```", "```py\n>>> polylog(s, z).diff(z)\npolylog(s - 1, z)/z \n```", "```py\n>>> from sympy import lerchphi\n>>> polylog(s, z).rewrite(lerchphi)\nz*lerchphi(z, s, 1) \n```", "```py\nclass sympy.functions.special.zeta_functions.lerchphi(*args)\n```", "```py\n>>> from sympy import lerchphi, expand_func\n>>> from sympy.abc import z, s, a\n>>> expand_func(lerchphi(1, s, a))\nzeta(s, a) \n```", "```py\n>>> expand_func(lerchphi(-1, s, a))\nzeta(s, a/2)/2**s - zeta(s, a/2 + 1/2)/2**s \n```", "```py\n>>> expand_func(lerchphi(z, s, 1))\npolylog(s, z)/z \n```", "```py\n>>> from sympy import S\n>>> expand_func(lerchphi(z, s, S(1)/2))\n2**(s - 1)*(polylog(s, sqrt(z))/sqrt(z) -\n polylog(s, sqrt(z)*exp_polar(I*pi))/sqrt(z))\n>>> expand_func(lerchphi(z, s, S(3)/2))\n-2**s/z + 2**(s - 1)*(polylog(s, sqrt(z))/sqrt(z) -\n polylog(s, sqrt(z)*exp_polar(I*pi))/sqrt(z))/z \n```", "```py\n>>> lerchphi(z, s, a).diff(z)\n(-a*lerchphi(z, s, a) + lerchphi(z, s - 1, a))/z\n>>> lerchphi(z, s, a).diff(a)\n-s*lerchphi(z, s + 1, a) \n```", "```py\nclass sympy.functions.special.zeta_functions.stieltjes(n, a=None)\n```", "```py\n>>> from sympy import stieltjes\n>>> from sympy.abc import n, m\n>>> stieltjes(n)\nstieltjes(n) \n```", "```py\n>>> stieltjes(0)\nEulerGamma\n>>> stieltjes(0, 1)\nEulerGamma \n```", "```py\n>>> stieltjes(n, m)\nstieltjes(n, m) \n```", "```py\n>>> stieltjes(-1)\nzoo \n```", "```py\nclass sympy.functions.special.hyper.hyper(ap, bq, z)\n```", "```py\n>>> from sympy import hyper\n>>> from sympy.abc import x, n, a\n>>> h = hyper((1, 2, 3), [3, 4], x); h\nhyper((1, 2), (4,), x)\n>>> hyper((3, 1, 2), [3, 4], x, evaluate=False)  # don't remove duplicates\nhyper((1, 2, 3), (3, 4), x) \n```", "```py\n>>> from sympy import pprint\n>>> pprint(h, use_unicode=False)\n _\n |_  /1, 2 |  \\\n |   |     | x|\n2  1 \\  4  |  / \n```", "```py\n>>> hyper((1, ), [], x)\nhyper((1,), (), x) \n```", "```py\n>>> hyper((n, a), (n**2,), x)\nhyper((a, n), (n**2,), x) \n```", "```py\n>>> from sympy import hyperexpand\n>>> hyperexpand(hyper([], [], x))\nexp(x) \n```", "```py\n>>> from sympy import expand_func\n>>> expand_func(x*hyper([1, 1], [2], -x))\nlog(x + 1) \n```", "```py\n>>> from sympy import S\n>>> hyperexpand(hyper([], [S(1)/2], -x**2/4))\ncos(x)\n>>> hyperexpand(x*hyper([S(1)/2, S(1)/2], [S(3)/2], x**2))\nasin(x) \n```", "```py\n>>> from sympy.abc import a\n>>> hyperexpand(hyper([-a], [], x))\n(1 - x)**a \n```", "```py\nproperty ap\n```", "```py\nproperty argument\n```", "```py\nproperty bq\n```", "```py\nproperty convergence_statement\n```", "```py\nproperty eta\n```", "```py\nproperty radius_of_convergence\n```", "```py\n>>> from sympy import hyper\n>>> from sympy.abc import z\n>>> hyper((1, 2), [3], z).radius_of_convergence\n1\n>>> hyper((1, 2, 3), [4], z).radius_of_convergence\n0\n>>> hyper((1, 2), (3, 4), z).radius_of_convergence\noo \n```", "```py\nclass sympy.functions.special.hyper.meijerg(*args)\n```", "```py\n>>> from sympy import meijerg, Tuple, pprint\n>>> from sympy.abc import x, a\n>>> pprint(meijerg((1, 2), (a, 4), (5,), [], x), use_unicode=False)\n __1, 2 /1, 2  4, a |  \\\n/__     |           | x|\n\\_|4, 1 \\ 5         |  / \n```", "```py\n>>> pprint(meijerg([(1, 2), (3, 4)], ([5], Tuple()), x), use_unicode=False)\n __1, 2 /1, 2  3, 4 |  \\\n/__     |           | x|\n\\_|4, 1 \\ 5         |  / \n```", "```py\n>>> from sympy import pprint\n>>> g = meijerg([1], [2], [3], [4], x)\n>>> pprint(g, use_unicode=False)\n __1, 1 /1  2 |  \\\n/__     |     | x|\n\\_|2, 2 \\3  4 |  /\n>>> g.an\n(1,)\n>>> g.ap\n(1, 2)\n>>> g.aother\n(2,)\n>>> g.bm\n(3,)\n>>> g.bq\n(3, 4)\n>>> g.bother\n(4,) \n```", "```py\n>>> from sympy import hyperexpand\n>>> from sympy.abc import a, b, c\n>>> hyperexpand(meijerg([a], [], [c], [b], x), allow_hyper=True)\nx**c*gamma(-a + c + 1)*hyper((-a + c + 1,),\n (-b + c + 1,), -x)/gamma(-b + c + 1) \n```", "```py\n>>> from sympy import expand_func, S\n>>> expand_func(meijerg([[],[]], [[0],[]], -x))\nexp(x)\n>>> hyperexpand(meijerg([[],[]], [[S(1)/2],[0]], (x/2)**2))\nsin(x)/sqrt(pi) \n```", "```py\nproperty an\n```", "```py\nproperty aother\n```", "```py\nproperty ap\n```", "```py\nproperty argument\n```", "```py\nproperty bm\n```", "```py\nproperty bother\n```", "```py\nproperty bq\n```", "```py\nproperty delta\n```", "```py\nget_period()\n```", "```py\n>>> from sympy import meijerg, pi, S\n>>> from sympy.abc import z \n```", "```py\n>>> meijerg([1], [], [], [], z).get_period()\n2*pi\n>>> meijerg([pi], [], [], [], z).get_period()\noo\n>>> meijerg([1, 2], [], [], [], z).get_period()\noo\n>>> meijerg([1,1], [2], [1, S(1)/2, S(1)/3], [1], z).get_period()\n12*pi \n```", "```py\nintegrand(s)\n```", "```py\nproperty is_number\n```", "```py\nproperty nu\n```", "```py\nclass sympy.functions.special.hyper.appellf1(a, b1, b2, c, x, y)\n```", "```py\n>>> from sympy import appellf1, symbols\n>>> x, y, a, b1, b2, c = symbols('x y a b1 b2 c')\n>>> appellf1(2., 1., 6., 4., 5., 6.)\n0.0063339426292673\n>>> appellf1(12., 12., 6., 4., 0.5, 0.12)\n172870711.659936\n>>> appellf1(40, 2, 6, 4, 15, 60)\nappellf1(40, 2, 6, 4, 15, 60)\n>>> appellf1(20., 12., 10., 3., 0.5, 0.12)\n15605338197184.4\n>>> appellf1(40, 2, 6, 4, x, y)\nappellf1(40, 2, 6, 4, x, y)\n>>> appellf1(a, b1, b2, c, x, y)\nappellf1(a, b1, b2, c, x, y) \n```", "```py\nclass sympy.functions.special.elliptic_integrals.elliptic_k(m)\n```", "```py\n>>> from sympy import elliptic_k, I\n>>> from sympy.abc import m\n>>> elliptic_k(0)\npi/2\n>>> elliptic_k(1.0 + I)\n1.50923695405127 + 0.625146415202697*I\n>>> elliptic_k(m).series(n=3)\npi/2 + pi*m/8 + 9*pi*m**2/128 + O(m**3) \n```", "```py\nclass sympy.functions.special.elliptic_integrals.elliptic_f(z, m)\n```", "```py\n>>> from sympy import elliptic_f, I\n>>> from sympy.abc import z, m\n>>> elliptic_f(z, m).series(z)\nz + z**5*(3*m**2/40 - m/30) + m*z**3/6 + O(z**6)\n>>> elliptic_f(3.0 + I/2, 1.0 + I)\n2.909449841483 + 1.74720545502474*I \n```", "```py\nclass sympy.functions.special.elliptic_integrals.elliptic_e(m, z=None)\n```", "```py\n>>> from sympy import elliptic_e, I\n>>> from sympy.abc import z, m\n>>> elliptic_e(z, m).series(z)\nz + z**5*(-m**2/40 + m/30) - m*z**3/6 + O(z**6)\n>>> elliptic_e(m).series(n=4)\npi/2 - pi*m/8 - 3*pi*m**2/128 - 5*pi*m**3/512 + O(m**4)\n>>> elliptic_e(1 + I, 2 - I/2).n()\n1.55203744279187 + 0.290764986058437*I\n>>> elliptic_e(0)\npi/2\n>>> elliptic_e(2.0 - I)\n0.991052601328069 + 0.81879421395609*I \n```", "```py\nclass sympy.functions.special.elliptic_integrals.elliptic_pi(n, m, z=None)\n```", "```py\n>>> from sympy import elliptic_pi, I\n>>> from sympy.abc import z, n, m\n>>> elliptic_pi(n, z, m).series(z, n=4)\nz + z**3*(m/6 + n/3) + O(z**4)\n>>> elliptic_pi(0.5 + I, 1.0 - I, 1.2)\n2.50232379629182 - 0.760939574180767*I\n>>> elliptic_pi(0, 0)\npi/2\n>>> elliptic_pi(1.0 - I/3, 2.0 + I)\n3.29136443417283 + 0.32555634906645*I \n```", "```py\nclass sympy.functions.special.mathieu_functions.MathieuBase(*args)\n```", "```py\nclass sympy.functions.special.mathieu_functions.mathieus(a, q, z)\n```", "```py\n>>> from sympy import diff, mathieus\n>>> from sympy.abc import a, q, z \n```", "```py\n>>> mathieus(a, q, z)\nmathieus(a, q, z) \n```", "```py\n>>> mathieus(a, 0, z)\nsin(sqrt(a)*z) \n```", "```py\n>>> diff(mathieus(a, q, z), z)\nmathieusprime(a, q, z) \n```", "```py\nclass sympy.functions.special.mathieu_functions.mathieuc(a, q, z)\n```", "```py\n>>> from sympy import diff, mathieuc\n>>> from sympy.abc import a, q, z \n```", "```py\n>>> mathieuc(a, q, z)\nmathieuc(a, q, z) \n```", "```py\n>>> mathieuc(a, 0, z)\ncos(sqrt(a)*z) \n```", "```py\n>>> diff(mathieuc(a, q, z), z)\nmathieucprime(a, q, z) \n```", "```py\nclass sympy.functions.special.mathieu_functions.mathieusprime(a, q, z)\n```", "```py\n>>> from sympy import diff, mathieusprime\n>>> from sympy.abc import a, q, z \n```", "```py\n>>> mathieusprime(a, q, z)\nmathieusprime(a, q, z) \n```", "```py\n>>> mathieusprime(a, 0, z)\nsqrt(a)*cos(sqrt(a)*z) \n```", "```py\n>>> diff(mathieusprime(a, q, z), z)\n(-a + 2*q*cos(2*z))*mathieus(a, q, z) \n```", "```py\nclass sympy.functions.special.mathieu_functions.mathieucprime(a, q, z)\n```", "```py\n>>> from sympy import diff, mathieucprime\n>>> from sympy.abc import a, q, z \n```", "```py\n>>> mathieucprime(a, q, z)\nmathieucprime(a, q, z) \n```", "```py\n>>> mathieucprime(a, 0, z)\n-sqrt(a)*sin(sqrt(a)*z) \n```", "```py\n>>> diff(mathieucprime(a, q, z), z)\n(-a + 2*q*cos(2*z))*mathieuc(a, q, z) \n```", "```py\nclass sympy.functions.special.polynomials.jacobi(n, a, b, x)\n```", "```py\n>>> from sympy import jacobi, S, conjugate, diff\n>>> from sympy.abc import a, b, n, x \n```", "```py\n>>> jacobi(0, a, b, x)\n1\n>>> jacobi(1, a, b, x)\na/2 - b/2 + x*(a/2 + b/2 + 1)\n>>> jacobi(2, a, b, x)\na**2/8 - a*b/4 - a/8 + b**2/8 - b/8 + x**2*(a**2/8 + a*b/4 + 7*a/8 + b**2/8 + 7*b/8 + 3/2) + x*(a**2/4 + 3*a/4 - b**2/4 - 3*b/4) - 1/2 \n```", "```py\n>>> jacobi(n, a, b, x)\njacobi(n, a, b, x) \n```", "```py\n>>> jacobi(n, a, a, x)\nRisingFactorial(a + 1, n)*gegenbauer(n,\n a + 1/2, x)/RisingFactorial(2*a + 1, n) \n```", "```py\n>>> jacobi(n, 0, 0, x)\nlegendre(n, x) \n```", "```py\n>>> jacobi(n, S(1)/2, S(1)/2, x)\nRisingFactorial(3/2, n)*chebyshevu(n, x)/factorial(n + 1) \n```", "```py\n>>> jacobi(n, -S(1)/2, -S(1)/2, x)\nRisingFactorial(1/2, n)*chebyshevt(n, x)/factorial(n) \n```", "```py\n>>> jacobi(n, a, b, -x)\n(-1)**n*jacobi(n, b, a, x) \n```", "```py\n>>> jacobi(n, a, b, 0)\ngamma(a + n + 1)*hyper((-n, -b - n), (a + 1,), -1)/(2**n*factorial(n)*gamma(a + 1))\n>>> jacobi(n, a, b, 1)\nRisingFactorial(a + 1, n)/factorial(n) \n```", "```py\n>>> conjugate(jacobi(n, a, b, x))\njacobi(n, conjugate(a), conjugate(b), conjugate(x)) \n```", "```py\n>>> diff(jacobi(n,a,b,x), x)\n(a/2 + b/2 + n/2 + 1/2)*jacobi(n - 1, a + 1, b + 1, x) \n```", "```py\nsympy.functions.special.polynomials.jacobi_normalized(n, a, b, x)\n```", "```py\n>>> from sympy import jacobi_normalized\n>>> from sympy.abc import n,a,b,x \n```", "```py\n>>> jacobi_normalized(n, a, b, x)\njacobi(n, a, b, x)/sqrt(2**(a + b + 1)*gamma(a + n + 1)*gamma(b + n + 1)/((a + b + 2*n + 1)*factorial(n)*gamma(a + b + n + 1))) \n```", "```py\nclass sympy.functions.special.polynomials.gegenbauer(n, a, x)\n```", "```py\n>>> from sympy import gegenbauer, conjugate, diff\n>>> from sympy.abc import n,a,x\n>>> gegenbauer(0, a, x)\n1\n>>> gegenbauer(1, a, x)\n2*a*x\n>>> gegenbauer(2, a, x)\n-a + x**2*(2*a**2 + 2*a)\n>>> gegenbauer(3, a, x)\nx**3*(4*a**3/3 + 4*a**2 + 8*a/3) + x*(-2*a**2 - 2*a) \n```", "```py\n>>> gegenbauer(n, a, x)\ngegenbauer(n, a, x)\n>>> gegenbauer(n, a, -x)\n(-1)**n*gegenbauer(n, a, x) \n```", "```py\n>>> gegenbauer(n, a, 0)\n2**n*sqrt(pi)*gamma(a + n/2)/(gamma(a)*gamma(1/2 - n/2)*gamma(n + 1))\n>>> gegenbauer(n, a, 1)\ngamma(2*a + n)/(gamma(2*a)*gamma(n + 1)) \n```", "```py\n>>> conjugate(gegenbauer(n, a, x))\ngegenbauer(n, conjugate(a), conjugate(x)) \n```", "```py\n>>> diff(gegenbauer(n, a, x), x)\n2*a*gegenbauer(n - 1, a + 1, x) \n```", "```py\nclass sympy.functions.special.polynomials.chebyshevt(n, x)\n```", "```py\n>>> from sympy import chebyshevt, diff\n>>> from sympy.abc import n,x\n>>> chebyshevt(0, x)\n1\n>>> chebyshevt(1, x)\nx\n>>> chebyshevt(2, x)\n2*x**2 - 1 \n```", "```py\n>>> chebyshevt(n, x)\nchebyshevt(n, x)\n>>> chebyshevt(n, -x)\n(-1)**n*chebyshevt(n, x)\n>>> chebyshevt(-n, x)\nchebyshevt(n, x) \n```", "```py\n>>> chebyshevt(n, 0)\ncos(pi*n/2)\n>>> chebyshevt(n, -1)\n(-1)**n \n```", "```py\n>>> diff(chebyshevt(n, x), x)\nn*chebyshevu(n - 1, x) \n```", "```py\nclass sympy.functions.special.polynomials.chebyshevu(n, x)\n```", "```py\n>>> from sympy import chebyshevu, diff\n>>> from sympy.abc import n,x\n>>> chebyshevu(0, x)\n1\n>>> chebyshevu(1, x)\n2*x\n>>> chebyshevu(2, x)\n4*x**2 - 1 \n```", "```py\n>>> chebyshevu(n, x)\nchebyshevu(n, x)\n>>> chebyshevu(n, -x)\n(-1)**n*chebyshevu(n, x)\n>>> chebyshevu(-n, x)\n-chebyshevu(n - 2, x) \n```", "```py\n>>> chebyshevu(n, 0)\ncos(pi*n/2)\n>>> chebyshevu(n, 1)\nn + 1 \n```", "```py\n>>> diff(chebyshevu(n, x), x)\n(-x*chebyshevu(n, x) + (n + 1)*chebyshevt(n + 1, x))/(x**2 - 1) \n```", "```py\nclass sympy.functions.special.polynomials.chebyshevt_root(n, k)\n```", "```py\n>>> from sympy import chebyshevt, chebyshevt_root\n>>> chebyshevt_root(3, 2)\n-sqrt(3)/2\n>>> chebyshevt(3, chebyshevt_root(3, 2))\n0 \n```", "```py\nclass sympy.functions.special.polynomials.chebyshevu_root(n, k)\n```", "```py\n>>> from sympy import chebyshevu, chebyshevu_root\n>>> chebyshevu_root(3, 2)\n-sqrt(2)/2\n>>> chebyshevu(3, chebyshevu_root(3, 2))\n0 \n```", "```py\nclass sympy.functions.special.polynomials.legendre(n, x)\n```", "```py\n>>> from sympy import legendre, diff\n>>> from sympy.abc import x, n\n>>> legendre(0, x)\n1\n>>> legendre(1, x)\nx\n>>> legendre(2, x)\n3*x**2/2 - 1/2\n>>> legendre(n, x)\nlegendre(n, x)\n>>> diff(legendre(n,x), x)\nn*(x*legendre(n, x) - legendre(n - 1, x))/(x**2 - 1) \n```", "```py\nclass sympy.functions.special.polynomials.assoc_legendre(n, m, x)\n```", "```py\n>>> from sympy import assoc_legendre\n>>> from sympy.abc import x, m, n\n>>> assoc_legendre(0,0, x)\n1\n>>> assoc_legendre(1,0, x)\nx\n>>> assoc_legendre(1,1, x)\n-sqrt(1 - x**2)\n>>> assoc_legendre(n,m,x)\nassoc_legendre(n, m, x) \n```", "```py\nclass sympy.functions.special.polynomials.hermite(n, x)\n```", "```py\n>>> from sympy import hermite, diff\n>>> from sympy.abc import x, n\n>>> hermite(0, x)\n1\n>>> hermite(1, x)\n2*x\n>>> hermite(2, x)\n4*x**2 - 2\n>>> hermite(n, x)\nhermite(n, x)\n>>> diff(hermite(n,x), x)\n2*n*hermite(n - 1, x)\n>>> hermite(n, -x)\n(-1)**n*hermite(n, x) \n```", "```py\nclass sympy.functions.special.polynomials.hermite_prob(n, x)\n```", "```py\n>>> from sympy import hermite_prob, diff, I\n>>> from sympy.abc import x, n\n>>> hermite_prob(1, x)\nx\n>>> hermite_prob(5, x)\nx**5 - 10*x**3 + 15*x\n>>> diff(hermite_prob(n,x), x)\nn*hermite_prob(n - 1, x)\n>>> hermite_prob(n, -x)\n(-1)**n*hermite_prob(n, x) \n```", "```py\n>>> [hermite_prob(n,I) / I**n for n in range(11)]\n[1, 1, 2, 4, 10, 26, 76, 232, 764, 2620, 9496] \n```", "```py\nclass sympy.functions.special.polynomials.laguerre(n, x)\n```", "```py\n>>> from sympy import laguerre, diff\n>>> from sympy.abc import x, n\n>>> laguerre(0, x)\n1\n>>> laguerre(1, x)\n1 - x\n>>> laguerre(2, x)\nx**2/2 - 2*x + 1\n>>> laguerre(3, x)\n-x**3/6 + 3*x**2/2 - 3*x + 1 \n```", "```py\n>>> laguerre(n, x)\nlaguerre(n, x) \n```", "```py\n>>> diff(laguerre(n, x), x)\n-assoc_laguerre(n - 1, 1, x) \n```", "```py\nclass sympy.functions.special.polynomials.assoc_laguerre(n, alpha, x)\n```", "```py\n>>> from sympy import assoc_laguerre, diff\n>>> from sympy.abc import x, n, a\n>>> assoc_laguerre(0, a, x)\n1\n>>> assoc_laguerre(1, a, x)\na - x + 1\n>>> assoc_laguerre(2, a, x)\na**2/2 + 3*a/2 + x**2/2 + x*(-a - 2) + 1\n>>> assoc_laguerre(3, a, x)\na**3/6 + a**2 + 11*a/6 - x**3/6 + x**2*(a/2 + 3/2) +\n x*(-a**2/2 - 5*a/2 - 3) + 1 \n```", "```py\n>>> assoc_laguerre(n, a, 0)\nbinomial(a + n, a) \n```", "```py\n>>> assoc_laguerre(n, a, x)\nassoc_laguerre(n, a, x) \n```", "```py\n>>> assoc_laguerre(n, 0, x)\nlaguerre(n, x) \n```", "```py\n>>> diff(assoc_laguerre(n, a, x), x)\n-assoc_laguerre(n - 1, a + 1, x) \n```", "```py\n>>> diff(assoc_laguerre(n, a, x), a)\nSum(assoc_laguerre(_k, a, x)/(-a + n), (_k, 0, n - 1)) \n```", "```py\nclass sympy.functions.special.spherical_harmonics.Ynm(n, m, theta, phi)\n```", "```py\n>>> from sympy import Ynm, Symbol, simplify\n>>> from sympy.abc import n,m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\") \n```", "```py\n>>> Ynm(n, m, theta, phi)\nYnm(n, m, theta, phi) \n```", "```py\n>>> Ynm(n, -m, theta, phi)\n(-1)**m*exp(-2*I*m*phi)*Ynm(n, m, theta, phi) \n```", "```py\n>>> Ynm(n, m, -theta, phi)\nYnm(n, m, theta, phi) \n```", "```py\n>>> Ynm(n, m, theta, -phi)\nexp(-2*I*m*phi)*Ynm(n, m, theta, phi) \n```", "```py\n>>> simplify(Ynm(0, 0, theta, phi).expand(func=True))\n1/(2*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(1, -1, theta, phi).expand(func=True))\nsqrt(6)*exp(-I*phi)*sin(theta)/(4*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(1, 0, theta, phi).expand(func=True))\nsqrt(3)*cos(theta)/(2*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(1, 1, theta, phi).expand(func=True))\n-sqrt(6)*exp(I*phi)*sin(theta)/(4*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(2, -2, theta, phi).expand(func=True))\nsqrt(30)*exp(-2*I*phi)*sin(theta)**2/(8*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(2, -1, theta, phi).expand(func=True))\nsqrt(30)*exp(-I*phi)*sin(2*theta)/(8*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(2, 0, theta, phi).expand(func=True))\nsqrt(5)*(3*cos(theta)**2 - 1)/(4*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(2, 1, theta, phi).expand(func=True))\n-sqrt(30)*exp(I*phi)*sin(2*theta)/(8*sqrt(pi)) \n```", "```py\n>>> simplify(Ynm(2, 2, theta, phi).expand(func=True))\nsqrt(30)*exp(2*I*phi)*sin(theta)**2/(8*sqrt(pi)) \n```", "```py\n>>> from sympy import Ynm, Symbol, diff\n>>> from sympy.abc import n,m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\") \n```", "```py\n>>> diff(Ynm(n, m, theta, phi), theta)\nm*cot(theta)*Ynm(n, m, theta, phi) + sqrt((-m + n)*(m + n + 1))*exp(-I*phi)*Ynm(n, m + 1, theta, phi) \n```", "```py\n>>> diff(Ynm(n, m, theta, phi), phi)\nI*m*Ynm(n, m, theta, phi) \n```", "```py\n>>> from sympy import Ynm, Symbol, conjugate\n>>> from sympy.abc import n,m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\") \n```", "```py\n>>> conjugate(Ynm(n, m, theta, phi))\n(-1)**(2*m)*exp(-2*I*m*phi)*Ynm(n, m, theta, phi) \n```", "```py\n>>> from sympy import Ynm, Symbol, expand_func\n>>> from sympy.abc import n,m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\") \n```", "```py\n>>> expand_func(Ynm(n, m, theta, phi))\nsqrt((2*n + 1)*factorial(-m + n)/factorial(m + n))*exp(I*m*phi)*assoc_legendre(n, m, cos(theta))/(2*sqrt(pi)) \n```", "```py\nsympy.functions.special.spherical_harmonics.Ynm_c(n, m, theta, phi)\n```", "```py\n>>> from sympy import Ynm_c, Symbol, simplify\n>>> from sympy.abc import n,m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\")\n>>> Ynm_c(n, m, theta, phi)\n(-1)**(2*m)*exp(-2*I*m*phi)*Ynm(n, m, theta, phi)\n>>> Ynm_c(n, m, -theta, phi)\n(-1)**(2*m)*exp(-2*I*m*phi)*Ynm(n, m, theta, phi) \n```", "```py\n>>> simplify(Ynm_c(0, 0, theta, phi).expand(func=True))\n1/(2*sqrt(pi))\n>>> simplify(Ynm_c(1, -1, theta, phi).expand(func=True))\nsqrt(6)*exp(I*(-phi + 2*conjugate(phi)))*sin(theta)/(4*sqrt(pi)) \n```", "```py\nclass sympy.functions.special.spherical_harmonics.Znm(n, m, theta, phi)\n```", "```py\n>>> from sympy import Znm, Symbol, simplify\n>>> from sympy.abc import n, m\n>>> theta = Symbol(\"theta\")\n>>> phi = Symbol(\"phi\")\n>>> Znm(n, m, theta, phi)\nZnm(n, m, theta, phi) \n```", "```py\n>>> simplify(Znm(0, 0, theta, phi).expand(func=True))\n1/(2*sqrt(pi))\n>>> simplify(Znm(1, 1, theta, phi).expand(func=True))\n-sqrt(3)*sin(theta)*cos(phi)/(2*sqrt(pi))\n>>> simplify(Znm(2, 1, theta, phi).expand(func=True))\n-sqrt(15)*sin(2*theta)*cos(phi)/(4*sqrt(pi)) \n```", "```py\nsympy.functions.special.tensor_functions.Eijk(*args, **kwargs)\n```", "```py\nsympy.functions.special.tensor_functions.eval_levicivita(*args)\n```", "```py\nclass sympy.functions.special.tensor_functions.LeviCivita(*args)\n```", "```py\n>>> from sympy import LeviCivita\n>>> from sympy.abc import i, j, k\n>>> LeviCivita(1, 2, 3)\n1\n>>> LeviCivita(1, 3, 2)\n-1\n>>> LeviCivita(1, 2, 2)\n0\n>>> LeviCivita(i, j, k)\nLeviCivita(i, j, k)\n>>> LeviCivita(i, j, i)\n0 \n```", "```py\nclass sympy.functions.special.tensor_functions.KroneckerDelta(i, j, delta_range=None)\n```", "```py\n>>> from sympy import KroneckerDelta\n>>> KroneckerDelta(1, 2)\n0\n>>> KroneckerDelta(3, 3)\n1 \n```", "```py\n>>> from sympy.abc import i, j, k\n>>> KroneckerDelta(i, j)\nKroneckerDelta(i, j)\n>>> KroneckerDelta(i, i)\n1\n>>> KroneckerDelta(i, i + 1)\n0\n>>> KroneckerDelta(i, i + 1 + k)\nKroneckerDelta(i, i + k + 1) \n```", "```py\nclassmethod eval(i, j, delta_range=None)\n```", "```py\n>>> from sympy import KroneckerDelta\n>>> from sympy.abc import i, j, k \n```", "```py\n>>> KroneckerDelta(i, j)\nKroneckerDelta(i, j)\n>>> KroneckerDelta(i, i)\n1\n>>> KroneckerDelta(i, i + 1)\n0\n>>> KroneckerDelta(i, i + 1 + k)\nKroneckerDelta(i, i + k + 1) \n```", "```py\nproperty indices_contain_equal_information\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, q).indices_contain_equal_information\nTrue\n>>> KroneckerDelta(p, q+1).indices_contain_equal_information\nTrue\n>>> KroneckerDelta(i, p).indices_contain_equal_information\nFalse \n```", "```py\nproperty is_above_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_above_fermi\nTrue\n>>> KroneckerDelta(p, i).is_above_fermi\nFalse\n>>> KroneckerDelta(p, q).is_above_fermi\nTrue \n```", "```py\nproperty is_below_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_below_fermi\nFalse\n>>> KroneckerDelta(p, i).is_below_fermi\nTrue\n>>> KroneckerDelta(p, q).is_below_fermi\nTrue \n```", "```py\nproperty is_only_above_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_only_above_fermi\nTrue\n>>> KroneckerDelta(p, q).is_only_above_fermi\nFalse\n>>> KroneckerDelta(p, i).is_only_above_fermi\nFalse \n```", "```py\nproperty is_only_below_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, i).is_only_below_fermi\nTrue\n>>> KroneckerDelta(p, q).is_only_below_fermi\nFalse\n>>> KroneckerDelta(p, a).is_only_below_fermi\nFalse \n```", "```py\nproperty killable_index\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> j = Symbol('j', below_fermi=True)\n>>> p = Symbol('p')\n>>> KroneckerDelta(p, i).killable_index\np\n>>> KroneckerDelta(p, a).killable_index\np\n>>> KroneckerDelta(i, j).killable_index\nj \n```", "```py\nproperty preferred_index\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> j = Symbol('j', below_fermi=True)\n>>> p = Symbol('p')\n>>> KroneckerDelta(p, i).preferred_index\ni\n>>> KroneckerDelta(p, a).preferred_index\na\n>>> KroneckerDelta(i, j).preferred_index\ni \n```"]