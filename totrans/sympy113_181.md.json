["```py\n>>> from sympy import Matrix, linear_eq_to_matrix, pi, simplify, symbols\n>>> from sympy.physics.mechanics import *\n>>> mechanics_printing(pretty_print=False)\n>>> q1, q2, q3, u1, u2, u3 = dynamicsymbols('q1:4, u1:4')\n>>> l1, l2, l3, l4, rho = symbols('l1:5, rho') \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> mass_centers = [Point(f'mc{i}') for i in range(1, 5)]\n>>> inertias = [Inertia.from_inertia_scalars(P, N, 0, 0, rho*l**3/12)\n...             for P, l in zip(mass_centers, (l1, l2, l3, l4))]\n>>> link1 = RigidBody('Link1', frame=N, mass=rho*l1,\n...                   masscenter=mass_centers[0], inertia=inertias[0])\n>>> link2 = RigidBody('Link2', mass=rho*l2, masscenter=mass_centers[1],\n...                   inertia=inertias[1])\n>>> link3 = RigidBody('Link3', mass=rho*l3, masscenter=mass_centers[2],\n...                   inertia=inertias[2])\n>>> link4 = RigidBody('Link4', mass=rho*l4, masscenter=mass_centers[3],\n...                   inertia=inertias[3])\n>>> system = System.from_newtonian(link1) \n```", "```py\n>>> joint1 = PinJoint('J1', link1, link2, coordinates=q1, speeds=u1,\n...                   parent_point=l1/2*link1.x,\n...                   child_point=-l2/2*link2.x, joint_axis=link1.z)\n>>> joint2 = PinJoint('J2', link2, link3, coordinates=q2, speeds=u2,\n...                   parent_point=l2/2*link2.x,\n...                   child_point=-l3/2*link3.x, joint_axis=link2.z)\n>>> joint3 = PinJoint('J3', link3, link4, coordinates=q3, speeds=u3,\n...                   parent_point=l3/2*link3.x,\n...                   child_point=-l4/2*link4.x, joint_axis=link3.z)\n>>> system.add_joints(joint1, joint2, joint3) \n```", "```py\n>>> start_point = link1.masscenter.locatenew('start_point', -l1/2*link1.x)\n>>> end_point = link4.masscenter.locatenew('end_point', l4/2*link4.x)\n>>> loop = end_point.pos_from(start_point)\n>>> system.add_holonomic_constraints(loop.dot(link1.x), loop.dot(link1.y)) \n```", "```py\n>>> system.q_ind = [q1]\n>>> system.u_ind = [u1]\n>>> system.q_dep = [q2, q3]\n>>> system.u_dep = [u2, u3]\n>>> system.validate_system() \n```", "```py\n>>> simplify(system.form_eoms())\n Matrix([[l2*rho*(-2*l2**2*sin(q3)*u1' + 3*l2*l3*u1**2*sin(q2 + q3)*sin(q2) + 3*l2*l3*sin(q2)*cos(q2 + q3)*u1' - 3*l2*l3*sin(q3)*u1' + 3*l2*l4*u1**2*sin(q2 + q3)*sin(q2) + 3*l2*l4*sin(q2)*cos(q2 + q3)*u1' + 3*l3**2*u1**2*sin(q2)*sin(q3) + 6*l3**2*u1*u2*sin(q2)*sin(q3) + 3*l3**2*u2**2*sin(q2)*sin(q3) + 2*l3**2*sin(q2)*cos(q3)*u1' + 2*l3**2*sin(q2)*cos(q3)*u2' - l3**2*sin(q3)*cos(q2)*u1' - l3**2*sin(q3)*cos(q2)*u2' + 3*l3*l4*u1**2*sin(q2)*sin(q3) + 6*l3*l4*u1*u2*sin(q2)*sin(q3) + 3*l3*l4*u2**2*sin(q2)*sin(q3) + 3*l3*l4*sin(q2)*cos(q3)*u1' + 3*l3*l4*sin(q2)*cos(q3)*u2' + l4**2*sin(q2)*u1' + l4**2*sin(q2)*u2' + l4**2*sin(q2)*u3')/(6*sin(q3))]]) \n```", "```py\n>>> uaux1, uaux2 = dynamicsymbols('uaux1:3')\n>>> end_point_aux = end_point.locatenew('end_point_aux', 0)\n>>> end_point_aux.set_vel(N, end_point.vel(N) + uaux1*N.x + uaux2*N.y) \n```", "```py\n>>> system.velocity_constraints = [\n...    end_point_aux.vel(N).dot(N.x), end_point_aux.vel(N).dot(N.y)] \n```", "```py\n>>> faux1, faux2 = dynamicsymbols('faux1:3')\n>>> noncontributing_forces = [\n...   Force(end_point_aux, faux1*N.x + faux2*N.y),\n...   Force(end_point, -(faux1*N.x + faux2*N.y)),\n... ] \n```", "```py\n>>> end_point_forces = end_point.locatenew('end_point_forces', 0)\n>>> end_point_forces.set_vel(N, uaux1*N.x + uaux2*N.y)\n>>> noncontributing_forces = [Force(end_point_forces, faux1*N.x + faux2*N.y)] \n```", "```py\n>>> system.add_loads(*noncontributing_forces)\n>>> system.u_aux = [uaux1, uaux2] \n```", "```py\n>>> g = symbols('g')\n>>> system.apply_uniform_gravity(-g*N.y)\n>>> system.validate_system()\n>>> eoms = system.form_eoms() \n```", "```py\n>>> auxiliary_eqs = system.eom_method.auxiliary_eqs\n>>> forces_eqs = Matrix.LUsolve(\n...   *linear_eq_to_matrix(auxiliary_eqs, [faux1, faux2]))\n>>> subs = {\n...   l1: 2, l2: 1, l3: 2, l4: 1,\n...   rho: 5, g: 9.81,\n...   q1: pi/2, q2: pi/2, q3: pi/2,\n...   u1: 0, u2: 0, u3: 0, u1.diff(): 0, u2.diff(): 0, u3.diff(): 0,\n... }\n>>> forces_eqs.xreplace(subs)\nMatrix([\n[    0],\n[-98.1]]) \n```"]