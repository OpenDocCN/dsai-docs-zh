- en: Mathematical functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.math.html](https://numpy.org/doc/1.26/reference/routines.math.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Trigonometric functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  prefs: []
  type: TYPE_TB
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | Unwrap by taking the complement of large deltas with respect to the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: Hyperbolic functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Rounding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | Evenly round to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | Round an array to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | Round
    to nearest integer towards zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Sums, products, differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | Sum of array elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis treating Not a Numbers
    (NaNs) as ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | Return the sum of array elements over a given axis treating Not a Numbers (NaNs)
    as zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | Return the cumulative product of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of the elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | Return the cumulative product of array elements over a given axis treating Not
    a Numbers (NaNs) as one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of array elements over a given axis treating Not a
    Numbers (NaNs) as zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | The differences between consecutive elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | Return the gradient of an N-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | Return the cross product of two (arrays of) vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | Integrate along the given axis using the composite trapezoidal rule. |'
  prefs: []
  type: TYPE_TB
- en: Exponents and logarithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  prefs: []
  type: TYPE_TB
- en: Other special functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | Modified Bessel
    function of the first kind, order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | Return the
    normalized sinc function. |'
  prefs: []
  type: TYPE_TB
- en: Floating point routines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  prefs: []
  type: TYPE_TB
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  prefs: []
  type: TYPE_TB
- en: Rational routines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  prefs: []
  type: TYPE_TB
- en: Handling complex numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | Return the angle of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | Return
    the real part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | Return
    the imaginary part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Extrema Finding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis, ignoring any NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | Return minimum of an array or minimum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | Returns the discrete, linear convolution of two one-dimensional sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | Clip (limit) the values in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  prefs: []
  type: TYPE_TB
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | Replace NaN with zero and infinity with large finite numbers (default behaviour)
    or with the numbers defined by the user using the [`nan`](constants.html#numpy.nan
    "numpy.nan"), *posinf* and/or *neginf* keywords. |'
  prefs: []
  type: TYPE_TB
- en: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | If input is complex with all imaginary parts
    close to zero, return real parts. |'
  prefs: []
  type: TYPE_TB
- en: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | One-dimensional linear interpolation for monotonically increasing sample points.
    |'
  prefs: []
  type: TYPE_TB
- en: Trigonometric functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  prefs: []
  type: TYPE_TB
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | Unwrap by taking the complement of large deltas with respect to the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  prefs: []
  type: TYPE_TB
- en: Hyperbolic functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Rounding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | Evenly round to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | Round an array to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | Round
    to nearest integer towards zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Sums, products, differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | Sum of array elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis treating Not a Numbers
    (NaNs) as ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | Return the sum of array elements over a given axis treating Not a Numbers (NaNs)
    as zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | Return the cumulative product of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of the elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | Return the cumulative product of array elements over a given axis treating Not
    a Numbers (NaNs) as one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of array elements over a given axis treating Not a
    Numbers (NaNs) as zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | The differences between consecutive elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | Return the gradient of an N-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | Return the cross product of two (arrays of) vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | Integrate along the given axis using the composite trapezoidal rule. |'
  prefs: []
  type: TYPE_TB
- en: Exponents and logarithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  prefs: []
  type: TYPE_TB
- en: Other special functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | Modified Bessel
    function of the first kind, order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | Return the
    normalized sinc function. |'
  prefs: []
  type: TYPE_TB
- en: Floating point routines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  prefs: []
  type: TYPE_TB
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  prefs: []
  type: TYPE_TB
- en: Rational routines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  prefs: []
  type: TYPE_TB
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  prefs: []
  type: TYPE_TB
- en: Handling complex numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | Return the angle of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | Return
    the real part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | Return
    the imaginary part of the complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Extrema Finding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis, ignoring any NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | Return minimum of an array or minimum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | Returns the discrete, linear convolution of two one-dimensional sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | Clip (limit) the values in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  prefs: []
  type: TYPE_TB
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | Replace NaN with zero and infinity with large finite numbers (default behaviour)
    or with the numbers defined by the user using the [`nan`](constants.html#numpy.nan
    "numpy.nan"), *posinf* and/or *neginf* keywords. |'
  prefs: []
  type: TYPE_TB
- en: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | If input is complex with all imaginary parts
    close to zero, return real parts. |'
  prefs: []
  type: TYPE_TB
- en: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | One-dimensional linear interpolation for monotonically increasing sample points.
    |'
  prefs: []
  type: TYPE_TB
