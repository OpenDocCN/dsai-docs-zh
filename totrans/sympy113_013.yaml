- en: Matrices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵
- en: Original text：[https://docs.sympy.org/latest/tutorials/intro-tutorial/matrices.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/matrices.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/matrices.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/matrices.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To make a matrix in SymPy, use the `Matrix` object. A matrix is constructed
    by providing a list of row vectors that make up the matrix. For example, to construct
    the matrix
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SymPy中创建矩阵，请使用`Matrix`对象。通过提供构成矩阵的行向量列表来构造矩阵。例如，要构造矩阵
- en: \[\begin{split}\left[\begin{array}{cc}1 & -1\\3 & 4\\0 & 2\end{array}\right]\end{split}\]
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\left[\begin{array}{cc}1 & -1\\3 & 4\\0 & 2\end{array}\right]\end{split}\]
- en: use
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To make it easy to make column vectors, a list of elements is considered to
    be a column vector.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松创建列向量，列表中的元素被视为列向量。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Matrices are manipulated just like any other object in SymPy or Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵可以像SymPy或Python中的任何其他对象一样进行操作。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One important thing to note about SymPy matrices is that, unlike every other
    object in SymPy, they are mutable. This means that they can be modified in place,
    as we will see below. The downside to this is that `Matrix` cannot be used in
    places that require immutability, such as inside other SymPy expressions or as
    keys to dictionaries. If you need an immutable version of `Matrix`, use `ImmutableMatrix`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy矩阵的一个重要特点是，与SymPy中的其他对象不同，它们是可变的。这意味着它们可以就地修改，如下面将看到的。这样做的缺点是，`Matrix`不能用于需要不可变性的地方，例如SymPy表达式内部或作为字典的键。如果需要一个不可变版本的`Matrix`，请使用`ImmutableMatrix`。
- en: Basic Operations
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本操作
- en: Here are some basic operations on `Matrix`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对`Matrix`的一些基本操作。
- en: Shape
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 形状
- en: To get the shape of a matrix, use [`shape()`](../../modules/codegen.html#sympy.codegen.fnodes.shape
    "sympy.codegen.fnodes.shape") function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取矩阵的形状，请使用[`shape()`](../../modules/codegen.html#sympy.codegen.fnodes.shape
    "sympy.codegen.fnodes.shape")函数。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Accessing Rows and Columns
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问行和列
- en: To get an individual row or column of a matrix, use `row` or `col`. For example,
    `M.row(0)` will get the first row. `M.col(-1)` will get the last column.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取矩阵的单独行或列，请使用`row`或`col`。例如，`M.row(0)`将获取第一行。`M.col(-1)`将获取最后一列。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Deleting and Inserting Rows and Columns
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除和插入行和列
- en: To delete a row or column, use `row_del` or `col_del`. These operations will
    modify the Matrix **in place**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除行或列，请使用`row_del`或`col_del`。这些操作会**就地**修改矩阵。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To insert rows or columns, use `row_insert` or `col_insert`. These operations
    **do not** operate in place.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入行或列，请使用`row_insert`或`col_insert`。这些操作**不会**在原地执行。
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Unless explicitly stated, the methods mentioned below do not operate in place.
    In general, a method that does not operate in place will return a new `Matrix`
    and a method that does operate in place will return `None`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除非明确说明，下文提到的方法均不在原地操作。通常情况下，不在原地操作的方法将返回一个新的`Matrix`，而在原地操作的方法将返回`None`。
- en: Basic Methods
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本方法
- en: As noted above, simple operations like addition, multiplication and power are
    done just by using `+`, `*`, and `**`. To find the inverse of a matrix, just raise
    it to the `-1` power.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，简单的操作如加法、乘法和乘幂只需使用`+`、`*`和`**`。要找到矩阵的逆，只需将其提升到`-1`次幂。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To take the transpose of a Matrix, use `T`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要对矩阵进行转置，请使用`T`。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Matrix Constructors
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵构造函数
- en: Several constructors exist for creating common matrices. To create an identity
    matrix, use `eye`. `eye(n)` will create an \(n\times n\) identity matrix.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 存在多个构造函数用于创建常见矩阵。要创建单位矩阵，请使用`eye`。`eye(n)`将创建一个大小为\(n\times n\)的单位矩阵。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To create a matrix of all zeros, use `zeros`. `zeros(n, m)` creates an \(n\times
    m\) matrix of \(0\)s.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建全零矩阵，请使用`zeros`。`zeros(n, m)`创建一个大小为\(n\times m\)的全为\(0\)的矩阵。
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Similarly, `ones` creates a matrix of ones.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`ones`创建一个全为1的矩阵。
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To create diagonal matrices, use `diag`. The arguments to `diag` can be either
    numbers or matrices. A number is interpreted as a \(1\times 1\) matrix. The matrices
    are stacked diagonally. The remaining elements are filled with \(0\)s.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建对角矩阵，请使用`diag`。`diag`的参数可以是数字或矩阵。数字被解释为大小为\(1\times 1\)的矩阵。矩阵按对角线堆叠。剩余元素填充为\(0\)。
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Advanced Methods
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级方法
- en: Determinant
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行列式
- en: To compute the determinant of a matrix, use `det`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算矩阵的行列式，请使用`det`。
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: RREF
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行阶梯形式
- en: To put a matrix into reduced row echelon form, use `rref`. `rref` returns a
    tuple of two elements. The first is the reduced row echelon form, and the second
    is a tuple of indices of the pivot columns.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要将矩阵转换为行阶梯形式，请使用`rref`。`rref`返回一个包含两个元素的元组。第一个元素是行阶梯形式，第二个是主元列的索引的元组。
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The first element of the tuple returned by `rref` is of type `Matrix`. The second
    is of type `tuple`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`rref`返回的元组的第一个元素是`Matrix`类型。第二个元素是`tuple`类型。
- en: Nullspace
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 零空间
- en: To find the nullspace of a matrix, use `nullspace`. `nullspace` returns a `list`
    of column vectors that span the nullspace of the matrix.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到矩阵的零空间，请使用`nullspace`。`nullspace`返回一个列向量列表，这些向量跨越矩阵的零空间。
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Columnspace
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列空间
- en: To find the columnspace of a matrix, use `columnspace`. `columnspace` returns
    a `list` of column vectors that span the columnspace of the matrix.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到矩阵的列空间，请使用`columnspace`。`columnspace`返回一个列向量列表，这些向量跨越矩阵的列空间。
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Eigenvalues, Eigenvectors, and Diagonalization
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特征值、特征向量和对角化
- en: 'To find the eigenvalues of a matrix, use `eigenvals`. `eigenvals` returns a
    dictionary of `eigenvalue: algebraic_multiplicity` pairs (similar to the output
    of [roots](solvers.html#tutorial-roots)).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '要找到矩阵的特征值，请使用`eigenvals`。`eigenvals`返回一个字典，包含`特征值: 代数重数`对（类似于[roots](solvers.html#tutorial-roots)的输出）。'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This means that `M` has eigenvalues -2, 3, and 5, and that the eigenvalues -2
    and 3 have algebraic multiplicity 1 and that the eigenvalue 5 has algebraic multiplicity
    2.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`M`具有特征值-2、3和5，并且特征值-2和3的代数重数为1，特征值5的代数重数为2。
- en: To find the eigenvectors of a matrix, use `eigenvects`. `eigenvects` returns
    a list of tuples of the form `(eigenvalue, algebraic_multiplicity, [eigenvectors])`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到矩阵的特征向量，请使用`eigenvects`。`eigenvects`返回一个元组列表，形式为`(特征值，代数重数，[特征向量])`。
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This shows us that, for example, the eigenvalue 5 also has geometric multiplicity
    2, because it has two eigenvectors. Because the algebraic and geometric multiplicities
    are the same for all the eigenvalues, `M` is diagonalizable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，例如，特征值5也具有几何重数2，因为它有两个特征向量。由于所有特征值的代数和几何重数相同，因此`M`是可对角化的。
- en: To diagonalize a matrix, use `diagonalize`. `diagonalize` returns a tuple \((P,
    D)\), where \(D\) is diagonal and \(M = PDP^{-1}\).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要对角化矩阵，请使用`diagonalize`。`diagonalize`返回一个元组\((P, D)\)，其中\(D\)是对角化的，且\(M = PDP^{-1}\)。
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that since `eigenvects` also includes the eigenvalues, you should use it
    instead of `eigenvals` if you also want the eigenvectors. However, as computing
    the eigenvectors may often be costly, `eigenvals` should be preferred if you only
    wish to find the eigenvalues.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于`eigenvects`也包含了特征值，如果你还想要特征向量，应该使用它而不是`eigenvals`。然而，由于计算特征向量可能非常耗时，如果只想找特征值，应优先选择`eigenvals`。
- en: If all you want is the characteristic polynomial, use `charpoly`. This is more
    efficient than `eigenvals`, because sometimes symbolic roots can be expensive
    to calculate.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想得到特征多项式，请使用`charpoly`。这比使用`eigenvals`更有效率，因为有时符号根可能计算代价高昂。
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Possible Issues
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能出现的问题
- en: Zero Testing
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 零测试
- en: If your matrix operations are failing or returning wrong answers, the common
    reasons would likely be from zero testing. If there is an expression not properly
    zero-tested, it can possibly bring issues in finding pivots for gaussian elimination,
    or deciding whether the matrix is inversible, or any high level functions which
    relies on the prior procedures.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的矩阵操作失败或返回错误答案，常见原因可能是由于零测试不正确。如果表达式未经适当的零测试，可能会导致高斯消元中找不到主元，或者决定矩阵是否可逆，或者依赖先前过程的任何高级函数可能存在问题。
- en: Currently, the SymPy’s default method of zero testing `_iszero` is only guaranteed
    to be accurate in some limited domain of numerics and symbols, and any complicated
    expressions beyond its decidability are treated as `None`, which behaves similarly
    to logical `False`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，SymPy的默认零测试方法`_iszero`仅在某些有限的数值和符号域内保证准确性，对于其无法决策的复杂表达式，则被视为`None`，其行为类似逻辑`False`。
- en: 'The list of methods using zero testing procedures are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用零测试过程的方法列表如下：
- en: '`echelon_form` , `is_echelon` , `rank` , `rref` , `nullspace` , `eigenvects`
    , `inverse_ADJ` , `inverse_GE` , `inverse_LU` , `LUdecomposition` , `LUdecomposition_Simple`
    , `LUsolve`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`echelon_form`，`is_echelon`，`rank`，`rref`，`nullspace`，`eigenvects`，`inverse_ADJ`，`inverse_GE`，`inverse_LU`，`LUdecomposition`，`LUdecomposition_Simple`，`LUsolve`'
- en: They have property `iszerofunc` opened up for user to specify zero testing method,
    which can accept any function with single input and boolean output, while being
    defaulted with `_iszero`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它们具有属性`iszerofunc`，供用户指定零测试方法，可以接受具有单一输入和布尔输出的任何函数，其默认值为`_iszero`。
- en: Here is an example of solving an issue caused by undertested zero. While the
    output for this particular matrix has since been improved, the technique below
    is still of interest. [[1]](#zerotestexampleidea-fn) [[2]](#zerotestexamplediscovery-fn)
    [[3]](#zerotestexampleimproved-fn)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个解决由于未经充分测试的零值引起的问题的示例。尽管这个特定矩阵的输出已经得到改进，但以下技术仍然具有一定的兴趣。[[1]](#zerotestexampleidea-fn)
    [[2]](#zerotestexamplediscovery-fn) [[3]](#zerotestexampleimproved-fn)
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can trace down which expression is being underevaluated, by injecting a
    custom zero test with warnings enabled.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过启用警告来追踪哪些表达式被低估了，通过注入自定义的零测试。
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, `(-exp(q) - 2*cosh(q/3))*(-2*cosh(q/3) - exp(-q)) - (4*cosh(q/3)**2
    - 1)**2` should yield zero, but the zero testing had failed to catch. possibly
    meaning that a stronger zero test should be introduced. For this specific example,
    rewriting to exponentials and applying simplify would make zero test stronger
    for hyperbolics, while being harmless to other polynomials or transcendental functions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`(-exp(q) - 2*cosh(q/3))*(-2*cosh(q/3) - exp(-q)) - (4*cosh(q/3)**2 -
    1)**2`应该得到零，但零测试未能捕捉到。这可能意味着应引入更强的零测试。对于这个特定的示例，重写为指数函数并应用简化将使零测试对双曲线函数更强，同时对其他多项式或超越函数无害。
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can clearly see `nullspace` returning proper result, after injecting an
    alternative zero test.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在注入备用零测试后，您可以清楚地看到`nullspace`返回了正确的结果。
- en: Note that this approach is only valid for some limited cases of matrices containing
    only numerics, hyperbolics, and exponentials. For other matrices, you should use
    different method opted for their domains.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种方法仅适用于仅包含数值、双曲线和指数函数的某些矩阵情况。对于其他矩阵，应选择其特定领域的不同方法。
- en: Possible suggestions would be either taking advantage of rewriting and simplifying,
    with tradeoff of speed [[4]](#zerotestsimplifysolution-fn) , or using random numeric
    testing, with tradeoff of accuracy [[5]](#zerotestnumerictestsolution-fn) .
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的建议是利用重写和简化的方式，以牺牲速度为代价[[4]](#zerotestsimplifysolution-fn)，或者使用随机数测试的方式，以牺牲精确度为代价[[5]](#zerotestnumerictestsolution-fn)。
- en: If you wonder why there is no generic algorithm for zero testing that can work
    with any symbolic entities, it’s because of the constant problem stating that
    zero testing is undecidable [[6]](#constantproblemwikilink-fn) , and not only
    the SymPy, but also other computer algebra systems [[7]](#mathematicazero-fn)
    [[8]](#matlabzero-fn) would face the same fundamental issue.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道为什么没有通用的零测试算法可以与任何符号实体一起使用，那是因为存在零测试不可判定的常数问题[[6]](#constantproblemwikilink-fn)，而不仅仅是SymPy，其他计算代数系统[[7]](#mathematicazero-fn)
    [[8]](#matlabzero-fn)也会面临同样的根本性问题。
- en: However, discovery of any zero test failings can provide some good examples
    to improve SymPy, so if you have encountered one, you can report the issue to
    SymPy issue tracker [[9]](#sympyissues-fn) to get detailed help from the community.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，发现任何零测试失败的案例可以提供一些优化SymPy的良好例子，因此如果您遇到了其中一个问题，可以将问题报告给SymPy问题跟踪器[[9]](#sympyissues-fn)，以获取社区的详细帮助。
- en: Footnotes
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 脚注
