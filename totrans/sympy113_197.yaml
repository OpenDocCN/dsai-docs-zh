- en: Deprecated Classes (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/api/deprecated_classes.html](https://docs.sympy.org/latest/modules/physics/mechanics/api/deprecated_classes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.13: [`Body`](#sympy.physics.mechanics.body.Body
    "sympy.physics.mechanics.body.Body") and [`JointsMethod`](#sympy.physics.mechanics.jointsmethod.JointsMethod
    "sympy.physics.mechanics.jointsmethod.JointsMethod") have been deprecated. The
    functionality of [`Body`](#sympy.physics.mechanics.body.Body "sympy.physics.mechanics.body.Body")
    is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") and the functionality of [`JointsMethod`](#sympy.physics.mechanics.jointsmethod.JointsMethod
    "sympy.physics.mechanics.jointsmethod.JointsMethod") is fully captured by [`System`](system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Body is a common representation of either a RigidBody or a Particle SymPy object
    depending on what is passed in during initialization. If a mass is passed in and
    central_inertia is left as None, the Particle object is created. Otherwise a RigidBody
    object will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.13: The Body class is deprecated. Its functionality
    is captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : String'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the name of the body. It is used as the base for defining body specific
    properties.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**masscenter** : Point, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A point that represents the center of mass of the body or particle. If no point
    is given, a point is generated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mass** : Sympifyable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A Sympifyable object which represents the mass of the body. If no mass is passed,
    one is generated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The ReferenceFrame that represents the reference frame of the body. If no frame
    is given, a frame is generated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**central_inertia** : Dyadic, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Central inertia dyadic of the body. If none is passed while creating RigidBody,
    a default inertia is generated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The attributes that Body possesses will be the same as a Particle instance or
    a Rigid Body instance depending on which was created. Additional attributes are
    listed below.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Default behaviour. This results in the creation of a RigidBody object for which
    the mass, mass center, frame and inertia attributes are given default values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This next example demonstrates the code required to specify all of the values
    of the Body object. Note this will also create a RigidBody version of the Body
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The minimal code required to create a Particle version of the Body object involves
    simply passing in a name and a mass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Particle version of the Body object can also receive a masscenter point
    and a reference frame, just not an inertia.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| name | (string) The body’s name |'
  prefs: []
  type: TYPE_TB
- en: '| masscenter | (Point) The point which represents the center of mass of the
    rigid body |'
  prefs: []
  type: TYPE_TB
- en: '| frame | (ReferenceFrame) The reference frame which the body is fixed in |'
  prefs: []
  type: TYPE_TB
- en: '| mass | (Sympifyable) The body’s mass |'
  prefs: []
  type: TYPE_TB
- en: '| inertia | ((Dyadic, Point)) The body’s inertia around its center of mass.
    This attribute is specific to the rigid body form of Body and is left undefined
    for the Particle form |'
  prefs: []
  type: TYPE_TB
- en: '| loads | (iterable) This list contains information on the different loads
    acting on the Body. Forces are listed as a (point, vector) tuple and torques are
    listed as (reference frame, vector) tuples. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns this body’s angular velocity with respect to the provided rigid body
    or reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**body: Body or ReferenceFrame**'
  prefs: []
  type: TYPE_NORMAL
- en: The rigid body or reference frame to calculate the angular velocity in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Returns the angular momentum of the rigid body about a point in the given frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point about which angular momentum is desired.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame in which angular momentum is desired.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The angular momentum H of a rigid body B about some point O in a frame N is
    given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '`H = dot(I, w) + cross(r, m * v)`'
  prefs: []
  type: TYPE_NORMAL
- en: where I and m are the central inertia dyadic and mass of rigid body B, w is
    the angular velocity of body B in the frame N, r is the position vector from point
    O to the mass center of B, and v is the velocity of the mass center in the frame
    N.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Add force to the body(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**force: Vector**'
  prefs: []
  type: TYPE_NORMAL
- en: The force to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point: Point, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: The point on self on which force is applied. By default self’s masscenter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**reaction_body: Body, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Second body on which equal and opposite force is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**reaction_point** : Point, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The point on other body on which equal and opposite force is applied. By default
    masscenter of other body.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Applies the force on self or equal and opposite forces on self and other body
    if both are given on the desired point on the bodies. The force applied on other
    body is taken opposite of self, i.e, -force.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We can also remove some part of force from any point on the body by adding the
    opposite force to the body on that point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let’s remove f1 from point P on body B.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To further demonstrate the use of `apply_force` attribute, consider two bodies
    connected through a spring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s apply equal and opposite spring force to the bodies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can check the loads(forces) applied to bodies now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If a new force is applied to a body on a point which already has some force
    applied on it, then the new force is added to the already applied force on that
    point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Add torque to the body(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**torque: Vector**'
  prefs: []
  type: TYPE_NORMAL
- en: The torque to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**reaction_body: Body, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Second body on which equal and opposite torque is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Applies the torque on self or equal and opposite torques on self and other body
    if both are given. The torque applied on other body is taken opposite of self,
    i.e, -torque.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can also remove some part of torque from the body by adding the opposite
    torque to the body.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let’s remove t1 from Body B.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To further demonstrate the use, let us consider two bodies such that a torque
    \(T\) is acting on one body, and \(-T\) on the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s apply equal and opposite torque to the bodies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We can check the loads (torques) applied to bodies now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If a new torque is applied on body which already has some torque applied on
    it, then the new torque is added to the previous torque about the body’s frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The body’s central inertia dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Clears the Body’s loads list.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Returns the direction cosine matrix of this body relative to the provided rigid
    body or reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**body: Body or ReferenceFrame**'
  prefs: []
  type: TYPE_NORMAL
- en: The rigid body or reference frame to calculate the dcm.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The ReferenceFrame fixed to the body.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The body’s inertia about a point; stored as (Dyadic, Point).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Kinetic energy of the body.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame or Body'
  prefs: []
  type: TYPE_NORMAL
- en: The Body’s angular velocity and the velocity of it’s mass center are typically
    defined with respect to an inertial frame but any relevant frame in which the
    velocities are known can be supplied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics`](../index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")'
  prefs: []
  type: TYPE_NORMAL
- en: Particle, RigidBody
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Linear momentum of the rigid body.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame in which linear momentum is desired.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The linear momentum L, of a rigid body B, with respect to frame N is given
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: '`L = m * v`'
  prefs: []
  type: TYPE_NORMAL
- en: where m is the mass of the rigid body, and v is the velocity of the mass center
    of B in the frame N.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The body’s mass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The body’s center of mass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns the velocity of the mass center with respect to the provided rigid body
    or reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**body: Body or ReferenceFrame**'
  prefs: []
  type: TYPE_NORMAL
- en: The rigid body or reference frame to calculate the velocity in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The name of the body.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inertia dyadic of the body with respect to another point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : sympy.physics.vector.Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point to express the inertia dyadic about.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : sympy.physics.vector.ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame used to construct the dyadic.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inertia** : sympy.physics.vector.Dyadic'
  prefs: []
  type: TYPE_NORMAL
- en: The inertia dyadic of the rigid body expressed about the provided point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The body’s center of mass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The potential energy of the body.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Remove load about a point or frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**about** : Point or ReferenceFrame, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The point about which force is applied, and is to be removed. If about is None,
    then the torque about self’s frame is removed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: As Body has been deprecated, the following examples are for illustrative purposes
    only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle"). To ignore the deprecation warning
    we can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the Body, in the x direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the Body, in the y direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the Body, in the z direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Method for formulating the equations of motion using a set of interconnected
    bodies with joints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.13: The JointsMethod class is deprecated. Its functionality
    has been replaced by the new [`System`](system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System") class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**newtonion** : Body or ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The newtonion(inertial) frame.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***joints** : Joint'
  prefs: []
  type: TYPE_NORMAL
- en: The joints in the system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: As Body and JointsMethod have been deprecated, the following examples are for
    illustrative purposes only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") and the functionality of JointsMethod
    is fully captured by [`System`](system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System"). To ignore the deprecation warning we
    can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple example for a one degree of freedom translational spring-mass-damper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`JointsMethod` currently only works with systems that do not have any configuration
    or motion constraints.'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| q, u | (iterable) Iterable of the generalized coordinates and speeds |'
  prefs: []
  type: TYPE_TB
- en: '| bodies | (iterable) Iterable of Body objects in the system. |'
  prefs: []
  type: TYPE_TB
- en: '| loads | (iterable) Iterable of (Point, vector) or (ReferenceFrame, vector)
    tuples describing the forces on the system. |'
  prefs: []
  type: TYPE_TB
- en: '| mass_matrix | (Matrix, shape(n, n)) The system’s mass matrix |'
  prefs: []
  type: TYPE_TB
- en: '| forcing | (Matrix, shape(n, 1)) The system’s forcing vector |'
  prefs: []
  type: TYPE_TB
- en: '| mass_matrix_full | (Matrix, shape(2*n, 2*n)) The “mass matrix” for the u’s
    and q’s |'
  prefs: []
  type: TYPE_TB
- en: '| forcing_full | (Matrix, shape(2*n, 1)) The “forcing vector” for the u’s and
    q’s |'
  prefs: []
  type: TYPE_TB
- en: '| method | (KanesMethod or Lagrange’s method) Method’s object. |'
  prefs: []
  type: TYPE_TB
- en: '| kdes | (iterable) Iterable of kde in they system. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: List of bodies in they system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The system’s forcing vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The “forcing vector” for the u’s and q’s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Method to form system’s equation of motions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** : Class'
  prefs: []
  type: TYPE_NORMAL
- en: Class name of method.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix
  prefs: []
  type: TYPE_NORMAL
- en: Vector of equations of motions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: As Body and JointsMethod have been deprecated, the following examples are for
    illustrative purposes only. The functionality of Body is fully captured by [`RigidBody`](part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") and the functionality of JointsMethod
    is fully captured by [`System`](system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System"). To ignore the deprecation warning we
    can use the ignore_warnings context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple example for a one degree of freedom translational spring-mass-damper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We can also solve for the states using the ‘rhs’ method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: List of the generalized coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: List of loads on the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The system’s mass matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The “mass matrix” for the u’s and q’s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Object of method used to form equations of systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: List of the generalized coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returns equations that can be solved numerically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inv_method** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The specific sympy inverse matrix calculation method to use. For a list of valid
    methods, see [`inv()`](../../../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.inv
    "sympy.matrices.matrixbase.MatrixBase.inv")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix
  prefs: []
  type: TYPE_NORMAL
- en: Numerically solvable equations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics.kane.KanesMethod.rhs`](kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod.rhs
    "sympy.physics.mechanics.kane.KanesMethod.rhs")'
  prefs: []
  type: TYPE_NORMAL
- en: KanesMethod’s rhs function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics.lagrange.LagrangesMethod.rhs`](kane_lagrange.html#sympy.physics.mechanics.lagrange.LagrangesMethod.rhs
    "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs")'
  prefs: []
  type: TYPE_NORMAL
- en: LagrangesMethod’s rhs function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: List of the generalized speeds.
  prefs: []
  type: TYPE_NORMAL
