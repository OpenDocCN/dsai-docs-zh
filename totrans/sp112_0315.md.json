["```py\nscipy.linalg.clarkson_woodruff_transform(input_matrix, sketch_size, seed=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> from scipy import sparse\n>>> rng = np.random.default_rng()\n>>> n_rows, n_columns, density, sketch_n_rows = 15000, 100, 0.01, 200\n>>> A = sparse.rand(n_rows, n_columns, density=density, format='csc')\n>>> B = sparse.rand(n_rows, n_columns, density=density, format='csr')\n>>> C = sparse.rand(n_rows, n_columns, density=density, format='coo')\n>>> D = rng.standard_normal((n_rows, n_columns))\n>>> SA = linalg.clarkson_woodruff_transform(A, sketch_n_rows) # fastest\n>>> SB = linalg.clarkson_woodruff_transform(B, sketch_n_rows) # fast\n>>> SC = linalg.clarkson_woodruff_transform(C, sketch_n_rows) # slower\n>>> SD = linalg.clarkson_woodruff_transform(D, sketch_n_rows) # slowest \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> n_rows, n_columns  = 15000, 100\n>>> rng = np.random.default_rng()\n>>> A = rng.standard_normal((n_rows, n_columns)) \n```", "```py\n>>> sketch_n_rows = 200\n>>> sketch = linalg.clarkson_woodruff_transform(A, sketch_n_rows, seed=rng)\n>>> sketch.shape\n(200, 100) \n```", "```py\n>>> linalg.norm(A)\n1224.2812927123198\n>>> linalg.norm(sketch)\n1226.518328407333 \n```", "```py\n>>> b = rng.standard_normal(n_rows)\n>>> x = linalg.lstsq(A, b)[0]\n>>> Ab = np.hstack((A, b.reshape(-1, 1)))\n>>> SAb = linalg.clarkson_woodruff_transform(Ab, sketch_n_rows, seed=rng)\n>>> SA, Sb = SAb[:, :-1], SAb[:, -1]\n>>> x_sketched = linalg.lstsq(SA, Sb)[0] \n```", "```py\n>>> linalg.norm(A @ x - b)\n122.83242365433877\n>>> linalg.norm(A @ x_sketched - b)\n166.58473879945151 \n```"]