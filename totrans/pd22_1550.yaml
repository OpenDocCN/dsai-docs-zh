- en: Window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/window.html](https://pandas.pydata.org/docs/reference/window.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pandas.api.typing.Rolling` instances are returned by `.rolling` calls: [`pandas.DataFrame.rolling()`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling") and [`pandas.Series.rolling()`](api/pandas.Series.rolling.html#pandas.Series.rolling
    "pandas.Series.rolling"). `pandas.api.typing.Expanding` instances are returned
    by `.expanding` calls: [`pandas.DataFrame.expanding()`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") and [`pandas.Series.expanding()`](api/pandas.Series.expanding.html#pandas.Series.expanding
    "pandas.Series.expanding"). `pandas.api.typing.ExponentialMovingWindow` instances
    are returned by `.ewm` calls: [`pandas.DataFrame.ewm()`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm
    "pandas.DataFrame.ewm") and [`pandas.Series.ewm()`](api/pandas.Series.ewm.html#pandas.Series.ewm
    "pandas.Series.ewm").'
  prefs: []
  type: TYPE_NORMAL
- en: '## Rolling window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Rolling.count`](api/pandas.core.window.rolling.Rolling.count.html#pandas.core.window.rolling.Rolling.count
    "pandas.core.window.rolling.Rolling.count")([numeric_only]) | Calculate the rolling
    count of non NaN observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.sum`](api/pandas.core.window.rolling.Rolling.sum.html#pandas.core.window.rolling.Rolling.sum
    "pandas.core.window.rolling.Rolling.sum")([numeric_only, engine, ...]) | Calculate
    the rolling sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.mean`](api/pandas.core.window.rolling.Rolling.mean.html#pandas.core.window.rolling.Rolling.mean
    "pandas.core.window.rolling.Rolling.mean")([numeric_only, engine, ...]) | Calculate
    the rolling mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.median`](api/pandas.core.window.rolling.Rolling.median.html#pandas.core.window.rolling.Rolling.median
    "pandas.core.window.rolling.Rolling.median")([numeric_only, engine, ...]) | Calculate
    the rolling median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.var`](api/pandas.core.window.rolling.Rolling.var.html#pandas.core.window.rolling.Rolling.var
    "pandas.core.window.rolling.Rolling.var")([ddof, numeric_only, engine, ...]) |
    Calculate the rolling variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.std`](api/pandas.core.window.rolling.Rolling.std.html#pandas.core.window.rolling.Rolling.std
    "pandas.core.window.rolling.Rolling.std")([ddof, numeric_only, engine, ...]) |
    Calculate the rolling standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.min`](api/pandas.core.window.rolling.Rolling.min.html#pandas.core.window.rolling.Rolling.min
    "pandas.core.window.rolling.Rolling.min")([numeric_only, engine, ...]) | Calculate
    the rolling minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.max`](api/pandas.core.window.rolling.Rolling.max.html#pandas.core.window.rolling.Rolling.max
    "pandas.core.window.rolling.Rolling.max")([numeric_only, engine, ...]) | Calculate
    the rolling maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.corr`](api/pandas.core.window.rolling.Rolling.corr.html#pandas.core.window.rolling.Rolling.corr
    "pandas.core.window.rolling.Rolling.corr")([other, pairwise, ddof, ...]) | Calculate
    the rolling correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.cov`](api/pandas.core.window.rolling.Rolling.cov.html#pandas.core.window.rolling.Rolling.cov
    "pandas.core.window.rolling.Rolling.cov")([other, pairwise, ddof, ...]) | Calculate
    the rolling sample covariance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.skew`](api/pandas.core.window.rolling.Rolling.skew.html#pandas.core.window.rolling.Rolling.skew
    "pandas.core.window.rolling.Rolling.skew")([numeric_only]) | Calculate the rolling
    unbiased skewness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.kurt`](api/pandas.core.window.rolling.Rolling.kurt.html#pandas.core.window.rolling.Rolling.kurt
    "pandas.core.window.rolling.Rolling.kurt")([numeric_only]) | Calculate the rolling
    Fisher''s definition of kurtosis without bias. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.apply`](api/pandas.core.window.rolling.Rolling.apply.html#pandas.core.window.rolling.Rolling.apply
    "pandas.core.window.rolling.Rolling.apply")(func[, raw, engine, ...]) | Calculate
    the rolling custom aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.aggregate`](api/pandas.core.window.rolling.Rolling.aggregate.html#pandas.core.window.rolling.Rolling.aggregate
    "pandas.core.window.rolling.Rolling.aggregate")(func, *args, **kwargs) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.quantile`](api/pandas.core.window.rolling.Rolling.quantile.html#pandas.core.window.rolling.Rolling.quantile
    "pandas.core.window.rolling.Rolling.quantile")(q[, interpolation, ...]) | Calculate
    the rolling quantile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.sem`](api/pandas.core.window.rolling.Rolling.sem.html#pandas.core.window.rolling.Rolling.sem
    "pandas.core.window.rolling.Rolling.sem")([ddof, numeric_only]) | Calculate the
    rolling standard error of mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.rank`](api/pandas.core.window.rolling.Rolling.rank.html#pandas.core.window.rolling.Rolling.rank
    "pandas.core.window.rolling.Rolling.rank")([method, ascending, pct, ...]) | Calculate
    the rolling rank. |  ## Weighted window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Window.mean`](api/pandas.core.window.rolling.Window.mean.html#pandas.core.window.rolling.Window.mean
    "pandas.core.window.rolling.Window.mean")([numeric_only]) | Calculate the rolling
    weighted window mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.sum`](api/pandas.core.window.rolling.Window.sum.html#pandas.core.window.rolling.Window.sum
    "pandas.core.window.rolling.Window.sum")([numeric_only]) | Calculate the rolling
    weighted window sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.var`](api/pandas.core.window.rolling.Window.var.html#pandas.core.window.rolling.Window.var
    "pandas.core.window.rolling.Window.var")([ddof, numeric_only]) | Calculate the
    rolling weighted window variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.std`](api/pandas.core.window.rolling.Window.std.html#pandas.core.window.rolling.Window.std
    "pandas.core.window.rolling.Window.std")([ddof, numeric_only]) | Calculate the
    rolling weighted window standard deviation. |  ## Expanding window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Expanding.count`](api/pandas.core.window.expanding.Expanding.count.html#pandas.core.window.expanding.Expanding.count
    "pandas.core.window.expanding.Expanding.count")([numeric_only]) | Calculate the
    expanding count of non NaN observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.sum`](api/pandas.core.window.expanding.Expanding.sum.html#pandas.core.window.expanding.Expanding.sum
    "pandas.core.window.expanding.Expanding.sum")([numeric_only, engine, ...]) | Calculate
    the expanding sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.mean`](api/pandas.core.window.expanding.Expanding.mean.html#pandas.core.window.expanding.Expanding.mean
    "pandas.core.window.expanding.Expanding.mean")([numeric_only, engine, ...]) |
    Calculate the expanding mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.median`](api/pandas.core.window.expanding.Expanding.median.html#pandas.core.window.expanding.Expanding.median
    "pandas.core.window.expanding.Expanding.median")([numeric_only, engine, ...])
    | Calculate the expanding median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.var`](api/pandas.core.window.expanding.Expanding.var.html#pandas.core.window.expanding.Expanding.var
    "pandas.core.window.expanding.Expanding.var")([ddof, numeric_only, engine, ...])
    | Calculate the expanding variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.std`](api/pandas.core.window.expanding.Expanding.std.html#pandas.core.window.expanding.Expanding.std
    "pandas.core.window.expanding.Expanding.std")([ddof, numeric_only, engine, ...])
    | Calculate the expanding standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.min`](api/pandas.core.window.expanding.Expanding.min.html#pandas.core.window.expanding.Expanding.min
    "pandas.core.window.expanding.Expanding.min")([numeric_only, engine, ...]) | Calculate
    the expanding minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.max`](api/pandas.core.window.expanding.Expanding.max.html#pandas.core.window.expanding.Expanding.max
    "pandas.core.window.expanding.Expanding.max")([numeric_only, engine, ...]) | Calculate
    the expanding maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.corr`](api/pandas.core.window.expanding.Expanding.corr.html#pandas.core.window.expanding.Expanding.corr
    "pandas.core.window.expanding.Expanding.corr")([other, pairwise, ddof, ...]) |
    Calculate the expanding correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.cov`](api/pandas.core.window.expanding.Expanding.cov.html#pandas.core.window.expanding.Expanding.cov
    "pandas.core.window.expanding.Expanding.cov")([other, pairwise, ddof, ...]) |
    Calculate the expanding sample covariance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.skew`](api/pandas.core.window.expanding.Expanding.skew.html#pandas.core.window.expanding.Expanding.skew
    "pandas.core.window.expanding.Expanding.skew")([numeric_only]) | Calculate the
    expanding unbiased skewness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.kurt`](api/pandas.core.window.expanding.Expanding.kurt.html#pandas.core.window.expanding.Expanding.kurt
    "pandas.core.window.expanding.Expanding.kurt")([numeric_only]) | Calculate the
    expanding Fisher''s definition of kurtosis without bias. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.apply`](api/pandas.core.window.expanding.Expanding.apply.html#pandas.core.window.expanding.Expanding.apply
    "pandas.core.window.expanding.Expanding.apply")(func[, raw, engine, ...]) | Calculate
    the expanding custom aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.aggregate`](api/pandas.core.window.expanding.Expanding.aggregate.html#pandas.core.window.expanding.Expanding.aggregate
    "pandas.core.window.expanding.Expanding.aggregate")(func, *args, **kwargs) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.quantile`](api/pandas.core.window.expanding.Expanding.quantile.html#pandas.core.window.expanding.Expanding.quantile
    "pandas.core.window.expanding.Expanding.quantile")(q[, interpolation, ...]) |
    Calculate the expanding quantile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.sem`](api/pandas.core.window.expanding.Expanding.sem.html#pandas.core.window.expanding.Expanding.sem
    "pandas.core.window.expanding.Expanding.sem")([ddof, numeric_only]) | Calculate
    the expanding standard error of mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.rank`](api/pandas.core.window.expanding.Expanding.rank.html#pandas.core.window.expanding.Expanding.rank
    "pandas.core.window.expanding.Expanding.rank")([method, ascending, pct, ...])
    | Calculate the expanding rank. |  ## Exponentially-weighted window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ExponentialMovingWindow.mean`](api/pandas.core.window.ewm.ExponentialMovingWindow.mean.html#pandas.core.window.ewm.ExponentialMovingWindow.mean
    "pandas.core.window.ewm.ExponentialMovingWindow.mean")([numeric_only, ...]) |
    Calculate the ewm (exponential weighted moment) mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.sum`](api/pandas.core.window.ewm.ExponentialMovingWindow.sum.html#pandas.core.window.ewm.ExponentialMovingWindow.sum
    "pandas.core.window.ewm.ExponentialMovingWindow.sum")([numeric_only, ...]) | Calculate
    the ewm (exponential weighted moment) sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.std`](api/pandas.core.window.ewm.ExponentialMovingWindow.std.html#pandas.core.window.ewm.ExponentialMovingWindow.std
    "pandas.core.window.ewm.ExponentialMovingWindow.std")([bias, numeric_only]) |
    Calculate the ewm (exponential weighted moment) standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.var`](api/pandas.core.window.ewm.ExponentialMovingWindow.var.html#pandas.core.window.ewm.ExponentialMovingWindow.var
    "pandas.core.window.ewm.ExponentialMovingWindow.var")([bias, numeric_only]) |
    Calculate the ewm (exponential weighted moment) variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.corr`](api/pandas.core.window.ewm.ExponentialMovingWindow.corr.html#pandas.core.window.ewm.ExponentialMovingWindow.corr
    "pandas.core.window.ewm.ExponentialMovingWindow.corr")([other, ...]) | Calculate
    the ewm (exponential weighted moment) sample correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.cov`](api/pandas.core.window.ewm.ExponentialMovingWindow.cov.html#pandas.core.window.ewm.ExponentialMovingWindow.cov
    "pandas.core.window.ewm.ExponentialMovingWindow.cov")([other, ...]) | Calculate
    the ewm (exponential weighted moment) sample covariance. |  ## Window indexer'
  prefs: []
  type: TYPE_NORMAL
- en: Base class for defining custom window boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`api.indexers.BaseIndexer`](api/pandas.api.indexers.BaseIndexer.html#pandas.api.indexers.BaseIndexer
    "pandas.api.indexers.BaseIndexer")([index_array, ...]) | Base class for window
    bounds calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.indexers.FixedForwardWindowIndexer`](api/pandas.api.indexers.FixedForwardWindowIndexer.html#pandas.api.indexers.FixedForwardWindowIndexer
    "pandas.api.indexers.FixedForwardWindowIndexer")([...]) | Creates window boundaries
    for fixed-length windows that include the current row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.indexers.VariableOffsetWindowIndexer`](api/pandas.api.indexers.VariableOffsetWindowIndexer.html#pandas.api.indexers.VariableOffsetWindowIndexer
    "pandas.api.indexers.VariableOffsetWindowIndexer")([...]) | Calculate window boundaries
    based on a non-fixed offset such as a BusinessDay. |  ## Rolling window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Rolling.count`](api/pandas.core.window.rolling.Rolling.count.html#pandas.core.window.rolling.Rolling.count
    "pandas.core.window.rolling.Rolling.count")([numeric_only]) | Calculate the rolling
    count of non NaN observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.sum`](api/pandas.core.window.rolling.Rolling.sum.html#pandas.core.window.rolling.Rolling.sum
    "pandas.core.window.rolling.Rolling.sum")([numeric_only, engine, ...]) | Calculate
    the rolling sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.mean`](api/pandas.core.window.rolling.Rolling.mean.html#pandas.core.window.rolling.Rolling.mean
    "pandas.core.window.rolling.Rolling.mean")([numeric_only, engine, ...]) | Calculate
    the rolling mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.median`](api/pandas.core.window.rolling.Rolling.median.html#pandas.core.window.rolling.Rolling.median
    "pandas.core.window.rolling.Rolling.median")([numeric_only, engine, ...]) | Calculate
    the rolling median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.var`](api/pandas.core.window.rolling.Rolling.var.html#pandas.core.window.rolling.Rolling.var
    "pandas.core.window.rolling.Rolling.var")([ddof, numeric_only, engine, ...]) |
    Calculate the rolling variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.std`](api/pandas.core.window.rolling.Rolling.std.html#pandas.core.window.rolling.Rolling.std
    "pandas.core.window.rolling.Rolling.std")([ddof, numeric_only, engine, ...]) |
    Calculate the rolling standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.min`](api/pandas.core.window.rolling.Rolling.min.html#pandas.core.window.rolling.Rolling.min
    "pandas.core.window.rolling.Rolling.min")([numeric_only, engine, ...]) | Calculate
    the rolling minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.max`](api/pandas.core.window.rolling.Rolling.max.html#pandas.core.window.rolling.Rolling.max
    "pandas.core.window.rolling.Rolling.max")([numeric_only, engine, ...]) | Calculate
    the rolling maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.corr`](api/pandas.core.window.rolling.Rolling.corr.html#pandas.core.window.rolling.Rolling.corr
    "pandas.core.window.rolling.Rolling.corr")([other, pairwise, ddof, ...]) | Calculate
    the rolling correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.cov`](api/pandas.core.window.rolling.Rolling.cov.html#pandas.core.window.rolling.Rolling.cov
    "pandas.core.window.rolling.Rolling.cov")([other, pairwise, ddof, ...]) | Calculate
    the rolling sample covariance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.skew`](api/pandas.core.window.rolling.Rolling.skew.html#pandas.core.window.rolling.Rolling.skew
    "pandas.core.window.rolling.Rolling.skew")([numeric_only]) | Calculate the rolling
    unbiased skewness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.kurt`](api/pandas.core.window.rolling.Rolling.kurt.html#pandas.core.window.rolling.Rolling.kurt
    "pandas.core.window.rolling.Rolling.kurt")([numeric_only]) | Calculate the rolling
    Fisher''s definition of kurtosis without bias. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.apply`](api/pandas.core.window.rolling.Rolling.apply.html#pandas.core.window.rolling.Rolling.apply
    "pandas.core.window.rolling.Rolling.apply")(func[, raw, engine, ...]) | Calculate
    the rolling custom aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.aggregate`](api/pandas.core.window.rolling.Rolling.aggregate.html#pandas.core.window.rolling.Rolling.aggregate
    "pandas.core.window.rolling.Rolling.aggregate")(func, *args, **kwargs) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.quantile`](api/pandas.core.window.rolling.Rolling.quantile.html#pandas.core.window.rolling.Rolling.quantile
    "pandas.core.window.rolling.Rolling.quantile")(q[, interpolation, ...]) | Calculate
    the rolling quantile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.sem`](api/pandas.core.window.rolling.Rolling.sem.html#pandas.core.window.rolling.Rolling.sem
    "pandas.core.window.rolling.Rolling.sem")([ddof, numeric_only]) | Calculate the
    rolling standard error of mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Rolling.rank`](api/pandas.core.window.rolling.Rolling.rank.html#pandas.core.window.rolling.Rolling.rank
    "pandas.core.window.rolling.Rolling.rank")([method, ascending, pct, ...]) | Calculate
    the rolling rank. |'
  prefs: []
  type: TYPE_TB
- en: '## Weighted window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Window.mean`](api/pandas.core.window.rolling.Window.mean.html#pandas.core.window.rolling.Window.mean
    "pandas.core.window.rolling.Window.mean")([numeric_only]) | Calculate the rolling
    weighted window mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.sum`](api/pandas.core.window.rolling.Window.sum.html#pandas.core.window.rolling.Window.sum
    "pandas.core.window.rolling.Window.sum")([numeric_only]) | Calculate the rolling
    weighted window sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.var`](api/pandas.core.window.rolling.Window.var.html#pandas.core.window.rolling.Window.var
    "pandas.core.window.rolling.Window.var")([ddof, numeric_only]) | Calculate the
    rolling weighted window variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Window.std`](api/pandas.core.window.rolling.Window.std.html#pandas.core.window.rolling.Window.std
    "pandas.core.window.rolling.Window.std")([ddof, numeric_only]) | Calculate the
    rolling weighted window standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '## Expanding window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Expanding.count`](api/pandas.core.window.expanding.Expanding.count.html#pandas.core.window.expanding.Expanding.count
    "pandas.core.window.expanding.Expanding.count")([numeric_only]) | Calculate the
    expanding count of non NaN observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.sum`](api/pandas.core.window.expanding.Expanding.sum.html#pandas.core.window.expanding.Expanding.sum
    "pandas.core.window.expanding.Expanding.sum")([numeric_only, engine, ...]) | Calculate
    the expanding sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.mean`](api/pandas.core.window.expanding.Expanding.mean.html#pandas.core.window.expanding.Expanding.mean
    "pandas.core.window.expanding.Expanding.mean")([numeric_only, engine, ...]) |
    Calculate the expanding mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.median`](api/pandas.core.window.expanding.Expanding.median.html#pandas.core.window.expanding.Expanding.median
    "pandas.core.window.expanding.Expanding.median")([numeric_only, engine, ...])
    | Calculate the expanding median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.var`](api/pandas.core.window.expanding.Expanding.var.html#pandas.core.window.expanding.Expanding.var
    "pandas.core.window.expanding.Expanding.var")([ddof, numeric_only, engine, ...])
    | Calculate the expanding variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.std`](api/pandas.core.window.expanding.Expanding.std.html#pandas.core.window.expanding.Expanding.std
    "pandas.core.window.expanding.Expanding.std")([ddof, numeric_only, engine, ...])
    | Calculate the expanding standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.min`](api/pandas.core.window.expanding.Expanding.min.html#pandas.core.window.expanding.Expanding.min
    "pandas.core.window.expanding.Expanding.min")([numeric_only, engine, ...]) | Calculate
    the expanding minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.max`](api/pandas.core.window.expanding.Expanding.max.html#pandas.core.window.expanding.Expanding.max
    "pandas.core.window.expanding.Expanding.max")([numeric_only, engine, ...]) | Calculate
    the expanding maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.corr`](api/pandas.core.window.expanding.Expanding.corr.html#pandas.core.window.expanding.Expanding.corr
    "pandas.core.window.expanding.Expanding.corr")([other, pairwise, ddof, ...]) |
    Calculate the expanding correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.cov`](api/pandas.core.window.expanding.Expanding.cov.html#pandas.core.window.expanding.Expanding.cov
    "pandas.core.window.expanding.Expanding.cov")([other, pairwise, ddof, ...]) |
    Calculate the expanding sample covariance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.skew`](api/pandas.core.window.expanding.Expanding.skew.html#pandas.core.window.expanding.Expanding.skew
    "pandas.core.window.expanding.Expanding.skew")([numeric_only]) | Calculate the
    expanding unbiased skewness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.kurt`](api/pandas.core.window.expanding.Expanding.kurt.html#pandas.core.window.expanding.Expanding.kurt
    "pandas.core.window.expanding.Expanding.kurt")([numeric_only]) | Calculate the
    expanding Fisher''s definition of kurtosis without bias. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.apply`](api/pandas.core.window.expanding.Expanding.apply.html#pandas.core.window.expanding.Expanding.apply
    "pandas.core.window.expanding.Expanding.apply")(func[, raw, engine, ...]) | Calculate
    the expanding custom aggregation function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.aggregate`](api/pandas.core.window.expanding.Expanding.aggregate.html#pandas.core.window.expanding.Expanding.aggregate
    "pandas.core.window.expanding.Expanding.aggregate")(func, *args, **kwargs) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.quantile`](api/pandas.core.window.expanding.Expanding.quantile.html#pandas.core.window.expanding.Expanding.quantile
    "pandas.core.window.expanding.Expanding.quantile")(q[, interpolation, ...]) |
    Calculate the expanding quantile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.sem`](api/pandas.core.window.expanding.Expanding.sem.html#pandas.core.window.expanding.Expanding.sem
    "pandas.core.window.expanding.Expanding.sem")([ddof, numeric_only]) | Calculate
    the expanding standard error of mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Expanding.rank`](api/pandas.core.window.expanding.Expanding.rank.html#pandas.core.window.expanding.Expanding.rank
    "pandas.core.window.expanding.Expanding.rank")([method, ascending, pct, ...])
    | Calculate the expanding rank. |'
  prefs: []
  type: TYPE_TB
- en: '## Exponentially-weighted window functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ExponentialMovingWindow.mean`](api/pandas.core.window.ewm.ExponentialMovingWindow.mean.html#pandas.core.window.ewm.ExponentialMovingWindow.mean
    "pandas.core.window.ewm.ExponentialMovingWindow.mean")([numeric_only, ...]) |
    Calculate the ewm (exponential weighted moment) mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.sum`](api/pandas.core.window.ewm.ExponentialMovingWindow.sum.html#pandas.core.window.ewm.ExponentialMovingWindow.sum
    "pandas.core.window.ewm.ExponentialMovingWindow.sum")([numeric_only, ...]) | Calculate
    the ewm (exponential weighted moment) sum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.std`](api/pandas.core.window.ewm.ExponentialMovingWindow.std.html#pandas.core.window.ewm.ExponentialMovingWindow.std
    "pandas.core.window.ewm.ExponentialMovingWindow.std")([bias, numeric_only]) |
    Calculate the ewm (exponential weighted moment) standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.var`](api/pandas.core.window.ewm.ExponentialMovingWindow.var.html#pandas.core.window.ewm.ExponentialMovingWindow.var
    "pandas.core.window.ewm.ExponentialMovingWindow.var")([bias, numeric_only]) |
    Calculate the ewm (exponential weighted moment) variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.corr`](api/pandas.core.window.ewm.ExponentialMovingWindow.corr.html#pandas.core.window.ewm.ExponentialMovingWindow.corr
    "pandas.core.window.ewm.ExponentialMovingWindow.corr")([other, ...]) | Calculate
    the ewm (exponential weighted moment) sample correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExponentialMovingWindow.cov`](api/pandas.core.window.ewm.ExponentialMovingWindow.cov.html#pandas.core.window.ewm.ExponentialMovingWindow.cov
    "pandas.core.window.ewm.ExponentialMovingWindow.cov")([other, ...]) | Calculate
    the ewm (exponential weighted moment) sample covariance. |'
  prefs: []
  type: TYPE_TB
- en: '## Window indexer'
  prefs: []
  type: TYPE_NORMAL
- en: Base class for defining custom window boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`api.indexers.BaseIndexer`](api/pandas.api.indexers.BaseIndexer.html#pandas.api.indexers.BaseIndexer
    "pandas.api.indexers.BaseIndexer")([index_array, ...]) | Base class for window
    bounds calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.indexers.FixedForwardWindowIndexer`](api/pandas.api.indexers.FixedForwardWindowIndexer.html#pandas.api.indexers.FixedForwardWindowIndexer
    "pandas.api.indexers.FixedForwardWindowIndexer")([...]) | Creates window boundaries
    for fixed-length windows that include the current row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.indexers.VariableOffsetWindowIndexer`](api/pandas.api.indexers.VariableOffsetWindowIndexer.html#pandas.api.indexers.VariableOffsetWindowIndexer
    "pandas.api.indexers.VariableOffsetWindowIndexer")([...]) | Calculate window boundaries
    based on a non-fixed offset such as a BusinessDay. |'
  prefs: []
  type: TYPE_TB
