["```py\nnumpy.ma.masked\n```", "```py\n>>> x = ma.array([1, 2, 3], mask=[0, 1, 0])\n>>> x[1] is ma.masked\nTrue\n>>> x[-1] = ma.masked\n>>> x\nmasked_array(data=[1, --, --],\n mask=[False,  True,  True],\n fill_value=999999) \n```", "```py\nnumpy.ma.nomask\n```", "```py\nnumpy.ma.masked_print_option\n```", "```py\nclass numpy.ma.MaskedArray\n```", "```py\nma.MaskedArray.data\n```", "```py\n>>> x = np.ma.array(np.matrix([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n>>> x.data\nmatrix([[1, 2],\n [3, 4]]) \n```", "```py\nma.MaskedArray.mask\n```", "```py\nma.MaskedArray.recordmask\n```", "```py\n>>> x = np.ma.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],\n...         mask=[(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)],\n...        dtype=[('a', int), ('b', int)])\n>>> x.recordmask\narray([False, False,  True, False, False]) \n```", "```py\nma.MaskedArray.fill_value\n```", "```py\n>>> for dt in [np.int32, np.int64, np.float64, np.complex128]:\n...     np.ma.array([0, 1], dtype=dt).get_fill_value()\n...\n999999\n999999\n1e+20\n(1e+20+0j) \n```", "```py\n>>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n>>> x.fill_value\n-inf\n>>> x.fill_value = np.pi\n>>> x.fill_value\n3.1415926535897931 # may vary \n```", "```py\n>>> x.fill_value = None\n>>> x.fill_value\n1e+20 \n```", "```py\nma.MaskedArray.baseclass\n```", "```py\nma.MaskedArray.sharedmask\n```", "```py\nma.MaskedArray.hardmask\n```", "```py\n>>> x = np.arange(10)\n>>> m = np.ma.masked_array(x, x>5)\n>>> assert not m.hardmask \n```", "```py\n>>> m[8] = 42\n>>> m\nmasked_array(data=[0, 1, 2, 3, 4, 5, --, --, 42, --],\n mask=[False, False, False, False, False, False,\n True, True, False, True],\n fill_value=999999) \n```", "```py\n>>> hardened = np.ma.harden_mask(m)\n>>> assert m.hardmask and hardened is m\n>>> m[:] = 23\n>>> m\nmasked_array(data=[23, 23, 23, 23, 23, 23, --, --, 23, --],\n mask=[False, False, False, False, False, False,\n True, True, False, True],\n fill_value=999999) \n```", "```py\nma.MaskedArray.data\n```", "```py\n>>> x = np.ma.array(np.matrix([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n>>> x.data\nmatrix([[1, 2],\n [3, 4]]) \n```", "```py\nma.MaskedArray.mask\n```", "```py\nma.MaskedArray.recordmask\n```", "```py\n>>> x = np.ma.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],\n...         mask=[(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)],\n...        dtype=[('a', int), ('b', int)])\n>>> x.recordmask\narray([False, False,  True, False, False]) \n```", "```py\nma.MaskedArray.fill_value\n```", "```py\n>>> for dt in [np.int32, np.int64, np.float64, np.complex128]:\n...     np.ma.array([0, 1], dtype=dt).get_fill_value()\n...\n999999\n999999\n1e+20\n(1e+20+0j) \n```", "```py\n>>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n>>> x.fill_value\n-inf\n>>> x.fill_value = np.pi\n>>> x.fill_value\n3.1415926535897931 # may vary \n```", "```py\n>>> x.fill_value = None\n>>> x.fill_value\n1e+20 \n```", "```py\nma.MaskedArray.baseclass\n```", "```py\nma.MaskedArray.sharedmask\n```", "```py\nma.MaskedArray.hardmask\n```", "```py\n>>> x = np.arange(10)\n>>> m = np.ma.masked_array(x, x>5)\n>>> assert not m.hardmask \n```", "```py\n>>> m[8] = 42\n>>> m\nmasked_array(data=[0, 1, 2, 3, 4, 5, --, --, 42, --],\n mask=[False, False, False, False, False, False,\n True, True, False, True],\n fill_value=999999) \n```", "```py\n>>> hardened = np.ma.harden_mask(m)\n>>> assert m.hardmask and hardened is m\n>>> m[:] = 23\n>>> m\nmasked_array(data=[23, 23, 23, 23, 23, 23, --, --, 23, --],\n mask=[False, False, False, False, False, False,\n True, True, False, True],\n fill_value=999999) \n```"]