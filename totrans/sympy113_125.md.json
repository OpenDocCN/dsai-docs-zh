["```py\nclass sympy.tensor.toperators.PartialDerivative(expr, *variables)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, TensorHead\n>>> from sympy.tensor.toperators import PartialDerivative\n>>> from sympy import symbols\n>>> L = TensorIndexType(\"L\")\n>>> A = TensorHead(\"A\", [L])\n>>> B = TensorHead(\"B\", [L])\n>>> i, j, k = symbols(\"i j k\") \n```", "```py\n>>> expr = PartialDerivative(A(i), A(j))\n>>> expr\nPartialDerivative(A(i), A(j)) \n```", "```py\n>>> expr.get_indices()\n[i, -j] \n```", "```py\n>>> expr = PartialDerivative(A(i), A(i))\n>>> expr\nPartialDerivative(A(L_0), A(L_0))\n>>> expr.get_indices()\n[L_0, -L_0] \n```", "```py\n>>> expr.get_free_indices()\n[] \n```", "```py\n>>> expr = PartialDerivative(PartialDerivative(A(i), A(j)), A(k))\n>>> expr\nPartialDerivative(A(i), A(j), A(k))\n>>> expr.get_indices()\n[i, -j, -k] \n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import sin, log\n>>> compA = [sin(x), log(x)*y**3]\n>>> compB = [x, y]\n>>> expr = PartialDerivative(A(i), B(j))\n>>> expr.replace_with_arrays({A(i): compA, B(i): compB})\n[[cos(x), 0], [y**3/x, 3*y**2*log(x)]] \n```", "```py\n>>> expr.get_free_indices()\n[i, -j] \n```", "```py\n>>> from sympy import Matrix, Array\n>>> Matrix(compA).diff(Matrix(compB)).reshape(2, 2)\n[[cos(x), y**3/x], [0, 3*y**2*log(x)]]\n>>> Array(compA).diff(Array(compB))\n[[cos(x), y**3/x], [0, 3*y**2*log(x)]] \n```", "```py\n>>> expr.replace_with_arrays({A(i): compA, B(i): compB}, [-j, i])\n[[cos(x), y**3/x], [0, 3*y**2*log(x)]] \n```"]