- en: numpy.fft.rfft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.rfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.rfft.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the one-dimensional discrete Fourier Transform for real input.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the one-dimensional *n*-point discrete Fourier Transform
    (DFT) of a real-valued array by means of an efficient algorithm called the Fast
    Fourier Transform (FFT).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points along transformation axis in the input to use. If *n* is smaller
    than the length of the input, the input is cropped. If it is larger, the input
    is padded with zeros. If *n* is not given, the length of the input along the axis
    specified by *axis* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. If *n* is even, the length
    of the transformed axis is `(n/2)+1`. If *n* is odd, the length is `(n+1)/2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is not a valid axis of *a*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: For definition of the DFT and conventions used.
  prefs: []
  type: TYPE_NORMAL
- en: '[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of [`rfft`](#numpy.fft.rfft "numpy.fft.rfft").
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The one-dimensional FFT of general (complex) input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fftn`](numpy.fft.fftn.html#numpy.fft.fftn "numpy.fft.fftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The *n*-dimensional FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfftn`](numpy.fft.rfftn.html#numpy.fft.rfftn "numpy.fft.rfftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The *n*-dimensional FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When the DFT is computed for purely real input, the output is Hermitian-symmetric,
    i.e. the negative frequency terms are just the complex conjugates of the corresponding
    positive-frequency terms, and the negative-frequency terms are therefore redundant.
    This function does not compute the negative frequency terms, and the length of
    the transformed axis of the output is therefore `n//2 + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: When `A = rfft(a)` and fs is the sampling frequency, `A[0]` contains the zero-frequency
    term 0*fs, which is real due to Hermitian symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: If *n* is even, `A[-1]` contains the term representing both positive and negative
    Nyquist frequency (+fs/2 and -fs/2), and must also be purely real. If *n* is odd,
    there is no term at fs/2; `A[-1]` contains the largest positive frequency (fs/2*(n-1)/n),
    and is complex in the general case.
  prefs: []
  type: TYPE_NORMAL
- en: If the input *a* contains an imaginary part, it is silently discarded.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the final element of the [`fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft") output is the complex conjugate of the second element, for real input.
    For [`rfft`](#numpy.fft.rfft "numpy.fft.rfft"), this symmetry is exploited to
    compute only the non-negative frequency terms.
  prefs: []
  type: TYPE_NORMAL
