- en: UFunc API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UFunc API
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/ufunc.html](https://numpy.org/doc/1.26/reference/c-api/ufunc.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/c-api/ufunc.html](https://numpy.org/doc/1.26/reference/c-api/ufunc.html)
- en: '## Constants'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 常量'
- en: '`UFUNC_ERR_{HANDLER}`'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFUNC_ERR_{HANDLER}`'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`UFUNC_{THING}_{ERR}`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFUNC_{THING}_{ERR}`'
- en: '[PRE4]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`PyUFunc_{VALUE}`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyUFunc_{VALUE}`'
- en: '[PRE16]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Macros
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: '[PRE22]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Used in universal function code to only release the Python GIL if loop->obj
    is not true (*i.e.* this is not an OBJECT array loop). Requires use of [`NPY_BEGIN_THREADS_DEF`](array.html#c.NPY_BEGIN_THREADS_DEF
    "NPY_BEGIN_THREADS_DEF") in variable declaration area.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用于通用函数代码，仅当loop->obj不为真时释放Python GIL（即这不是一个对象数组循环）。在变量声明区域需要使用[`NPY_BEGIN_THREADS_DEF`](array.html#c.NPY_BEGIN_THREADS_DEF
    "NPY_BEGIN_THREADS_DEF") 。
- en: '[PRE23]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Used in universal function code to re-acquire the Python GIL if it was released
    (because loop->obj was not true).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用于通用函数代码，如果释放了Python GIL（因为loop->obj不为真），则重新获取它。
- en: Types
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: '[PRE24]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Pointers to functions that actually implement the underlying (element-by-element)
    function \(N\) times with the following signature:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际实现底层（逐元素）函数的指针，带有以下签名，并进行（N）次操作：
- en: '[PRE25]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*args*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*参数*'
- en: An array of pointers to the actual data for the input and output arrays. The
    input arguments are given first followed by the output arguments.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向输入和输出数组实际数据的指针数组。先给出输入参数，然后是输出参数。
- en: '*dimensions*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*维度*'
- en: A pointer to the size of the dimension over which this function is looping.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向此函数循环的维度大小的指针。
- en: '*steps*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤*'
- en: A pointer to the number of bytes to jump to get to the next element in this
    dimension for each of the input and output arguments.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向每个输入和输出参数中获取下一个元素所需的字节数的指针。
- en: '*data*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据*'
- en: Arbitrary data (extra arguments, function names, *etc.* ) that can be stored
    with the ufunc and will be passed in when it is called. May be `NULL`.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以与ufunc一起存储的任意数据（额外参数、函数名称等）。在调用时将传递给ufunc。可以是`NULL`。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: Accepts `NULL` *data* in addition to array of `NULL`
    values.'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 版本1.23.0中更改：接受`NULL` *data*以及`NULL`值数组。
- en: This is an example of a func specialized for addition of doubles returning doubles.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是专门为返回双精度浮点数的双精度浮点数加法的函数的示例。
- en: '[PRE26]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Functions
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: '[PRE27]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a new broadcasting universal function from required variables. Each ufunc
    builds around the notion of an element-by-element operation. Each ufunc object
    contains pointers to 1-d loops implementing the basic functionality for each supported
    type.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从所需变量创建新的广播通用函数。每个ufunc都围绕逐元素操作的概念构建。每个ufunc对象都包含指向1-d循环的指针，实现了每种支持类型的基本功能。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *func*, *data*, *types*, *name*, and *doc* arguments are not copied by [`PyUFunc_FromFuncAndData`](#c.PyUFunc_FromFuncAndData
    "PyUFunc_FromFuncAndData"). The caller must ensure that the memory used by these
    arrays is not freed as long as the ufunc object is alive.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`PyUFunc_FromFuncAndData`](#c.PyUFunc_FromFuncAndData "PyUFunc_FromFuncAndData")
    不会复制*func*、*data*、*types*、*name*和*doc*参数。调用者必须确保只要ufunc对象存活，这些数组使用的内存不会被释放。
- en: 'Parameters:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func** – Must point to an array containing *ntypes* [`PyUFuncGenericFunction`](#c.PyUFuncGenericFunction
    "PyUFuncGenericFunction") elements.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**func** – 必须指向包含*ntypes* [`PyUFuncGenericFunction`](#c.PyUFuncGenericFunction
    "PyUFuncGenericFunction") 元素的数组。'
- en: '**data** – Should be `NULL` or a pointer to an array of size *ntypes*. This
    array may contain arbitrary extra-data to be passed to the corresponding loop
    function in the func array, including `NULL`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** – 应为`NULL`或指向*ntypes*大小的数组的指针。这个数组可能包含要传递给func数组中相应循环函数的任意额外数据，包括`NULL`。'
- en: '**types** –'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型** –'
- en: Length `(nin + nout) * ntypes` array of `char` encoding the [`numpy.dtype.num`](../generated/numpy.dtype.num.html#numpy.dtype.num
    "numpy.dtype.num") (built-in only) that the corresponding function in the `func`
    array accepts. For instance, for a comparison ufunc with three `ntypes`, two `nin`
    and one `nout`, where the first function accepts [`numpy.int32`](../arrays.scalars.html#numpy.int32
    "numpy.int32") and the second [`numpy.int64`](../arrays.scalars.html#numpy.int64
    "numpy.int64"), with both returning [`numpy.bool_`](../arrays.scalars.html#numpy.bool_
    "numpy.bool_"), `types` would be `(char[]) {5, 5, 0, 7, 7, 0}` since `NPY_INT32`
    is 5, `NPY_INT64` is 7, and `NPY_BOOL` is 0.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长度为`(nin + nout) * ntypes`的`char`编码数组，编码了`func`数组中的相应函数所接受的[`numpy.dtype.num`](../generated/numpy.dtype.num.html#numpy.dtype.num
    "numpy.dtype.num")（仅限内置）。例如，对于具有三个`ntypes`、两个`nin`和一个`nout`的比较ufunc，其中第一个函数接受[`numpy.int32`](../arrays.scalars.html#numpy.int32
    "numpy.int32")，第二个函数接受[`numpy.int64`](../arrays.scalars.html#numpy.int64 "numpy.int64")，两者都返回[`numpy.bool_`](../arrays.scalars.html#numpy.bool_
    "numpy.bool_")，`types`将是`(char[]) {5, 5, 0, 7, 7, 0}`，因为`NPY_INT32`为5，`NPY_INT64`为7，而`NPY_BOOL`为0。
- en: The bit-width names can also be used (e.g. [`NPY_INT32`](dtype.html#c.NPY_TYPES.NPY_INT32
    "NPY_INT32"), [`NPY_COMPLEX128`](dtype.html#c.NPY_TYPES.NPY_COMPLEX128 "NPY_COMPLEX128")
    ) if desired.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如有需要，也可以使用位宽名称（例如[`NPY_INT32`](dtype.html#c.NPY_TYPES.NPY_INT32 "NPY_INT32")、[`NPY_COMPLEX128`](dtype.html#c.NPY_TYPES.NPY_COMPLEX128
    "NPY_COMPLEX128")）。
- en: '[Type casting rules](../../user/basics.ufuncs.html#ufuncs-casting) will be
    used at runtime to find the first `func` callable by the input/output provided.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行时将使用[类型转换规则](../../user/basics.ufuncs.html#ufuncs-casting)来查找由输入/输出提供的第一个可调用函数。
- en: '**ntypes** – How many different data-type-specific functions the ufunc has
    implemented.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ntypes** – 该ufunc已实现的不同数据类型特定函数的数量。'
- en: '**nin** – The number of inputs to this operation.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nin** – 此操作的输入数目。'
- en: '**nout** – The number of outputs'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nout** – 输出数目。'
- en: '**identity** – Either [`PyUFunc_One`](#c.PyUFunc_One "PyUFunc_One"), [`PyUFunc_Zero`](#c.PyUFunc_Zero
    "PyUFunc_Zero"), [`PyUFunc_MinusOne`](#c.PyUFunc_MinusOne "PyUFunc_MinusOne"),
    or [`PyUFunc_None`](#c.PyUFunc_None "PyUFunc_None"). This specifies what should
    be returned when an empty array is passed to the reduce method of the ufunc. The
    special value [`PyUFunc_IdentityValue`](#c.PyUFunc_IdentityValue "PyUFunc_IdentityValue")
    may only be used with the [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity") method, to allow an arbitrary
    python object to be used as the identity.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**identity** – 可以是[`PyUFunc_One`](#c.PyUFunc_One "PyUFunc_One")、[`PyUFunc_Zero`](#c.PyUFunc_Zero
    "PyUFunc_Zero")、[`PyUFunc_MinusOne`](#c.PyUFunc_MinusOne "PyUFunc_MinusOne")或[`PyUFunc_None`](#c.PyUFunc_None
    "PyUFunc_None")。当将空数组传递给ufunc的reduce方法时，指定应该返回什么。特殊值[`PyUFunc_IdentityValue`](#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")只能与[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")方法一起使用，以允许任意Python对象用作identity。'
- en: '**name** – The name for the ufunc as a `NULL` terminated string. Specifying
    a name of ‘add’ or ‘multiply’ enables a special behavior for integer-typed reductions
    when no dtype is given. If the input type is an integer (or boolean) data type
    smaller than the size of the [`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_") data type, it will be internally upcast to the [`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_") (or [`numpy.uint`](../arrays.scalars.html#numpy.uint "numpy.uint"))
    data type.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** – 作为以`NULL`结尾的字符串的ufunc的名称。指定为“add”或“multiply”的名称将在没有给出dtype时启用特殊行为，当输入类型为小于[`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_")数据类型大小的整型（或布尔型）数据类型时，将内部将其提升为[`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_")（或[`numpy.uint`](../arrays.scalars.html#numpy.uint "numpy.uint")）数据类型。'
- en: '**doc** – Allows passing in a documentation string to be stored with the ufunc.
    The documentation string should not contain the name of the function or the calling
    signature as that will be dynamically determined from the object and available
    when accessing the **__doc__** attribute of the ufunc.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**doc** – 允许传递一个文档字符串以与ufunc一起存储。文档字符串不应包含函数的名称或调用签名，因为这将从对象中动态确定，并在访问ufunc的**__doc__**属性时可用。'
- en: '**unused** – Unused and present for backwards compatibility of the C-API.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**unused** – 未使用，仅用于保留C-API的向后兼容性。'
- en: '[PRE28]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function is very similar to PyUFunc_FromFuncAndData above, but has an extra
    *signature* argument, to define a [generalized universal functions](generalized-ufuncs.html#c-api-generalized-ufuncs).
    Similarly to how ufuncs are built around an element-by-element operation, gufuncs
    are around subarray-by-subarray operations, the [signature](generalized-ufuncs.html#details-of-signature)
    defining the subarrays to operate on.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与上面的PyUFunc_FromFuncAndData非常相似，但多了一个*signature*参数，用于定义[广义通用函数](generalized-ufuncs.html#c-api-generalized-ufuncs)。与通用函数围绕逐元素操作构建的方式类似，广义通用函数围绕子数组逐个子数组操作展开，[signature](generalized-ufuncs.html#details-of-signature)定义了要操作的子数组。
- en: 'Parameters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**signature** – The signature for the new gufunc. Setting it to NULL is equivalent
    to calling PyUFunc_FromFuncAndData. A copy of the string is made, so the passed
    in buffer can be freed.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**signature** – 新gufunc的签名。将其设置为NULL等效于调用PyUFunc_FromFuncAndData。对字符串进行副本，因此传入的缓冲区可被释放。'
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This function is very similar to *PyUFunc_FromFuncAndDataAndSignature* above,
    but has an extra *identity_value* argument, to define an arbitrary identity for
    the ufunc when `identity` is passed as `PyUFunc_IdentityValue`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与上述*PyUFunc_FromFuncAndDataAndSignature*非常相似，但多了一个*identity_value*参数，用于在`identity`作为`PyUFunc_IdentityValue`时为ufunc定义任意标识。
- en: 'Parameters:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**identity_value** – The identity for the new gufunc. Must be passed as `NULL`
    unless the `identity` argument is `PyUFunc_IdentityValue`. Setting it to NULL
    is equivalent to calling PyUFunc_FromFuncAndDataAndSignature.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**identity_value** – 新gufunc的标识。除非`identity`参数为`PyUFunc_IdentityValue`，否则必须传递为`NULL`。将其设置为NULL等效于调用PyUFunc_FromFuncAndDataAndSignature。'
- en: '[PRE30]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This function allows the user to register a 1-d loop with an already- created
    ufunc to be used whenever the ufunc is called with any of its input arguments
    as the user-defined data-type. This is needed in order to make ufuncs work with
    built-in data-types. The data-type must have been previously registered with the
    numpy system. The loop is passed in as *function*. This loop can take arbitrary
    data which should be passed in as *data*. The data-types the loop requires are
    passed in as *arg_types* which must be a pointer to memory at least as large as
    ufunc->nargs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数允许用户将已创建的ufunc注册的1-d循环替换为在调用该ufunc时使用任何输入参数为用户定义数据类型时使用的循环。这是为了使通用函数与内置数据类型一起使用。数据类型必须先前在numpy系统中注册。将循环传递为*function*。这个循环可以接受应作为*data*传递的任意数据。循环需要的数据类型作为*arg_types*传递，*arg_types*必须是至少与ufunc->nargs一样大的内存地址的指针。
- en: '[PRE31]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This function behaves like PyUFunc_RegisterLoopForType above, except that it
    allows the user to register a 1-d loop using PyArray_Descr objects instead of
    dtype type num values. This allows a 1-d loop to be registered for structured
    array data-dtypes and custom data-types instead of scalar data-types.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与上面的PyUFunc_RegisterLoopForType非常相似，但允许用户使用PyArray_Descr对象注册1-d循环，而不是dtype类型数字值。这允许为结构化数组数据类型和自定义数据类型注册1-d循环，而不是标量数据类型。
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Replace a 1-d loop matching the given *signature* in the already-created *ufunc*
    with the new 1-d loop newfunc. Return the old 1-d loop function in *oldfunc*.
    Return 0 on success and -1 on failure. This function works only with built-in
    types (use [`PyUFunc_RegisterLoopForType`](#c.PyUFunc_RegisterLoopForType "PyUFunc_RegisterLoopForType")
    for user-defined types). A signature is an array of data-type numbers indicating
    the inputs followed by the outputs assumed by the 1-d loop.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用新的1-d循环newfunc替换已创建的*ufunc*中匹配给定*signature*的1-d循环。在*oldfunc*中返回旧的1-d循环函数。成功返回0，失败返回-1。此函数仅适用于内置类型（对于用户定义类型，请使用[`PyUFunc_RegisterLoopForType`](#c.PyUFunc_RegisterLoopForType
    "PyUFunc_RegisterLoopForType")）。签名是一个数据类型数字数组，指示1-d循环所假设的输入，然后是输出。
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'A simple interface to the IEEE error-flag checking support. The *errmask* argument
    is a mask of `UFUNC_MASK_{ERR}` bitmasks indicating which errors to check for
    (and how to check for them). The *errobj* must be a Python tuple with two elements:
    a string containing the name which will be used in any communication of error
    and either a callable Python object (call-back function) or [`Py_None`](https://docs.python.org/3/c-api/none.html#c.Py_None
    "(in Python v3.11)"). The callable object will only be used if [`UFUNC_ERR_CALL`](#c.UFUNC_ERR_CALL
    "UFUNC_ERR_CALL") is set as the desired error checking method. This routine manages
    the GIL and is safe to call even after releasing the GIL. If an error in the IEEE-compatible
    hardware is determined a -1 is returned, otherwise a 0 is returned.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个简单的接口以支持 IEEE 错误标志的检查。 *errmask* 参数是一个由 `UFUNC_MASK_{ERR}` 位掩码组成的掩码，指示要检查哪些错误（以及如何检查这些错误）。
    *errobj* 必须是一个包含两个元素的 Python 元组：一个包含在任何错误通信中使用的名称的字符串，以及一个可调用的 Python 对象（回调函数）或
    [`Py_None`](https://docs.python.org/3/c-api/none.html#c.Py_None "(在 Python v3.11
    中)")。 只有在将 [`UFUNC_ERR_CALL`](#c.UFUNC_ERR_CALL "UFUNC_ERR_CALL") 设置为所需的错误检查方法时才会使用可调用对象。
    此例程管理 GIL，并且即使在释放 GIL 后仍然安全调用。 如果确定 IEEE 兼容硬件中存在错误，则返回 -1，否则返回 0。
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Clear the IEEE error flags.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 清除 IEEE 错误标志。
- en: '[PRE35]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Get the Python values used for ufunc processing from the thread-local storage
    area unless the defaults have been set in which case the name lookup is bypassed.
    The name is placed as a string in the first element of **errobj*. The second element
    is the looked-up function to call on error callback. The value of the looked-up
    buffer-size to use is passed into *bufsize*, and the value of the error mask is
    placed into *errmask*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从线程本地存储区获取用于 ufunc 处理的 Python 值，除非设置了默认值，在这种情况下名称查找将被绕过。 名称作为字符串放置在 **errobj*
    的第一个元素中。 第二个元素是在错误回调时调用的查找函数。 要使用的查找缓冲区大小的值传递给 *bufsize*，并将错误掩码的值放入 *errmask*。
- en: Generic functions
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用函数
- en: At the core of every ufunc is a collection of type-specific functions that defines
    the basic functionality for each of the supported types. These functions must
    evaluate the underlying function \(N\geq1\) times. Extra-data may be passed in
    that may be used during the calculation. This feature allows some general functions
    to be used as these basic looping functions. The general function has all the
    code needed to point variables to the right place and set up a function call.
    The general function assumes that the actual function to call is passed in as
    the extra data and calls it with the correct values. All of these functions are
    suitable for placing directly in the array of functions stored in the functions
    member of the PyUFuncObject structure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 ufunc 的核心是一组类型特定函数，定义了每个支持类型的基本功能。 这些函数必须评估底层函数 \(N\geq1\) 次。 可以传递额外数据，该数据在计算期间可能被使用。
    此功能允许将一些常规函数用作这些基本循环函数。 一般函数具有指向正确位置的变量的所有所需代码，并设置函数调用。 一般函数假定传入的实际要调用的函数作为额外数据，并调用它以正确的值。
    所有这些函数都适用于直接放置在 PyUFuncObject 结构的 functions 成员中存储的函数数组中。
- en: '[PRE36]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Type specific, core 1-d functions for ufuncs where each calculation is obtained
    by calling a function taking one input argument and returning one output. This
    function is passed in `func`. The letters correspond to dtypechar’s of the supported
    data types ( `e` - half, `f` - float, `d` - double, `g` - long double, `F` - cfloat,
    `D` - cdouble, `G` - clongdouble). The argument *func* must support the same signature.
    The _As_X_X variants assume ndarray’s of one data type but cast the values to
    use an underlying function that takes a different data type. Thus, [`PyUFunc_f_f_As_d_d`](#c.PyUFunc_f_f_As_d_d
    "PyUFunc_f_f_As_d_d") uses ndarrays of data type [`NPY_FLOAT`](dtype.html#c.NPY_TYPES.NPY_FLOAT
    "NPY_FLOAT") but calls out to a C-function that takes double and returns double.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为 ufunc 提供特定于类型的核心 1-d 函数，其中每个计算通过调用一个接受一个输入参数并返回一个输出的函数来获得。 此函数传递给 `func`。
    字母对应于支持的数据类型的 dtypechar（ `e` - 半精度浮点数， `f` - 浮点数， `d` - 双精度浮点数， `g` - 长双精度浮点数，
    `F` - 复数浮点数， `D` - 复数双精度浮点数， `G` - 复数长双精度浮点数）。 参数 *func* 必须支持相同的签名。 _As_X_X 变体假定单一数据类型的
    ndarray 但将值转换为使用接受不同数据类型的基础函数的功能。 因此，[`PyUFunc_f_f_As_d_d`](#c.PyUFunc_f_f_As_d_d
    "PyUFunc_f_f_As_d_d") 使用数据类型为 [`NPY_FLOAT`](dtype.html#c.NPY_TYPES.NPY_FLOAT "NPY_FLOAT")
    的 ndarray，但调用一个接受 double 并返回 double 的 C 函数。
- en: '[PRE47]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Type specific, core 1-d functions for ufuncs where each calculation is obtained
    by calling a function taking two input arguments and returning one output. The
    underlying function to call is passed in as *func*. The letters correspond to
    dtypechar’s of the specific data type supported by the general-purpose function.
    The argument `func` must support the corresponding signature. The `_As_XX_X` variants
    assume ndarrays of one data type but cast the values at each iteration of the
    loop to use the underlying function that takes a different data type.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 针对ufunc的特定类型的核心1维函数，其中每个计算都通过调用一个接受两个输入参数并返回一个输出参数的函数获得。要调用的底层函数传递为*func*。字母对应于通用函数支持的特定数据类型的dtypechar。参数`func`必须支持相应的签名。`_As_XX_X`变体假设一维数组是一种数据类型，但在每次循环迭代时将值转换为使用接受不同数据类型的底层函数。
- en: '[PRE58]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: One-input, one-output, and two-input, one-output core 1-d functions for the
    [`NPY_OBJECT`](dtype.html#c.NPY_TYPES.NPY_OBJECT "NPY_OBJECT") data type. These
    functions handle reference count issues and return early on error. The actual
    function to call is *func* and it must accept calls with the signature `(PyObject*)
    (PyObject*)` for [`PyUFunc_O_O`](#c.PyUFunc_O_O "PyUFunc_O_O") or `(PyObject*)(PyObject
    *, PyObject *)` for [`PyUFunc_OO_O`](#c.PyUFunc_OO_O "PyUFunc_OO_O").
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 用于[`NPY_OBJECT`](dtype.html#c.NPY_TYPES.NPY_OBJECT "NPY_OBJECT")数据类型的一输入、一输出和二输入、一输出核心1维函数。这些函数处理引用计数问题，并在错误发生时提前返回。要调用的实际函数是*func*，它必须接受带有签名`(PyObject*)
    (PyObject*)`的调用，用于[`PyUFunc_O_O`](#c.PyUFunc_O_O "PyUFunc_O_O")或带有签名`(PyObject*)(PyObject
    *, PyObject *)`的调用，用于[`PyUFunc_OO_O`](#c.PyUFunc_OO_O "PyUFunc_OO_O")。
- en: '[PRE60]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This general purpose 1-d core function assumes that *func* is a string representing
    a method of the input object. For each iteration of the loop, the Python object
    is extracted from the array and its *func* method is called returning the result
    to the output array.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通用的1维核心函数假定*func*是表示输入对象方法的字符串。对于循环的每次迭代，从数组中提取Python对象，并调用其*func*方法，将结果返回到输出数组。
- en: '[PRE61]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This general purpose 1-d core function assumes that *func* is a string representing
    a method of the input object that takes one argument. The first argument in *args*
    is the method whose function is called, the second argument in *args* is the argument
    passed to the function. The output of the function is stored in the third entry
    of *args*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通用的1维核心函数假定*func*是表示输入对象方法的字符串，该方法接受一个参数。*args*中的第一个参数是被调用的函数，*args*中的第二个参数是传递给函数的参数。函数的输出存储在*args*的第三个条目中。
- en: '[PRE62]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This is the 1-d core function used by the dynamic ufuncs created by umath.frompyfunc(function,
    nin, nout). In this case *func* is a pointer to a [`PyUFunc_PyFuncData`](#c.PyUFunc_On_Om.PyUFunc_PyFuncData
    "PyUFunc_PyFuncData") structure which has definition
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由umath.frompyfunc(function, nin, nout)创建的动态ufunc使用的1维核心函数。在这种情况下，*func*是一个指向[`PyUFunc_PyFuncData`](#c.PyUFunc_On_Om.PyUFunc_PyFuncData
    "PyUFunc_PyFuncData")结构的指针，其定义为
- en: '[PRE63]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: At each iteration of the loop, the *nin* input objects are extracted from their
    object arrays and placed into an argument tuple, the Python *callable* is called
    with the input arguments, and the nout outputs are placed into their object arrays.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环迭代中，从其对象数组中提取*nin*个输入对象，并将其放入参数元组中，然后使用Python *callable*调用输入参数，并将nout输出放入其对象数组中。
- en: Importing the API
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入API
- en: '[PRE65]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: These are the constants and functions for accessing the ufunc C-API from extension
    modules in precisely the same way as the array C-API can be accessed. The `import_ufunc`
    () function must always be called (in the initialization subroutine of the extension
    module). If your extension module is in one file then that is all that is required.
    The other two constants are useful if your extension module makes use of multiple
    files. In that case, define [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL") to something unique to your code and then in source
    files that do not contain the module initialization function but still need access
    to the UFUNC API, define [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL") to the same name used previously and also define [`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC
    "NO_IMPORT_UFUNC").
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于从扩展模块中精确地访问ufunc C-API的常量和函数，就像可以访问数组C-API一样。`import_ufunc` ()函数必须始终被调用（在扩展模块的初始化子例程中）。如果您的扩展模块在一个文件中，则这就是所需的全部。如果您的扩展模块使用多个文件，则另外两个常量很有用。在这种情况下，将[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")定义为与您的代码唯一对应的内容，然后在不包含模块初始化函数但仍需要访问UFUNC API的源文件中，将[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")定义为先前使用的相同名称，并同时定义[`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC
    "NO_IMPORT_UFUNC")。
- en: The C-API is actually an array of function pointers. This array is created (and
    pointed to by a global variable) by import_ufunc. The global variable is either
    statically defined or allowed to be seen by other files depending on the state
    of [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL "PY_UFUNC_UNIQUE_SYMBOL")
    and [`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC "NO_IMPORT_UFUNC").
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: C-API实际上是一个函数指针数组。此数组由import_ufunc创建（并由全局变量指向）。全局变量是静态定义的或允许被其他文件看到，具体取决于[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")和[`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC "NO_IMPORT_UFUNC")的状态。
- en: '## Constants'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '## 常量'
- en: '`UFUNC_ERR_{HANDLER}`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFUNC_ERR_{HANDLER}`'
- en: '[PRE68]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '`UFUNC_{THING}_{ERR}`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`UFUNC_{THING}_{ERR}`'
- en: '[PRE72]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '`PyUFunc_{VALUE}`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyUFunc_{VALUE}`'
- en: '[PRE84]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Macros
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: '[PRE90]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Used in universal function code to only release the Python GIL if loop->obj
    is not true (*i.e.* this is not an OBJECT array loop). Requires use of [`NPY_BEGIN_THREADS_DEF`](array.html#c.NPY_BEGIN_THREADS_DEF
    "NPY_BEGIN_THREADS_DEF") in variable declaration area.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在通用函数代码中使用，如果loop->obj不为真（*即*这不是一个OBJECT数组循环），则只释放Python GIL。在变量声明区域中需要使用[`NPY_BEGIN_THREADS_DEF`](array.html#c.NPY_BEGIN_THREADS_DEF
    "NPY_BEGIN_THREADS_DEF")。
- en: '[PRE91]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Used in universal function code to re-acquire the Python GIL if it was released
    (because loop->obj was not true).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在循环->obj不为真时（因为循环->obj不为真）重新获取Python GIL的指针。
- en: Types
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: '[PRE92]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Pointers to functions that actually implement the underlying (element-by-element)
    function \(N\) times with the following signature:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 实际实现底层（逐元素）函数的函数指针数组。具有以下签名的N次循环：
- en: '[PRE93]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '*args*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*参数*'
- en: An array of pointers to the actual data for the input and output arrays. The
    input arguments are given first followed by the output arguments.
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向输入和输出数组的实际数据的指针数组。首先是输入参数，然后是输出参数。
- en: '*dimensions*'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*维度*'
- en: A pointer to the size of the dimension over which this function is looping.
  id: totrans-170
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向此函数循环的维度大小的指针。
- en: '*steps*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤*'
- en: A pointer to the number of bytes to jump to get to the next element in this
    dimension for each of the input and output arguments.
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向每个输入和输出参数在该维度中跳到下一个元素的字节数的指针。
- en: '*data*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据*'
- en: Arbitrary data (extra arguments, function names, *etc.* ) that can be stored
    with the ufunc and will be passed in when it is called. May be `NULL`.
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以与ufunc一起存储并在调用时传递的任意数据（额外参数、函数名称、*等*）。可以是`NULL`。
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: Accepts `NULL` *data* in addition to array of `NULL`
    values.'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在1.23.0版本中更改：接受`NULL` *data*以及`NULL`值数组。
- en: This is an example of a func specialized for addition of doubles returning doubles.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个专门用于返回双精度的双精度加法的函数示例。
- en: '[PRE94]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Functions
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: '[PRE95]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Create a new broadcasting universal function from required variables. Each ufunc
    builds around the notion of an element-by-element operation. Each ufunc object
    contains pointers to 1-d loops implementing the basic functionality for each supported
    type.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从所需变量创建新的广播通用函数。每个ufunc都围绕着逐元素操作的概念构建。每个ufunc对象都包含指向为每种支持类型实现基本功能的1-d循环的指针。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *func*, *data*, *types*, *name*, and *doc* arguments are not copied by [`PyUFunc_FromFuncAndData`](#c.PyUFunc_FromFuncAndData
    "PyUFunc_FromFuncAndData"). The caller must ensure that the memory used by these
    arrays is not freed as long as the ufunc object is alive.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*func*、*data*、*types*、*name*和*doc*参数不会被[`PyUFunc_FromFuncAndData`](#c.PyUFunc_FromFuncAndData
    "PyUFunc_FromFuncAndData")复制。调用者必须确保只要ufunc对象存在，这些数组使用的内存不会被释放。'
- en: 'Parameters:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func** – Must point to an array containing *ntypes* [`PyUFuncGenericFunction`](#c.PyUFuncGenericFunction
    "PyUFuncGenericFunction") elements.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**func** – 必须指向一个包含*ntypes* [`PyUFuncGenericFunction`](#c.PyUFuncGenericFunction
    "PyUFuncGenericFunction") 元素的数组。'
- en: '**data** – Should be `NULL` or a pointer to an array of size *ntypes*. This
    array may contain arbitrary extra-data to be passed to the corresponding loop
    function in the func array, including `NULL`.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data** – 应为`NULL`或大小为*ntypes*的数组指针。该数组可以包含任意额外数据，以传递给func数组中对应的循环函数，包括`NULL`。'
- en: '**types** –'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**types** –'
- en: Length `(nin + nout) * ntypes` array of `char` encoding the [`numpy.dtype.num`](../generated/numpy.dtype.num.html#numpy.dtype.num
    "numpy.dtype.num") (built-in only) that the corresponding function in the `func`
    array accepts. For instance, for a comparison ufunc with three `ntypes`, two `nin`
    and one `nout`, where the first function accepts [`numpy.int32`](../arrays.scalars.html#numpy.int32
    "numpy.int32") and the second [`numpy.int64`](../arrays.scalars.html#numpy.int64
    "numpy.int64"), with both returning [`numpy.bool_`](../arrays.scalars.html#numpy.bool_
    "numpy.bool_"), `types` would be `(char[]) {5, 5, 0, 7, 7, 0}` since `NPY_INT32`
    is 5, `NPY_INT64` is 7, and `NPY_BOOL` is 0.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长度为`(nin + nout) * ntypes`的`char`数组，编码对应于`func`数组中的函数所接受的[`numpy.dtype.num`](../generated/numpy.dtype.num.html#numpy.dtype.num
    "numpy.dtype.num")（仅内置）。例如，对于一个具有三种`ntypes`，两个`nin`和一个`nout`的比较ufunc，其中第一个函数接受[`numpy.int32`](../arrays.scalars.html#numpy.int32
    "numpy.int32")，第二个接受[`numpy.int64`](../arrays.scalars.html#numpy.int64 "numpy.int64")，两者都返回[`numpy.bool_`](../arrays.scalars.html#numpy.bool_
    "numpy.bool_")，`types`将是`(char[]) {5, 5, 0, 7, 7, 0}`，因为`NPY_INT32`是5，`NPY_INT64`是7，`NPY_BOOL`是0。
- en: The bit-width names can also be used (e.g. [`NPY_INT32`](dtype.html#c.NPY_TYPES.NPY_INT32
    "NPY_INT32"), [`NPY_COMPLEX128`](dtype.html#c.NPY_TYPES.NPY_COMPLEX128 "NPY_COMPLEX128")
    ) if desired.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位宽度名称也可以使用（例如[`NPY_INT32`](dtype.html#c.NPY_TYPES.NPY_INT32 "NPY_INT32")，[`NPY_COMPLEX128`](dtype.html#c.NPY_TYPES.NPY_COMPLEX128
    "NPY_COMPLEX128")）。
- en: '[Type casting rules](../../user/basics.ufuncs.html#ufuncs-casting) will be
    used at runtime to find the first `func` callable by the input/output provided.'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[类型转换规则](../../user/basics.ufuncs.html#ufuncs-casting)将在运行时用于查找由提供的输入/输出找到的第一个`func`可调用函数。'
- en: '**ntypes** – How many different data-type-specific functions the ufunc has
    implemented.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ntypes** – ufunc已实现的不同数据类型特定函数的数量。'
- en: '**nin** – The number of inputs to this operation.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nin** – 此操作的输入数目。'
- en: '**nout** – The number of outputs'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nout** – 输出的数目'
- en: '**identity** – Either [`PyUFunc_One`](#c.PyUFunc_One "PyUFunc_One"), [`PyUFunc_Zero`](#c.PyUFunc_Zero
    "PyUFunc_Zero"), [`PyUFunc_MinusOne`](#c.PyUFunc_MinusOne "PyUFunc_MinusOne"),
    or [`PyUFunc_None`](#c.PyUFunc_None "PyUFunc_None"). This specifies what should
    be returned when an empty array is passed to the reduce method of the ufunc. The
    special value [`PyUFunc_IdentityValue`](#c.PyUFunc_IdentityValue "PyUFunc_IdentityValue")
    may only be used with the [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity") method, to allow an arbitrary
    python object to be used as the identity.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**identity** – 要么是[`PyUFunc_One`](#c.PyUFunc_One "PyUFunc_One")，[`PyUFunc_Zero`](#c.PyUFunc_Zero
    "PyUFunc_Zero")，[`PyUFunc_MinusOne`](#c.PyUFunc_MinusOne "PyUFunc_MinusOne")，或[`PyUFunc_None`](#c.PyUFunc_None
    "PyUFunc_None")。这指定了当将空数组传递给ufunc的reduce方法时应返回的内容。特殊值[`PyUFunc_IdentityValue`](#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")只能与[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")方法一起使用，以允许使用任意Python对象作为标识。'
- en: '**name** – The name for the ufunc as a `NULL` terminated string. Specifying
    a name of ‘add’ or ‘multiply’ enables a special behavior for integer-typed reductions
    when no dtype is given. If the input type is an integer (or boolean) data type
    smaller than the size of the [`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_") data type, it will be internally upcast to the [`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_") (or [`numpy.uint`](../arrays.scalars.html#numpy.uint "numpy.uint"))
    data type.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** – 作为`NULL`终止的字符串的 ufunc 名称。指定名称为‘add’或‘multiply’时，当没有给出 dtype 时，会启用整数类型缩减的特殊行为。如果输入类型是小于[`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_")数据类型大小的整数（或布尔）数据类型，它将在内部转换为[`numpy.int_`](../arrays.scalars.html#numpy.int_
    "numpy.int_")（或[`numpy.uint`](../arrays.scalars.html#numpy.uint "numpy.uint")）数据类型。'
- en: '**doc** – Allows passing in a documentation string to be stored with the ufunc.
    The documentation string should not contain the name of the function or the calling
    signature as that will be dynamically determined from the object and available
    when accessing the **__doc__** attribute of the ufunc.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**doc** – 允许传入文档字符串以与 ufunc 存储。文档字符串不应包含函数名称或调用签名，因为这将从对象动态确定，并在访问ufunc的 **__doc__**
    属性时可用。'
- en: '**unused** – Unused and present for backwards compatibility of the C-API.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**unused** – 未使用，为了保持 C-API 的向后兼容性而存在。'
- en: '[PRE96]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: This function is very similar to PyUFunc_FromFuncAndData above, but has an extra
    *signature* argument, to define a [generalized universal functions](generalized-ufuncs.html#c-api-generalized-ufuncs).
    Similarly to how ufuncs are built around an element-by-element operation, gufuncs
    are around subarray-by-subarray operations, the [signature](generalized-ufuncs.html#details-of-signature)
    defining the subarrays to operate on.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与上述的 PyUFunc_FromFuncAndData 非常相似，但具有额外的 *signature* 参数，用于定义[广义通用函数](generalized-ufuncs.html#c-api-generalized-ufuncs)。与
    ufuncs 围绕逐元素操作构建类似，gufuncs 围绕子数组逐个子数组操作构建，[signature](generalized-ufuncs.html#details-of-signature)
    定义了要操作的子数组。
- en: 'Parameters:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**signature** – The signature for the new gufunc. Setting it to NULL is equivalent
    to calling PyUFunc_FromFuncAndData. A copy of the string is made, so the passed
    in buffer can be freed.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**signature** – 新 gufunc 的签名。将其设置为 NULL 相当于调用 PyUFunc_FromFuncAndData。会复制字符串，因此传入的缓冲区可以释放。'
- en: '[PRE97]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: This function is very similar to *PyUFunc_FromFuncAndDataAndSignature* above,
    but has an extra *identity_value* argument, to define an arbitrary identity for
    the ufunc when `identity` is passed as `PyUFunc_IdentityValue`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与上述的 *PyUFunc_FromFuncAndDataAndSignature* 非常相似，但具有额外的 *identity_value* 参数，用于在
    `identity` 为 `PyUFunc_IdentityValue` 时定义 ufunc 的任意标识。
- en: 'Parameters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**identity_value** – The identity for the new gufunc. Must be passed as `NULL`
    unless the `identity` argument is `PyUFunc_IdentityValue`. Setting it to NULL
    is equivalent to calling PyUFunc_FromFuncAndDataAndSignature.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**identity_value** – 新 gufunc 的标识。除非 `identity` 参数为 `PyUFunc_IdentityValue`，否则必须传递为
    `NULL`。将其设置为 NULL 相当于调用 PyUFunc_FromFuncAndDataAndSignature。'
- en: '[PRE98]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: This function allows the user to register a 1-d loop with an already- created
    ufunc to be used whenever the ufunc is called with any of its input arguments
    as the user-defined data-type. This is needed in order to make ufuncs work with
    built-in data-types. The data-type must have been previously registered with the
    numpy system. The loop is passed in as *function*. This loop can take arbitrary
    data which should be passed in as *data*. The data-types the loop requires are
    passed in as *arg_types* which must be a pointer to memory at least as large as
    ufunc->nargs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数允许用户使用已创建的 ufunc 注册 1-d 循环，以便在任何输入参数作为用户定义的数据类型调用 ufunc 时使用。为了使 ufuncs 与内置数据类型一起工作，需要这样做。数据类型必须已在
    numpy 系统中注册。循环传递为 *function*。此循环可以获取任意数据，应将其作为 *data* 传递。循环所需的数据类型作为 *arg_types*
    传入，它必须是至少与 ufunc->nargs 一样大的内存指针。
- en: '[PRE99]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: This function behaves like PyUFunc_RegisterLoopForType above, except that it
    allows the user to register a 1-d loop using PyArray_Descr objects instead of
    dtype type num values. This allows a 1-d loop to be registered for structured
    array data-dtypes and custom data-types instead of scalar data-types.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的行为类似于上面的 PyUFunc_RegisterLoopForType，但允许用户使用 PyArray_Descr 对象而不是 dtype 类型
    num 值注册 1-d 循环。这允许为结构化数组数据类型和自定义数据类型注册 1-d 循环，而不是标量数据类型。
- en: '[PRE100]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Replace a 1-d loop matching the given *signature* in the already-created *ufunc*
    with the new 1-d loop newfunc. Return the old 1-d loop function in *oldfunc*.
    Return 0 on success and -1 on failure. This function works only with built-in
    types (use [`PyUFunc_RegisterLoopForType`](#c.PyUFunc_RegisterLoopForType "PyUFunc_RegisterLoopForType")
    for user-defined types). A signature is an array of data-type numbers indicating
    the inputs followed by the outputs assumed by the 1-d loop.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在已创建的 *ufunc* 中替换与给定 *signature* 匹配的 1-d 循环为新的 1-d 循环 newfunc。在 *oldfunc* 中返回旧的
    1-d 循环函数。成功返回 0，失败返回 -1。此函数仅适用于内置类型（对于用户定义类型，请使用 [`PyUFunc_RegisterLoopForType`](#c.PyUFunc_RegisterLoopForType
    "PyUFunc_RegisterLoopForType")）。签名是指示输入后跟 1-d 循环所假设的输出的数据类型编号数组。
- en: '[PRE101]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'A simple interface to the IEEE error-flag checking support. The *errmask* argument
    is a mask of `UFUNC_MASK_{ERR}` bitmasks indicating which errors to check for
    (and how to check for them). The *errobj* must be a Python tuple with two elements:
    a string containing the name which will be used in any communication of error
    and either a callable Python object (call-back function) or [`Py_None`](https://docs.python.org/3/c-api/none.html#c.Py_None
    "(in Python v3.11)"). The callable object will only be used if [`UFUNC_ERR_CALL`](#c.UFUNC_ERR_CALL
    "UFUNC_ERR_CALL") is set as the desired error checking method. This routine manages
    the GIL and is safe to call even after releasing the GIL. If an error in the IEEE-compatible
    hardware is determined a -1 is returned, otherwise a 0 is returned.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个简单的接口来检查 IEEE 错误标志的支持。*errmask* 参数是 `UFUNC_MASK_{ERR}` 位掩码的组合，指示要检查哪些错误（以及如何检查）。*errobj*
    必须是一个 Python 元组，有两个元素：一个字符串，包含在任何错误通信中将使用的名称，以及一个可调用的 Python 对象（回调函数）或 [`Py_None`](https://docs.python.org/3/c-api/none.html#c.Py_None
    "(in Python v3.11)")。只有在设置 [`UFUNC_ERR_CALL`](#c.UFUNC_ERR_CALL "UFUNC_ERR_CALL")
    作为所需错误检查方法时，才会使用可调用对象。此例程管理 GIL 并且即使在释放 GIL 后也是安全的。如果确定 IEEE 兼容硬件中存在错误，则返回 -1，否则返回
    0。
- en: '[PRE102]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Clear the IEEE error flags.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 清除 IEEE 错误标志。
- en: '[PRE103]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Get the Python values used for ufunc processing from the thread-local storage
    area unless the defaults have been set in which case the name lookup is bypassed.
    The name is placed as a string in the first element of **errobj*. The second element
    is the looked-up function to call on error callback. The value of the looked-up
    buffer-size to use is passed into *bufsize*, and the value of the error mask is
    placed into *errmask*.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 除非默认已设置，否则从线程本地存储区获取用于 ufunc 处理的 Python 值，此时会绕过名称查找。将名称作为字符串放置在 **errobj* 的第一个元素中。第二个元素是在错误回调时要调用的查找函数。传递要使用的查找缓冲区大小的值，并将错误掩码的值放置到
    *errmask* 中。
- en: Generic functions
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用函数
- en: At the core of every ufunc is a collection of type-specific functions that defines
    the basic functionality for each of the supported types. These functions must
    evaluate the underlying function \(N\geq1\) times. Extra-data may be passed in
    that may be used during the calculation. This feature allows some general functions
    to be used as these basic looping functions. The general function has all the
    code needed to point variables to the right place and set up a function call.
    The general function assumes that the actual function to call is passed in as
    the extra data and calls it with the correct values. All of these functions are
    suitable for placing directly in the array of functions stored in the functions
    member of the PyUFuncObject structure.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 ufunc 的核心是一组特定于类型的函数，定义了每个支持类型的基本功能。这些函数必须对底层函数进行 \(N\geq1\) 次评估。可能传递附加数据，在计算过程中可能使用。此功能允许将一些通用函数用作这些基本循环函数。通用函数具有指向正确位置的变量和设置函数调用的所有所需代码。通用函数假定实际要调用的函数作为附加数据传递，并使用正确的值调用它。所有这些函数都适合直接放置在
    PyUFuncObject 结构的 functions 成员中存储的函数数组中。
- en: '[PRE104]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Type specific, core 1-d functions for ufuncs where each calculation is obtained
    by calling a function taking one input argument and returning one output. This
    function is passed in `func`. The letters correspond to dtypechar’s of the supported
    data types ( `e` - half, `f` - float, `d` - double, `g` - long double, `F` - cfloat,
    `D` - cdouble, `G` - clongdouble). The argument *func* must support the same signature.
    The _As_X_X variants assume ndarray’s of one data type but cast the values to
    use an underlying function that takes a different data type. Thus, [`PyUFunc_f_f_As_d_d`](#c.PyUFunc_f_f_As_d_d
    "PyUFunc_f_f_As_d_d") uses ndarrays of data type [`NPY_FLOAT`](dtype.html#c.NPY_TYPES.NPY_FLOAT
    "NPY_FLOAT") but calls out to a C-function that takes double and returns double.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Type特定的 1-d 核心函数用于 ufuncs，每个计算都是通过调用一个输入参数并返回一个输出的函数来获得的。这个函数传递给`func`。这些字母对应于支持的数据类型的dtypechar
    ( `e` - half, `f` - float, `d` - double, `g` - long double, `F` - cfloat, `D`
    - cdouble, `G` - clongdouble)。参数* func*必须支持相同的签名。_As_X_X 变体假定一个数据类型的ndarray，但将值强制转换为使用一个不同类型的数据类型的基础函数。因此，[`PyUFunc_f_f_As_d_d`](#c.PyUFunc_f_f_As_d_d
    "PyUFunc_f_f_As_d_d") 使用数据类型的ndarray [`NPY_FLOAT`](dtype.html#c.NPY_TYPES.NPY_FLOAT
    "NPY_FLOAT") 但调用一个接受double并返回double的C函数。
- en: '[PRE115]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Type specific, core 1-d functions for ufuncs where each calculation is obtained
    by calling a function taking two input arguments and returning one output. The
    underlying function to call is passed in as *func*. The letters correspond to
    dtypechar’s of the specific data type supported by the general-purpose function.
    The argument `func` must support the corresponding signature. The `_As_XX_X` variants
    assume ndarrays of one data type but cast the values at each iteration of the
    loop to use the underlying function that takes a different data type.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Type 特定的核心 1-d 函数用于 ufuncs，其中每个计算都是通过调用传入两个输入参数并返回一个输出的函数来获得的。传递要调用的基础函数，字符串作为*
    func*。这些字母对应于特定数据类型的dtypechar的通用函数支持的。参数* func*必须支持相应的签名。_As_XX_X 变体假定一个数据类型的ndarray，但将循环的每次迭代的值强制转换为使用使用不同数据类型的基础函数。
- en: '[PRE126]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: One-input, one-output, and two-input, one-output core 1-d functions for the
    [`NPY_OBJECT`](dtype.html#c.NPY_TYPES.NPY_OBJECT "NPY_OBJECT") data type. These
    functions handle reference count issues and return early on error. The actual
    function to call is *func* and it must accept calls with the signature `(PyObject*)
    (PyObject*)` for [`PyUFunc_O_O`](#c.PyUFunc_O_O "PyUFunc_O_O") or `(PyObject*)(PyObject
    *, PyObject *)` for [`PyUFunc_OO_O`](#c.PyUFunc_OO_O "PyUFunc_OO_O").
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 [`NPY_OBJECT`](dtype.html#c.NPY_TYPES.NPY_OBJECT "NPY_OBJECT") 数据类型的一个输入、一个输出和两个输入、一个输出的核心
    1-d 函数。这些函数处理引用计数问题，并在发生错误时尽早返回。要调用的实际函数是* func*，它必须接受具有签名 `(PyObject *) (PyObject
    *)` 的 [`PyUFunc_O_O`](#c.PyUFunc_O_O "PyUFunc_O_O") 或 `(PyObject*)(PyObject *,
    PyObject *)` 的 [`PyUFunc_OO_O`](#c.PyUFunc_OO_O "PyUFunc_OO_O") 的调用。
- en: '[PRE128]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: This general purpose 1-d core function assumes that *func* is a string representing
    a method of the input object. For each iteration of the loop, the Python object
    is extracted from the array and its *func* method is called returning the result
    to the output array.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通用1-d核心函数假定* func*是表示输入对象方法的字符串。对于循环的每次迭代，从数组中提取Python对象并调用它的* func*方法将结果返回到输出数组。
- en: '[PRE129]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: This general purpose 1-d core function assumes that *func* is a string representing
    a method of the input object that takes one argument. The first argument in *args*
    is the method whose function is called, the second argument in *args* is the argument
    passed to the function. The output of the function is stored in the third entry
    of *args*.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通用1-d核心函数假定* func*是表示输入对象的一个参数的方法的字符串。* args*中的第一个参数是调用的方法，第二个参数是传递给方法的参数。函数的输出存储在*
    args*的第三个条目中。
- en: '[PRE130]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: This is the 1-d core function used by the dynamic ufuncs created by umath.frompyfunc(function,
    nin, nout). In this case *func* is a pointer to a [`PyUFunc_PyFuncData`](#c.PyUFunc_On_Om.PyUFunc_PyFuncData
    "PyUFunc_PyFuncData") structure which has definition
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由umath.frompyfunc(function, nin, nout)创建的动态ufunc使用的 1-d 核心功能。在这种情况下，* func*
    是指向 [`PyUFunc_PyFuncData`](#c.PyUFunc_On_Om.PyUFunc_PyFuncData "PyUFunc_PyFuncData")
    结构的指针，其定义为
- en: '[PRE131]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: At each iteration of the loop, the *nin* input objects are extracted from their
    object arrays and placed into an argument tuple, the Python *callable* is called
    with the input arguments, and the nout outputs are placed into their object arrays.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环迭代中，从它们的对象数组中提取*nin*输入对象，并放入一个参数元组中，使用输入参数调用Python *callable*，并将nout输出放入它们的对象数组中。
- en: Importing the API
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入API
- en: '[PRE133]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: These are the constants and functions for accessing the ufunc C-API from extension
    modules in precisely the same way as the array C-API can be accessed. The `import_ufunc`
    () function must always be called (in the initialization subroutine of the extension
    module). If your extension module is in one file then that is all that is required.
    The other two constants are useful if your extension module makes use of multiple
    files. In that case, define [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL") to something unique to your code and then in source
    files that do not contain the module initialization function but still need access
    to the UFUNC API, define [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL") to the same name used previously and also define [`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC
    "NO_IMPORT_UFUNC").
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于从扩展模块中精确地访问ufunc C-API的常量和函数，方式与数组C-API可以被访问的方式完全相同。`import_ufunc` ()函数必须始终被调用（在扩展模块的初始化子程序中）。如果你的扩展模块在一个文件中，那么这就是所需要的全部。如果你的扩展模块使用多个文件，则另外两个常量会有所帮助。在这种情况下，将[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")定义为与您的代码唯一的东西，然后在那些不包含模块初始化函数但仍需要访问UFUNC API的源文件中，将[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")定义为先前使用的相同名称，并且还要定义[`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC
    "NO_IMPORT_UFUNC")。
- en: The C-API is actually an array of function pointers. This array is created (and
    pointed to by a global variable) by import_ufunc. The global variable is either
    statically defined or allowed to be seen by other files depending on the state
    of [`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL "PY_UFUNC_UNIQUE_SYMBOL")
    and [`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC "NO_IMPORT_UFUNC").
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: C-API实际上是一个函数指针数组。这个数组是由import_ufunc创建的（并指向一个全局变量）。全局变量是静态定义的，或者根据[`PY_UFUNC_UNIQUE_SYMBOL`](#c.PY_UFUNC_UNIQUE_SYMBOL
    "PY_UFUNC_UNIQUE_SYMBOL")和[`NO_IMPORT_UFUNC`](#c.NO_IMPORT_UFUNC "NO_IMPORT_UFUNC")的状态可以被其他文件看到。
