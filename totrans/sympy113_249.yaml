- en: Decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/utilities/decorator.html](https://docs.sympy.org/latest/modules/utilities/decorator.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Useful utility decorators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Mark a function as deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: This decorator should be used if an entire function or class is deprecated.
    If only a certain functionality is deprecated, you should use [`warns_deprecated_sympy()`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy") directly. This decorator is just
    a convenience. There is no functional difference between using this decorator
    and calling `warns_deprecated_sympy()` at the top of the function.
  prefs: []
  type: TYPE_NORMAL
- en: The decorator takes the same arguments as [`warns_deprecated_sympy()`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy"). See its documentation for details
    on what the keywords to this decorator do.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Deprecation Policy](../../contributing/deprecations.html#deprecation-policy)
    document for details on when and how things should be deprecated in SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](exceptions.html#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.sympy_deprecation_warning`](exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.exceptions.ignore_warnings`](exceptions.html#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings"), [`sympy.testing.pytest.warns_deprecated_sympy`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the function finishes, resets the value of `mpmath.mp.dps` to the value
    it had before the function was run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adds metadata about the dependencies which need to be met for doctesting the
    docstrings of the decorated objects.
  prefs: []
  type: TYPE_NORMAL
- en: '`exe` should be a list of executables'
  prefs: []
  type: TYPE_NORMAL
- en: '`modules` should be a list of modules'
  prefs: []
  type: TYPE_NORMAL
- en: '`disable_viewers` should be a list of viewers for [`preview()`](../printing.html#sympy.printing.preview.preview
    "sympy.printing.preview.preview") to disable'
  prefs: []
  type: TYPE_NORMAL
- en: '`python_version` should be the minimum Python version required, as a tuple
    (like `(3, 0)`)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Property decorator that caches the value of potentially expensive `propfunc`
    after the first evaluation. The cached value is stored in the corresponding property
    name with an attached underscore.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Don’t ‘inherit’ certain attributes from a base class
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Append `obj`’s name to global `__all__` variable (call site).
  prefs: []
  type: TYPE_NORMAL
- en: By using this decorator on functions or classes you achieve the same goal as
    by filling `__all__` variables manually, you just do not have to repeat yourself
    (object’s name). You also know if object is public at definition site, not at
    some random location (where `__all__` was set).
  prefs: []
  type: TYPE_NORMAL
- en: Note that in multiple decorator setup (in almost all cases) `@public` decorator
    must be applied before any other decorators, because it relies on the pointer
    to object’s global namespace. If you apply other decorators first, `@public` may
    end up modifying the wrong namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Apply `func` to sub–elements of an object, including [`Add`](../core.html#sympy.core.add.Add
    "sympy.core.add.Add").
  prefs: []
  type: TYPE_NORMAL
- en: This decorator is intended to make it uniformly possible to apply a function
    to all elements of composite objects, e.g. matrices, lists, tuples and other iterable
    containers, or just expressions.
  prefs: []
  type: TYPE_NORMAL
- en: This version of [`threaded()`](#sympy.utilities.decorator.threaded "sympy.utilities.decorator.threaded")
    decorator allows threading over elements of [`Add`](../core.html#sympy.core.add.Add
    "sympy.core.add.Add") class. If this behavior is not desirable use [`xthreaded()`](#sympy.utilities.decorator.xthreaded
    "sympy.utilities.decorator.xthreaded") decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions using this decorator must have the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A factory for `threaded` decorators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Apply `func` to sub–elements of an object, excluding [`Add`](../core.html#sympy.core.add.Add
    "sympy.core.add.Add").
  prefs: []
  type: TYPE_NORMAL
- en: This decorator is intended to make it uniformly possible to apply a function
    to all elements of composite objects, e.g. matrices, lists, tuples and other iterable
    containers, or just expressions.
  prefs: []
  type: TYPE_NORMAL
- en: This version of [`threaded()`](#sympy.utilities.decorator.threaded "sympy.utilities.decorator.threaded")
    decorator disallows threading over elements of [`Add`](../core.html#sympy.core.add.Add
    "sympy.core.add.Add") class. If this behavior is not desirable use [`threaded()`](#sympy.utilities.decorator.threaded
    "sympy.utilities.decorator.threaded") decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions using this decorator must have the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
