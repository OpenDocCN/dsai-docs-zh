- en: Copy on write
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写时复制
- en: 原文：[https://pandas.pydata.org/docs/development/copy_on_write.html](https://pandas.pydata.org/docs/development/copy_on_write.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/development/copy_on_write.html](https://pandas.pydata.org/docs/development/copy_on_write.html)
- en: Copy on Write is a mechanism to simplify the indexing API and improve performance
    through avoiding copies if possible. CoW means that any DataFrame or Series derived
    from another in any way always behaves as a copy. An explanation on how to use
    Copy on Write efficiently can be found [here](../user_guide/copy_on_write.html#copy-on-write).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 写时复制是一种机制，用于简化索引 API 并通过避免拷贝来提高性能。写时复制意味着任何以任何方式派生自另一个 DataFrame 或 Series 的
    DataFrame 或 Series 总是表现为副本。关于如何高效使用写时复制的说明可以在[这里](../user_guide/copy_on_write.html#copy-on-write)找到。
- en: Reference tracking
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用跟踪
- en: To be able to determine if we have to make a copy when writing into a DataFrame,
    we have to be aware if the values are shared with another DataFrame. pandas keeps
    track of all `Blocks` that share values with another block internally to be able
    to tell when a copy needs to be triggered. The reference tracking mechanism is
    implemented on the Block level.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定在向 DataFrame 写入数据时是否需要进行复制，我们必须知道值是否与另一个 DataFrame 共享。pandas 在内部跟踪所有与另一个块共享值的
    `Blocks`，以便能够在需要触发复制时进行判断。引用跟踪机制是在块级别实现的。
- en: We use a custom reference tracker object, `BlockValuesRefs`, that keeps track
    of every block, whose values share memory with each other. The reference is held
    through a weak-reference. Every pair of blocks that share some memory should point
    to the same `BlockValuesRefs` object. If one block goes out of scope, the reference
    to this block dies. As a consequence, the reference tracker object always knows
    how many blocks are alive and share memory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用自定义的引用跟踪对象，`BlockValuesRefs`，它跟踪每个块，这些块的值彼此共享内存。引用是通过弱引用进行持有的。每一对共享某些内存的块都应该指向同一个`BlockValuesRefs`对象。如果一个块超出范围，对该块的引用就会消失。因此，引用跟踪对象始终知道有多少个块是活动的并且共享内存。
- en: Whenever a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") object is sharing data with another object, it is required that
    each of those objects have its own BlockManager and Block objects. Thus, in other
    words, one Block instance (that is held by a DataFrame, not necessarily for intermediate
    objects) should always be uniquely used for only a single DataFrame/Series object.
    For example, when you want to use the same Block for another object, you can create
    a shallow copy of the Block instance with `block.copy(deep=False)` (which will
    create a new Block instance with the same underlying values and which will correctly
    set up the references).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    或 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    对象与另一个对象共享数据时，每个对象都必须具有自己的 BlockManager 和 Block 对象。因此，换句话说，一个 Block 实例（由 DataFrame
    持有，不一定适用于中间对象）应该始终只用于一个 DataFrame/Series 对象。例如，当您想要为另一个对象使用相同的 Block 时，您可以使用 `block.copy(deep=False)`
    创建 Block 实例的浅拷贝（这将创建一个具有相同底层值的新 Block 实例，并且会正确设置引用）。
- en: We can ask the reference tracking object if there is another block alive that
    shares data with us before writing into the values. We can trigger a copy before
    writing if there is in fact another block alive.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入值之前，我们可以向引用跟踪对象询问是否有另一个活动的块与我们共享数据。如果实际上有另一个活动的块，我们可以在写入之前触发复制。
- en: Reference tracking
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用跟踪
- en: To be able to determine if we have to make a copy when writing into a DataFrame,
    we have to be aware if the values are shared with another DataFrame. pandas keeps
    track of all `Blocks` that share values with another block internally to be able
    to tell when a copy needs to be triggered. The reference tracking mechanism is
    implemented on the Block level.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定在向 DataFrame 写入数据时是否需要进行复制，我们必须知道值是否与另一个 DataFrame 共享。pandas 在内部跟踪所有与另一个块共享值的
    `Blocks`，以便能够在需要触发复制时进行判断。引用跟踪机制是在块级别实现的。
- en: We use a custom reference tracker object, `BlockValuesRefs`, that keeps track
    of every block, whose values share memory with each other. The reference is held
    through a weak-reference. Every pair of blocks that share some memory should point
    to the same `BlockValuesRefs` object. If one block goes out of scope, the reference
    to this block dies. As a consequence, the reference tracker object always knows
    how many blocks are alive and share memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个自定义的引用跟踪对象，`BlockValuesRefs`，用于跟踪每个块，其值彼此共享内存。引用通过弱引用进行保持。每对共享某些内存的块应指向同一个`BlockValuesRefs`对象。如果一个块超出范围，对该块的引用将失效。因此，引用跟踪对象始终知道有多少块是活动的并共享内存。
- en: Whenever a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") object is sharing data with another object, it is required that
    each of those objects have its own BlockManager and Block objects. Thus, in other
    words, one Block instance (that is held by a DataFrame, not necessarily for intermediate
    objects) should always be uniquely used for only a single DataFrame/Series object.
    For example, when you want to use the same Block for another object, you can create
    a shallow copy of the Block instance with `block.copy(deep=False)` (which will
    create a new Block instance with the same underlying values and which will correctly
    set up the references).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")对象与另一个对象共享数据时，要求每个对象都有自己的BlockManager和Block对象。因此，换句话说，一个Block实例（由DataFrame持有，不一定是用于中间对象）应始终仅用于单个DataFrame/Series对象。例如，当您想要为另一个对象使用相同的Block时，您可以使用`block.copy(deep=False)`创建Block实例的浅拷贝（这将创建一个具有相同基础值的新Block实例，并且将正确设置引用）。
- en: We can ask the reference tracking object if there is another block alive that
    shares data with us before writing into the values. We can trigger a copy before
    writing if there is in fact another block alive.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在写入值之前询问引用跟踪对象是否有另一个与我们共享数据的块存在。如果实际上有另一个活动的块存在，则我们可以在写入之前触发一次复制。
