- en: numpy.core.records.array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.core.records.array.html](https://numpy.org/doc/1.26/reference/generated/numpy.core.records.array.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct a record array from a wide-variety of objects.
  prefs: []
  type: TYPE_NORMAL
- en: A general-purpose record array constructor that dispatches to the appropriate
    [`recarray`](numpy.recarray.html#numpy.recarray "numpy.recarray") creation function
    based on the inputs (see Notes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**obj**any'
  prefs: []
  type: TYPE_NORMAL
- en: Input object. See Notes for details on how various input types are treated.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Valid dtype for array.
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of each array.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Position in the file or buffer to start reading from.
  prefs: []
  type: TYPE_NORMAL
- en: '**strides**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Buffer (*buf*) is interpreted according to these strides (strides define how
    many bytes each array element, row, column, etc. occupy in memory).
  prefs: []
  type: TYPE_NORMAL
- en: '**formats, names, titles, aligned, byteorder**'
  prefs: []
  type: TYPE_NORMAL
- en: If [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype") is `None`, these arguments
    are passed to [`numpy.format_parser`](numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser") to construct a dtype. See that function for detailed documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to copy the input object (True), or to use a reference instead. This
    option only applies when the input is an ndarray or recarray. Defaults to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: np.recarray
  prefs: []
  type: TYPE_NORMAL
- en: Record array created from the specified object.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If *obj* is `None`, then call the [`recarray`](numpy.recarray.html#numpy.recarray
    "numpy.recarray") constructor. If *obj* is a string, then call the [`fromstring`](numpy.fromstring.html#numpy.fromstring
    "numpy.fromstring") constructor. If *obj* is a list or a tuple, then if the first
    object is an [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), call
    [`fromarrays`](numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays"), otherwise call [`fromrecords`](numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords"). If *obj* is a [`recarray`](numpy.recarray.html#numpy.recarray
    "numpy.recarray"), then make a copy of the data in the recarray (if `copy=True`)
    and use the new formats, names, and titles. If *obj* is a file, then call [`fromfile`](numpy.fromfile.html#numpy.fromfile
    "numpy.fromfile"). Finally, if obj is an [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), then return `obj.view(recarray)`, making a copy of the data
    if `copy=True`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
