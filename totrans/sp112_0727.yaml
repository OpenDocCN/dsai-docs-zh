- en: scipy.spatial.KDTree
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.spatial.KDTree
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: kd-tree for quick nearest-neighbor lookup.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用于快速最近邻查找的kd树。
- en: This class provides an index into a set of k-dimensional points which can be
    used to rapidly look up the nearest neighbors of any point.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该类提供了对一组k维点的索引，可用于快速查找任意点的最近邻居。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**data**array_like, shape (n,m)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**data** 数组样式，形状（n，m）'
- en: The n data points of dimension m to be indexed. This array is not copied unless
    this is necessary to produce a contiguous array of doubles, and so modifying this
    data will result in bogus results. The data are also copied if the kd-tree is
    built with copy_data=True.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要索引的n个m维数据点。除非需要生成双精度连续数组，否则不会复制此数组，因此修改此数据将导致错误的结果。如果使用copy_data=True构建kd树，则也会复制数据。
- en: '**leafsize**positive int, optional'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**leafsize** 正整数，可选'
- en: 'The number of points at which the algorithm switches over to brute-force. Default:
    10.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在切换到暴力法的点数。默认值：10。
- en: '**compact_nodes**bool, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**compact_nodes** 布尔值，可选'
- en: 'If True, the kd-tree is built to shrink the hyperrectangles to the actual data
    range. This usually gives a more compact tree that is robust against degenerated
    input data and gives faster queries at the expense of longer build time. Default:
    True.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则构建kd树以缩小超矩形到实际数据范围。这通常会得到一个更紧凑的树，对退化输入数据更具鲁棒性，并以更快的查询速度换取更长的构建时间。默认值：True。
- en: '**copy_data**bool, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy_data** 布尔值，可选'
- en: 'If True the data is always copied to protect the kd-tree against data corruption.
    Default: False.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则数据始终会复制以保护kd树免受数据损坏。默认值：False。
- en: '**balanced_tree**bool, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**balanced_tree** 布尔值，可选'
- en: 'If True, the median is used to split the hyperrectangles instead of the midpoint.
    This usually gives a more compact tree and faster queries at the expense of longer
    build time. Default: True.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则使用中位数来分割超矩形，而不是中点。这通常会得到一个更紧凑的树和更快的查询速度，但以更长的构建时间为代价。默认值：True。
- en: '**boxsize**array_like or scalar, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**boxsize** 数组样式或标量，可选'
- en: Apply a m-d toroidal topology to the KDTree.. The topology is generated by \(x_i
    + n_i L_i\) where \(n_i\) are integers and \(L_i\) is the boxsize along i-th dimension.
    The input data shall be wrapped into \([0, L_i)\). A ValueError is raised if any
    of the data is outside of this bound.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将m维环面拓扑应用于KDTree。该拓扑由\(x_i + n_i L_i\)生成，其中\(n_i\)为整数，\(L_i\)为第i维的盒尺寸。输入数据将被包裹到\([0,
    L_i)\)中。如果任何数据超出此边界，则会引发ValueError。
- en: Notes
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: The algorithm used is described in Maneewongvatana and Mount 1999. The general
    idea is that the kd-tree is a binary tree, each of whose nodes represents an axis-aligned
    hyperrectangle. Each node specifies an axis and splits the set of points based
    on whether their coordinate along that axis is greater than or less than a particular
    value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的算法在Maneewongvatana和Mount 1999年的文章中有描述。总体思想是kd树是一个二叉树，每个节点代表一个轴对齐的超矩形。每个节点指定一个轴并根据它们沿该轴的坐标是否大于或小于特定值来分割点集。
- en: During construction, the axis and splitting point are chosen by the “sliding
    midpoint” rule, which ensures that the cells do not all become long and thin.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建过程中，轴和分割点是由“滑动中点”规则选择的，这确保单元不会全部变得又长又细。
- en: The tree can be queried for the r closest neighbors of any given point (optionally
    returning only those within some maximum distance of the point). It can also be
    queried, with a substantial gain in efficiency, for the r approximate closest
    neighbors.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可查询给定点的r个最近邻居（可选仅返回距离点的最大距离内的那些）。还可以查询r个近似最近邻居，效率显著提高。
- en: For large dimensions (20 is already large) do not expect this to run significantly
    faster than brute force. High-dimensional nearest-neighbor queries are a substantial
    open problem in computer science.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大维度（20已经很大），不要指望比暴力法运行得更快。高维度最近邻查询是计算机科学中一个重要的未解决问题。
- en: 'Attributes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**data**ndarray, shape (n,m)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**data** ndarray，形状（n，m）'
- en: The n data points of dimension m to be indexed. This array is not copied unless
    this is necessary to produce a contiguous array of doubles. The data are also
    copied if the kd-tree is built with *copy_data=True*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要索引的维度m的n数据点。除非需要生成连续的double数组，否则不会复制此数组。如果使用*copy_data=True*构建kd树，则数据也会被复制。
- en: '**leafsize**positive int'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**leafsize**positive int'
- en: The number of points at which the algorithm switches over to brute-force.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 算法转换为暴力方法的点数。
- en: '**m**int'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**m**int'
- en: The dimension of a single data-point.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单个数据点的维度。
- en: '**n**int'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int'
- en: The number of data points.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点的数量。
- en: '**maxes**ndarray, shape (m,)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxes**ndarray, shape (m,)'
- en: The maximum value in each dimension of the n data points.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点n维度中每个维度的最大值。
- en: '**mins**ndarray, shape (m,)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**mins**ndarray, shape (m,)'
- en: The minimum value in each dimension of the n data points.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点n维度中每个维度的最小值。
- en: '**size**int'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**size**int'
- en: The number of nodes in the tree.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 树中节点的数量。
- en: Methods
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`count_neighbors`](scipy.spatial.KDTree.count_neighbors.html#scipy.spatial.KDTree.count_neighbors
    "scipy.spatial.KDTree.count_neighbors")(other, r[, p, weights, ...]) | Count how
    many nearby pairs can be formed. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`count_neighbors`](scipy.spatial.KDTree.count_neighbors.html#scipy.spatial.KDTree.count_neighbors
    "scipy.spatial.KDTree.count_neighbors")(other, r[, p, weights, ...]) | 计算可以形成的附近点对数。
    |'
- en: '| [`query`](scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query "scipy.spatial.KDTree.query")(x[, k, eps, p, distance_upper_bound, ...])
    | Query the kd-tree for nearest neighbors. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`query`](scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query "scipy.spatial.KDTree.query")(x[, k, eps, p, distance_upper_bound, ...])
    | 查询kd树以获取最近邻居。 |'
- en: '| [`query_ball_point`](scipy.spatial.KDTree.query_ball_point.html#scipy.spatial.KDTree.query_ball_point
    "scipy.spatial.KDTree.query_ball_point")(x, r[, p, eps, workers, ...]) | Find
    all points within distance r of point(s) x. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`query_ball_point`](scipy.spatial.KDTree.query_ball_point.html#scipy.spatial.KDTree.query_ball_point
    "scipy.spatial.KDTree.query_ball_point")(x, r[, p, eps, workers, ...]) | 查找距离点x距离小于r的所有点。
    |'
- en: '| [`query_ball_tree`](scipy.spatial.KDTree.query_ball_tree.html#scipy.spatial.KDTree.query_ball_tree
    "scipy.spatial.KDTree.query_ball_tree")(other, r[, p, eps]) | Find all pairs of
    points between *self* and *other* whose distance is at most r. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`query_ball_tree`](scipy.spatial.KDTree.query_ball_tree.html#scipy.spatial.KDTree.query_ball_tree
    "scipy.spatial.KDTree.query_ball_tree")(other, r[, p, eps]) | 查找*self*和*other*之间距离最多为r的所有点对。
    |'
- en: '| [`query_pairs`](scipy.spatial.KDTree.query_pairs.html#scipy.spatial.KDTree.query_pairs
    "scipy.spatial.KDTree.query_pairs")(r[, p, eps, output_type]) | Find all pairs
    of points in *self* whose distance is at most r. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`query_pairs`](scipy.spatial.KDTree.query_pairs.html#scipy.spatial.KDTree.query_pairs
    "scipy.spatial.KDTree.query_pairs")(r[, p, eps, output_type]) | 查找*self*中距离最多为r的所有点对。
    |'
- en: '| [`sparse_distance_matrix`](scipy.spatial.KDTree.sparse_distance_matrix.html#scipy.spatial.KDTree.sparse_distance_matrix
    "scipy.spatial.KDTree.sparse_distance_matrix")(other, max_distance) | Compute
    a sparse distance matrix. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`sparse_distance_matrix`](scipy.spatial.KDTree.sparse_distance_matrix.html#scipy.spatial.KDTree.sparse_distance_matrix
    "scipy.spatial.KDTree.sparse_distance_matrix")(other, max_distance) | 计算稀疏距离矩阵。
    |'
- en: '| **innernode** |  |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **innernode** |  |'
- en: '| **leafnode** |  |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **leafnode** |  |'
- en: '| **node** |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **node** |  |'
