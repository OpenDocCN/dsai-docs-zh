- en: pandas.from_dummies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.from_dummies.html](https://pandas.pydata.org/docs/reference/api/pandas.from_dummies.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a categorical `DataFrame` from a `DataFrame` of dummy variables.
  prefs: []
  type: TYPE_NORMAL
- en: Inverts the operation performed by [`get_dummies()`](pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Data which contains dummy-coded variables in form of integer columns of 1’s
    and 0’s.
  prefs: []
  type: TYPE_NORMAL
- en: '**sep**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Separator used in the column names of the dummy categories they are character
    indicating the separation of the categorical names from the prefixes. For example,
    if your column names are ‘prefix_A’ and ‘prefix_B’, you can strip the underscore
    by specifying sep=’_’.
  prefs: []
  type: TYPE_NORMAL
- en: '**default_category**None, Hashable or dict of Hashables, default None'
  prefs: []
  type: TYPE_NORMAL
- en: The default category is the implied category when a value has none of the listed
    categories specified with a one, i.e. if all dummies in a row are zero. Can be
    a single value for all variables or a dict directly mapping the default categories
    to a prefix of a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Categorical data decoded from the dummy input-data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: When the input `DataFrame` `data` contains NA values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the input `DataFrame` `data` contains column names with separators that
    do not match the separator specified with `sep`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a `dict` passed to `default_category` does not include an implied category
    for each prefix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a value in `data` has more than one category assigned to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `default_category=None` and a value in `data` has no category assigned
    to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: When the input `data` is not of type `DataFrame`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the input `DataFrame` `data` contains non-dummy data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the passed `sep` is of a wrong data type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the passed `default_category` is of a wrong data type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_dummies()`](pandas.get_dummies.html#pandas.get_dummies "pandas.get_dummies")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert `Series` or `DataFrame` to dummy codes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Categorical`](pandas.Categorical.html#pandas.Categorical "pandas.Categorical")'
  prefs: []
  type: TYPE_NORMAL
- en: Represent a categorical variable in classic.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The columns of the passed dummy data should only include 1’s and 0’s, or boolean
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
