["```py\nclass sympy.physics.mechanics.body.Body(name, masscenter=None, mass=None, frame=None, central_inertia=None)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings \n```", "```py\n>>> from sympy.physics.mechanics import Body\n>>> with ignore_warnings(DeprecationWarning):\n...     body = Body('name_of_body') \n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, inertia\n>>> from sympy.physics.mechanics import Body\n>>> mass = Symbol('mass')\n>>> masscenter = Point('masscenter')\n>>> frame = ReferenceFrame('frame')\n>>> ixx = Symbol('ixx')\n>>> body_inertia = inertia(frame, ixx, 0, 0)\n>>> with ignore_warnings(DeprecationWarning):\n...     body = Body('name_of_body', masscenter, mass, frame, body_inertia) \n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.mechanics import Body\n>>> mass = Symbol('mass')\n>>> with ignore_warnings(DeprecationWarning):\n...     body = Body('name_of_body', mass=mass) \n```", "```py\nang_vel_in(body)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body, ReferenceFrame\n>>> with ignore_warnings(DeprecationWarning):\n...     A = Body('A')\n>>> N = ReferenceFrame('N')\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B', frame=N)\n>>> A.frame.set_ang_vel(N, 5*N.x)\n>>> A.ang_vel_in(B)\n5*N.x\n>>> A.ang_vel_in(N)\n5*N.x \n```", "```py\nangular_momentum(point, frame)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v, r, omega = dynamicsymbols('m v r omega')\n>>> N = ReferenceFrame('N')\n>>> b = ReferenceFrame('b')\n>>> b.set_ang_vel(N, omega * b.x)\n>>> P = Point('P')\n>>> P.set_vel(N, 1 * N.x)\n>>> I = outer(b.x, b.x)\n>>> B = RigidBody('B', P, b, m, (I, P))\n>>> B.angular_momentum(P, N)\nomega*b.x \n```", "```py\napply_force(force, point=None, reaction_body=None, reaction_point=None)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import Body, Point, dynamicsymbols\n>>> m, g = symbols('m g')\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B')\n>>> force1 = m*g*B.z\n>>> B.apply_force(force1) #Applying force on B's masscenter\n>>> B.loads\n[(B_masscenter, g*m*B_frame.z)] \n```", "```py\n>>> f1, f2 = dynamicsymbols('f1 f2')\n>>> P = Point('P') #Considering point P on body B\n>>> B.apply_force(f1*B.x + f2*B.y, P)\n>>> B.loads\n[(B_masscenter, g*m*B_frame.z), (P, f1(t)*B_frame.x + f2(t)*B_frame.y)] \n```", "```py\n>>> B.apply_force(-f1*B.x, P)\n>>> B.loads\n[(B_masscenter, g*m*B_frame.z), (P, f2(t)*B_frame.y)] \n```", "```py\n>>> from sympy.physics.mechanics import Body, dynamicsymbols\n>>> with ignore_warnings(DeprecationWarning):\n...     N = Body('N') #Newtonion Frame\n>>> x = dynamicsymbols('x')\n>>> with ignore_warnings(DeprecationWarning):\n...     B1 = Body('B1')\n...     B2 = Body('B2')\n>>> spring_force = x*N.x \n```", "```py\n>>> P1 = Point('P1')\n>>> P2 = Point('P2')\n>>> B1.apply_force(spring_force, point=P1, reaction_body=B2, reaction_point=P2) \n```", "```py\n>>> B1.loads\n[(P1, x(t)*N_frame.x)]\n>>> B2.loads\n[(P2, - x(t)*N_frame.x)] \n```", "```py\napply_torque(torque, reaction_body=None)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import Body, dynamicsymbols\n>>> t = symbols('t')\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B')\n>>> torque1 = t*B.z\n>>> B.apply_torque(torque1)\n>>> B.loads\n[(B_frame, t*B_frame.z)] \n```", "```py\n>>> t1, t2 = dynamicsymbols('t1 t2')\n>>> B.apply_torque(t1*B.x + t2*B.y)\n>>> B.loads\n[(B_frame, t1(t)*B_frame.x + t2(t)*B_frame.y + t*B_frame.z)] \n```", "```py\n>>> B.apply_torque(-t1*B.x)\n>>> B.loads\n[(B_frame, t2(t)*B_frame.y + t*B_frame.z)] \n```", "```py\n>>> from sympy.physics.mechanics import Body, dynamicsymbols\n>>> with ignore_warnings(DeprecationWarning):\n...     N = Body('N') #Newtonion frame\n...     B1 = Body('B1')\n...     B2 = Body('B2')\n>>> v = dynamicsymbols('v')\n>>> T = v*N.y #Torque \n```", "```py\n>>> B1.apply_torque(T, B2) \n```", "```py\n>>> B1.loads\n[(B1_frame, v(t)*N_frame.y)]\n>>> B2.loads\n[(B2_frame, - v(t)*N_frame.y)] \n```", "```py\nproperty central_inertia\n```", "```py\nclear_loads()\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B')\n>>> force = B.x + B.y\n>>> B.apply_force(force)\n>>> B.loads\n[(B_masscenter, B_frame.x + B_frame.y)]\n>>> B.clear_loads()\n>>> B.loads\n[] \n```", "```py\ndcm(body)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body\n>>> with ignore_warnings(DeprecationWarning):\n...     A = Body('A')\n...     B = Body('B')\n>>> A.frame.orient_axis(B.frame, B.frame.x, 5)\n>>> A.dcm(B)\nMatrix([\n[1,       0,      0],\n[0,  cos(5), sin(5)],\n[0, -sin(5), cos(5)]])\n>>> A.dcm(B.frame)\nMatrix([\n[1,       0,      0],\n[0,  cos(5), sin(5)],\n[0, -sin(5), cos(5)]]) \n```", "```py\nproperty frame\n```", "```py\nproperty inertia\n```", "```py\nkinetic_energy(frame)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body, ReferenceFrame, Point\n>>> from sympy import symbols\n>>> m, v, r, omega = symbols('m v r omega')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> with ignore_warnings(DeprecationWarning):\n...     P = Body('P', masscenter=O, mass=m)\n>>> P.masscenter.set_vel(N, v * N.y)\n>>> P.kinetic_energy(N)\nm*v**2/2 \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> b = ReferenceFrame('b')\n>>> b.set_ang_vel(N, omega * b.x)\n>>> P = Point('P')\n>>> P.set_vel(N, v * N.x)\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B', masscenter=P, frame=b)\n>>> B.kinetic_energy(N)\nB_ixx*omega**2/2 + B_mass*v**2/2 \n```", "```py\nlinear_momentum(frame)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v = dynamicsymbols('m v')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, v * N.x)\n>>> I = outer (N.x, N.x)\n>>> Inertia_tuple = (I, P)\n>>> B = RigidBody('B', P, N, m, Inertia_tuple)\n>>> B.linear_momentum(N)\nm*v*N.x \n```", "```py\nproperty mass\n```", "```py\nproperty masscenter\n```", "```py\nmasscenter_vel(body)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body\n>>> with ignore_warnings(DeprecationWarning):\n...     A = Body('A')\n...     B = Body('B')\n>>> A.masscenter.set_vel(B.frame, 5*B.frame.x)\n>>> A.masscenter_vel(B)\n5*B_frame.x\n>>> A.masscenter_vel(B.frame)\n5*B_frame.x \n```", "```py\nproperty name\n```", "```py\nparallel_axis(point, frame=None)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body\n>>> with ignore_warnings(DeprecationWarning):\n...     A = Body('A')\n>>> P = A.masscenter.locatenew('point', 3 * A.x + 5 * A.y)\n>>> A.parallel_axis(P).to_matrix(A.frame)\nMatrix([\n[A_ixx + 25*A_mass, A_ixy - 15*A_mass,             A_izx],\n[A_ixy - 15*A_mass,  A_iyy + 9*A_mass,             A_iyz],\n[            A_izx,             A_iyz, A_izz + 34*A_mass]]) \n```", "```py\nproperty point\n```", "```py\nproperty potential_energy\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point\n>>> from sympy import symbols\n>>> m, g, h = symbols('m g h')\n>>> O = Point('O')\n>>> P = Particle('P', O, m)\n>>> P.potential_energy = m * g * h\n>>> P.potential_energy\ng*h*m \n```", "```py\nremove_load(about=None)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings\n>>> from sympy.physics.mechanics import Body, Point\n>>> with ignore_warnings(DeprecationWarning):\n...     B = Body('B')\n>>> P = Point('P')\n>>> f1 = B.x\n>>> f2 = B.y\n>>> B.apply_force(f1)\n>>> B.apply_force(f2, P)\n>>> B.loads\n[(B_masscenter, B_frame.x), (P, B_frame.y)] \n```", "```py\n>>> B.remove_load(P)\n>>> B.loads\n[(B_masscenter, B_frame.x)] \n```", "```py\nproperty x\n```", "```py\nproperty y\n```", "```py\nproperty z\n```", "```py\nclass sympy.physics.mechanics.jointsmethod.JointsMethod(newtonion, *joints)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import Body, JointsMethod, PrismaticJoint\n>>> from sympy.physics.vector import dynamicsymbols\n>>> c, k = symbols('c k')\n>>> x, v = dynamicsymbols('x v')\n>>> with ignore_warnings(DeprecationWarning):\n...     wall = Body('W')\n...     body = Body('B')\n>>> J = PrismaticJoint('J', wall, body, coordinates=x, speeds=v)\n>>> wall.apply_force(c*v*wall.x, reaction_body=body)\n>>> wall.apply_force(k*x*wall.x, reaction_body=body)\n>>> with ignore_warnings(DeprecationWarning):\n...     method = JointsMethod(wall, J)\n>>> method.form_eoms()\nMatrix([[-B_mass*Derivative(v(t), t) - c*v(t) - k*x(t)]])\n>>> M = method.mass_matrix_full\n>>> F = method.forcing_full\n>>> rhs = M.LUsolve(F)\n>>> rhs\nMatrix([\n[                     v(t)],\n[(-c*v(t) - k*x(t))/B_mass]]) \n```", "```py\nproperty bodies\n```", "```py\nproperty forcing\n```", "```py\nproperty forcing_full\n```", "```py\nform_eoms(method=<class 'sympy.physics.mechanics.kane.KanesMethod'>)\n```", "```py\n>>> from sympy.utilities.exceptions import ignore_warnings \n```", "```py\n>>> from sympy import S, symbols\n>>> from sympy.physics.mechanics import LagrangesMethod, dynamicsymbols, Body\n>>> from sympy.physics.mechanics import PrismaticJoint, JointsMethod\n>>> q = dynamicsymbols('q')\n>>> qd = dynamicsymbols('q', 1)\n>>> m, k, b = symbols('m k b')\n>>> with ignore_warnings(DeprecationWarning):\n...     wall = Body('W')\n...     part = Body('P', mass=m)\n>>> part.potential_energy = k * q**2 / S(2)\n>>> J = PrismaticJoint('J', wall, part, coordinates=q, speeds=qd)\n>>> wall.apply_force(b * qd * wall.x, reaction_body=part)\n>>> with ignore_warnings(DeprecationWarning):\n...     method = JointsMethod(wall, J)\n>>> method.form_eoms(LagrangesMethod)\nMatrix([[b*Derivative(q(t), t) + k*q(t) + m*Derivative(q(t), (t, 2))]]) \n```", "```py\n>>> method.rhs()\nMatrix([\n[                Derivative(q(t), t)],\n[(-b*Derivative(q(t), t) - k*q(t))/m]]) \n```", "```py\nproperty kdes\n```", "```py\nproperty loads\n```", "```py\nproperty mass_matrix\n```", "```py\nproperty mass_matrix_full\n```", "```py\nproperty method\n```", "```py\nproperty q\n```", "```py\nrhs(inv_method=None)\n```", "```py\nproperty u\n```"]