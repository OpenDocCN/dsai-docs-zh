["```py\n>>> from sympy.physics.mechanics import *\n>>> N = ReferenceFrame('N')\n>>> q1, q2, u1, u2 = dynamicsymbols('q1 q2 u1 u2')\n>>> q1d, q2d, u1d, u2d = dynamicsymbols('q1 q2 u1 u2', 1)\n>>> KM = KanesMethod(N, [q1, q2], [u1, u2]) \n```", "```py\n>>> q1, q2, q3, q4 = dynamicsymbols('q1 q2 q3 q4')\n>>> u1, u2, u3, u4 = dynamicsymbols('u1 u2 u3 u4')\n>>> # Here we will assume q2 is dependent, and u2 and u3 are dependent\n>>> # We need the constraint equations to enter them though\n>>> KM = KanesMethod(N, [q1, q3, q4], [u1, u4]) \n```", "```py\n>>> KM = KanesMethod(N, [q1, q3, q4], [u1, u2, u3], u_auxiliary=[u4]) \n```", "```py\n>>> kd = [q1d - u1, q2d - u2] \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> q1, q2, q3, q4 = dynamicsymbols('q1 q2 q3 q4')\n>>> q1d, q2d, q3d, q4d = dynamicsymbols('q1 q2 q3 q4', 1)\n>>> u1, u2, u3, u4 = dynamicsymbols('u1 u2 u3 u4')\n>>> #Here we will assume q2 is dependent, and u2 and u3 are dependent\n>>> speed_cons = [u2 - u1, u3 - u1 - u4]\n>>> coord_cons = [q2 - q1]\n>>> q_ind = [q1, q3, q4]\n>>> q_dep = [q2]\n>>> u_ind = [u1, u4]\n>>> u_dep = [u2, u3]\n>>> kd = [q1d - u1, q2d - u2, q3d - u3, q4d - u4]\n>>> KM = KanesMethod(N, q_ind, u_ind, kd,\n...           q_dependent=q_dep,\n...           configuration_constraints=coord_cons,\n...           u_dependent=u_dep,\n...           velocity_constraints=speed_cons) \n```", "```py\n>>> mechanics_printing(pretty_print=False)\n>>> KM.kindiffdict()\n{q1': u1, q2': u2, q3': u3, q4': u4} \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> q, u = dynamicsymbols('q u')\n>>> qd, ud = dynamicsymbols('q u', 1)\n>>> P = Point('P')\n>>> P.set_vel(N, u * N.x)\n>>> Pa = Particle('Pa', P, 5)\n>>> BL = [Pa]\n>>> FL = [(P, 7 * N.x)]\n>>> KM = KanesMethod(N, [q], [u], [qd - u])\n>>> (fr, frstar) = KM.kanes_equations(BL, FL)\n>>> KM.mass_matrix\nMatrix([[5]])\n>>> KM.forcing\nMatrix([[7]]) \n```", "```py\n>>> KM.mass_matrix_full\nMatrix([\n[1, 0],\n[0, 5]])\n>>> KM.forcing_full\nMatrix([\n[u],\n[7]]) \n```"]