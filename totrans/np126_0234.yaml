- en: numpy.nditer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html](https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Efficient multi-dimensional iterator object to iterate over arrays. To get started
    using this object, see the [introductory guide to array iteration](../arrays.nditer.html#arrays-nditer).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**op**ndarray or sequence of array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The array(s) to iterate over.
  prefs: []
  type: TYPE_NORMAL
- en: '**flags**sequence of str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Flags to control the behavior of the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '`buffered` enables buffering when required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c_index` causes a C-order index to be tracked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f_index` causes a Fortran-order index to be tracked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multi_index` causes a multi-index, or a tuple of indices with one per iteration
    dimension, to be tracked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common_dtype` causes all the operands to be converted to a common data type,
    with copying or buffering as necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy_if_overlap` causes the iterator to determine if read operands have overlap
    with write operands, and make temporary copies as necessary to avoid overlap.
    False positives (needless copying) are possible in some cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delay_bufalloc` delays allocation of the buffers until a reset() call is made.
    Allows `allocate` operands to be initialized before their values are copied into
    the buffers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external_loop` causes the `values` given to be one-dimensional arrays with
    multiple values instead of zero-dimensional arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grow_inner` allows the `value` array sizes to be made larger than the buffer
    size when both `buffered` and `external_loop` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ranged` allows the iterator to be restricted to a sub-range of the iterindex
    values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refs_ok` enables iteration of reference types, such as object arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce_ok` enables iteration of `readwrite` operands which are broadcasted,
    also known as reduction operands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zerosize_ok` allows [`itersize`](numpy.nditer.itersize.html#numpy.nditer.itersize
    "numpy.nditer.itersize") to be zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**op_flags**list of list of str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This is a list of flags for each operand. At minimum, one of `readonly`, `readwrite`,
    or `writeonly` must be specified.
  prefs: []
  type: TYPE_NORMAL
- en: '`readonly` indicates the operand will only be read from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readwrite` indicates the operand will be read from and written to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writeonly` indicates the operand will only be written to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_broadcast` prevents the operand from being broadcasted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contig` forces the operand data to be contiguous.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aligned` forces the operand data to be aligned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nbo` forces the operand data to be in native byte order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy` allows a temporary read-only copy if required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateifcopy` allows a temporary read-write copy if required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allocate` causes the array to be allocated if it is None in the `op` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_subtype` prevents an `allocate` operand from using a subtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arraymask` indicates that this operand is the mask to use for selecting elements
    when writing to operands with the ‘writemasked’ flag set. The iterator does not
    enforce this, but when writing from a buffer back to the array, it only copies
    those elements indicated by this mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writemasked` indicates that only elements where the chosen `arraymask` operand
    is True will be written to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlap_assume_elementwise` can be used to mark operands that are accessed
    only in the iterator order, to allow less conservative copying when `copy_if_overlap`
    is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**op_dtypes**dtype or tuple of dtype(s), optional'
  prefs: []
  type: TYPE_NORMAL
- en: The required data type(s) of the operands. If copying or buffering is enabled,
    the data will be converted to/from their original types.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’, ‘A’, ‘K’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the iteration order. ‘C’ means C order, ‘F’ means Fortran order, ‘A’
    means ‘F’ order if all the arrays are Fortran contiguous, ‘C’ order otherwise,
    and ‘K’ means as close to the order the array elements appear in memory as possible.
    This also affects the element memory order of `allocate` operands, as they are
    allocated to be compatible with iteration order. Default is ‘K’.
  prefs: []
  type: TYPE_NORMAL
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls what kind of data casting may occur when making a copy or buffering.
    Setting this to ‘unsafe’ is not recommended, as it can adversely affect accumulations.
  prefs: []
  type: TYPE_NORMAL
- en: ‘no’ means the data types should not be cast at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘equiv’ means only byte-order changes are allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘safe’ means only casts which can preserve values are allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32,
    are allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘unsafe’ means any data conversions may be done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**op_axes**list of list of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, is a list of ints or None for each operands. The list of axes for
    an operand is a mapping from the dimensions of the iterator to the dimensions
    of the operand. A value of -1 can be placed for entries, causing that dimension
    to be treated as [`newaxis`](../constants.html#numpy.newaxis "numpy.newaxis").
  prefs: []
  type: TYPE_NORMAL
- en: '**itershape**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The desired shape of the iterator. This allows `allocate` operands with a dimension
    mapped by op_axes not corresponding to a dimension of a different operand to get
    a value not equal to 1 for that dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**buffersize**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: When buffering is enabled, controls the size of the temporary buffers. Set to
    0 for the default value.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`nditer`](#numpy.nditer "numpy.nditer") supersedes [`flatiter`](numpy.flatiter.html#numpy.flatiter
    "numpy.flatiter"). The iterator implementation behind [`nditer`](#numpy.nditer
    "numpy.nditer") is also exposed by the NumPy C API.'
  prefs: []
  type: TYPE_NORMAL
- en: The Python exposure supplies two iteration interfaces, one which follows the
    Python iterator protocol, and another which mirrors the C-style do-while pattern.
    The native Python approach is better in most cases, but if you need the coordinates
    or index of an iterator, use the C-style pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we might write an `iter_add` function, using the Python iterator
    protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the same function, but following the C-style pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example outer product function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example function which operates like a “lambda” ufunc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If operand flags `"writeonly"` or `"readwrite"` are used the operands may be
    views into the original data with the *WRITEBACKIFCOPY* flag. In this case [`nditer`](#numpy.nditer
    "numpy.nditer") must be used as a context manager or the [`nditer.close`](numpy.nditer.close.html#numpy.nditer.close
    "numpy.nditer.close") method must be called before using the result. The temporary
    data will be written back to the original data when the `__exit__` function is
    called but not before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that once the iterator is exited, dangling references
    (like *x* in the example) may or may not share data with the original data *a*.
    If writeback semantics were active, i.e. if *x.base.flags.writebackifcopy* is
    *True*, then exiting the iterator will sever the connection between *x* and *a*,
    writing to *x* will no longer write to *a*. If writeback semantics are not active,
    then *x.data* will still point at some part of *a.data*, and writing to one will
    affect the other.
  prefs: []
  type: TYPE_NORMAL
- en: Context management and the [`close`](numpy.nditer.close.html#numpy.nditer.close
    "numpy.nditer.close") method appeared in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtypes**tuple of dtype(s)'
  prefs: []
  type: TYPE_NORMAL
- en: The data types of the values provided in [`value`](numpy.nditer.value.html#numpy.nditer.value
    "numpy.nditer.value"). This may be different from the operand data types if buffering
    is enabled. Valid only before the iterator is closed.
  prefs: []
  type: TYPE_NORMAL
- en: '**finished**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the iteration over the operands is finished or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**has_delayed_bufalloc**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the iterator was created with the `delay_bufalloc` flag, and no reset()
    function was called on it yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**has_index**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the iterator was created with either the `c_index` or the `f_index`
    flag, and the property [`index`](numpy.nditer.index.html#numpy.nditer.index "numpy.nditer.index")
    can be used to retrieve it.
  prefs: []
  type: TYPE_NORMAL
- en: '**has_multi_index**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the iterator was created with the `multi_index` flag, and the property
    [`multi_index`](numpy.nditer.multi_index.html#numpy.nditer.multi_index "numpy.nditer.multi_index")
    can be used to retrieve it.
  prefs: []
  type: TYPE_NORMAL
- en: '**index**'
  prefs: []
  type: TYPE_NORMAL
- en: When the `c_index` or `f_index` flag was used, this property provides access
    to the index. Raises a ValueError if accessed and `has_index` is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**iterationneedsapi**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether iteration requires access to the Python API, for example if one of the
    operands is an object array.
  prefs: []
  type: TYPE_NORMAL
- en: '**iterindex**int'
  prefs: []
  type: TYPE_NORMAL
- en: An index which matches the order of iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**itersize**int'
  prefs: []
  type: TYPE_NORMAL
- en: Size of the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '**itviews**'
  prefs: []
  type: TYPE_NORMAL
- en: Structured view(s) of [`operands`](numpy.nditer.operands.html#numpy.nditer.operands
    "numpy.nditer.operands") in memory, matching the reordered and optimized iterator
    access pattern. Valid only before the iterator is closed.
  prefs: []
  type: TYPE_NORMAL
- en: '**multi_index**'
  prefs: []
  type: TYPE_NORMAL
- en: When the `multi_index` flag was used, this property provides access to the index.
    Raises a ValueError if accessed accessed and `has_multi_index` is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int'
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions of the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '**nop**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of iterator operands.
  prefs: []
  type: TYPE_NORMAL
- en: '[`operands`](numpy.nditer.operands.html#numpy.nditer.operands "numpy.nditer.operands")tuple
    of operand(s)'
  prefs: []
  type: TYPE_NORMAL
- en: operands[*Slice*]
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**tuple of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Shape tuple, the shape of the iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '**value**'
  prefs: []
  type: TYPE_NORMAL
- en: Value of `operands` at current iteration. Normally, this is a tuple of array
    scalars, but if the flag `external_loop` is used, it is a tuple of one dimensional
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`close`](numpy.nditer.close.html#numpy.nditer.close "numpy.nditer.close")()
    | Resolve all writeback semantics in writeable operands. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](numpy.nditer.copy.html#numpy.nditer.copy "numpy.nditer.copy")()
    | Get a copy of the iterator in its current state. |'
  prefs: []
  type: TYPE_TB
- en: '| [`debug_print`](numpy.nditer.debug_print.html#numpy.nditer.debug_print "numpy.nditer.debug_print")()
    | Print the current state of the [`nditer`](#numpy.nditer "numpy.nditer") instance
    and debug info to stdout. |'
  prefs: []
  type: TYPE_TB
- en: '| [`enable_external_loop`](numpy.nditer.enable_external_loop.html#numpy.nditer.enable_external_loop
    "numpy.nditer.enable_external_loop")() | When the "external_loop" was not used
    during construction, but is desired, this modifies the iterator to behave as if
    the flag was specified. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iternext`](numpy.nditer.iternext.html#numpy.nditer.iternext "numpy.nditer.iternext")()
    | Check whether iterations are left, and perform a single internal iteration without
    returning the result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`remove_axis`](numpy.nditer.remove_axis.html#numpy.nditer.remove_axis "numpy.nditer.remove_axis")(i, /)
    | Removes axis *i* from the iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`remove_multi_index`](numpy.nditer.remove_multi_index.html#numpy.nditer.remove_multi_index
    "numpy.nditer.remove_multi_index")() | When the "multi_index" flag was specified,
    this removes it, allowing the internal iteration structure to be optimized further.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`reset`](numpy.nditer.reset.html#numpy.nditer.reset "numpy.nditer.reset")()
    | Reset the iterator to its initial state. |'
  prefs: []
  type: TYPE_TB
