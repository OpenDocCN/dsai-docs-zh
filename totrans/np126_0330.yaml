- en: Array manipulation routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.array-manipulation.html](https://numpy.org/doc/1.26/reference/routines.array-manipulation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Basic operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | Copies values from one array to another, broadcasting as necessary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | Return
    the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: Changing array shape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | Return a contiguous flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  prefs: []
  type: TYPE_TB
- en: Transpose-like operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | Move axes of an array to new positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | Roll the specified axis backwards, until it lies in a given position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | Interchange two axes of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | Returns an array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: Changing number of dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | Convert inputs to arrays with at least one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | View inputs as arrays with at least two dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | View inputs as arrays with at least three dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | Produce an object that mimics broadcasting. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | Broadcast an array to a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | Broadcast any number of arrays against
    each other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | Expand the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: Changing kind of array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | Return an array converted to a float type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | Return an array (ndim >= 1) laid out
    in Fortran order in memory. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | Convert the input to an array,
    checking for NaNs or Infs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | Return an ndarray of the provided type that satisfies requirements. |'
  prefs: []
  type: TYPE_TB
- en: Joining arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | Join a sequence of arrays along an existing axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | Join a sequence of arrays along a new axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    Assemble an nd-array from nested lists of blocks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence horizontally (column wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | Stack arrays in sequence depth wise (along third axis). |'
  prefs: []
  type: TYPE_TB
- en: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | Stack 1-D arrays as columns into a 2-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  prefs: []
  type: TYPE_TB
- en: Splitting arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays as views into *ary*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | Split array into multiple sub-arrays along the 3rd axis (depth). |'
  prefs: []
  type: TYPE_TB
- en: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays horizontally (column-wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays vertically (row-wise). |'
  prefs: []
  type: TYPE_TB
- en: Tiling arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | Construct
    an array by repeating A the number of times given by reps. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | Repeat each element of an array after themselves |'
  prefs: []
  type: TYPE_TB
- en: Adding and removing elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | Return a new array with sub-arrays along an axis deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | Insert values along the given axis before the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | Append values to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | Return a new array with the specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | Trim the leading and/or trailing zeros from a 1-D array or sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: Rearranging elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    Reverse the order of elements in an array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    Reverse the order of elements along axis 1 (left/right). |'
  prefs: []
  type: TYPE_TB
- en: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    Reverse the order of elements along axis 0 (up/down). |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | Roll array elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | Rotate an array by 90 degrees in the plane specified by axes. |'
  prefs: []
  type: TYPE_TB
- en: Basic operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | Copies values from one array to another, broadcasting as necessary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | Return
    the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: Changing array shape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | Return a contiguous flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  prefs: []
  type: TYPE_TB
- en: Transpose-like operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | Move axes of an array to new positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | Roll the specified axis backwards, until it lies in a given position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | Interchange two axes of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | Returns an array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: Changing number of dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | Convert inputs to arrays with at least one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | View inputs as arrays with at least two dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | View inputs as arrays with at least three dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | Produce an object that mimics broadcasting. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | Broadcast an array to a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | Broadcast any number of arrays against
    each other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | Expand the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: Changing kind of array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | Return an array converted to a float type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | Return an array (ndim >= 1) laid out
    in Fortran order in memory. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | Convert the input to an array,
    checking for NaNs or Infs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | Return an ndarray of the provided type that satisfies requirements. |'
  prefs: []
  type: TYPE_TB
- en: Joining arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | Join a sequence of arrays along an existing axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | Join a sequence of arrays along a new axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    Assemble an nd-array from nested lists of blocks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence horizontally (column wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | Stack arrays in sequence depth wise (along third axis). |'
  prefs: []
  type: TYPE_TB
- en: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | Stack 1-D arrays as columns into a 2-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  prefs: []
  type: TYPE_TB
- en: Splitting arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays as views into *ary*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | Split array into multiple sub-arrays along the 3rd axis (depth). |'
  prefs: []
  type: TYPE_TB
- en: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays horizontally (column-wise). |'
  prefs: []
  type: TYPE_TB
- en: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays vertically (row-wise). |'
  prefs: []
  type: TYPE_TB
- en: Tiling arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | Construct
    an array by repeating A the number of times given by reps. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | Repeat each element of an array after themselves |'
  prefs: []
  type: TYPE_TB
- en: Adding and removing elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | Return a new array with sub-arrays along an axis deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | Insert values along the given axis before the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | Append values to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | Return a new array with the specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | Trim the leading and/or trailing zeros from a 1-D array or sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: Rearranging elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    Reverse the order of elements in an array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    Reverse the order of elements along axis 1 (left/right). |'
  prefs: []
  type: TYPE_TB
- en: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    Reverse the order of elements along axis 0 (up/down). |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | Roll array elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | Rotate an array by 90 degrees in the plane specified by axes. |'
  prefs: []
  type: TYPE_TB
