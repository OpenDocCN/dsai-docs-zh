- en: Model Validation with Ultralytics YOLO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/modes/val/`](https://docs.ultralytics.com/modes/val/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Ultralytics YOLO ecosystem and integrations](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Validation is a critical step in the machine learning pipeline, allowing you
    to assess the quality of your trained models. Val mode in Ultralytics YOLOv8 provides
    a robust suite of tools and metrics for evaluating the performance of your object
    detection models. This guide serves as a complete resource for understanding how
    to effectively use the Val mode to ensure that your models are both accurate and
    reliable.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/j8uQc0qB91s?start=47`](https://www.youtube.com/embed/j8uQc0qB91s?start=47)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Ultralytics Modes Tutorial: Validation'
  prefs: []
  type: TYPE_NORMAL
- en: Why Validate with Ultralytics YOLO?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s why using YOLOv8''s Val mode is advantageous:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precision:** Get accurate metrics like mAP50, mAP75, and mAP50-95 to comprehensively
    evaluate your model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convenience:** Utilize built-in features that remember training settings,
    simplifying the validation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility:** Validate your model with the same or different datasets and
    image sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperparameter Tuning:** Use validation metrics to fine-tune your model for
    better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key Features of Val Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the notable functionalities offered by YOLOv8''s Val mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated Settings:** Models remember their training configurations for straightforward
    validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-Metric Support:** Evaluate your model based on a range of accuracy
    metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CLI and Python API:** Choose from command-line interface or Python API based
    on your preference for validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Compatibility:** Works seamlessly with datasets used during the training
    phase as well as custom datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: YOLOv8 models automatically remember their training settings, so you can validate
    a model at the same image size and on the original dataset easily with just `yolo
    val model=yolov8n.pt` or `model('yolov8n.pt').val()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Validate trained YOLOv8n model accuracy on the COCO8 dataset. No argument need
    to passed as the `model` retains its training `data` and arguments as model attributes.
    See Arguments section below for a full list of export arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Arguments for YOLO Model Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When validating YOLO models, several arguments can be fine-tuned to optimize
    the evaluation process. These arguments control aspects such as input image size,
    batch processing, and performance thresholds. Below is a detailed breakdown of
    each argument to help you customize your validation settings effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `str` | `None` | Specifies the path to the dataset configuration
    file (e.g., `coco8.yaml`). This file includes paths to validation data, class
    names, and number of classes. |'
  prefs: []
  type: TYPE_TB
- en: '| `imgsz` | `int` | `640` | Defines the size of input images. All images are
    resized to this dimension before processing. |'
  prefs: []
  type: TYPE_TB
- en: '| `batch` | `int` | `16` | Sets the number of images per batch. Use `-1` for
    AutoBatch, which automatically adjusts based on GPU memory availability. |'
  prefs: []
  type: TYPE_TB
- en: '| `save_json` | `bool` | `False` | If `True`, saves the results to a JSON file
    for further analysis or integration with other tools. |'
  prefs: []
  type: TYPE_TB
- en: '| `save_hybrid` | `bool` | `False` | If `True`, saves a hybrid version of labels
    that combines original annotations with additional model predictions. |'
  prefs: []
  type: TYPE_TB
- en: '| `conf` | `float` | `0.001` | Sets the minimum confidence threshold for detections.
    Detections with confidence below this threshold are discarded. |'
  prefs: []
  type: TYPE_TB
- en: '| `iou` | `float` | `0.6` | Sets the Intersection Over Union (IoU) threshold
    for Non-Maximum Suppression (NMS). Helps in reducing duplicate detections. |'
  prefs: []
  type: TYPE_TB
- en: '| `max_det` | `int` | `300` | Limits the maximum number of detections per image.
    Useful in dense scenes to prevent excessive detections. |'
  prefs: []
  type: TYPE_TB
- en: '| `half` | `bool` | `True` | Enables half-precision (FP16) computation, reducing
    memory usage and potentially increasing speed with minimal impact on accuracy.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `device` | `str` | `None` | Specifies the device for validation (`cpu`, `cuda:0`,
    etc.). Allows flexibility in utilizing CPU or GPU resources. |'
  prefs: []
  type: TYPE_TB
- en: '| `dnn` | `bool` | `False` | If `True`, uses the OpenCV DNN module for ONNX
    model inference, offering an alternative to PyTorch inference methods. |'
  prefs: []
  type: TYPE_TB
- en: '| `plots` | `bool` | `False` | When set to `True`, generates and saves plots
    of predictions versus ground truth for visual evaluation of the model''s performance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `rect` | `bool` | `False` | If `True`, uses rectangular inference for batching,
    reducing padding and potentially increasing speed and efficiency. |'
  prefs: []
  type: TYPE_TB
- en: '| `split` | `str` | `val` | Determines the dataset split to use for validation
    (`val`, `test`, or `train`). Allows flexibility in choosing the data segment for
    performance evaluation. |'
  prefs: []
  type: TYPE_TB
- en: Each of these settings plays a vital role in the validation process, allowing
    for a customizable and efficient evaluation of YOLO models. Adjusting these parameters
    according to your specific needs and resources can help achieve the best balance
    between accuracy and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Example Validation with Arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The below examples showcase YOLO model validation with custom arguments in Python
    and CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I validate my YOLOv8 model with Ultralytics?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To validate your YOLOv8 model, you can use the Val mode provided by Ultralytics.
    For example, using the Python API, you can load a model and run validation with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the command-line interface (CLI):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For further customization, you can adjust various arguments like `imgsz`, `batch`,
    and `conf` in both Python and CLI modes. Check the Arguments for YOLO Model Validation
    section for the full list of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: What metrics can I get from YOLOv8 model validation?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YOLOv8 model validation provides several key metrics to assess model performance.
    These include:'
  prefs: []
  type: TYPE_NORMAL
- en: mAP50 (mean Average Precision at IoU threshold 0.5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mAP75 (mean Average Precision at IoU threshold 0.75)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mAP50-95 (mean Average Precision across multiple IoU thresholds from 0.5 to
    0.95)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the Python API, you can access these metrics as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For a complete performance evaluation, it's crucial to review all these metrics.
    For more details, refer to the Key Features of Val Mode.
  prefs: []
  type: TYPE_NORMAL
- en: What are the advantages of using Ultralytics YOLO for validation?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using Ultralytics YOLO for validation provides several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precision:** YOLOv8 offers accurate performance metrics including mAP50,
    mAP75, and mAP50-95.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convenience:** The models remember their training settings, making validation
    straightforward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility:** You can validate against the same or different datasets and
    image sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperparameter Tuning:** Validation metrics help in fine-tuning models for
    better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These benefits ensure that your models are evaluated thoroughly and can be optimized
    for superior results. Learn more about these advantages in the Why Validate with
    Ultralytics YOLO section.
  prefs: []
  type: TYPE_NORMAL
- en: Can I validate my YOLOv8 model using a custom dataset?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes, you can validate your YOLOv8 model using a custom dataset. Specify the
    `data` argument with the path to your dataset configuration file. This file should
    include paths to the validation data, class names, and other relevant details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Example using CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For more customizable options during validation, see the Example Validation
    with Arguments section.
  prefs: []
  type: TYPE_NORMAL
- en: How do I save validation results to a JSON file in YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To save the validation results to a JSON file, you can set the `save_json` argument
    to `True` when running validation. This can be done in both the Python API and
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Example using CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This functionality is particularly useful for further analysis or integration
    with other tools. Check the Arguments for YOLO Model Validation for more details.
  prefs: []
  type: TYPE_NORMAL
