- en: Calculus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/calculus/index.html](https://docs.sympy.org/latest/modules/calculus/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Calculus-related methods.
  prefs: []
  type: TYPE_NORMAL
- en: This module implements a method to find Euler-Lagrange Equations for given Lagrangian.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the Euler-Lagrange equations [[R31]](#r31) for a given Lagrangian.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**L** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The Lagrangian that should be a function of the functions listed in the second
    argument and their derivatives.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For example, in the case of two functions \(f(x,y)\), \(g(x,y)\) and two independent
    variables \(x\), \(y\) the Lagrangian has the form:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: \[L\left(f(x,y),g(x,y),\frac{\partial f(x,y)}{\partial x}, \frac{\partial f(x,y)}{\partial
    y}, \frac{\partial g(x,y)}{\partial x}, \frac{\partial g(x,y)}{\partial y},x,y\right)\]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In many cases it is not necessary to provide anything, except the Lagrangian,
    it will be auto-detected (and an error raised if this cannot be done).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**funcs** : Function or an iterable of Functions'
  prefs: []
  type: TYPE_NORMAL
- en: The functions that the Lagrangian depends on. The Euler equations are differential
    equations for each of these functions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vars** : Symbol or an iterable of Symbols'
  prefs: []
  type: TYPE_NORMAL
- en: The Symbols that are the independent variables of the functions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eqns** : list of Eq'
  prefs: []
  type: TYPE_NORMAL
- en: The list of differential equations, one for each function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R31] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Euler%E2%80%93Lagrange_equation](https://en.wikipedia.org/wiki/Euler%E2%80%93Lagrange_equation)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Singularities'
  prefs: []
  type: TYPE_NORMAL
- en: This module implements algorithms for finding singularities for a function and
    identifying types of functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The differential calculus methods in this module include methods to identify
    the following function types in the given `Interval`: - Increasing - Strictly
    Increasing - Decreasing - Strictly Decreasing - Monotonic'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Return whether the function is decreasing in the given interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing (defaults to set of all real numbers).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `expression` is decreasing (either strictly decreasing or constant)
    in the given `interval`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Return whether the function is increasing in the given interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing (defaults to set of all real numbers).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `expression` is increasing (either strictly increasing or constant)
    in the given `interval`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Return whether the function is monotonic in the given interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing (defaults to set of all real numbers).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `expression` is monotonic in the given `interval`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: Monotonicity check has not been implemented for the queried function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return whether the function is strictly decreasing in the given interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing (defaults to set of all real numbers).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `expression` is strictly decreasing in the given `interval`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return whether the function is strictly increasing in the given interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing (defaults to set of all real numbers).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `expression` is strictly increasing in the given `interval`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Helper function for functions checking function monotonicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function which is being checked
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**predicate** : function'
  prefs: []
  type: TYPE_NORMAL
- en: The property being tested for. The function takes in an integer and returns
    a boolean. The integer input is the derivative and the boolean result should be
    true if the property is being held, and false otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**interval** : Set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The range of values in which we are testing, defaults to all reals.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol present in expression which gets varied over the given range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**It returns a boolean indicating whether the interval in which**'
  prefs: []
  type: TYPE_NORMAL
- en: '**the function’s derivative satisfies given predicate is a superset**'
  prefs: []
  type: TYPE_NORMAL
- en: '**of the given interval.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs: []
  type: TYPE_NORMAL
- en: True if `predicate` is true for all the derivatives when `symbol` is varied
    in `range`, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Find singularities of a given function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The target function in which singularities need to be found.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The symbol over the values of which the singularity in expression in being searched
    for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Set
  prefs: []
  type: TYPE_NORMAL
- en: A set of values for `symbol` for which `expression` has a singularity. An `EmptySet`
    is returned if `expression` has no singularities for any given value of `Symbol`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: Methods for determining the singularities of this function have not been developed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function does not find non-isolated singularities nor does it find branch
    points of the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently supported functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: univariate continuous (real or complex) functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R32](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathematical_singularity](https://en.wikipedia.org/wiki/Mathematical_singularity)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Finite difference weights'
  prefs: []
  type: TYPE_NORMAL
- en: This module implements an algorithm for efficient generation of finite difference
    weights for ordinary differentials of functions for derivatives from 0 (interpolation)
    up to arbitrary order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core algorithm is provided in the finite difference weight generating function
    (`finite_diff_weights`), and two convenience functions are provided for:'
  prefs: []
  type: TYPE_NORMAL
- en: estimating a derivative (or interpolate) directly from a series of points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is also provided (`apply_finite_diff`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: differentiating by using finite difference approximations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (`differentiate_finite`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the finite difference approximation of the derivative of requested
    order at `x0` from points provided in `x_list` and `y_list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order: int**'
  prefs: []
  type: TYPE_NORMAL
- en: order of derivative to approximate. 0 corresponds to interpolation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x_list: sequence**'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of (unique) values for the independent variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**y_list: sequence**'
  prefs: []
  type: TYPE_NORMAL
- en: The function value at corresponding values for the independent variable in x_list.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x0: Number or Symbol**'
  prefs: []
  type: TYPE_NORMAL
- en: At what value of the independent variable the derivative should be evaluated.
    Defaults to 0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: sympy.core.add.Add or sympy.core.numbers.Number
  prefs: []
  type: TYPE_NORMAL
- en: The finite difference expression approximating the requested derivative order
    at `x0`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'we see that the example above only contain rounding errors. apply_finite_diff
    can also be used on more abstract objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Order = 0 corresponds to interpolation. Only supply so many points you think
    makes sense to around x0 when extracting the derivative (the function need to
    be well behaved within that region). Also beware of Runge’s phenomenon.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.calculus.finite_diff.finite_diff_weights`](#sympy.calculus.finite_diff.finite_diff_weights
    "sympy.calculus.finite_diff.finite_diff_weights")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortran 90 implementation with Python interface for numerics: [finitediff](https://github.com/bjodah/finitediff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Differentiate expr and replace Derivatives with finite differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : expression'
  prefs: []
  type: TYPE_NORMAL
- en: '***symbols** : differentiate with respect to symbols'
  prefs: []
  type: TYPE_NORMAL
- en: '**points: sequence, coefficient or undefined function, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: see `Derivative.as_finite_difference`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x0: number or Symbol, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: see `Derivative.as_finite_difference`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**wrt: Symbol, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: see `Derivative.as_finite_difference`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`differentiate_finite` works on any expression, including the expressions with
    embedded derivatives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To make finite difference with non-constant discretization step use undefined
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the finite difference weights for an arbitrarily spaced one-dimensional
    grid (`x_list`) for derivatives at `x0` of order 0, 1, …, up to `order` using
    a recursive formula. Order of accuracy is at least `len(x_list) - order`, if `x_list`
    is defined correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order: int**'
  prefs: []
  type: TYPE_NORMAL
- en: Up to what derivative order weights should be calculated. 0 corresponds to interpolation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x_list: sequence**'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of (unique) values for the independent variable. It is useful (but
    not necessary) to order `x_list` from nearest to furthest from `x0`; see examples
    below.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x0: Number or Symbol**'
  prefs: []
  type: TYPE_NORMAL
- en: Root or value of the independent variable for which the finite difference weights
    should be generated. Default is `S.One`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: A list of sublists, each corresponding to coefficients for increasing derivative
    order, and each containing lists of coefficients for increasing subsets of x_list.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Each sublist contains the most accurate formula at the end. Note, that in the
    above example `res[1][1]` is the same as `res[1][2]`. Since res[1][2] has an order
    of accuracy of `len(x_list[:3]) - order = 3 - 1 = 2`, the same is true for `res[1][1]`!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Let us compare this to a differently defined `x_list`. Pay attention to `foo[i][k]`
    corresponding to the gridpoint defined by `x_list[k]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that, unless you plan on using approximations based on subsets of `x_list`,
    the order of gridpoints does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The capability to generate weights at arbitrary points can be used e.g. to
    minimize Runge’s phenomenon by using Chebyshev nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If weights for a finite difference approximation of 3rd order derivative is
    wanted, weights for 0th, 1st and 2nd order are calculated “for free”, so are formulae
    using subsets of `x_list`. This is something one can take advantage of to save
    computational cost. Be aware that one should define `x_list` from nearest to furthest
    from `x0`. If not, subsets of `x_list` will yield poorer approximations, which
    might not grand an order of accuracy of `len(x_list) - order`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.calculus.finite_diff.apply_finite_diff`](#sympy.calculus.finite_diff.apply_finite_diff
    "sympy.calculus.finite_diff.apply_finite_diff")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R33](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Generation of Finite Difference Formulas on Arbitrarily Spaced Grids, Bengt
    Fornberg; Mathematics of computation; 51; 184; (1988); 699-706; doi:10.1090/S0025-5718-1988-0935077-0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns the domain on which the function expression f is continuous.
  prefs: []
  type: TYPE_NORMAL
- en: This function is limited by the ability to determine the various singularities
    and discontinuities of the given function. The result is either given as a union
    of intervals or constructed using other set operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for which the intervals are to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: The domain over which the continuity of the symbol has to be checked.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: Union of all intervals where the function is continuous.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the method to determine continuity of such a function has not yet been developed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Finds the range of a function in a given domain. This method is limited by the
    ability to determine the singularities and determine limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for which the range of function is to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: The domain under which the range of the function has to be found.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: Union of all ranges for all intervals under domain where function is continuous.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: If any of the intervals, in the given domain, for which function is continuous
    are not finite or real, OR if the critical points of the function on the domain
    cannot be found.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Determines the convexity of the function passed in the argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**syms** : Tuple of [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variables with respect to which the convexity is to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval"),
    optional'
  prefs: []
  type: TYPE_NORMAL
- en: The domain over which the convexity of the function has to be checked. If unspecified,
    S.Reals will be the default domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: The method returns `True` if the function is convex otherwise it returns `False`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: The check for the convexity of multivariate functions is not implemented yet.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: To determine concavity of a function pass \(-f\) as the concerned function.
    To determine logarithmic convexity of a function pass \(\log(f)\) as concerned
    function. To determine logarithmic concavity of a function pass \(-\log(f)\) as
    concerned function.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, convexity check of multivariate functions is not handled.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R34](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Convex_function](https://en.wikipedia.org/wiki/Convex_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R35](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.ifp.illinois.edu/~angelia/L3_convfunc.pdf](http://www.ifp.illinois.edu/~angelia/L3_convfunc.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R36](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logarithmically_convex_function](https://en.wikipedia.org/wiki/Logarithmically_convex_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R37](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logarithmically_concave_function](https://en.wikipedia.org/wiki/Logarithmically_concave_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R38](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Concave_function](https://en.wikipedia.org/wiki/Concave_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Returns the least common integral multiple of a list of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The numbers can be rational or irrational or a mixture of both. \(None\) is
    returned for incommensurable numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numbers** : list'
  prefs: []
  type: TYPE_NORMAL
- en: Numbers (rational and/or irrational) for which lcim is to be found.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: number
  prefs: []
  type: TYPE_NORMAL
- en: lcim if it exists, otherwise `None` for incommensurable numbers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns the maximum value of a function in the given domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for maximum value needs to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: The domain over which the maximum have to be checked. If unspecified, then the
    global maximum is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: number
  prefs: []
  type: TYPE_NORMAL
- en: Maximum value of the function in given domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the minimum value of a function in the given domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for minimum value needs to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: The domain over which the minimum have to be checked. If unspecified, then the
    global minimum is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: number
  prefs: []
  type: TYPE_NORMAL
- en: Minimum value of the function in the given domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Finds the domain of the functions in `finset_intersection` in which the `finite_set`
    is not-empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**finset_intersection** : Intersection of FiniteSet'
  prefs: []
  type: TYPE_NORMAL
- en: The unevaluated intersection of FiniteSet containing real-valued functions with
    Union of Sets
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**syms** : Tuple of symbols'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol for which domain is to be found
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithms to find the non-emptiness of the given FiniteSet are not yet
    implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: The input is not valid.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**RuntimeError**'
  prefs: []
  type: TYPE_NORMAL
- en: It is a bug, please report it to the github issue tracker ([https://github.com/sympy/sympy/issues](https://github.com/sympy/sympy/issues)).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Tests the given function for periodicity in the given symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for which the period is to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The flag to verify whether the value being returned is a period or not.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: period
  prefs: []
  type: TYPE_NORMAL
- en: The period of the function is returned. `None` is returned when the function
    is aperiodic or has a complex period. The value of \(0\) is returned as the period
    of a constant function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: The value of the period computed cannot be verified.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Currently, we do not support functions with a complex period. The period of
    functions having complex periodic values such as `exp`, `sinh` is evaluated to
    `None`.
  prefs: []
  type: TYPE_NORMAL
- en: The value returned might not be the “fundamental” period of the given function
    i.e. it may not be the smallest periodic value of the function.
  prefs: []
  type: TYPE_NORMAL
- en: The verification of the period through the `check` flag is not reliable due
    to internal simplification of the given expression. Hence, it is set to `False`
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Returns the stationary points of a function (where derivative of the function
    is 0) in the given domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: The concerned function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**symbol** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")'
  prefs: []
  type: TYPE_NORMAL
- en: The variable for which the stationary points are to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Interval`](../sets.html#sympy.sets.sets.Interval "sympy.sets.sets.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: The domain over which the stationary points have to be checked. If unspecified,
    `S.Reals` will be the default domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Set
  prefs: []
  type: TYPE_NORMAL
- en: A set of stationary points for the function. If there are no stationary point,
    an [`EmptySet`](../sets.html#sympy.sets.sets.EmptySet "sympy.sets.sets.EmptySet")
    is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
