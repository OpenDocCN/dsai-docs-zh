- en: scipy.optimize.dual_annealing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.dual_annealing.html#scipy.optimize.dual_annealing](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.dual_annealing.html#scipy.optimize.dual_annealing)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the global minimum of a function using Dual Annealing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable'
  prefs: []
  type: TYPE_NORMAL
- en: The objective function to be minimized. Must be in the form `f(x, *args)`, where
    `x` is the argument in the form of a 1-D array and `args` is a tuple of any additional
    fixed parameters needed to completely specify the function.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds**sequence or [`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds
    "scipy.optimize.Bounds")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bounds for variables. There are two ways to specify the bounds:'
  prefs: []
  type: TYPE_NORMAL
- en: Instance of [`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sequence of `(min, max)` pairs for each element in *x*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any additional fixed parameters needed to completely specify the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of global search iterations. Default value is 1000.
  prefs: []
  type: TYPE_NORMAL
- en: '**minimizer_kwargs**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra keyword arguments to be passed to the local minimizer ([`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")). Some important options could be: `method` for the
    minimizer method to use and `args` for objective function additional arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_temp**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The initial temperature, use higher values to facilitates a wider search of
    the energy landscape, allowing dual_annealing to escape local minima that it is
    trapped in. Default value is 5230\. Range is (0.01, 5.e4].
  prefs: []
  type: TYPE_NORMAL
- en: '**restart_temp_ratio**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: During the annealing process, temperature is decreasing, when it reaches `initial_temp
    * restart_temp_ratio`, the reannealing process is triggered. Default value of
    the ratio is 2e-5\. Range is (0, 1).
  prefs: []
  type: TYPE_NORMAL
- en: '**visit**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for visiting distribution. Default value is 2.62\. Higher values give
    the visiting distribution a heavier tail, this makes the algorithm jump to a more
    distant region. The value range is (1, 3].
  prefs: []
  type: TYPE_NORMAL
- en: '**accept**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for acceptance distribution. It is used to control the probability
    of acceptance. The lower the acceptance parameter, the smaller the probability
    of acceptance. Default value is -5.0 with a range (-1e4, -5].
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfun**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Soft limit for the number of objective function calls. If the algorithm is in
    the middle of a local search, this number will be exceeded, the algorithm will
    stop just after the local search is done. Default value is 1e7.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used. Specify *seed* for repeatable minimizations.
    The random numbers generated with this seed only affect the visiting distribution
    function and new coordinates generation.
  prefs: []
  type: TYPE_NORMAL
- en: '**no_local_search**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *no_local_search* is set to True, a traditional Generalized Simulated Annealing
    will be performed with no local search strategy applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A callback function with signature `callback(x, f, context)`, which will be
    called for all minima found. `x` and `f` are the coordinates and function value
    of the latest minimum found, and `context` has value in [0, 1, 2], with the following
    meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '0: minimum detected in the annealing process.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '1: detection occurred in the local search process.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '2: detection done in the dual annealing process.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the callback implementation returns True, the algorithm will stop.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray, shape(n,), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates of a single N-D starting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**OptimizeResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'The optimization result represented as a [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") object. Important attributes are: `x` the solution
    array, `fun` the value of the function at the solution, and `message` which describes
    the cause of the termination. See [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") for a description of other attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function implements the Dual Annealing optimization. This stochastic approach
    derived from [[3]](#rbaa258a99356-3) combines the generalization of CSA (Classical
    Simulated Annealing) and FSA (Fast Simulated Annealing) [[1]](#rbaa258a99356-1)
    [[2]](#rbaa258a99356-2) coupled to a strategy for applying a local search on accepted
    locations [[4]](#rbaa258a99356-4). An alternative implementation of this same
    algorithm is described in [[5]](#rbaa258a99356-5) and benchmarks are presented
    in [[6]](#rbaa258a99356-6). This approach introduces an advanced method to refine
    the solution found by the generalized annealing process. This algorithm uses a
    distorted Cauchy-Lorentz visiting distribution, with its shape controlled by the
    parameter \(q_{v}\)
  prefs: []
  type: TYPE_NORMAL
- en: \[g_{q_{v}}(\Delta x(t)) \propto \frac{ \ \left[T_{q_{v}}(t) \right]^{-\frac{D}{3-q_{v}}}}{
    \ \left[{1+(q_{v}-1)\frac{(\Delta x(t))^{2}} { \ \left[T_{q_{v}}(t)\right]^{\frac{2}{3-q_{v}}}}}\right]^{
    \ \frac{1}{q_{v}-1}+\frac{D-1}{2}}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where \(t\) is the artificial time. This visiting distribution is used to generate
    a trial jump distance \(\Delta x(t)\) of variable \(x(t)\) under artificial temperature
    \(T_{q_{v}}(t)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the starting point, after calling the visiting distribution function,
    the acceptance probability is computed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: \[p_{q_{a}} = \min{\{1,\left[1-(1-q_{a}) \beta \Delta E \right]^{ \ \frac{1}{1-q_{a}}}\}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where \(q_{a}\) is a acceptance parameter. For \(q_{a}<1\), zero acceptance
    probability is assigned to the cases where
  prefs: []
  type: TYPE_NORMAL
- en: \[[1-(1-q_{a}) \beta \Delta E] < 0\]
  prefs: []
  type: TYPE_NORMAL
- en: The artificial temperature \(T_{q_{v}}(t)\) is decreased according to
  prefs: []
  type: TYPE_NORMAL
- en: \[T_{q_{v}}(t) = T_{q_{v}}(1) \frac{2^{q_{v}-1}-1}{\left( \ 1 + t\right)^{q_{v}-1}-1}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where \(q_{v}\) is the visiting parameter.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Tsallis C. Possible generalization of Boltzmann-Gibbs statistics. Journal of
    Statistical Physics, 52, 479-487 (1998).
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Tsallis C, Stariolo DA. Generalized Simulated Annealing. Physica A, 233, 395-406
    (1996).
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Xiang Y, Sun DY, Fan W, Gong XG. Generalized Simulated Annealing Algorithm and
    Its Application to the Thomson Model. Physics Letters A, 233, 216-220 (1997).
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Xiang Y, Gong XG. Efficiency of Generalized Simulated Annealing. Physical Review
    E, 62, 4473 (2000).
  prefs: []
  type: TYPE_NORMAL
- en: '[[5](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xiang Y, Gubian S, Suomela B, Hoeng J. Generalized Simulated Annealing for
    Efficient Global Optimization: the GenSA Package for R. The R Journal, Volume
    5/1 (2013).'
  prefs: []
  type: TYPE_NORMAL
- en: '[[6](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: Mullen, K. Continuous Global Optimization in R. Journal of Statistical Software,
    60(6), 1 - 45, (2014). [DOI:10.18637/jss.v060.i06](https://doi.org/10.18637/jss.v060.i06)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following example is a 10-D problem, with many local minima. The function
    involved is called Rastrigin ([https://en.wikipedia.org/wiki/Rastrigin_function](https://en.wikipedia.org/wiki/Rastrigin_function))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
