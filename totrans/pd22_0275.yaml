- en: pandas.DataFrame.rolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rolling.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rolling.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provide rolling window calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**window**int, timedelta, str, offset, or BaseIndexer subclass'
  prefs: []
  type: TYPE_NORMAL
- en: Size of the moving window.
  prefs: []
  type: TYPE_NORMAL
- en: If an integer, the fixed number of observations used for each window.
  prefs: []
  type: TYPE_NORMAL
- en: If a timedelta, str, or offset, the time period of each window. Each window
    will be a variable sized based on the observations included in the time-period.
    This is only valid for datetimelike indexes. To learn more about the offsets &
    frequency strings, please see [this link](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
  prefs: []
  type: TYPE_NORMAL
- en: If a BaseIndexer subclass, the window boundaries based on the defined `get_window_bounds`
    method. Additional rolling keyword arguments, namely `min_periods`, `center`,
    `closed` and `step` will be passed to `get_window_bounds`.
  prefs: []
  type: TYPE_NORMAL
- en: '**min_periods**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum number of observations in window required to have a value; otherwise,
    result is `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: For a window that is specified by an offset, `min_periods` will default to 1.
  prefs: []
  type: TYPE_NORMAL
- en: For a window that is specified by an integer, `min_periods` will default to
    the size of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**center**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If False, set the window labels as the right edge of the window index.
  prefs: []
  type: TYPE_NORMAL
- en: If True, set the window labels as the center of the window index.
  prefs: []
  type: TYPE_NORMAL
- en: '**win_type**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If `None`, all points are evenly weighted.
  prefs: []
  type: TYPE_NORMAL
- en: If a string, it must be a valid [scipy.signal window function](https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows).
  prefs: []
  type: TYPE_NORMAL
- en: Certain Scipy window types require additional parameters to be passed in the
    aggregation function. The additional parameters must match the keywords specified
    in the Scipy window type method signature.
  prefs: []
  type: TYPE_NORMAL
- en: '**on**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: For a DataFrame, a column label or Index level on which to calculate the rolling
    window, rather than the DataFrame’s index.
  prefs: []
  type: TYPE_NORMAL
- en: Provided integer column is ignored and excluded from result since an integer
    index is not used to calculate the rolling window.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or str, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: If `0` or `'index'`, roll across the rows.
  prefs: []
  type: TYPE_NORMAL
- en: If `1` or `'columns'`, roll across the columns.
  prefs: []
  type: TYPE_NORMAL
- en: For Series this parameter is unused and defaults to 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: The axis keyword is deprecated. For `axis=1`,
    transpose the DataFrame first instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**closed**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If `'right'`, the first point in the window is excluded from calculations.
  prefs: []
  type: TYPE_NORMAL
- en: If `'left'`, the last point in the window is excluded from calculations.
  prefs: []
  type: TYPE_NORMAL
- en: If `'both'`, the no points in the window are excluded from calculations.
  prefs: []
  type: TYPE_NORMAL
- en: If `'neither'`, the first and last points in the window are excluded from calculations.
  prefs: []
  type: TYPE_NORMAL
- en: Default `None` (`'right'`).
  prefs: []
  type: TYPE_NORMAL
- en: '**step**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate the window at every `step` result, equivalent to slicing as `[::step]`.
    `window` must be an integer. Using a step argument other than None or 1 will produce
    a result with a different shape than the input.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str {‘single’, ‘table’}, default ‘single’'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the rolling operation per single column or row (`'single'`) or over
    the entire object (`'table'`).
  prefs: []
  type: TYPE_NORMAL
- en: This argument is only implemented when specifying `engine='numba'` in the method
    call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas.api.typing.Window or pandas.api.typing.Rolling
  prefs: []
  type: TYPE_NORMAL
- en: An instance of Window is returned if `win_type` is passed. Otherwise, an instance
    of Rolling is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`expanding`](pandas.DataFrame.expanding.html#pandas.DataFrame.expanding "pandas.DataFrame.expanding")'
  prefs: []
  type: TYPE_NORMAL
- en: Provides expanding transformations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ewm`](pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")'
  prefs: []
  type: TYPE_NORMAL
- en: Provides exponential weighted functions.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [Windowing Operations](../../user_guide/window.html#window-generic) for
    further usage details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**window**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with a window length of 2 observations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Rolling sum with a window span of 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Rolling sum with forward looking windows with 2 observations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**min_periods**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with a window length of 2 observations, but only needs a minimum
    of 1 observation to calculate a value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**center**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with the result assigned to the center of the window index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**step**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with a window length of 2 observations, minimum of 1 observation
    to calculate a value, and a step of 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**win_type**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with a window length of 2, using the Scipy `'gaussian'` window type.
    `std` is required in the aggregation function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**on**'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling sum with a window length of 2 days.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
