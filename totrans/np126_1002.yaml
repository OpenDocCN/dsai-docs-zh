- en: numpy.average
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.average.html](https://numpy.org/doc/1.26/reference/generated/numpy.average.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the weighted average along the specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing data to be averaged. If *a* is not an array, a conversion is
    attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which to average *a*. The default, axis=None, will average
    over all of the elements of the input array. If axis is negative it counts from
    the last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If axis is a tuple of ints, averaging is performed on all of the axes specified
    in the tuple instead of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**weights**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'An array of weights associated with the values in *a*. Each value in *a* contributes
    to the average according to its associated weight. The weights array can either
    be 1-D (in which case its length must be the size of *a* along the given axis)
    or of the same shape as *a*. If *weights=None*, then all data in *a* are assumed
    to have a weight equal to one. The 1-D calculation is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The only constraint on *weights* is that *sum(weights)* must not be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**returned**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default is *False*. If *True*, the tuple ([`average`](#numpy.average "numpy.average"),
    *sum_of_weights*) is returned, otherwise only the average is returned. If *weights=None*,
    *sum_of_weights* is equivalent to the number of elements over which the average
    is taken.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*. *Note:* *keepdims* will not work with instances of [`numpy.matrix`](numpy.matrix.html#numpy.matrix
    "numpy.matrix") or other classes whose methods do not support *keepdims*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.23.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**retval, [sum_of_weights]**array_type or double'
  prefs: []
  type: TYPE_NORMAL
- en: Return the average along the specified axis. When *returned* is *True*, return
    a tuple with the average as the first element and the sum of the weights as the
    second element. *sum_of_weights* is of the same type as *retval*. The result dtype
    follows a genereal pattern. If *weights* is None, the result dtype will be that
    of *a* , or `float64` if *a* is integral. Otherwise, if *weights* is not None
    and *a* is non- integral, the result type will be the type of lowest precision
    capable of representing values of both *a* and *weights*. If *a* happens to be
    integral, the previous rules still applies but the result dtype will at least
    be `float64`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ZeroDivisionError
  prefs: []
  type: TYPE_NORMAL
- en: When all weights along axis are zero. See [`numpy.ma.average`](numpy.ma.average.html#numpy.ma.average
    "numpy.ma.average") for a version robust to this type of error.
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: When the length of 1D *weights* is not the same as the shape of *a* along axis.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mean`](numpy.mean.html#numpy.mean "numpy.mean")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.average`](numpy.ma.average.html#numpy.ma.average "numpy.ma.average")'
  prefs: []
  type: TYPE_NORMAL
- en: average for masked arrays – useful if your data contains “missing” values
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.result_type`](numpy.result_type.html#numpy.result_type "numpy.result_type")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the type that results from applying the numpy type promotion rules to
    the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With `keepdims=True`, the following result has shape (3, 1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
