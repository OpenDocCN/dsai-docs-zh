["```py\n>>> from sympy import *\n>>> init_printing(use_unicode=True) \n```", "```py\n>>> Matrix([[1, -1], [3, 4], [0, 2]])\n⎡1  -1⎤\n⎢     ⎥\n⎢3  4 ⎥\n⎢     ⎥\n⎣0  2 ⎦ \n```", "```py\n>>> Matrix([1, 2, 3])\n⎡1⎤\n⎢ ⎥\n⎢2⎥\n⎢ ⎥\n⎣3⎦ \n```", "```py\n>>> M = Matrix([[1, 2, 3], [3, 2, 1]])\n>>> N = Matrix([0, 1, 1])\n>>> M*N\n⎡5⎤\n⎢ ⎥\n⎣3⎦ \n```", "```py\n>>> from sympy import shape\n>>> M = Matrix([[1, 2, 3], [-2, 0, 4]])\n>>> M\n⎡1   2  3⎤\n⎢        ⎥\n⎣-2  0  4⎦\n>>> shape(M)\n(2, 3) \n```", "```py\n>>> M.row(0)\n[1  2  3]\n>>> M.col(-1)\n⎡3⎤\n⎢ ⎥\n⎣4⎦ \n```", "```py\n>>> M.col_del(0)\n>>> M\n⎡2  3⎤\n⎢    ⎥\n⎣0  4⎦\n>>> M.row_del(1)\n>>> M\n[2  3] \n```", "```py\n>>> M\n[2  3]\n>>> M = M.row_insert(1, Matrix([[0, 4]]))\n>>> M\n⎡2  3⎤\n⎢    ⎥\n⎣0  4⎦\n>>> M = M.col_insert(0, Matrix([1, -2]))\n>>> M\n⎡1   2  3⎤\n⎢        ⎥\n⎣-2  0  4⎦ \n```", "```py\n>>> M = Matrix([[1, 3], [-2, 3]])\n>>> N = Matrix([[0, 3], [0, 7]])\n>>> M + N\n⎡1   6 ⎤\n⎢      ⎥\n⎣-2  10⎦\n>>> M*N\n⎡0  24⎤\n⎢     ⎥\n⎣0  15⎦\n>>> 3*M\n⎡3   9⎤\n⎢     ⎥\n⎣-6  9⎦\n>>> M**2\n⎡-5  12⎤\n⎢      ⎥\n⎣-8  3 ⎦\n>>> M**-1\n⎡1/3  -1/3⎤\n⎢         ⎥\n⎣2/9  1/9 ⎦\n>>> N**-1\nTraceback (most recent call last):\n...\nNonInvertibleMatrixError: Matrix det == 0; not invertible. \n```", "```py\n>>> M = Matrix([[1, 2, 3], [4, 5, 6]])\n>>> M\n⎡1  2  3⎤\n⎢       ⎥\n⎣4  5  6⎦\n>>> M.T\n⎡1  4⎤\n⎢    ⎥\n⎢2  5⎥\n⎢    ⎥\n⎣3  6⎦ \n```", "```py\n>>> eye(3)\n⎡1  0  0⎤\n⎢       ⎥\n⎢0  1  0⎥\n⎢       ⎥\n⎣0  0  1⎦\n>>> eye(4)\n⎡1  0  0  0⎤\n⎢          ⎥\n⎢0  1  0  0⎥\n⎢          ⎥\n⎢0  0  1  0⎥\n⎢          ⎥\n⎣0  0  0  1⎦ \n```", "```py\n>>> zeros(2, 3)\n⎡0  0  0⎤\n⎢       ⎥\n⎣0  0  0⎦ \n```", "```py\n>>> ones(3, 2)\n⎡1  1⎤\n⎢    ⎥\n⎢1  1⎥\n⎢    ⎥\n⎣1  1⎦ \n```", "```py\n>>> diag(1, 2, 3)\n⎡1  0  0⎤\n⎢       ⎥\n⎢0  2  0⎥\n⎢       ⎥\n⎣0  0  3⎦\n>>> diag(-1, ones(2, 2), Matrix([5, 7, 5]))\n⎡-1  0  0  0⎤\n⎢           ⎥\n⎢0   1  1  0⎥\n⎢           ⎥\n⎢0   1  1  0⎥\n⎢           ⎥\n⎢0   0  0  5⎥\n⎢           ⎥\n⎢0   0  0  7⎥\n⎢           ⎥\n⎣0   0  0  5⎦ \n```", "```py\n>>> M = Matrix([[1, 0, 1], [2, -1, 3], [4, 3, 2]])\n>>> M\n⎡1  0   1⎤\n⎢        ⎥\n⎢2  -1  3⎥\n⎢        ⎥\n⎣4  3   2⎦\n>>> M.det()\n-1 \n```", "```py\n>>> M = Matrix([[1, 0, 1, 3], [2, 3, 4, 7], [-1, -3, -3, -4]])\n>>> M\n⎡1   0   1   3 ⎤\n⎢              ⎥\n⎢2   3   4   7 ⎥\n⎢              ⎥\n⎣-1  -3  -3  -4⎦\n>>> M.rref()\n⎛⎡1  0   1    3 ⎤        ⎞\n⎜⎢              ⎥        ⎟\n⎜⎢0  1  2/3  1/3⎥, (0, 1)⎟\n⎜⎢              ⎥        ⎟\n⎝⎣0  0   0    0 ⎦        ⎠ \n```", "```py\n>>> M = Matrix([[1, 2, 3, 0, 0], [4, 10, 0, 0, 1]])\n>>> M\n⎡1  2   3  0  0⎤\n⎢              ⎥\n⎣4  10  0  0  1⎦\n>>> M.nullspace()\n⎡⎡-15⎤  ⎡0⎤  ⎡ 1  ⎤⎤\n⎢⎢   ⎥  ⎢ ⎥  ⎢    ⎥⎥\n⎢⎢ 6 ⎥  ⎢0⎥  ⎢-1/2⎥⎥\n⎢⎢   ⎥  ⎢ ⎥  ⎢    ⎥⎥\n⎢⎢ 1 ⎥, ⎢0⎥, ⎢ 0  ⎥⎥\n⎢⎢   ⎥  ⎢ ⎥  ⎢    ⎥⎥\n⎢⎢ 0 ⎥  ⎢1⎥  ⎢ 0  ⎥⎥\n⎢⎢   ⎥  ⎢ ⎥  ⎢    ⎥⎥\n⎣⎣ 0 ⎦  ⎣0⎦  ⎣ 1  ⎦⎦ \n```", "```py\n>>> M = Matrix([[1, 1, 2], [2 ,1 , 3], [3 , 1, 4]])\n>>> M\n⎡1  1  2⎤\n⎢       ⎥\n⎢2  1  3⎥\n⎢       ⎥\n⎣3  1  4⎦\n>>> M.columnspace()\n⎡⎡1⎤  ⎡1⎤⎤\n⎢⎢ ⎥  ⎢ ⎥⎥\n⎢⎢2⎥, ⎢1⎥⎥\n⎢⎢ ⎥  ⎢ ⎥⎥\n⎣⎣3⎦  ⎣1⎦⎦ \n```", "```py\n>>> M = Matrix([[3, -2,  4, -2], [5,  3, -3, -2], [5, -2,  2, -2], [5, -2, -3,  3]])\n>>> M\n⎡3  -2  4   -2⎤\n⎢             ⎥\n⎢5  3   -3  -2⎥\n⎢             ⎥\n⎢5  -2  2   -2⎥\n⎢             ⎥\n⎣5  -2  -3  3 ⎦\n>>> M.eigenvals()\n{-2: 1, 3: 1, 5: 2} \n```", "```py\n>>> M.eigenvects()\n⎡⎛       ⎡⎡0⎤⎤⎞  ⎛      ⎡⎡1⎤⎤⎞  ⎛      ⎡⎡1⎤  ⎡0 ⎤⎤⎞⎤\n⎢⎜       ⎢⎢ ⎥⎥⎟  ⎜      ⎢⎢ ⎥⎥⎟  ⎜      ⎢⎢ ⎥  ⎢  ⎥⎥⎟⎥\n⎢⎜       ⎢⎢1⎥⎥⎟  ⎜      ⎢⎢1⎥⎥⎟  ⎜      ⎢⎢1⎥  ⎢-1⎥⎥⎟⎥\n⎢⎜-2, 1, ⎢⎢ ⎥⎥⎟, ⎜3, 1, ⎢⎢ ⎥⎥⎟, ⎜5, 2, ⎢⎢ ⎥, ⎢  ⎥⎥⎟⎥\n⎢⎜       ⎢⎢1⎥⎥⎟  ⎜      ⎢⎢1⎥⎥⎟  ⎜      ⎢⎢1⎥  ⎢0 ⎥⎥⎟⎥\n⎢⎜       ⎢⎢ ⎥⎥⎟  ⎜      ⎢⎢ ⎥⎥⎟  ⎜      ⎢⎢ ⎥  ⎢  ⎥⎥⎟⎥\n⎣⎝       ⎣⎣1⎦⎦⎠  ⎝      ⎣⎣1⎦⎦⎠  ⎝      ⎣⎣0⎦  ⎣1 ⎦⎦⎠⎦ \n```", "```py\n>>> P, D = M.diagonalize()\n>>> P\n⎡0  1  1  0 ⎤\n⎢           ⎥\n⎢1  1  1  -1⎥\n⎢           ⎥\n⎢1  1  1  0 ⎥\n⎢           ⎥\n⎣1  1  0  1 ⎦\n>>> D\n⎡-2  0  0  0⎤\n⎢           ⎥\n⎢0   3  0  0⎥\n⎢           ⎥\n⎢0   0  5  0⎥\n⎢           ⎥\n⎣0   0  0  5⎦\n>>> P*D*P**-1\n⎡3  -2  4   -2⎤\n⎢             ⎥\n⎢5  3   -3  -2⎥\n⎢             ⎥\n⎢5  -2  2   -2⎥\n⎢             ⎥\n⎣5  -2  -3  3 ⎦\n>>> P*D*P**-1 == M\nTrue \n```", "```py\n>>> lamda = symbols('lamda')\n>>> p = M.charpoly(lamda)\n>>> factor(p.as_expr())\n 2\n(λ - 5) ⋅(λ - 3)⋅(λ + 2) \n```", "```py\n>>> from sympy import *\n>>> q = Symbol(\"q\", positive = True)\n>>> m = Matrix([\n... [-2*cosh(q/3),      exp(-q),            1],\n... [      exp(q), -2*cosh(q/3),            1],\n... [           1,            1, -2*cosh(q/3)]])\n>>> m.nullspace() \n[] \n```", "```py\n>>> import warnings\n>>>\n>>> def my_iszero(x):\n...     result = x.is_zero\n...\n...     # Warnings if evaluated into None\n...     if result is None:\n...         warnings.warn(\"Zero testing of {} evaluated into None\".format(x))\n...     return result\n...\n>>> m.nullspace(iszerofunc=my_iszero) \n__main__:9: UserWarning: Zero testing of 4*cosh(q/3)**2 - 1 evaluated into None\n__main__:9: UserWarning: Zero testing of (-exp(q) - 2*cosh(q/3))*(-2*cosh(q/3) - exp(-q)) - (4*cosh(q/3)**2 - 1)**2 evaluated into None\n__main__:9: UserWarning: Zero testing of 2*exp(q)*cosh(q/3) - 16*cosh(q/3)**4 + 12*cosh(q/3)**2 + 2*exp(-q)*cosh(q/3) evaluated into None\n__main__:9: UserWarning: Zero testing of -(4*cosh(q/3)**2 - 1)*exp(-q) - 2*cosh(q/3) - exp(-q) evaluated into None\n[] \n```", "```py\n>>> def my_iszero(x):\n...     result = x.rewrite(exp).simplify().is_zero\n...\n...     # Warnings if evaluated into None\n...     if result is None:\n...         warnings.warn(\"Zero testing of {} evaluated into None\".format(x))\n...     return result\n...\n>>> m.nullspace(iszerofunc=my_iszero) \n__main__:9: UserWarning: Zero testing of -2*cosh(q/3) - exp(-q) evaluated into None\n⎡⎡  ⎛   q         ⎛q⎞⎞  -q         2⎛q⎞    ⎤⎤\n⎢⎢- ⎜- ℯ  - 2⋅cosh⎜─⎟⎟⋅ℯ   + 4⋅cosh ⎜─⎟ - 1⎥⎥\n⎢⎢  ⎝             ⎝3⎠⎠              ⎝3⎠    ⎥⎥\n⎢⎢─────────────────────────────────────────⎥⎥\n⎢⎢          ⎛      2⎛q⎞    ⎞     ⎛q⎞       ⎥⎥\n⎢⎢        2⋅⎜4⋅cosh ⎜─⎟ - 1⎟⋅cosh⎜─⎟       ⎥⎥\n⎢⎢          ⎝       ⎝3⎠    ⎠     ⎝3⎠       ⎥⎥\n⎢⎢                                         ⎥⎥\n⎢⎢           ⎛   q         ⎛q⎞⎞            ⎥⎥\n⎢⎢          -⎜- ℯ  - 2⋅cosh⎜─⎟⎟            ⎥⎥\n⎢⎢           ⎝             ⎝3⎠⎠            ⎥⎥\n⎢⎢          ────────────────────           ⎥⎥\n⎢⎢                   2⎛q⎞                  ⎥⎥\n⎢⎢             4⋅cosh ⎜─⎟ - 1              ⎥⎥\n⎢⎢                    ⎝3⎠                  ⎥⎥\n⎢⎢                                         ⎥⎥\n⎣⎣                    1                    ⎦⎦ \n```"]