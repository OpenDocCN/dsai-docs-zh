- en: scipy.ndimage.value_indices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.value_indices.html#scipy.ndimage.value_indices](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.value_indices.html#scipy.ndimage.value_indices)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find indices of each distinct value in given array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arr**ndarray of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing integer values.
  prefs: []
  type: TYPE_NORMAL
- en: '**ignore_value**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This value will be ignored in searching the *arr* array. If not given, all values
    found will be included in output. Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: A Python dictionary of array indices for each distinct value. The dictionary
    is keyed by the distinct values, the entries are array index tuples covering all
    occurrences of the value within the array.
  prefs: []
  type: TYPE_NORMAL
- en: This dictionary can occupy significant memory, usually several times the size
    of the input array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`label`](scipy.ndimage.label.html#scipy.ndimage.label "scipy.ndimage.label"),
    [`maximum`](scipy.ndimage.maximum.html#scipy.ndimage.maximum "scipy.ndimage.maximum"),
    [`median`](scipy.ndimage.median.html#scipy.ndimage.median "scipy.ndimage.median"),
    [`minimum_position`](scipy.ndimage.minimum_position.html#scipy.ndimage.minimum_position
    "scipy.ndimage.minimum_position"), [`extrema`](scipy.ndimage.extrema.html#scipy.ndimage.extrema
    "scipy.ndimage.extrema"), [`sum`](https://docs.python.org/3/library/functions.html#sum
    "(in Python v3.12)"), [`mean`](scipy.ndimage.mean.html#scipy.ndimage.mean "scipy.ndimage.mean"),
    [`variance`](scipy.ndimage.variance.html#scipy.ndimage.variance "scipy.ndimage.variance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`standard_deviation`](scipy.ndimage.standard_deviation.html#scipy.ndimage.standard_deviation
    "scipy.ndimage.standard_deviation"), [`numpy.where`](https://numpy.org/devdocs/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v2.0.dev0)"), [`numpy.unique`](https://numpy.org/devdocs/reference/generated/numpy.unique.html#numpy.unique
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For a small array with few distinct values, one might use *numpy.unique()* to
    find all possible values, and `(arr == val)` to locate each value within that
    array. However, for large arrays, with many distinct values, this can become extremely
    inefficient, as locating each value would require a new search through the entire
    array. Using this function, there is essentially one search, with the indices
    saved for all distinct values.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful when matching a categorical image (e.g. a segmentation or classification)
    to an associated image of other data, allowing any per-class statistic(s) to then
    be calculated. Provides a more flexible alternative to functions like `scipy.ndimage.mean()`
    and `scipy.ndimage.variance()`.
  prefs: []
  type: TYPE_NORMAL
- en: Some other closely related functionality, with different strengths and weaknesses,
    can also be found in `scipy.stats.binned_statistic()` and the [scikit-image](https://scikit-image.org/)
    function `skimage.measure.regionprops()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note for IDL users: this provides functionality equivalent to IDL’s REVERSE_INDICES
    option (as per the IDL documentation for the [HISTOGRAM](https://www.l3harrisgeospatial.com/docs/histogram.html)
    function).'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The dictionary *val_indices* will have an entry for each distinct value in the
    input array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The entry for each value is an index tuple, locating the elements with that
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This can be used to index into the original array, or any other array with the
    same shape.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the zeros were to be ignored, then the resulting dictionary would no longer
    have an entry for zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
