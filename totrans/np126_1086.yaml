- en: Contributing to NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/index.html](https://numpy.org/doc/1.26/dev/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Not a coder? Not a problem! NumPy is multi-faceted, and we can use a lot of
    help. These are all activities we’d like to get help with (they’re all important,
    so we list them in alphabetical order):'
  prefs: []
  type: TYPE_NORMAL
- en: Code maintenance and development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community coordination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing educational content & narrative documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundraising
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website design and development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing technical documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of this document discusses working on the NumPy code base and documentation.
    We’re in the process of updating our descriptions of other activities and roles.
    If you are interested in these other activities, please contact us! You can do
    this via the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion),
    or on [GitHub](https://github.com/numpy/numpy) (open an issue or comment on a
    relevant issue). These are our preferred communication channels (open source is
    open by nature!), however if you prefer to discuss in private first, please reach
    out to our community coordinators at [numpy-team@googlegroups.com](/cdn-cgi/l/email-protection#5b7474352e362b22762f3e3a367d78686c607d786e69607d786f63603c34343c373e3c29342e2b287d786f6d60383436)
    or [numpy-team.slack.com](https://numpy-team.slack.com) (send an email to [numpy-team@googlegroups.com](/cdn-cgi/l/email-protection#c4ebebaab1a9b4bde9b0a1a5a9e2e7f7f3ffe2e7f1f6ffe2e7f0fcffa3ababa3a8a1a3b6abb1b4b7e2e7f0f2ffa7aba9)
    for an invite the first time).
  prefs: []
  type: TYPE_NORMAL
- en: Development process - summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s the short summary, complete TOC links are below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are a first-time contributor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/numpy/numpy](https://github.com/numpy/numpy) and click
    the “fork” button to create your own copy of the project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the project to your local computer:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the upstream repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, `git remote -v` will show two remote repositories named:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upstream`, which refers to the `numpy` repository'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`origin`, which refers to your personal fork'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pull the latest changes from upstream, including tags:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize numpy’s submodules:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Develop your contribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a branch for the feature you want to work on. Since the branch name
    will appear in the merge message, use a sensible name such as ‘linspace-speedups’:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Commit locally as you progress (`git add` and `git commit`) Use a [properly
    formatted](development_workflow.html#writing-the-commit-message) commit message,
    write tests that fail before your change and pass afterward, run all the [tests
    locally](development_environment.html#development-environment). Be sure to document
    any changed behavior in docstrings, keeping to the NumPy docstring [standard](howto-docs.html#howto-document).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To submit your contribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push your changes back to your fork on GitHub:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Enter your GitHub username and password (repeat contributors or advanced users
    can remove this step by connecting to GitHub with [SSH](gitwash/development_setup.html#set-up-and-configure-a-github-account)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to GitHub. The new branch will show up with a green Pull Request button.
    Make sure the title and message are clear, concise, and self- explanatory. Then
    click the button to submit it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If your commit introduces a new feature or changes functionality, post on the
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) to explain
    your changes. For bug fixes, documentation updates, etc., this is generally not
    necessary, though if you do not get any reaction, do feel free to ask for review.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Review process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reviewers (the other developers and interested community members) will write
    inline and/or general comments on your Pull Request (PR) to help you improve its
    implementation, documentation and style. Every single developer working on the
    project has their code reviewed, and we’ve come to see it as friendly conversation
    from which we all learn and the overall code quality benefits. Therefore, please
    don’t let the review discourage you from contributing: its only aim is to improve
    the quality of project, not to criticize (we are, after all, very grateful for
    the time you’re donating!). See our [Reviewer Guidelines](reviewer_guidelines.html#reviewer-guidelines)
    for more information.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To update your PR, make your changes on your local repository, commit, **run
    tests, and only if they succeed** push to your fork. As soon as those changes
    are pushed up (to the same branch as before) the PR will update automatically.
    If you have no idea how to fix the test failures, you may push your changes anyway
    and ask for help in a PR comment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various continuous integration (CI) services are triggered after each PR update
    to build the code, run unit tests, measure code coverage and check coding style
    of your branch. The CI tests must pass before your PR can be merged. If CI fails,
    you can find out why by clicking on the “failed” icon (red cross) and inspecting
    the build and test log. To avoid overuse and waste of this resource, [test your
    work](development_environment.html#recommended-development-setup) locally before
    committing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A PR must be **approved** by at least one core team member before merging. Approval
    means the core team member has carefully reviewed the changes, and the PR is ready
    for merging.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Document changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beyond changes to a functions docstring and possible description in the general
    documentation, if your change introduces any user-facing modifications they may
    need to be mentioned in the release notes. To add your change to the release notes,
    you need to create a short file with a summary and place it in `doc/release/upcoming_changes`.
    The file `doc/release/upcoming_changes/README.rst` details the format and filename
    conventions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your change introduces a deprecation, make sure to discuss this first on
    GitHub or the mailing list first. If agreement on the deprecation is reached,
    follow [NEP 23 deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)") to add the deprecation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cross referencing issues
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the PR relates to any issues, you can add the text `xref gh-xxxx` where `xxxx`
    is the number of the issue to github comments. Likewise, if the PR solves an issue,
    replace the `xref` with `closes`, `fixes` or any of the other flavors [github
    accepts](https://help.github.com/en/articles/closing-issues-using-keywords).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the source code, be sure to preface any issue or PR reference with `gh-xxxx`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For a more detailed discussion, read on and follow the links at the bottom of
    this page.
  prefs: []
  type: TYPE_NORMAL
- en: Divergence between `upstream/main` and your feature branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If GitHub indicates that the branch of your Pull Request can no longer be merged
    automatically, you have to incorporate changes that have been made since you started
    into your branch. Our recommended way to do this is to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs: []
  type: TYPE_NORMAL
- en: '### Guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: All code should have tests (see [test coverage](#test-coverage) below for more
    details).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All code should be [documented](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No changes are ever committed without review and approval by a core team member.
    Please ask politely on the PR or on the [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)
    if you get no response to your pull request within a week.  ### Stylistic Guidelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up your editor to follow [PEP 8](https://www.python.org/dev/peps/pep-0008/)
    (remove trailing white space, no tabs, etc.). Check code with pyflakes / flake8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use NumPy data types instead of strings (`np.uint8` instead of `"uint8"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following import conventions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For C code, see [NEP 45](https://numpy.org/neps/nep-0045-c_style_guide.html#nep45
    "(in NumPy Enhancement Proposals)").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pull requests (PRs) that modify code should either have new tests, or modify
    existing tests to fail before the PR and pass afterwards. You should [run the
    tests](development_environment.html#development-environment) before pushing a
    PR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running NumPy’s test suite locally requires some additional packages, such
    as `pytest` and `hypothesis`. The additional testing dependencies are listed in
    `test_requirements.txt` in the top-level directory, and can conveniently be installed
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tests for a module should ideally cover all code in that module, i.e., statement
    coverage should be at 100%.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the test coverage, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a report in `html` format at `build/coverage`, which can be
    viewed with your browser, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '### Building docs'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the HTML documentation, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also run `make` from the `doc` directory. `make help` lists all targets.
  prefs: []
  type: TYPE_NORMAL
- en: To get the appropriate dependencies and other requirements, see [Building the
    NumPy API and reference docs](howto_build_docs.html#howto-build-docs).
  prefs: []
  type: TYPE_NORMAL
- en: Fixing Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '“citation not found: R###” There is probably an underscore after a reference
    in the first line of a docstring (e.g. [1]_). Use this method to find the source
    file: $ cd doc/build; grep -rin R####'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Duplicate citation R###, other instance in…”” There is probably a [2] without
    a [1] in one of the docstrings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development process - details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rest of the story
  prefs: []
  type: TYPE_NORMAL
- en: '[Git Basics](gitwash/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Install git](gitwash/git_intro.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Get the local copy of the code](gitwash/following_latest.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating the code](gitwash/following_latest.html#updating-the-code)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting up git for NumPy development](gitwash/development_setup.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Git configuration](gitwash/configure_git.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Two and three dots in difference specs](gitwash/dot2_dot3.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Additional Git resources](gitwash/git_resources.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting up and using your development environment](development_environment.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recommended development setup](development_environment.html#recommended-development-setup)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using virtual environments](development_environment.html#using-virtual-environments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing builds](development_environment.html#testing-builds)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other build options](development_environment.html#other-build-options)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests](development_environment.html#running-tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Linting](development_environment.html#running-linting)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rebuilding & cleaning the workspace](development_environment.html#rebuilding-cleaning-the-workspace)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Debugging](development_environment.html#debugging)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding the code & getting started](development_environment.html#understanding-the-code-getting-started)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building the NumPy API and reference docs](howto_build_docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Development environments](howto_build_docs.html#development-environments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prerequisites](howto_build_docs.html#prerequisites)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Instructions](howto_build_docs.html#instructions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Development workflow](development_workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Basic workflow](development_workflow.html#basic-workflow)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Additional things you might want to do](development_workflow.html#additional-things-you-might-want-to-do)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Advanced debugging tools](development_advanced_debugging.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Finding C errors with additional tooling](development_advanced_debugging.html#finding-c-errors-with-additional-tooling)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewer guidelines](reviewer_guidelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Who can be a reviewer?](reviewer_guidelines.html#who-can-be-a-reviewer)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Communication Guidelines](reviewer_guidelines.html#communication-guidelines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewer Checklist](reviewer_guidelines.html#reviewer-checklist)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Standard replies for reviewing](reviewer_guidelines.html#standard-replies-for-reviewing)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy benchmarks](../benchmarking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Usage](../benchmarking.html#usage)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Benchmarking versions](../benchmarking.html#benchmarking-versions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing benchmarks](../benchmarking.html#writing-benchmarks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy C style guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For downstream package authors](depending_on_numpy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding NumPy’s versioning and API/ABI stability](depending_on_numpy.html#understanding-numpy-s-versioning-and-api-abi-stability)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing against the NumPy main branch or pre-releases](depending_on_numpy.html#testing-against-the-numpy-main-branch-or-pre-releases)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adding a dependency on NumPy](depending_on_numpy.html#adding-a-dependency-on-numpy)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Releasing a version](releasing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to prepare a release](releasing.html#how-to-prepare-a-release)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step-by-step directions](releasing.html#step-by-step-directions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Branch walkthrough](releasing.html#branch-walkthrough)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy governance](governance/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy project governance and decision-making](governance/governance.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to contribute to the NumPy documentation](howto-docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation team meetings](howto-docs.html#documentation-team-meetings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What’s needed](howto-docs.html#what-s-needed)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing fixes](howto-docs.html#contributing-fixes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing new pages](howto-docs.html#contributing-new-pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing indirectly](howto-docs.html#contributing-indirectly)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation style](howto-docs.html#documentation-style)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation reading](howto-docs.html#documentation-reading)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy-specific workflow is in [numpy-development-workflow](development_workflow.html#development-workflow).
  prefs: []
  type: TYPE_NORMAL
- en: Development process - summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s the short summary, complete TOC links are below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are a first-time contributor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/numpy/numpy](https://github.com/numpy/numpy) and click
    the “fork” button to create your own copy of the project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clone the project to your local computer:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the upstream repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, `git remote -v` will show two remote repositories named:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upstream`, which refers to the `numpy` repository'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`origin`, which refers to your personal fork'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pull the latest changes from upstream, including tags:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize numpy’s submodules:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Develop your contribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a branch for the feature you want to work on. Since the branch name
    will appear in the merge message, use a sensible name such as ‘linspace-speedups’:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Commit locally as you progress (`git add` and `git commit`) Use a [properly
    formatted](development_workflow.html#writing-the-commit-message) commit message,
    write tests that fail before your change and pass afterward, run all the [tests
    locally](development_environment.html#development-environment). Be sure to document
    any changed behavior in docstrings, keeping to the NumPy docstring [standard](howto-docs.html#howto-document).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To submit your contribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push your changes back to your fork on GitHub:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Enter your GitHub username and password (repeat contributors or advanced users
    can remove this step by connecting to GitHub with [SSH](gitwash/development_setup.html#set-up-and-configure-a-github-account)).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to GitHub. The new branch will show up with a green Pull Request button.
    Make sure the title and message are clear, concise, and self- explanatory. Then
    click the button to submit it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If your commit introduces a new feature or changes functionality, post on the
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) to explain
    your changes. For bug fixes, documentation updates, etc., this is generally not
    necessary, though if you do not get any reaction, do feel free to ask for review.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Review process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reviewers (the other developers and interested community members) will write
    inline and/or general comments on your Pull Request (PR) to help you improve its
    implementation, documentation and style. Every single developer working on the
    project has their code reviewed, and we’ve come to see it as friendly conversation
    from which we all learn and the overall code quality benefits. Therefore, please
    don’t let the review discourage you from contributing: its only aim is to improve
    the quality of project, not to criticize (we are, after all, very grateful for
    the time you’re donating!). See our [Reviewer Guidelines](reviewer_guidelines.html#reviewer-guidelines)
    for more information.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To update your PR, make your changes on your local repository, commit, **run
    tests, and only if they succeed** push to your fork. As soon as those changes
    are pushed up (to the same branch as before) the PR will update automatically.
    If you have no idea how to fix the test failures, you may push your changes anyway
    and ask for help in a PR comment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various continuous integration (CI) services are triggered after each PR update
    to build the code, run unit tests, measure code coverage and check coding style
    of your branch. The CI tests must pass before your PR can be merged. If CI fails,
    you can find out why by clicking on the “failed” icon (red cross) and inspecting
    the build and test log. To avoid overuse and waste of this resource, [test your
    work](development_environment.html#recommended-development-setup) locally before
    committing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A PR must be **approved** by at least one core team member before merging. Approval
    means the core team member has carefully reviewed the changes, and the PR is ready
    for merging.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Document changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beyond changes to a functions docstring and possible description in the general
    documentation, if your change introduces any user-facing modifications they may
    need to be mentioned in the release notes. To add your change to the release notes,
    you need to create a short file with a summary and place it in `doc/release/upcoming_changes`.
    The file `doc/release/upcoming_changes/README.rst` details the format and filename
    conventions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your change introduces a deprecation, make sure to discuss this first on
    GitHub or the mailing list first. If agreement on the deprecation is reached,
    follow [NEP 23 deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)") to add the deprecation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cross referencing issues
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the PR relates to any issues, you can add the text `xref gh-xxxx` where `xxxx`
    is the number of the issue to github comments. Likewise, if the PR solves an issue,
    replace the `xref` with `closes`, `fixes` or any of the other flavors [github
    accepts](https://help.github.com/en/articles/closing-issues-using-keywords).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the source code, be sure to preface any issue or PR reference with `gh-xxxx`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For a more detailed discussion, read on and follow the links at the bottom of
    this page.
  prefs: []
  type: TYPE_NORMAL
- en: Divergence between `upstream/main` and your feature branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If GitHub indicates that the branch of your Pull Request can no longer be merged
    automatically, you have to incorporate changes that have been made since you started
    into your branch. Our recommended way to do this is to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs: []
  type: TYPE_NORMAL
- en: '### Guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: All code should have tests (see [test coverage](#test-coverage) below for more
    details).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All code should be [documented](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No changes are ever committed without review and approval by a core team member.
    Please ask politely on the PR or on the [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)
    if you get no response to your pull request within a week.  ### Stylistic Guidelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up your editor to follow [PEP 8](https://www.python.org/dev/peps/pep-0008/)
    (remove trailing white space, no tabs, etc.). Check code with pyflakes / flake8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use NumPy data types instead of strings (`np.uint8` instead of `"uint8"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following import conventions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For C code, see [NEP 45](https://numpy.org/neps/nep-0045-c_style_guide.html#nep45
    "(in NumPy Enhancement Proposals)").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pull requests (PRs) that modify code should either have new tests, or modify
    existing tests to fail before the PR and pass afterwards. You should [run the
    tests](development_environment.html#development-environment) before pushing a
    PR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running NumPy’s test suite locally requires some additional packages, such
    as `pytest` and `hypothesis`. The additional testing dependencies are listed in
    `test_requirements.txt` in the top-level directory, and can conveniently be installed
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tests for a module should ideally cover all code in that module, i.e., statement
    coverage should be at 100%.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the test coverage, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a report in `html` format at `build/coverage`, which can be
    viewed with your browser, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '### Building docs'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the HTML documentation, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can also run `make` from the `doc` directory. `make help` lists all targets.
  prefs: []
  type: TYPE_NORMAL
- en: To get the appropriate dependencies and other requirements, see [Building the
    NumPy API and reference docs](howto_build_docs.html#howto-build-docs).
  prefs: []
  type: TYPE_NORMAL
- en: Fixing Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '“citation not found: R###” There is probably an underscore after a reference
    in the first line of a docstring (e.g. [1]_). Use this method to find the source
    file: $ cd doc/build; grep -rin R####'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Duplicate citation R###, other instance in…”” There is probably a [2] without
    a [1] in one of the docstrings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Divergence between `upstream/main` and your feature branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If GitHub indicates that the branch of your Pull Request can no longer be merged
    automatically, you have to incorporate changes that have been made since you started
    into your branch. Our recommended way to do this is to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs: []
  type: TYPE_NORMAL
- en: '### Guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: All code should have tests (see [test coverage](#test-coverage) below for more
    details).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All code should be [documented](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No changes are ever committed without review and approval by a core team member.
    Please ask politely on the PR or on the [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)
    if you get no response to your pull request within a week.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Stylistic Guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: Set up your editor to follow [PEP 8](https://www.python.org/dev/peps/pep-0008/)
    (remove trailing white space, no tabs, etc.). Check code with pyflakes / flake8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use NumPy data types instead of strings (`np.uint8` instead of `"uint8"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the following import conventions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For C code, see [NEP 45](https://numpy.org/neps/nep-0045-c_style_guide.html#nep45
    "(in NumPy Enhancement Proposals)").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pull requests (PRs) that modify code should either have new tests, or modify
    existing tests to fail before the PR and pass afterwards. You should [run the
    tests](development_environment.html#development-environment) before pushing a
    PR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running NumPy’s test suite locally requires some additional packages, such
    as `pytest` and `hypothesis`. The additional testing dependencies are listed in
    `test_requirements.txt` in the top-level directory, and can conveniently be installed
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tests for a module should ideally cover all code in that module, i.e., statement
    coverage should be at 100%.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the test coverage, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a report in `html` format at `build/coverage`, which can be
    viewed with your browser, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '### Building docs'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the HTML documentation, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can also run `make` from the `doc` directory. `make help` lists all targets.
  prefs: []
  type: TYPE_NORMAL
- en: To get the appropriate dependencies and other requirements, see [Building the
    NumPy API and reference docs](howto_build_docs.html#howto-build-docs).
  prefs: []
  type: TYPE_NORMAL
- en: Fixing Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '“citation not found: R###” There is probably an underscore after a reference
    in the first line of a docstring (e.g. [1]_). Use this method to find the source
    file: $ cd doc/build; grep -rin R####'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Duplicate citation R###, other instance in…”” There is probably a [2] without
    a [1] in one of the docstrings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '“citation not found: R###” There is probably an underscore after a reference
    in the first line of a docstring (e.g. [1]_). Use this method to find the source
    file: $ cd doc/build; grep -rin R####'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Duplicate citation R###, other instance in…”” There is probably a [2] without
    a [1] in one of the docstrings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development process - details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rest of the story
  prefs: []
  type: TYPE_NORMAL
- en: '[Git Basics](gitwash/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Install git](gitwash/git_intro.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Get the local copy of the code](gitwash/following_latest.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating the code](gitwash/following_latest.html#updating-the-code)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting up git for NumPy development](gitwash/development_setup.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Git configuration](gitwash/configure_git.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Two and three dots in difference specs](gitwash/dot2_dot3.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Additional Git resources](gitwash/git_resources.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting up and using your development environment](development_environment.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Recommended development setup](development_environment.html#recommended-development-setup)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using virtual environments](development_environment.html#using-virtual-environments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing builds](development_environment.html#testing-builds)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other build options](development_environment.html#other-build-options)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests](development_environment.html#running-tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Linting](development_environment.html#running-linting)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rebuilding & cleaning the workspace](development_environment.html#rebuilding-cleaning-the-workspace)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Debugging](development_environment.html#debugging)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding the code & getting started](development_environment.html#understanding-the-code-getting-started)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building the NumPy API and reference docs](howto_build_docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Development environments](howto_build_docs.html#development-environments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prerequisites](howto_build_docs.html#prerequisites)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Instructions](howto_build_docs.html#instructions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Development workflow](development_workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Basic workflow](development_workflow.html#basic-workflow)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Additional things you might want to do](development_workflow.html#additional-things-you-might-want-to-do)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Advanced debugging tools](development_advanced_debugging.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Finding C errors with additional tooling](development_advanced_debugging.html#finding-c-errors-with-additional-tooling)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewer guidelines](reviewer_guidelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Who can be a reviewer?](reviewer_guidelines.html#who-can-be-a-reviewer)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Communication Guidelines](reviewer_guidelines.html#communication-guidelines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewer Checklist](reviewer_guidelines.html#reviewer-checklist)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Standard replies for reviewing](reviewer_guidelines.html#standard-replies-for-reviewing)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy benchmarks](../benchmarking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Usage](../benchmarking.html#usage)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Benchmarking versions](../benchmarking.html#benchmarking-versions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing benchmarks](../benchmarking.html#writing-benchmarks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy C style guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For downstream package authors](depending_on_numpy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding NumPy’s versioning and API/ABI stability](depending_on_numpy.html#understanding-numpy-s-versioning-and-api-abi-stability)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing against the NumPy main branch or pre-releases](depending_on_numpy.html#testing-against-the-numpy-main-branch-or-pre-releases)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adding a dependency on NumPy](depending_on_numpy.html#adding-a-dependency-on-numpy)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Releasing a version](releasing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to prepare a release](releasing.html#how-to-prepare-a-release)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step-by-step directions](releasing.html#step-by-step-directions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Branch walkthrough](releasing.html#branch-walkthrough)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy governance](governance/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy project governance and decision-making](governance/governance.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to contribute to the NumPy documentation](howto-docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation team meetings](howto-docs.html#documentation-team-meetings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What’s needed](howto-docs.html#what-s-needed)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing fixes](howto-docs.html#contributing-fixes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing new pages](howto-docs.html#contributing-new-pages)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing indirectly](howto-docs.html#contributing-indirectly)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation style](howto-docs.html#documentation-style)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation reading](howto-docs.html#documentation-reading)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy-specific workflow is in [numpy-development-workflow](development_workflow.html#development-workflow).
  prefs: []
  type: TYPE_NORMAL
