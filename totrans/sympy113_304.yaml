- en: Dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项
- en: Original text：[https://docs.sympy.org/latest/contributing/dependencies.html](https://docs.sympy.org/latest/contributing/dependencies.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/contributing/dependencies.html](https://docs.sympy.org/latest/contributing/dependencies.html)
- en: This page lists the hard and optional dependencies of SymPy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面列出了SymPy的强依赖项和可选依赖项。
- en: There are several packages that, when installed, can enable certain additional
    SymPy functionality. Most users and contributors will not need to install any
    of the packages mentioned below (except for the hard dependencies), unless they
    intend to use or contribute to the parts of SymPy that can use those packages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装了几个软件包时，可以启用某些额外的SymPy功能。大多数用户和贡献者不需要安装下面提到的任何软件包（除了强依赖项），除非他们打算使用或贡献到SymPy的那些可以使用这些软件包的部分。
- en: Every dependency listed below can be installed with conda via [conda-forge](https://conda-forge.org/),
    and most can also be installed with `pip`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个下面列出的依赖项都可以通过[conda-forge](https://conda-forge.org/)安装，大多数也可以用`pip`安装。
- en: This page does not list packages which themselves depend on SymPy, only those
    packages that SymPy depends on. An incomplete list of packages that depend on
    SymPy can be found on the [main SymPy webpage](https://www.sympy.org/en/index.html),
    and a more complete list can be found on [GitHub](https://github.com/sympy/sympy/network/dependents?dependent_type=PACKAGE)
    or [libraries.io](https://libraries.io/pypi/sympy/dependents).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面未列出依赖于SymPy本身的软件包，只列出了SymPy所依赖的软件包。依赖于SymPy的软件包的不完整列表可以在[主SymPy网页](https://www.sympy.org/en/index.html)上找到，更完整的列表可以在[GitHub](https://github.com/sympy/sympy/network/dependents?dependent_type=PACKAGE)或[libraries.io](https://libraries.io/pypi/sympy/dependents)上找到。
- en: '## Hard Dependencies'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '## 强依赖项'
- en: 'SymPy only has one hard dependency, which is required for it to work: mpmath.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy只有一个必需的强依赖项，即mpmath，这是其工作所必需的。
- en: '**mpmath**: [mpmath](https://mpmath.org/) is a pure Python package for arbitrary
    precision arithmetic. It is used under the hood whenever SymPy calculates the
    floating-point value of a function, e.g., when using [evalf](../modules/core.html#sympy.core.evalf.EvalfMixin.evalf
    "sympy.core.evalf.EvalfMixin.evalf").'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mpmath**：[mpmath](https://mpmath.org/)是一个纯Python的任意精度算术包。在SymPy计算函数的浮点值时，如使用[evalf](../modules/core.html#sympy.core.evalf.EvalfMixin.evalf
    "sympy.core.evalf.EvalfMixin.evalf")时，它就是底层使用的工具。'
- en: SymPy cannot function without mpmath and will fail to import if it is not installed.
    If you get an error like
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未安装mpmath，SymPy将无法运行，并且在尝试导入时会失败。如果出现类似以下错误：
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: this means that you did not install mpmath correctly. [This page](../install.html#mpmath-install)
    explains how to install it.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着您未正确安装mpmath。[此页面](../install.html#mpmath-install)说明了如何安装它。
- en: 'Most methods of installing SymPy, such as the ones outlined in the [installation](../install.html#installation)
    guide, will install mpmath automatically. You typically only need to install mpmath
    manually if you did not actually install SymPy, e.g., if you are developing directly
    on SymPy in the git repository.  ## Optional Dependencies'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '大多数安装SymPy的方法，例如在[安装](../install.html#installation)指南中概述的方法，将自动安装mpmath。通常只有在您没有实际安装SymPy时，例如在git仓库中直接开发SymPy时，才需要手动安装mpmath。
    ## 可选依赖项'
- en: These dependencies are not required to use SymPy. The vast majority of SymPy
    functions do not require them, however, a few functions such as plotting and automatic
    wrapping of code generated functions require additional dependencies to function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些依赖项不是使用SymPy所必需的。绝大多数SymPy函数不需要它们，但是一些函数，如绘图和自动生成代码的函数包装，则需要额外的依赖项才能正常运行。
- en: Additionally, as a contributor, when running the SymPy tests, some tests will
    be skipped if a dependency they require is not installed. The [GitHub Actions
    CI](https://github.com/sympy/sympy/actions) which is run on every SymPy pull request
    will automatically install these dependencies in the “optional-dependencies” build,
    but you may wish to install them locally if you are working on a part of SymPy
    that uses them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，作为贡献者，在运行SymPy测试时，如果未安装它们所需的依赖项，则某些测试将被跳过。[GitHub Actions CI](https://github.com/sympy/sympy/actions)，即在每个SymPy拉取请求上运行的操作，将在“可选依赖项”构建中自动安装这些依赖项，但如果您正在开发需要这些依赖项的SymPy部分，则可能需要在本地安装它们。
- en: Recommended Optional Dependencies
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推荐的可选依赖项
- en: These dependencies are not required for SymPy to function, but it is recommended
    that all users install them if they can, as they will improve the general performance
    of SymPy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些依赖项不是SymPy运行所必需的，但建议所有用户如果可以的话都安装它们，因为它们会提高SymPy的整体性能。
- en: '**gmpy2**: [gmpy2](https://gmpy2.readthedocs.io/en/latest/) is a Python wrapper
    for the [GMP multiple-precision library](https://gmplib.org/). It provides large
    integers that are faster than the built-in Python `int`. When gmpy2 is installed,
    it is used automatically by certain core functions that operate on integers, such
    as the [polys](../modules/polys/index.html#polys-docs). See [Reference docs for
    the Poly Domains](../modules/polys/domainsref.html#polys-domainsref) for more
    details. SymPy uses `gmpy2` automatically when it is installed. No further action
    is required to enable it.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gmpy2**：[gmpy2](https://gmpy2.readthedocs.io/en/latest/) 是 [GMP 多精度库](https://gmplib.org/)
    的 Python 封装器。它提供的整数比内置的 Python `int` 更快。当安装了 gmpy2 时，它会自动被某些操作整数的核心函数使用，例如 [polys](../modules/polys/index.html#polys-docs)。更多详细信息，请参见
    [多项式域参考文档](../modules/polys/domainsref.html#polys-domainsref)。SymPy 安装后会自动使用 `gmpy2`，无需额外操作来启用它。'
- en: The polys themselves are used by many parts of SymPy, such as the integration
    algorithms, simplification algorithms like `collect()` and `factor()`, the matrices,
    and some parts of the core. Thus, installing `gmpy2` can speed up many parts of
    SymPy. It is not a required dependency of SymPy because it makes use of a non-Python
    library (GMP), which is also non-BSD licensed. However, we recommended all users
    who are able to to install `gmpy2` to get a better SymPy experience.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多项式本身被 SymPy 的许多部分使用，例如积分算法、简化算法如 `collect()` 和 `factor()`、矩阵以及核心的一些部分。因此，安装
    `gmpy2` 可以加速 SymPy 的许多部分。虽然它不是 SymPy 的必需依赖，因为它使用了非 Python 库（GMP），而且该库也不是 BSD 许可的，但我们建议所有用户都安装
    `gmpy2`，以获得更好的 SymPy 使用体验。
- en: Interactive Use
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交互式使用
- en: SymPy is designed to be used both interactively and as a library. When used
    interactively, SymPy is able to interface with IPython and Jupyter notebooks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 设计用来既可以交互式使用，也可以作为库使用。当以交互式方式使用时，SymPy 能够与 IPython 和 Jupyter Notebook
    进行接口。
- en: '**IPython**: The [`init_session()`](../modules/interactive.html#sympy.interactive.session.init_session
    "sympy.interactive.session.init_session") function and `isympy` command will automatically
    start IPython if it is installed. In addition to the usual benefits of using [IPython](https://ipython.org/),
    this enables interactive plotting with matplotlib. Also some flags such as `auto_symbols`
    and `auto_int_to_Integer` will only work in IPython.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IPython**：如果安装了 [`init_session()`](../modules/interactive.html#sympy.interactive.session.init_session
    "sympy.interactive.session.init_session") 函数和 `isympy` 命令将自动启动 IPython。除了使用 [IPython](https://ipython.org/)
    的常规好处外，这还启用了 matplotlib 的交互式绘图。还有一些标志如 `auto_symbols` 和 `auto_int_to_Integer`
    只在 IPython 中有效。'
- en: The `IPython` package is required to run some of the tests in sympy/interactive.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IPython` 包是运行 sympy/interactive 中一些测试所必需的。'
- en: '**Jupyter Notebook and Qt Console**: SymPy expressions automatically print
    using MathJax in the [Jupyter Notebook](https://jupyter.org/) and with LaTeX [Qt
    Console](https://qtconsole.readthedocs.io/en/stable/) (if [LaTeX](#dependencies-latex)
    is installed).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jupyter Notebook 和 Qt 控制台**：在 [Jupyter Notebook](https://jupyter.org/) 中，SymPy
    表达式会使用 MathJax 自动打印，在 LaTeX 的 [Qt 控制台](https://qtconsole.readthedocs.io/en/stable/)
    中也是如此（如果安装了 [LaTeX](#dependencies-latex)）。'
- en: Printing
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印
- en: The [`preview()`](../modules/printing.html#sympy.printing.preview.preview "sympy.printing.preview.preview")
    function automatically converts SymPy expressions into images rendered with LaTeX.
    `preview()` can either save the image to a file or show it with a viewer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`preview()`](../modules/printing.html#sympy.printing.preview.preview "sympy.printing.preview.preview")
    函数会自动将 SymPy 表达式转换为用 LaTeX 渲染的图像。`preview()` 可以将图像保存到文件中，也可以用查看器显示它。'
- en: '**LaTeX**: A \(\mathrm{\LaTeX}\) distributions such as [TeXLive](https://tug.org/texlive/)
    or [MiKTeX](https://miktex.org/) is required for [`preview()`](../modules/printing.html#sympy.printing.preview.preview
    "sympy.printing.preview.preview") to function.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LaTeX**：需要 [TeXLive](https://tug.org/texlive/) 或 [MiKTeX](https://miktex.org/)
    等 \(\mathrm{\LaTeX}\) 发行版，以使 [`preview()`](../modules/printing.html#sympy.printing.preview.preview
    "sympy.printing.preview.preview") 功能正常运行。'
- en: Parsing
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析
- en: Several functions in the [`sympy.parsing`](../modules/parsing.html#module-sympy.parsing
    "sympy.parsing") submodule require external dependencies to function. Note that
    not all parsers require external modules at this time. The Python ([`parse_expr()`](../modules/parsing.html#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr")), Mathematica ([`parse_mathematica()`](../modules/parsing.html#sympy.parsing.mathematica.parse_mathematica
    "sympy.parsing.mathematica.parse_mathematica")), and Maxima ([`parse_maxima()`](../modules/parsing.html#sympy.parsing.maxima.parse_maxima
    "sympy.parsing.maxima.parse_maxima")) parsers do not require any external dependencies.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.parsing`](../modules/parsing.html#module-sympy.parsing "sympy.parsing")
    子模块中的几个函数需要外部依赖才能正常运行。请注意，目前并非所有解析器都需要外部模块。Python（[`parse_expr()`](../modules/parsing.html#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr"))、Mathematica（[`parse_mathematica()`](../modules/parsing.html#sympy.parsing.mathematica.parse_mathematica
    "sympy.parsing.mathematica.parse_mathematica")）和 Maxima（[`parse_maxima()`](../modules/parsing.html#sympy.parsing.maxima.parse_maxima
    "sympy.parsing.maxima.parse_maxima")）解析器不需要任何外部依赖。'
- en: '**antlr-python-runtime**: [ANTLR](https://www.antlr.org/) can be used for the
    [`LaTeX parser`](../modules/parsing.html#sympy.parsing.latex.parse_latex "sympy.parsing.latex.parse_latex"),
    and is used in the [Autolev](../modules/physics/mechanics/autolev_parser.html#autolev-parser)
    parsers. They both require the ANTLR Python runtime to be installed. The package
    for this is called `antlr-python-runtime` with conda and `antlr4-python3-runtime`
    with pip. Also be aware that the version of the ANTLR Python runtime must match
    the version that was used to compile the LaTeX and Autolev parsers (4.10).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**antlr-python-runtime**: [ANTLR](https://www.antlr.org/) 可用于[`LaTeX 解析器`](../modules/parsing.html#sympy.parsing.latex.parse_latex
    "sympy.parsing.latex.parse_latex")，并在 [Autolev](../modules/physics/mechanics/autolev_parser.html#autolev-parser)
    解析器中使用。它们都需要安装 ANTLR Python 运行时。此包名为 `antlr-python-runtime`（conda）和 `antlr4-python3-runtime`（pip）。还需注意，ANTLR
    Python 运行时的版本必须与编译 LaTeX 和 Autolev 解析器时使用的版本匹配（4.10）。'
- en: '**lark**: [Lark](https://lark-parser.readthedocs.io/en/stable/) can be used
    as an alternative backend for the [`LaTeX parser`](../modules/parsing.html#sympy.parsing.latex.parse_latex
    "sympy.parsing.latex.parse_latex").'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lark**: [Lark](https://lark-parser.readthedocs.io/en/stable/) 可作为[`LaTeX
    解析器`](../modules/parsing.html#sympy.parsing.latex.parse_latex "sympy.parsing.latex.parse_latex")
    的替代后端使用。'
- en: '**Clang Python Bindings**: The C parser (`sympy.parsing.c.parse_c`) requires
    the Clang Python bindings. The package for this is called `python-clang` with
    conda and `clang` with pip.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clang Python 绑定**: C 解析器（`sympy.parsing.c.parse_c`）需要 Clang Python 绑定。此包名为
    `python-clang`（conda）和 `clang`（pip）。'
- en: '**lfortran**: The Fortran parser (in `sympy.parsing.fortran`) requires [LFortran](https://lfortran.org/).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lfortran**: Fortran 解析器（位于 `sympy.parsing.fortran`）需要 [LFortran](https://lfortran.org/)。'
- en: Logic
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑
- en: The [`satisfiable()`](../modules/logic.html#sympy.logic.inference.satisfiable
    "sympy.logic.inference.satisfiable") function includes a pure Python implementation
    of the DPLL satisfiability algorithm. But it can optionally use faster C SAT solvers
    if they are installed. Note that `satisfiable()` is also used by [`ask()`](../modules/assumptions/ask.html#sympy.assumptions.ask.ask
    "sympy.assumptions.ask.ask").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`satisfiable()`](../modules/logic.html#sympy.logic.inference.satisfiable
    "sympy.logic.inference.satisfiable") 包含了 DPLL 可满足性算法的纯 Python 实现。但是如果安装了更快的 C
    SAT 求解器，它也可以选择使用。请注意，`satisfiable()` 还被[`ask()`](../modules/assumptions/ask.html#sympy.assumptions.ask.ask
    "sympy.assumptions.ask.ask") 使用。
- en: '**pycosat**: [Pycosat](https://pypi.org/project/pycosat/) is used automatically
    if it is installed. The use of pycosat can be forced by using `satisfiable(algorithm=''pycosat'')`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pycosat**: [Pycosat](https://pypi.org/project/pycosat/) 如果安装了，将会自动使用。可以通过使用
    `satisfiable(algorithm=''pycosat'')` 强制使用 pycosat。'
- en: '**pysat**: [Pysat](https://pysathq.github.io/) is a library which wraps many
    SAT solvers. It can also be used as a backend to `satisfiable()`. Presently, only
    [Minisat](http://minisat.se/MiniSat.html) is implemented, using `satisfiable(algorithm=minisat22'')`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pysat**: [Pysat](https://pysathq.github.io/) 是一个包装多个 SAT 求解器的库。它也可以作为 `satisfiable()`
    的后端使用。目前仅实现了 [Minisat](http://minisat.se/MiniSat.html)，使用 `satisfiable(algorithm=''minisat22'')`。'
- en: Plotting
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图
- en: The [`sympy.plotting.plot`](../modules/plotting.html#module-sympy.plotting.plot
    "sympy.plotting.plot") module makes heavy use of external plotting libraries to
    render plots. The primarily plotting module that is supported is Matplotlib.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.plotting.plot`](../modules/plotting.html#module-sympy.plotting.plot
    "sympy.plotting.plot") 模块大量使用外部绘图库来渲染图形。主要支持的绘图模块是 Matplotlib。'
- en: '**matplotlib**: Most plotting functionality requires the [Matplotlib](https://matplotlib.org/)
    plotting library. Without Matplotlib installed, most plotting functions will either
    fail or give rudimentary [text plots](../modules/plotting.html#sympy.plotting.textplot.textplot
    "sympy.plotting.textplot.textplot").'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**matplotlib**: 大多数绘图功能需要使用 [Matplotlib](https://matplotlib.org/) 绘图库。如果没有安装
    Matplotlib，则大多数绘图函数将失败或产生基本的 [文本绘图](../modules/plotting.html#sympy.plotting.textplot.textplot
    "sympy.plotting.textplot.textplot")。'
- en: '**pyglet**: SymPy has a submodule [`sympy.plotting.pygletplot`](../modules/plotting.html#module-sympy.plotting.pygletplot
    "sympy.plotting.pygletplot") that can be used to interface with the [pyglet](https://pyglet.org/)
    module to do 2D and 3D plotting.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pyglet**: SymPy 有一个子模块 [`sympy.plotting.pygletplot`](../modules/plotting.html#module-sympy.plotting.pygletplot
    "sympy.plotting.pygletplot") 可以用于与 [pyglet](https://pyglet.org/) 模块进行 2D 和 3D
    绘图接口。'
- en: '### lambdify'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '### lambdify'
- en: '[`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") is a function that converts SymPy expressions
    into functions that can be evaluated numerically using various libraries as backends.
    `lambdify` is the primary vehicle by which users interface between SymPy and these
    libraries. It is the standard way to convert a symbolic SymPy expression into
    an evaluable numeric function.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") 是一个函数，将 SymPy 表达式转换为可以使用各种库作为后端进行数值评估的函数。`lambdify`
    是用户在 SymPy 和这些库之间进行接口操作的主要工具。它是将符号 SymPy 表达式转换为可评估数值函数的标准方法。'
- en: In principle, `lambdify` can interface with any external library if the user
    passes in an appropriate namespace dictionary as the third argument, but by default,
    `lambdify` is aware of several popular numeric Python libraries. These libraries
    are enabled as backends in `lambdify` with built-in translations to convert SymPy
    expressions into the appropriate functions for those libraries.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，如果用户将适当的命名空间字典作为第三个参数传递给 `lambdify`，则 `lambdify` 可以与任何外部库进行接口。但默认情况下，`lambdify`
    了解几个流行的数值 Python 库。这些库作为后端在 `lambdify` 中启用，并提供内置的转换以将 SymPy 表达式转换为这些库的适当函数。
- en: '**NumPy**: By default, if it is installed, `lambdify` creates functions using
    [NumPy](https://numpy.org/) (if NumPy is not installed, `lambdify` produces functions
    using the standard library [math](https://docs.python.org/3/library/math.html)
    module, although this behavior is primarily provided for backwards compatibility).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**: 默认情况下，如果安装了 NumPy，`lambdify` 使用 [NumPy](https://numpy.org/) 创建函数（如果未安装
    NumPy，则使用标准库 [math](https://docs.python.org/3/library/math.html) 模块，尽管这主要是为了向后兼容性而提供的行为）。'
- en: '**SciPy**: If [SciPy](https://scipy.org/) is installed, `lambdify` will use
    it automatically. SciPy is needed to lambdify certain [special functions](https://docs.scipy.org/doc/scipy/reference/special.html)
    that are not included in NumPy.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy**: 如果安装了 [SciPy](https://scipy.org/)，`lambdify` 将自动使用它。SciPy 在需要 lambdify
    某些 [特殊函数](https://docs.scipy.org/doc/scipy/reference/special.html) 时是必需的。'
- en: '**CuPy**: [CuPy](https://cupy.dev/) is a library that provides a NumPy compatible
    interface for CUDA GPUs. `lambdify` can produce CuPy compatible functions using
    `lambdify(modules=''cupy'')`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CuPy**: [CuPy](https://cupy.dev/) 是为 CUDA GPU 提供 NumPy 兼容接口的库。`lambdify`
    可以使用 `lambdify(modules=''cupy'')` 生成 CuPy 兼容的函数。'
- en: '**Jax**: [JAX](https://github.com/google/jax) is a library that uses XLA to
    compile and run NumPy programs on GPUs and TPUs. `lambdify` can produce JAX compatibly
    functions using `lambdify(modules=''jax'')`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jax**: [JAX](https://github.com/google/jax) 是一个库，使用 XLA 在 GPU 和 TPU 上编译和运行
    NumPy 程序。`lambdify` 可以使用 `lambdify(modules=''jax'')` 生成 JAX 兼容的函数。'
- en: '**TensorFlow**: [TensorFlow](https://www.tensorflow.org/) is a popular machine
    learning library. `lambdify` can produce TensorFlow compatible functions using
    `lambdify(modules=''tensorflow'')`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorFlow**: [TensorFlow](https://www.tensorflow.org/) 是一款流行的机器学习库。`lambdify`
    可以使用 `lambdify(modules=''tensorflow'')` 来生成 TensorFlow 兼容的函数。'
- en: '**NumExpr**: [NumExpr](https://github.com/pydata/numexpr) is a fast numerical
    expression evaluator for NumPy. `lambdify` can produce NumExpr compatible functions
    using `lambdify(modules=''numexpr'')`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumExpr**: [NumExpr](https://github.com/pydata/numexpr) 是一个快速的用于 NumPy 的数值表达式评估器。`lambdify`
    可以使用 `lambdify(modules=''numexpr'')` 来生成 NumExpr 兼容的函数。'
- en: '**mpmath**: `lambdify` can also produce mpmath compatible functions. Note that
    mpmath is already a [required dependency](#dependencies-mpmath) of SymPy. This
    functionality is useful for converting a SymPy expression to a function for use
    with pure mpmath.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mpmath**: `lambdify` 还可以生成 mpmath 兼容的函数。请注意，mpmath 已经是 SymPy 的 [必需依赖项](#dependencies-mpmath)。这个功能对于将
    SymPy 表达式转换为用于纯 mpmath 的函数非常有用。'
- en: Code Generation
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码生成
- en: SymPy can [generate code](../modules/codegen.html#codegen-prose) for a large
    number of languages by converting SymPy expressions into valid code for those
    languages. It also has functionality for some languages to automatically compile
    and run the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 可以通过将 SymPy 表达式转换为这些语言的有效代码来 [生成代码](../modules/codegen.html#codegen-prose)。它还具有一些语言的功能，可以自动编译和运行代码。
- en: Note that the dependencies below are **not** a list of supported languages that
    SymPy can generate code for. Rather it is a list of packages that SymPy can interface
    with in some way. For most languages that SymPy supports code generation, it simply
    generates a string representing the code for that language, so no dependency on
    that language is required to use the code generation functionality. A dependency
    is typically only required for features that automatically take the generated
    code and compile it to a function that can be used within Python. Note that [`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") is a special case of this, but its dependencies
    are listed [above](#dependencies-lambdify).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下依赖项 **不** 是 SymPy 可以生成代码的支持语言列表。相反，它是 SymPy 可以以某种方式与之进行接口的包列表。对于 SymPy 支持代码生成的大多数语言，它只是生成代表该语言代码的字符串，因此不需要该语言的依赖项来使用代码生成功能。通常，只有对于将生成的代码自动编译为可以在
    Python 中使用的函数的功能才需要依赖项。[`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") 是这种情况的一个特例，但它的依赖项在 [上文](#dependencies-lambdify)
    中列出。
- en: Autowrap
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Autowrap
- en: '**NumPy**: [NumPy](https://numpy.org/) and, optionally, its subpackage [f2py](https://numpy.org/doc/stable/f2py/),
    can be used to generate Python functions using the [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") or [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify") functions.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**: [NumPy](https://numpy.org/) 和它的子包 [f2py](https://numpy.org/doc/stable/f2py/)
    （可选）可以使用 [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") 或 [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify") 函数生成 Python 函数。'
- en: '**Cython**: [Cython](https://cython.org/) can be used as a backend for [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") or [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify"). Cython is also used in some of the `sympy.codegen`
    tests to compile some examples.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cython**: [Cython](https://cython.org/) 可以作为 [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") 或 [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify") 的后端。在一些 `sympy.codegen` 的测试中，Cython 也用于编译一些示例。'
- en: '**Compilers**: [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap"), [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify"), and related functions rely on a compiler
    to compile the generated code to a function. Most standard C, C++, and Fortran
    compilers are supported, including [Clang/LLVM](https://clang.llvm.org/), [GCC](https://gcc.gnu.org/),
    and [ifort](https://en.wikipedia.org/wiki/Intel_Fortran_Compiler).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译器**: [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap")、[`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify") 及相关函数依赖于编译器将生成的代码编译为函数。支持大多数标准 C、C++ 和 Fortran
    编译器，包括 [Clang/LLVM](https://clang.llvm.org/)、[GCC](https://gcc.gnu.org/) 和 [ifort](https://en.wikipedia.org/wiki/Intel_Fortran_Compiler)。'
- en: Code Printers
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码打印器
- en: 'Most code printers generate Python strings, and therefore do not require the
    given library or language compiler as a dependency. However, a few code printers
    generate Python functions instead of strings:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码打印器生成 Python 字符串，因此不需要给定库或语言编译器作为依赖项。但是，少数代码打印器生成 Python 函数而不是字符串：
- en: '**Aesara**: The [`sympy.printing.aesaracode`](../modules/printing.html#module-sympy.printing.aesaracode
    "sympy.printing.aesaracode") module contains functions to convert SymPy expressions
    into a functions using the [Aeseara](https://aesara.readthedocs.io/en/latest)
    (previously Theano) library. The Aesara code generation functions return Aesara
    graph objects.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aesara**: [`sympy.printing.aesaracode`](../modules/printing.html#module-sympy.printing.aesaracode
    "sympy.printing.aesaracode") 模块包含将 SymPy 表达式转换为使用[Aesara](https://aesara.readthedocs.io/en/latest)（以前是
    Theano）库的函数的函数。Aesara 代码生成函数返回 Aesara 图对象。'
- en: '**llvmlite**: The `sympy.printing.llvmjitcode` module supports generating LLVM
    Jit from a SymPy expression. The functions make use of [llvmlite](https://llvmlite.readthedocs.io/en/latest/),
    a Python wrapper around [LLVM](https://llvm.org/). The `llvm_callable()` function
    generates callable functions.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**llvmlite**: `sympy.printing.llvmjitcode` 模块支持从 SymPy 表达式生成 LLVM Jit。这些函数利用了[llvmlite](https://llvmlite.readthedocs.io/en/latest/)，它是围绕[LLVM](https://llvm.org/)的
    Python 封装。`llvm_callable()` 函数生成可调用函数。'
- en: '**TensorFlow**: The `sympy.printing.tensorflow` module supports generating
    functions using the [TensorFlow](https://www.tensorflow.org/), a popular machine
    learning library. Unlike the above two examples, `tensorflow_code()` function
    **does** generate Python strings. However, `tensorflow` is imported if available
    in order to automatically detect the TensorFlow version. If it is not installed,
    the `tensorflow_code()` function assumes the latest supported version of TensorFlow.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorFlow**: `sympy.printing.tensorflow` 模块支持使用流行的机器学习库[TensorFlow](https://www.tensorflow.org/)生成函数。与上述两个示例不同，`tensorflow_code()`
    函数确实生成 Python 字符串。但是，如果可用，将导入 TensorFlow 以自动检测 TensorFlow 版本。如果未安装，`tensorflow_code()`
    函数假定使用最新支持的 TensorFlow 版本。'
- en: Testing-Only Dependencies
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 仅用于测试的依赖项
- en: '**Wurlitzer**: [Wurlitzer](https://github.com/minrk/wurlitzer) is a Python
    package that allows capturing output from C extensions. It is used by some of
    the tests in the `sympy.codegen` submodule. It is only used by the test suite.
    It is not used by any end-user functionality. If it is not installed, some tests
    will be skipped.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wurlitzer**: [Wurlitzer](https://github.com/minrk/wurlitzer) 是一个 Python 包，允许捕获
    C 扩展的输出。它由`sympy.codegen`子模块中的一些测试使用。它仅用于测试套件，不用于任何最终用户功能。如果未安装，某些测试将被跳过。'
- en: '**Cython**: [Cython](https://cython.org/) is also used in some of the `sympy.codegen`
    tests to compile some examples.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cython**: [Cython](https://cython.org/) 也用于部分`sympy.codegen`测试用例，以编译一些示例。'
- en: '**Compilers**: The various [compilers](#dependencies-compilers) mentioned above
    are used in some of the codegen and autowrap tests if they are installed.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译器**: 如果已安装，上述各种[编译器](#dependencies-compilers)将用于部分代码生成和自动包装测试。'
- en: Statistics
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计
- en: The [`sympy.stats.sample()`](../modules/stats.html#sympy.stats.sample "sympy.stats.sample")
    function uses an external library to produce samples from the given distribution.
    At least one of the following libraries is required to use the sampling functionality
    of `sympy.stats`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.stats.sample()`](../modules/stats.html#sympy.stats.sample "sympy.stats.sample")
    函数使用外部库从给定分布生成样本。使用 `sympy.stats` 的抽样功能至少需要以下一个库。'
- en: '**SciPy**: `sample(library=''scipy'')` is the default. This uses [scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy**: `sample(library=''scipy'')` 是默认选项。它使用了[scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html)。'
- en: '**NumPy**: `sample(library=''numpy'')` uses the [NumPy random module](https://numpy.org/doc/stable/reference/random/index.html).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**: `sample(library=''numpy'')` 使用[NumPy 随机模块](https://numpy.org/doc/stable/reference/random/index.html)。'
- en: '**pymc**: `sample(library=''pymc'')` uses [PyMC](https://www.pymc.io/) to do
    sampling.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pymc**: `sample(library=''pymc'')` 使用[PyMC](https://www.pymc.io/)进行抽样。'
- en: Optional SymEngine Backend
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选的 SymEngine 后端
- en: '**python-symengine**: [SymEngine](https://symengine.org/) is a fast symbolic
    manipulation library, written in C++. The SymEngine Python bindings may be used
    as an optional backend for SymPy core. To do this, first install the SymEngine
    Python bindings (with `pip install symengine` or `conda install -c conda-forge
    python-symengine`) and run SymPy with the `USE_SYMENGINE=1` environment variable.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python-symengine**: [SymEngine](https://symengine.org/) 是一个快速的符号操作库，用 C++
    编写。SymEngine Python 绑定可用作 SymPy 核心的可选后端。要使用它，请首先安装 SymEngine Python 绑定（使用 `pip
    install symengine` 或 `conda install -c conda-forge python-symengine`），然后在使用 SymPy
    时设置 `USE_SYMENGINE=1` 环境变量。'
- en: 'Presently, the SymEngine backend is only used by the [sympy.physics.mechanics](../modules/physics/mechanics/index.html#classical-mechanics)
    and [sympy.liealgebras](../modules/liealgebras/index.html#lie-algebras) modules,
    although you can also interface with SymPy’s SymEngine backend directly by importing
    things from `sympy.core.backend`:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，SymEngine 后端仅被 [sympy.physics.mechanics](../modules/physics/mechanics/index.html#classical-mechanics)
    和 [sympy.liealgebras](../modules/liealgebras/index.html#lie-algebras) 模块使用，尽管您也可以通过从
    `sympy.core.backend` 导入的方式直接与 SymPy 的 SymEngine 后端进行接口交互：
- en: '[PRE1]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: SymEngine backend support is still experimental, so certain SymPy functions
    may not work correctly when it is enabled.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SymEngine 后端支持仍处于实验阶段，因此在启用时某些 SymPy 函数可能无法正常工作。
- en: Sage
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sage
- en: '[Sage](https://www.sagemath.org/) is an open source mathematics software that
    incorporates a large number of open source mathematics libraries. SymPy is one
    of the libraries used by Sage.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sage](https://www.sagemath.org/) 是一个开源数学软件，集成了大量开源数学库。SymPy 是 Sage 使用的库之一。'
- en: Most of the code that interfaces between SymPy and Sage is in Sage itself, but
    a few `_sage_` methods in SymPy that do some very basic setting up of the Sage/SymPy
    wrappers. These methods should typically only be called by Sage itself.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分介于 SymPy 和 Sage 之间的代码都在 Sage 中，但是在 SymPy 中有一些 `_sage_` 方法，它们负责一些非常基本的设置工作，设置
    Sage/SymPy 包装器。这些方法通常只能由 Sage 自身调用。
- en: Development Dependencies
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发依赖
- en: Typical development on SymPy does not require any additional dependencies beyond
    Python and mpmath.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 的典型开发中，除了 Python 和 mpmath 外不需要任何额外的依赖。
- en: Getting the Source Code
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取源代码
- en: '**git**: The [SymPy source code](https://github.com/sympy/sympy) uses the [git](https://git-scm.com/)
    version control system. See the [installation guide](../install.html#installation-git)
    and the [contributor guide](new-contributors-guide/dev-setup.html#devsetup) for
    instructions on how to get the development version of SymPy from git.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git**: [SymPy 源代码](https://github.com/sympy/sympy) 使用 [git](https://git-scm.com/)
    版本控制系统。请参阅 [安装指南](../install.html#installation-git) 和 [贡献者指南](new-contributors-guide/dev-setup.html#devsetup)
    了解如何从 git 获取 SymPy 的开发版本。'
- en: Running the Tests
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: The base SymPy tests do not require any additional dependencies, however most
    of the above dependencies may be required for some tests to run. Tests that depend
    on optional dependencies should be skipped when they are not installed, either
    by using the `sympy.testing.pytest.skip()` function or by setting `skip = True`
    to skip the entire test file. Optional modules in tests and SymPy library code
    should be imported with `import_module()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 SymPy 测试不需要任何额外的依赖，但是某些测试可能需要上述依赖项才能运行。当未安装可选依赖时，依赖于可选依赖的测试应该被跳过，可以通过使用
    `sympy.testing.pytest.skip()` 函数或者将 `skip = True` 设置为跳过整个测试文件来实现。在测试和 SymPy 库代码中，可选模块应该使用
    `import_module()` 导入。
- en: '**pytest**: [Pytest](https://docs.pytest.org/en/latest/) is not a required
    dependency for the SymPy test suite. SymPy has its own test runner, which can
    be accessed via the `bin/test` script in the SymPy source directory or the [`test()`](../modules/testing/runtests.html#sympy.testing.runtests.test
    "sympy.testing.runtests.test") function.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pytest**: [Pytest](https://docs.pytest.org/en/latest/) 不是 SymPy 测试套件的必需依赖项。SymPy
    有其自己的测试运行器，可以通过 SymPy 源代码目录中的 `bin/test` 脚本或 [`test()`](../modules/testing/runtests.html#sympy.testing.runtests.test
    "sympy.testing.runtests.test") 函数访问。'
- en: However, if you prefer to use pytest, you can use it to run the tests instead
    of the SymPy test runner. Tests in SymPy should use the wrappers in [`sympy.testing.pytest`](../modules/testing/pytest.html#module-sympy.testing.pytest
    "sympy.testing.pytest") instead of using pytest functions directly.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，如果您更喜欢使用 pytest，可以使用它来运行测试，而不是 SymPy 的测试运行器。SymPy 中的测试应该使用 [`sympy.testing.pytest`](../modules/testing/pytest.html#module-sympy.testing.pytest
    "sympy.testing.pytest") 中的包装器，而不是直接使用 pytest 函数。
- en: '**Cloudpickle**: The [cloudpickle](https://github.com/cloudpipe/cloudpickle)
    package can be used to more effectively pickle SymPy objects than the built-in
    Python [pickle](https://docs.python.org/3/library/pickle.html). Some tests in
    `sympy.utilities.tests.test_pickling.py` depend on cloudpickle to run. It is not
    otherwise required for any SymPy function.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloudpickle**: [cloudpickle](https://github.com/cloudpipe/cloudpickle) 包可用于比内置的
    Python [pickle](https://docs.python.org/3/library/pickle.html) 更有效地对 SymPy 对象进行序列化。`sympy.utilities.tests.test_pickling.py`
    中的一些测试依赖于 cloudpickle 来运行。对于任何 SymPy 函数，它并不是必需的。'
- en: '**hypothesis**: [Hypothesis](https://github.com/HypothesisWorks/hypothesis/tree/master)
    is a required dependency for the SymPy test suit.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hypothesis**: [Hypothesis](https://github.com/HypothesisWorks/hypothesis/tree/master)
    是 SymPy 测试套件的必需依赖项。'
- en: Building the Documentation
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建文档
- en: Building the documentation requires several additional dependencies. [This page](new-contributors-guide/build-docs.html#build-the-documentation)
    outlines these dependencies and how to install them. It is only necessary to install
    these dependencies if you are contributing documentation to SymPy and want to
    check that the HTML or PDF documentation renders correctly. If you only want to
    view the documentation for the development version of SymPy, development builds
    of the docs are hosted online at [https://docs.sympy.org/dev/index.html](https://docs.sympy.org/dev/index.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文档需要几个额外的依赖项。[此页面](new-contributors-guide/build-docs.html#build-the-documentation)详细说明了这些依赖项及其安装方法。如果你只是想查看SymPy的开发版本文档，可以在线查看文档的开发构建版本，地址为[https://docs.sympy.org/dev/index.html](https://docs.sympy.org/dev/index.html)。
- en: Running the Benchmarks
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行基准测试
- en: The benchmarks for SymPy are hosted at [https://github.com/sympy/sympy_benchmarks](https://github.com/sympy/sympy_benchmarks).
    The [README](https://github.com/sympy/sympy_benchmarks#readme) in that repository
    explains how to run the benchmarks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy的基准测试位于[https://github.com/sympy/sympy_benchmarks](https://github.com/sympy/sympy_benchmarks)。该仓库中的[README](https://github.com/sympy/sympy_benchmarks#readme)文件解释了如何运行基准测试。
- en: Note that the benchmarks are also run automatically on the [GitHub Actions CI](https://github.com/sympy/sympy/actions),
    so it is generally not necessary to run them yourself as a contributor unless
    you want to reproduce the benchmarks results on your computer or add a new benchmark
    to the suite.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，基准测试也会自动在[GitHub Actions CI](https://github.com/sympy/sympy/actions)上运行，因此作为贡献者通常不需要自行运行，除非你想在自己的计算机上重现基准测试结果或者向套件中添加新的基准测试。
- en: '**asv**: [Airspeed Velocity](https://asv.readthedocs.io/en/stable/) is the
    package used for running the benchmarks. Note that the package name that you install
    is called `asv`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**asv**：[Airspeed Velocity](https://asv.readthedocs.io/en/stable/)是用于运行基准测试的包。请注意，安装的包名为`asv`。'
