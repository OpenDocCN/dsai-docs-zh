- en: Enumerative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/utilities/enumerative.html](https://docs.sympy.org/latest/modules/utilities/enumerative.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module includes functions and classes for enumerating and counting multiset
    partitions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Enumerates partitions of a multiset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**multiplicities**'
  prefs: []
  type: TYPE_NORMAL
- en: list of integer multiplicities of the components of the multiset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Yields:'
  prefs: []
  type: TYPE_NORMAL
- en: state
  prefs: []
  type: TYPE_NORMAL
- en: Internal data structure which encodes a particular partition. This output is
    then usually processed by a visitor function which combines the information from
    this data structure with the components themselves to produce an actual partition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unless they wish to create their own visitor function, users will have little
    need to look inside this data structure. But, for reference, it is a 3-element
    list with components:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: f
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is a frame array, which is used to divide pstack into parts.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: lpart
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: points to the base of the topmost part.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pstack
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is an array of PartComponent objects.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `state` output offers a peek into the internal data structures of the enumeration
    function. The client should treat this as read-only; any modification of the data
    structure will cause unpredictable (and almost certainly incorrect) results. Also,
    the components of `state` are modified in place at each iteration. Hence, the
    visitor must be called at each loop iteration. Accumulating the `state` instances
    and processing them later will not work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: Takes a multiset as input and directly yields multiset partitions. It dispatches
    to a number of functions, including this one, for implementation. Most users will
    find it more convenient to use than multiset_partitions_taocp.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use with multiset_partitions_taocp to enumerate the ways a number can be expressed
    as a product of factors. For this usage, the exponents of the prime factors of
    a number are arguments to the partition enumerator, while the corresponding prime
    factors are input here.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To enumerate the factorings of a number we can think of the elements of the
    partition as being the prime factors and the multiplicities as being their exponents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of lists to represent the partition.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The approach of the function `multiset_partitions_taocp` is extended and generalized
    by the class `MultisetPartitionTraverser`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Has methods to `enumerate` and `count` the partitions of a multiset.
  prefs: []
  type: TYPE_NORMAL
- en: This implements a refactored and extended version of Knuth’s algorithm 7.1.2.5M
    [[AOCP]](#aocp).”
  prefs: []
  type: TYPE_NORMAL
- en: The enumeration methods of this class are generators and return data structures
    which can be interpreted by the same visitor functions used for the output of
    `multiset_partitions_taocp`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp"), [`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[AOCP] ([1](#id1),[2](#id2),[3](#id5),[4](#id6))'
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm 7.1.2.5M in Volume 4A, Combinatoral Algorithms, Part 1, of The Art
    of Computer Programming, by Donald Knuth.
  prefs: []
  type: TYPE_NORMAL
- en: '[[Factorisatio](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: On a Problem of Oppenheim concerning “Factorisatio Numerorum” E. R. Canfield,
    Paul Erdos, Carl Pomerance, JOURNAL OF NUMBER THEORY, Vol. 17, No. 1\. August
    1983\. See section 7 for a description of an algorithm similar to Knuth’s.
  prefs: []
  type: TYPE_NORMAL
- en: '[[Yorgey](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Generating Multiset Partitions, Brent Yorgey, The Monad.Reader, Issue 8, September
    2007.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of partitions of a multiset whose components have the multiplicities
    given in `multiplicities`.
  prefs: []
  type: TYPE_NORMAL
- en: For larger counts, this method is much faster than calling one of the enumerators
    and counting the result. Uses dynamic programming to cut down on the number of
    nodes actually explored. The dictionary used in order to accelerate the counting
    process is stored in the `MultisetPartitionTraverser` object and persists across
    calls. If the user does not expect to call `count_partitions` for any additional
    multisets, the object should be cleared to save memory. On the other hand, the
    cache built up from one count run can significantly speed up subsequent calls
    to `count_partitions`, so it may be advantageous not to clear the object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If one looks at the workings of Knuth’s algorithm M [[AOCP]](#aocp), it can
    be viewed as a traversal of a binary tree of parts. A part has (up to) two children,
    the left child resulting from the spread operation, and the right child from the
    decrement operation. The ordinary enumeration of multiset partitions is an in-order
    traversal of this tree, and with the partitions corresponding to paths from the
    root to the leaves. The mapping from paths to partitions is a little complicated,
    since the partition would contain only those parts which are leaves or the parents
    of a spread link, not those which are parents of a decrement link.
  prefs: []
  type: TYPE_NORMAL
- en: For counting purposes, it is sufficient to count leaves, and this can be done
    with a recursive in-order traversal. The number of leaves of a subtree rooted
    at a particular part is a function only of that part itself, so memoizing has
    the potential to speed up the counting dramatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method follows a computational approach which is similar to the hypothetical
    memoized recursive function, but with two differences:'
  prefs: []
  type: TYPE_NORMAL
- en: This method is iterative, borrowing its structure from the other enumerations
    and maintaining an explicit stack of parts which are in the process of being counted.
    (There may be multisets which can be counted reasonably quickly by this implementation,
    but which would overflow the default Python recursion limit with a recursive implementation.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of using the part data structure directly, a more compact key is constructed.
    This saves space, but more importantly coalesces some parts which would remain
    separate with physical keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike the enumeration functions, there is currently no _range version of count_partitions.
    If someone wants to stretch their brain, it should be possible to construct one
    by memoizing with a histogram of counts rather than a single count, and combining
    the histograms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Enumerate the partitions of a multiset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp")'
  prefs: []
  type: TYPE_NORMAL
- en: which provides the same result as this method, but is about twice as fast. Hence,
    enum_all is primarily useful for testing. Also see the function for a discussion
    of states and visitors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Enumerate the partitions of a multiset with lb < num(parts)
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to enum_range(multiplicities, lb, sum(multiplicities))
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**multiplicities**'
  prefs: []
  type: TYPE_NORMAL
- en: list of multiplicities of the components of the multiset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**lb**'
  prefs: []
  type: TYPE_NORMAL
- en: Number of parts in the partition must be greater than this lower bound.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_small`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Enumerate the partitions of a multiset with `lb < num(parts) <= ub`.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, if partitions with exactly `k` parts are desired, call with `(multiplicities,
    k - 1, k)`. This method generalizes enum_all, enum_small, and enum_large.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Enumerate multiset partitions with no more than `ub` parts.
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to enum_range(multiplicities, 0, ub)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**multiplicities**'
  prefs: []
  type: TYPE_NORMAL
- en: list of multiplicities of the components of the multiset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ub**'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of parts
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The implementation is based, in part, on the answer given to exercise 69, in
    Knuth [[AOCP]](#aocp).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_large`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
  prefs: []
  type: TYPE_NORMAL
