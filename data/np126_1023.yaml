- en: numpy.testing.assert_array_equal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.testing.assert_array_equal
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Raises an AssertionError if two array_like objects are not equal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个类似数组对象不相等，则引发 AssertionError。
- en: Given two array_like objects, check that the shape is equal and all elements
    of these objects are equal (but see the Notes for the special handling of a scalar).
    An exception is raised at shape mismatch or conflicting values. In contrast to
    the standard usage in numpy, NaNs are compared like numbers, no assertion is raised
    if both objects have NaNs in the same positions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个类似数组的对象，检查形状是否相等，并且这些对象的所有元素是否相等（但请参见标量的特殊处理的注释部分）。如果形状不匹配或值冲突，将引发异常。与 numpy
    中的标准用法相反，NaN 将被视为数字进行比较，如果两个对象在相同位置具有 NaN，则不会引发断言。
- en: The usual caution for verifying equality with floating point numbers is advised.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用浮点数验证相等性时应保持常规谨慎。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**x**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**array_like'
- en: The actual object to check.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查的实际对象。
- en: '**y**array_like'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**array_like'
- en: The desired, expected object.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的，期望的对象。
- en: '**err_msg**str, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**err_msg**str，可选'
- en: The error message to be printed in case of failure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较标量与数组时引发 AssertionError 的错误消息。
- en: '**verbose**bool, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**bool，可选'
- en: If True, the conflicting values are appended to the error message.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则冲突的值将追加到错误消息中。
- en: '**strict**bool, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**strict**bool，可选'
- en: If True, raise an AssertionError when either the shape or the data type of the
    array_like objects does not match. The special handling for scalars mentioned
    in the Notes section is disabled.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则在数组对象的形状或数据类型不匹配时引发 AssertionError。禁用了在注释部分提到的标量的特殊处理。
- en: New in version 1.24.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.24.0 中的新功能。
- en: 'Raises:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: AssertionError
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AssertionError
- en: If actual and desired objects are not equal.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实际对象和期望对象不相等。
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
- en: Compare two array_like objects for equality with desired relative and/or absolute
    precision.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所需的相对和/或绝对精度比较两个类似数组的对象是否相等。
- en: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp"), [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp"), [`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")，[`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")，[`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
- en: Notes
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: When one of *x* and *y* is a scalar and the other is array_like, the function
    checks that each element of the array_like object is equal to the scalar. This
    behaviour can be disabled with the *strict* parameter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *x* 和 *y* 中的一个是标量，另一个是类似数组时，函数将检查类似数组对象的每个元素是否等于标量。可以使用 *strict* 参数禁用此行为。
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The first assert does not raise an exception:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个断言不会引发异常：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Assert fails with numerical imprecision with floats:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于浮点数存在数值不精确的断言失败：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use [`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose") or one of the nulp (number of floating point
    values) functions for these cases instead:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，请使用 [`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose") 或 nulp（浮点数值的数量）函数之一：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As mentioned in the Notes section, [`assert_array_equal`](#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal") has special handling for scalars. Here the
    test checks that each value in *x* is 3:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在注释部分中提到的，[`assert_array_equal`](#numpy.testing.assert_array_equal "numpy.testing.assert_array_equal")
    对标量具有特殊处理。此处的测试检查 *x* 中的每个值是否为 3：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Use *strict* to raise an AssertionError when comparing a scalar with an array:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *strict* 来确保数组数据类型匹配：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The *strict* parameter also ensures that the array data types match:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*strict* 参数还确保数组数据类型匹配：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
