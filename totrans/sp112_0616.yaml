- en: scipy.signal.TransferFunction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.TransferFunction.html#scipy.signal.TransferFunction)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Linear Time Invariant system class in transfer function form.
  prefs: []
  type: TYPE_NORMAL
- en: Represents the system as the continuous-time transfer function \(H(s)=\sum_{i=0}^N
    b[N-i] s^i / \sum_{j=0}^M a[M-j] s^j\) or the discrete-time transfer function
    \(H(z)=\sum_{i=0}^N b[N-i] z^i / \sum_{j=0}^M a[M-j] z^j\), where \(b\) are elements
    of the numerator [`num`](scipy.signal.TransferFunction.num.html#scipy.signal.TransferFunction.num
    "scipy.signal.TransferFunction.num"), \(a\) are elements of the denominator [`den`](scipy.signal.TransferFunction.den.html#scipy.signal.TransferFunction.den
    "scipy.signal.TransferFunction.den"), and `N == len(b) - 1`, `M == len(a) - 1`.
    [`TransferFunction`](#scipy.signal.TransferFunction "scipy.signal.TransferFunction")
    systems inherit additional functionality from the [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti"), respectively the [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti") classes, depending on which system representation is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***system: arguments**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`TransferFunction`](#scipy.signal.TransferFunction "scipy.signal.TransferFunction")
    class can be instantiated with 1 or 2 arguments. The following gives the number
    of input arguments and their interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti") or [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti") system: ([`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") or [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"))'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '2: array_like: (numerator, denominator)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt: float, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling time [s] of the discrete-time systems. Defaults to *None* (continuous-time).
    Must be specified as a keyword argument, for example, `dt=0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"), [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"),
    [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`tf2ss`](scipy.signal.tf2ss.html#scipy.signal.tf2ss "scipy.signal.tf2ss"),
    [`tf2zpk`](scipy.signal.tf2zpk.html#scipy.signal.tf2zpk "scipy.signal.tf2zpk"),
    [`tf2sos`](scipy.signal.tf2sos.html#scipy.signal.tf2sos "scipy.signal.tf2sos")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of properties that are not part of the [`TransferFunction`](#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") system representation (such as the *A*, *B*,
    *C*, *D* state-space matrices) is very inefficient and may lead to numerical inaccuracies.
    It is better to convert to the specific system representation first. For example,
    call `sys = sys.to_ss()` before accessing/changing the A, B, C, D system matrices.
  prefs: []
  type: TYPE_NORMAL
- en: If (numerator, denominator) is passed in for `*system`, coefficients for both
    the numerator and denominator should be specified in descending exponent order
    (e.g. `s^2 + 3s + 5` or `z^2 + 3z + 5` would be represented as `[1, 3, 5]`)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Construct the transfer function \(H(s) = \frac{s^2 + 3s + 3}{s^2 + 2s + 1}\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(z) = \frac{z^2 + 3z + 3}{z^2 + 2z + 1}\)
    with a sampling time of 0.1 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`den`](scipy.signal.TransferFunction.den.html#scipy.signal.TransferFunction.den
    "scipy.signal.TransferFunction.den")'
  prefs: []
  type: TYPE_NORMAL
- en: Denominator of the [`TransferFunction`](#scipy.signal.TransferFunction "scipy.signal.TransferFunction")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dt`](scipy.signal.TransferFunction.dt.html#scipy.signal.TransferFunction.dt
    "scipy.signal.TransferFunction.dt")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the sampling time of the system, *None* for [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti") systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[`num`](scipy.signal.TransferFunction.num.html#scipy.signal.TransferFunction.num
    "scipy.signal.TransferFunction.num")'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator of the [`TransferFunction`](#scipy.signal.TransferFunction "scipy.signal.TransferFunction")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`poles`](scipy.signal.TransferFunction.poles.html#scipy.signal.TransferFunction.poles
    "scipy.signal.TransferFunction.poles")'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](scipy.signal.TransferFunction.zeros.html#scipy.signal.TransferFunction.zeros
    "scipy.signal.TransferFunction.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`to_ss`](scipy.signal.TransferFunction.to_ss.html#scipy.signal.TransferFunction.to_ss
    "scipy.signal.TransferFunction.to_ss")() | Convert system representation to [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_tf`](scipy.signal.TransferFunction.to_tf.html#scipy.signal.TransferFunction.to_tf
    "scipy.signal.TransferFunction.to_tf")() | Return a copy of the current [`TransferFunction`](#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_zpk`](scipy.signal.TransferFunction.to_zpk.html#scipy.signal.TransferFunction.to_zpk
    "scipy.signal.TransferFunction.to_zpk")() | Convert system representation to [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"). |'
  prefs: []
  type: TYPE_TB
