["```py\nlinalg.svd(a, full_matrices=True, compute_uv=True, hermitian=False)\n```", "```py\n>>> a = np.random.randn(9, 6) + 1j*np.random.randn(9, 6)\n>>> b = np.random.randn(2, 7, 8, 3) + 1j*np.random.randn(2, 7, 8, 3) \n```", "```py\n>>> U, S, Vh = np.linalg.svd(a, full_matrices=True)\n>>> U.shape, S.shape, Vh.shape\n((9, 9), (6,), (6, 6))\n>>> np.allclose(a, np.dot(U[:, :6] * S, Vh))\nTrue\n>>> smat = np.zeros((9, 6), dtype=complex)\n>>> smat[:6, :6] = np.diag(S)\n>>> np.allclose(a, np.dot(U, np.dot(smat, Vh)))\nTrue \n```", "```py\n>>> U, S, Vh = np.linalg.svd(a, full_matrices=False)\n>>> U.shape, S.shape, Vh.shape\n((9, 6), (6,), (6, 6))\n>>> np.allclose(a, np.dot(U * S, Vh))\nTrue\n>>> smat = np.diag(S)\n>>> np.allclose(a, np.dot(U, np.dot(smat, Vh)))\nTrue \n```", "```py\n>>> U, S, Vh = np.linalg.svd(b, full_matrices=True)\n>>> U.shape, S.shape, Vh.shape\n((2, 7, 8, 8), (2, 7, 3), (2, 7, 3, 3))\n>>> np.allclose(b, np.matmul(U[..., :3] * S[..., None, :], Vh))\nTrue\n>>> np.allclose(b, np.matmul(U[..., :3], S[..., None] * Vh))\nTrue \n```", "```py\n>>> U, S, Vh = np.linalg.svd(b, full_matrices=False)\n>>> U.shape, S.shape, Vh.shape\n((2, 7, 8, 3), (2, 7, 3), (2, 7, 3, 3))\n>>> np.allclose(b, np.matmul(U * S[..., None, :], Vh))\nTrue\n>>> np.allclose(b, np.matmul(U, S[..., None] * Vh))\nTrue \n```"]