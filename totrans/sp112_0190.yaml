- en: scipy.interpolate.splev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splev.html#scipy.interpolate.splev](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splev.html#scipy.interpolate.splev)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate a B-spline or its derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: Given the knots and coefficients of a B-spline representation, evaluate the
    value of the smoothing polynomial and its derivatives. This is a wrapper around
    the FORTRAN routines splev and splder of FITPACK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An array of points at which to return the value of the smoothed spline or its
    derivatives. If *tck* was returned from [`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep
    "scipy.interpolate.splprep"), then the parameter values, u should be given.
  prefs: []
  type: TYPE_NORMAL
- en: '**tck**3-tuple or a BSpline object'
  prefs: []
  type: TYPE_NORMAL
- en: If a tuple, then it should be a sequence of length 3 returned by [`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep
    "scipy.interpolate.splrep") or [`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep
    "scipy.interpolate.splprep") containing the knots, coefficients, and degree of
    the spline. (Also see Notes.)
  prefs: []
  type: TYPE_NORMAL
- en: '**der**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of derivative of the spline to compute (must be less than or equal
    to k, the degree of the spline).
  prefs: []
  type: TYPE_NORMAL
- en: '**ext**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the value returned for elements of `x` not in the interval defined
    by the knot sequence.
  prefs: []
  type: TYPE_NORMAL
- en: if ext=0, return the extrapolated value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=1, return 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=2, raise a ValueError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=3, return the boundary value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value is 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray or list of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: An array of values representing the spline function evaluated at the points
    in *x*. If *tck* was returned from [`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep
    "scipy.interpolate.splprep"), then this is a list of arrays representing the curve
    in an N-D space.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`splprep`](scipy.interpolate.splprep.html#scipy.interpolate.splprep "scipy.interpolate.splprep"),
    [`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep"),
    [`sproot`](scipy.interpolate.sproot.html#scipy.interpolate.sproot "scipy.interpolate.sproot"),
    [`spalde`](scipy.interpolate.spalde.html#scipy.interpolate.spalde "scipy.interpolate.spalde"),
    [`splint`](scipy.interpolate.splint.html#scipy.interpolate.splint "scipy.interpolate.splint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep"),
    [`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the tck-tuples directly is not recommended. In new code, prefer
    using [`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: C. de Boor, “On calculating with b-splines”, J. Approximation Theory, 6, p.50-62,
    1972.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: M. G. Cox, “The numerical evaluation of b-splines”, J. Inst. Maths Applics,
    10, p.134-149, 1972.
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Curve and surface fitting with splines”, Monographs on Numerical
    Analysis, Oxford University Press, 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Examples are given [in the tutorial](../../tutorial/interpolate/smoothing_splines.html#tutorial-interpolate-splxxx).
  prefs: []
  type: TYPE_NORMAL
