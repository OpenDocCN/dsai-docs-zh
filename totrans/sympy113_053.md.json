["```py\nclass sympy.assumptions.predicates.common.IsTruePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q\n>>> from sympy.abc import x, y\n>>> ask(Q.is_true(True))\nTrue \n```", "```py\n>>> Q.is_true(Q.even(x))\nQ.even(x) \n```", "```py\n>>> from sympy import Eq, Gt\n>>> Q.is_true(Eq(x, y))\nQ.eq(x, y)\n>>> Q.is_true(Gt(x, y))\nQ.gt(x, y) \n```", "```py\nhandler = <dispatched IsTrueHandler>\n```", "```py\nclass sympy.assumptions.predicates.common.CommutativePredicate(*args, **kwargs)\n```", "```py\nhandler = <dispatched CommutativeHandler>\n```", "```py\nclass sympy.assumptions.predicates.calculus.FinitePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, S, oo, I, zoo\n>>> from sympy.abc import x\n>>> ask(Q.finite(oo))\nFalse\n>>> ask(Q.finite(-oo))\nFalse\n>>> ask(Q.finite(zoo))\nFalse\n>>> ask(Q.finite(1))\nTrue\n>>> ask(Q.finite(2 + 3*I))\nTrue\n>>> ask(Q.finite(x), Q.positive(x))\nTrue\n>>> print(ask(Q.finite(S.NaN)))\nNone \n```", "```py\nhandler = <dispatched FiniteHandler>\n```", "```py\nclass sympy.assumptions.predicates.calculus.InfinitePredicate(*args, **kwargs)\n```", "```py\nhandler = <dispatched InfiniteHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.SymmetricPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('Y', 2, 3)\n>>> Z = MatrixSymbol('Z', 2, 2)\n>>> ask(Q.symmetric(X*Z), Q.symmetric(X) & Q.symmetric(Z))\nTrue\n>>> ask(Q.symmetric(X + Z), Q.symmetric(X) & Q.symmetric(Z))\nTrue\n>>> ask(Q.symmetric(Y))\nFalse \n```", "```py\nhandler = <dispatched SymmetricHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.InvertiblePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('Y', 2, 3)\n>>> Z = MatrixSymbol('Z', 2, 2)\n>>> ask(Q.invertible(X*Y), Q.invertible(X))\nFalse\n>>> ask(Q.invertible(X*Z), Q.invertible(X) & Q.invertible(Z))\nTrue\n>>> ask(Q.invertible(X), Q.fullrank(X) & Q.square(X))\nTrue \n```", "```py\nhandler = <dispatched InvertibleHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.OrthogonalPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, Identity\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('Y', 2, 3)\n>>> Z = MatrixSymbol('Z', 2, 2)\n>>> ask(Q.orthogonal(Y))\nFalse\n>>> ask(Q.orthogonal(X*Z*X), Q.orthogonal(X) & Q.orthogonal(Z))\nTrue\n>>> ask(Q.orthogonal(Identity(3)))\nTrue\n>>> ask(Q.invertible(X), Q.orthogonal(X))\nTrue \n```", "```py\nhandler = <dispatched OrthogonalHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.UnitaryPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, Identity\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('Y', 2, 3)\n>>> Z = MatrixSymbol('Z', 2, 2)\n>>> ask(Q.unitary(Y))\nFalse\n>>> ask(Q.unitary(X*Z*X), Q.unitary(X) & Q.unitary(Z))\nTrue\n>>> ask(Q.unitary(Identity(3)))\nTrue \n```", "```py\nhandler = <dispatched UnitaryHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.PositiveDefinitePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, Identity\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('Y', 2, 3)\n>>> Z = MatrixSymbol('Z', 2, 2)\n>>> ask(Q.positive_definite(Y))\nFalse\n>>> ask(Q.positive_definite(Identity(3)))\nTrue\n>>> ask(Q.positive_definite(X + Z), Q.positive_definite(X) &\n...     Q.positive_definite(Z))\nTrue \n```", "```py\nhandler = <dispatched PositiveDefiniteHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.UpperTriangularPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, ZeroMatrix, Identity\n>>> ask(Q.upper_triangular(Identity(3)))\nTrue\n>>> ask(Q.upper_triangular(ZeroMatrix(3, 3)))\nTrue \n```", "```py\nhandler = <dispatched UpperTriangularHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.LowerTriangularPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, ZeroMatrix, Identity\n>>> ask(Q.lower_triangular(Identity(3)))\nTrue\n>>> ask(Q.lower_triangular(ZeroMatrix(3, 3)))\nTrue \n```", "```py\nhandler = <dispatched LowerTriangularHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.DiagonalPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, ZeroMatrix\n>>> X = MatrixSymbol('X', 2, 2)\n>>> ask(Q.diagonal(ZeroMatrix(3, 3)))\nTrue\n>>> ask(Q.diagonal(X), Q.lower_triangular(X) &\n...     Q.upper_triangular(X))\nTrue \n```", "```py\nhandler = <dispatched DiagonalHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.FullRankPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, ZeroMatrix, Identity\n>>> X = MatrixSymbol('X', 2, 2)\n>>> ask(Q.fullrank(X.T), Q.fullrank(X))\nTrue\n>>> ask(Q.fullrank(ZeroMatrix(3, 3)))\nFalse\n>>> ask(Q.fullrank(Identity(3)))\nTrue \n```", "```py\nhandler = <dispatched FullRankHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.SquarePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol, ZeroMatrix, Identity\n>>> X = MatrixSymbol('X', 2, 2)\n>>> Y = MatrixSymbol('X', 2, 3)\n>>> ask(Q.square(X))\nTrue\n>>> ask(Q.square(Y))\nFalse\n>>> ask(Q.square(ZeroMatrix(3, 3)))\nTrue\n>>> ask(Q.square(Identity(3)))\nTrue \n```", "```py\nhandler = <dispatched SquareHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.IntegerElementsPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.integer(X[1, 2]), Q.integer_elements(X))\nTrue \n```", "```py\nhandler = <dispatched IntegerElementsHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.RealElementsPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.real(X[1, 2]), Q.real_elements(X))\nTrue \n```", "```py\nhandler = <dispatched RealElementsHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.ComplexElementsPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.complex(X[1, 2]), Q.complex_elements(X))\nTrue\n>>> ask(Q.complex_elements(X), Q.integer_elements(X))\nTrue \n```", "```py\nhandler = <dispatched ComplexElementsHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.SingularPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.singular(X), Q.invertible(X))\nFalse\n>>> ask(Q.singular(X), ~Q.invertible(X))\nTrue \n```", "```py\nhandler = <dispatched SingularHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.NormalPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.normal(X), Q.unitary(X))\nTrue \n```", "```py\nhandler = <dispatched NormalHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.TriangularPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.triangular(X), Q.upper_triangular(X))\nTrue\n>>> ask(Q.triangular(X), Q.lower_triangular(X))\nTrue \n```", "```py\nhandler = <dispatched TriangularHandler>\n```", "```py\nclass sympy.assumptions.predicates.matrices.UnitTriangularPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, MatrixSymbol\n>>> X = MatrixSymbol('X', 4, 4)\n>>> ask(Q.triangular(X), Q.unit_triangular(X))\nTrue \n```", "```py\nhandler = <dispatched UnitTriangularHandler>\n```", "```py\nclass sympy.assumptions.predicates.ntheory.EvenPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, pi\n>>> ask(Q.even(0))\nTrue\n>>> ask(Q.even(2))\nTrue\n>>> ask(Q.even(3))\nFalse\n>>> ask(Q.even(pi))\nFalse \n```", "```py\nhandler = <dispatched EvenHandler>\n```", "```py\nclass sympy.assumptions.predicates.ntheory.OddPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, pi\n>>> ask(Q.odd(0))\nFalse\n>>> ask(Q.odd(2))\nFalse\n>>> ask(Q.odd(3))\nTrue\n>>> ask(Q.odd(pi))\nFalse \n```", "```py\nhandler = <dispatched OddHandler>\n```", "```py\nclass sympy.assumptions.predicates.ntheory.PrimePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask\n>>> ask(Q.prime(0))\nFalse\n>>> ask(Q.prime(1))\nFalse\n>>> ask(Q.prime(2))\nTrue\n>>> ask(Q.prime(20))\nFalse\n>>> ask(Q.prime(-3))\nFalse \n```", "```py\nhandler = <dispatched PrimeHandler>\n```", "```py\nclass sympy.assumptions.predicates.ntheory.CompositePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask\n>>> ask(Q.composite(0))\nFalse\n>>> ask(Q.composite(1))\nFalse\n>>> ask(Q.composite(2))\nFalse\n>>> ask(Q.composite(20))\nTrue \n```", "```py\nhandler = <dispatched CompositeHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.PositivePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, symbols, I\n>>> x = symbols('x')\n>>> ask(Q.positive(x), Q.real(x) & ~Q.negative(x) & ~Q.zero(x))\nTrue\n>>> ask(Q.positive(1))\nTrue\n>>> ask(Q.nonpositive(I))\nFalse\n>>> ask(~Q.positive(I))\nTrue \n```", "```py\nhandler = <dispatched PositiveHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.NegativePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, symbols, I\n>>> x = symbols('x')\n>>> ask(Q.negative(x), Q.real(x) & ~Q.positive(x) & ~Q.zero(x))\nTrue\n>>> ask(Q.negative(-1))\nTrue\n>>> ask(Q.nonnegative(I))\nFalse\n>>> ask(~Q.negative(I))\nTrue \n```", "```py\nhandler = <dispatched NegativeHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.ZeroPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q, oo, symbols\n>>> x, y = symbols('x, y')\n>>> ask(Q.zero(0))\nTrue\n>>> ask(Q.zero(1/oo))\nTrue\n>>> print(ask(Q.zero(0*oo)))\nNone\n>>> ask(Q.zero(1))\nFalse\n>>> ask(Q.zero(x*y), Q.zero(x) | Q.zero(y))\nTrue \n```", "```py\nhandler = <dispatched ZeroHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.NonZeroPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, symbols, I, oo\n>>> x = symbols('x')\n>>> print(ask(Q.nonzero(x), ~Q.zero(x)))\nNone\n>>> ask(Q.nonzero(x), Q.positive(x))\nTrue\n>>> ask(Q.nonzero(x), Q.zero(x))\nFalse\n>>> ask(Q.nonzero(0))\nFalse\n>>> ask(Q.nonzero(I))\nFalse\n>>> ask(~Q.zero(I))\nTrue\n>>> ask(Q.nonzero(oo))\nFalse \n```", "```py\nhandler = <dispatched NonZeroHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.NonPositivePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, I \n```", "```py\n>>> ask(Q.nonpositive(-1))\nTrue\n>>> ask(Q.nonpositive(0))\nTrue\n>>> ask(Q.nonpositive(1))\nFalse\n>>> ask(Q.nonpositive(I))\nFalse\n>>> ask(Q.nonpositive(-I))\nFalse \n```", "```py\nhandler = <dispatched NonPositiveHandler>\n```", "```py\nclass sympy.assumptions.predicates.order.NonNegativePredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, I\n>>> ask(Q.nonnegative(1))\nTrue\n>>> ask(Q.nonnegative(0))\nTrue\n>>> ask(Q.nonnegative(-1))\nFalse\n>>> ask(Q.nonnegative(I))\nFalse\n>>> ask(Q.nonnegative(-I))\nFalse \n```", "```py\nhandler = <dispatched NonNegativeHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.IntegerPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, S\n>>> ask(Q.integer(5))\nTrue\n>>> ask(Q.integer(S(1)/2))\nFalse \n```", "```py\nhandler = <dispatched IntegerHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.RationalPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q, pi, S\n>>> ask(Q.rational(0))\nTrue\n>>> ask(Q.rational(S(1)/2))\nTrue\n>>> ask(Q.rational(pi))\nFalse \n```", "```py\nhandler = <dispatched RationalHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.IrrationalPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q, pi, S, I\n>>> ask(Q.irrational(0))\nFalse\n>>> ask(Q.irrational(S(1)/2))\nFalse\n>>> ask(Q.irrational(pi))\nTrue\n>>> ask(Q.irrational(I))\nFalse \n```", "```py\nhandler = <dispatched IrrationalHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.RealPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, symbols\n>>> x = symbols('x')\n>>> ask(Q.real(x), Q.positive(x))\nTrue\n>>> ask(Q.real(0))\nTrue \n```", "```py\nhandler = <dispatched RealHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.ExtendedRealPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q, oo, I\n>>> ask(Q.extended_real(1))\nTrue\n>>> ask(Q.extended_real(I))\nFalse\n>>> ask(Q.extended_real(oo))\nTrue \n```", "```py\nhandler = <dispatched ExtendedRealHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.HermitianPredicate(*args, **kwargs)\n```", "```py\nhandler = <dispatched HermitianHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.ComplexPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, Symbol, ask, I, oo\n>>> x = Symbol('x')\n>>> ask(Q.complex(0))\nTrue\n>>> ask(Q.complex(2 + 3*I))\nTrue\n>>> ask(Q.complex(oo))\nFalse \n```", "```py\nhandler = <dispatched ComplexHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.ImaginaryPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask, I\n>>> ask(Q.imaginary(3*I))\nTrue\n>>> ask(Q.imaginary(2 + 3*I))\nFalse\n>>> ask(Q.imaginary(0))\nFalse \n```", "```py\nhandler = <dispatched ImaginaryHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.AntihermitianPredicate(*args, **kwargs)\n```", "```py\nhandler = <dispatched AntiHermitianHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.AlgebraicPredicate(*args, **kwargs)\n```", "```py\n>>> from sympy import ask, Q, sqrt, I, pi\n>>> ask(Q.algebraic(sqrt(2)))\nTrue\n>>> ask(Q.algebraic(I))\nTrue\n>>> ask(Q.algebraic(pi))\nFalse \n```", "```py\nAlgebraicHandler = <dispatched AlgebraicHandler>\n```", "```py\nhandler = <dispatched AskAlgebraicpredicateHandler>\n```", "```py\nclass sympy.assumptions.predicates.sets.TranscendentalPredicate(*args, **kwargs)\n```", "```py\nhandler = <dispatched Transcendental>\n```"]