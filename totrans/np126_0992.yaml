- en: numpy.searchsorted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.searchsorted.html](https://numpy.org/doc/1.26/reference/generated/numpy.searchsorted.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find indices where elements should be inserted to maintain order.
  prefs: []
  type: TYPE_NORMAL
- en: Find the indices into a sorted array *a* such that, if the corresponding elements
    in *v* were inserted before the indices, the order of *a* would be preserved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that *a* is sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| *side* | returned index *i* satisfies |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| left | `a[i-1] < v <= a[i]` |'
  prefs: []
  type: TYPE_TB
- en: '| right | `a[i-1] <= v < a[i]` |'
  prefs: []
  type: TYPE_TB
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**1-D array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array. If *sorter* is None, then it must be sorted in ascending order,
    otherwise *sorter* must be an array of indices that sort it.
  prefs: []
  type: TYPE_NORMAL
- en: '**v**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Values to insert into *a*.
  prefs: []
  type: TYPE_NORMAL
- en: '**side**{‘left’, ‘right’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘left’, the index of the first suitable location found is given. If ‘right’,
    return the last such index. If there is no suitable index, return either 0 or
    N (where N is the length of *a*).
  prefs: []
  type: TYPE_NORMAL
- en: '**sorter**1-D array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional array of integer indices that sort array a into ascending order. They
    are typically the result of argsort.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**int or array of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Array of insertion points with the same shape as *v*, or an integer if *v* is
    a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort`](numpy.sort.html#numpy.sort "numpy.sort")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a sorted copy of an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`histogram`](numpy.histogram.html#numpy.histogram "numpy.histogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce histogram from 1-D data.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Binary search is used to find the required insertion points.
  prefs: []
  type: TYPE_NORMAL
- en: As of NumPy 1.4.0 [`searchsorted`](#numpy.searchsorted "numpy.searchsorted")
    works with real/complex arrays containing [`nan`](../constants.html#numpy.nan
    "numpy.nan") values. The enhanced sort order is documented in [`sort`](numpy.sort.html#numpy.sort
    "numpy.sort").
  prefs: []
  type: TYPE_NORMAL
- en: This function uses the same algorithm as the builtin python [`bisect.bisect_left`](https://docs.python.org/3/library/bisect.html#bisect.bisect_left
    "(in Python v3.11)") (`side='left'`) and [`bisect.bisect_right`](https://docs.python.org/3/library/bisect.html#bisect.bisect_right
    "(in Python v3.11)") (`side='right'`) functions, which is also vectorized in the
    *v* argument.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
