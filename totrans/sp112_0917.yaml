- en: scipy.special.pseudo_huber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.pseudo_huber.html#scipy.special.pseudo_huber](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.pseudo_huber.html#scipy.special.pseudo_huber)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pseudo-Huber loss function.
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{pseudo\_huber}(\delta, r) = \delta^2 \left( \sqrt{ 1 + \left( \frac{r}{\delta}
    \right)^2 } - 1 \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**delta**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, indicating the soft quadratic vs. linear loss changepoint.
  prefs: []
  type: TYPE_NORMAL
- en: '**r**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, possibly representing residuals.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function results
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The computed Pseudo-Huber loss function values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`huber`](scipy.special.huber.html#scipy.special.huber "scipy.special.huber")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar function which this function approximates
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Like [`huber`](scipy.special.huber.html#scipy.special.huber "scipy.special.huber"),
    [`pseudo_huber`](#scipy.special.pseudo_huber "scipy.special.pseudo_huber") often
    serves as a robust loss function in statistics or machine learning to reduce the
    influence of outliers. Unlike [`huber`](scipy.special.huber.html#scipy.special.huber
    "scipy.special.huber"), [`pseudo_huber`](#scipy.special.pseudo_huber "scipy.special.pseudo_huber")
    is smooth.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, *r* represents residuals, the difference between a model prediction
    and data. Then, for \(|r|\leq\delta\), [`pseudo_huber`](#scipy.special.pseudo_huber
    "scipy.special.pseudo_huber") resembles the squared error and for \(|r|>\delta\)
    the absolute error. This way, the Pseudo-Huber loss often achieves a fast convergence
    in model fitting for small residuals like the squared error loss function and
    still reduces the influence of outliers (\(|r|>\delta\)) like the absolute error
    loss. As \(\delta\) is the cutoff between squared and absolute error regimes,
    it has to be tuned carefully for each problem. [`pseudo_huber`](#scipy.special.pseudo_huber
    "scipy.special.pseudo_huber") is also convex, making it suitable for gradient
    based optimization. [[1]](#r83de2cc29090-1) [[2]](#r83de2cc29090-2)
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Hartley, Zisserman, “Multiple View Geometry in Computer Vision”. 2003\. Cambridge
    University Press. p. 619
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Charbonnier et al. “Deterministic edge-preserving regularization in computed
    imaging”. 1997\. IEEE Trans. Image Processing. 6 (2): 298 - 311.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Import all necessary modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the function for `delta=1` at `r=2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the function at `r=2` for different *delta* by providing a list or
    NumPy array for *delta*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the function for `delta=1` at several points by providing a list or
    NumPy array for *r*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The function can be calculated for different *delta* and *r* by providing arrays
    for both with compatible shapes for broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Plot the function for different *delta*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-pseudo_huber-1_00_00.png](../Images/12297ca5ecb6bde155d2fecdcd8ef072.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, illustrate the difference between [`huber`](scipy.special.huber.html#scipy.special.huber
    "scipy.special.huber") and [`pseudo_huber`](#scipy.special.pseudo_huber "scipy.special.pseudo_huber")
    by plotting them and their gradients with respect to *r*. The plot shows that
    [`pseudo_huber`](#scipy.special.pseudo_huber "scipy.special.pseudo_huber") is
    continuously differentiable while [`huber`](scipy.special.huber.html#scipy.special.huber
    "scipy.special.huber") is not at the points \(\pm\delta\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-pseudo_huber-1_01_00.png](../Images/a86d7e54c150880a076ca631668b5a66.png)'
  prefs: []
  type: TYPE_IMG
