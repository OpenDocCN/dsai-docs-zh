["```py\n    >>> np.arange(12).reshape(4, -1).shape\n    (4, 3) \n    ```", "```py\n    >>> a = np.arange(24).reshape(2,3,4) \n    ```", "```py\n    >>> a[...].shape\n    (2, 3, 4) \n    ```", "```py\n    >>> a[...,0].shape\n    (2, 3) \n    ```", "```py\n    >>> a[0,...].shape\n    (3, 4) \n    ```", "```py\n    >>> a[0,...,0].shape\n    (3,) \n    ```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> a\narray([[[ 0,  1,  2,  3],\n [ 4,  5,  6,  7],\n [ 8,  9, 10, 11]],\n\n [[12, 13, 14, 15],\n [16, 17, 18, 19],\n [20, 21, 22, 23]]])\n\n>>> a[1:,-2:,:-1]\narray([[[16, 17, 18],\n [20, 21, 22]]]) \n```", "```py\n>>> a[1] == a[1,:,:]\narray([[ True,  True,  True,  True],\n [ True,  True,  True,  True],\n [ True,  True,  True,  True]]) \n```", "```py\n>>> dt = np.dtype('<f')  # little-endian single-precision float \n```", "```py\n>>> dt = np.dtype('>H')  # big-endian unsigned short \n```", "```py\n>>> np.array((a[0,:], a[1,:], a[2,:])) \n```", "```py\n>>> a = np.arange(12).reshape(3,4)\n>>> a\narray([[ 0,  1,  2,  3],\n [ 4,  5,  6,  7],\n [ 8,  9, 10, 11]]) \n```", "```py\n>>> np.flip(a,axis=0)\narray([[ 8,  9, 10, 11],\n [ 4,  5,  6,  7],\n [ 0,  1,  2,  3]]) \n```", "```py\n>>> np.array((a[0,:], a[1,:], a[2,:]))\narray([[ 0,  1,  2,  3],\n [ 4,  5,  6,  7],\n [ 8,  9, 10, 11]]) \n```", "```py\n>>> np.array((a[2,:],a[1,:],a[0,:]))\narray([[ 8,  9, 10, 11],\n [ 4,  5,  6,  7],\n [ 0,  1,  2,  3]]) \n```", "```py\n>>> a = np.array([[1, 2.0], [0, 0], (1+1j, 3.)])\n\n>>> a\narray([[1.+0.j, 2.+0.j],\n [0.+0.j, 0.+0.j],\n [1.+1.j, 3.+0.j]]) \n```", "```py\n>>> a = np.arange(12).reshape(2,2,3)\n>>> a\narray([[[ 0,  1,  2],\n [ 3,  4,  5]],\n [[ 6,  7,  8],\n [ 9, 10, 11]]]) \n```", "```py\n>>> a[1,0,2]\n8 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> a.ndim\n2\n>>> a\narray([[0, 1, 2],\n [3, 4, 5]]) \n```", "```py\n>>> a = np.arange(6).reshape(1,2,3)\n>>> a.ndim\n3\n>>> a\narray([[[0, 1, 2],\n [3, 4, 5]]]) \n```", "```py\n>>> a = np.arange(3)\n>>> a\narray([0, 1, 2]) \n```", "```py\n>>> a + [3, 3, 3]\narray([3, 4, 5]) \n```", "```py\n>>> a + 3\narray([3, 4, 5]) \n```", "```py\n c[0,0,0] = a[0,0,0] * b[0,0,0]\n c[0,0,1] = a[0,0,1] * b[0,0,1]\n... \n```", "```py\nA[0,0] A[1,0] A[0,1] A[1,1] \n```", "```py\nA[0,0] A[0,1] A[1,0] A[1,1] \n```", "```py\n>>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4]) \n```", "```py\n>>> mask = (x > 2)\n>>> mask\narray([False, False, False, True,  True]) \n```", "```py\n>>> x[mask] = -1\n>>> x\narray([ 0,  1,  2,  -1, -1]) \n```", "```py\n>>> a = np.ma.masked_array([np.nan, 2, np.nan], [True, False, True])\n>>> a\nmasked_array(data=[--, 2.0, --],\n mask=[ True, False,  True],\n fill_value=1e+20)\n\n>>> a + [1, 2, 3]\nmasked_array(data=[--, 4.0, --],\n mask=[ True, False,  True],\n fill_value=1e+20) \n```", "```py\n>>> dt = np.dtype([('a', np.int32), ('b', np.float32, (3,))])\n>>> np.zeros(3, dtype=dt)\narray([(0, [0., 0., 0.]), (0, [0., 0., 0.]), (0, [0., 0., 0.])],\n dtype=[('a', '<i4'), ('b', '<f4', (3,))]) \n```", "```py\n>>> x = np.arange(5)\n>>> x\narray([0, 1, 2, 3, 4]) \n```", "```py\n>>> y = x[::2]\n>>> y\narray([0, 2, 4]) \n```", "```py\n>>> x[0] = 3 # changing x changes y as well, since y is a view on x\n>>> y\narray([3, 2, 4]) \n```"]