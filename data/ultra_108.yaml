- en: Isolating Segmentation Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离分割对象
- en: 原文：[`docs.ultralytics.com/guides/isolating-segmentation-objects/`](https://docs.ultralytics.com/guides/isolating-segmentation-objects/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/guides/isolating-segmentation-objects/`](https://docs.ultralytics.com/guides/isolating-segmentation-objects/)
- en: After performing the Segment Task, it's sometimes desirable to extract the isolated
    objects from the inference results. This guide provides a generic recipe on how
    to accomplish this using the Ultralytics Predict Mode.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 执行分割任务后，有时希望从推断结果中提取出隔离的对象。本指南提供了使用 Ultralytics 预测模式完成此操作的通用方法。
- en: '![Example Isolated Object Segmentation](img/2454120ab43202ed0acedbbe0e266d60.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![示例独立对象分割](img/2454120ab43202ed0acedbbe0e266d60.png)'
- en: Recipe Walk Through
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤详解
- en: See the Ultralytics Quickstart Installation section for a quick walkthrough
    on installing the required libraries.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请查看 Ultralytics 快速入门安装部分，了解所需库的快速设置步骤。
- en: '* * *'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: Load a model and run `predict()` method on a source.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型并在源上运行 `predict()` 方法。
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: No Prediction Arguments?
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有预测参数？
- en: 'Without specifying a source, the example images from the library will be used:'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有指定来源，将使用库中的示例图像：
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is helpful for rapid testing with the `predict()` method.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这对于使用 `predict()` 方法进行快速测试非常有帮助。
- en: For additional information about Segmentation Models, visit the Segment Task
    page. To learn more about `predict()` method, see Predict Mode section of the
    Documentation.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如需了解有关分割模型的更多信息，请访问分割任务页面。要了解更多关于 `predict()` 方法的信息，请参阅文档中的预测模式部分。
- en: '* * *'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: Now iterate over the results and the contours. For workflows that want to save
    an image to file, the source image `base-name` and the detection `class-label`
    are retrieved for later use (optional).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在迭代结果和轮廓。对于希望将图像保存到文件的工作流程，会提取源图像 `base-name` 和检测到的 `class-label` 以供后续使用（可选）。
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To learn more about working with detection results, see Boxes Section for Predict
    Mode.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于处理检测结果的信息，请参阅预测模式中的框部分。
- en: To learn more about `predict()` results see Working with Results for Predict
    Mode<details class="info"><summary>For-Loop</summary>
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于 `predict()` 结果的信息，请参阅预测模式下的结果处理部分<details class="info"><summary>For-Loop</summary>
- en: A single image will only iterate the first loop once. A single image with only
    a single detection will iterate each loop *only* once.</details>
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单个图像只会在第一个循环中迭代一次。仅包含单个检测的单个图像将在每个循环中仅迭代一次。</details>
- en: '* * *'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: Start with generating a binary mask from the source image and then draw a filled
    contour onto the mask. This will allow the object to be isolated from the other
    parts of the image. An example from `bus.jpg` for one of the detected `person`
    class objects is shown on the right.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从源图像生成二进制掩码，然后在掩码上绘制填充轮廓。这将使对象从图像的其他部分中被隔离出来。右侧显示了一个来自 `bus.jpg` 的示例，用于一个检测到的
    `person` 类对象。
- en: '![Binary Mask Image](img/cd674d9ab21dae76040bce159e0ed0e5.png)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![二进制掩码图像](img/cd674d9ab21dae76040bce159e0ed0e5.png)'
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more info on `c.masks.xy` see Masks Section from Predict Mode.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解有关 `c.masks.xy` 的更多信息，请参阅预测模式中的掩码部分。
- en: Here the values are cast into `np.int32` for compatibility with `drawContours()`
    function from OpenCV.
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里将值转换为 `np.int32`，以便与 OpenCV 的 `drawContours()` 函数兼容。
- en: The OpenCV `drawContours()` function expects contours to have a shape of `[N,
    1, 2]` expand section below for more details.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenCV 的 `drawContours()` 函数期望轮廓具有 `[N, 1, 2]` 的形状，请展开下面的部分以了解更多细节。
- en: <details><summary>Expand to understand what is happening when defining the `contour`
    variable.</summary>
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details><summary>展开以了解定义 `contour` 变量时发生的情况。</summary>
- en: '`c.masks.xy` :: Provides the coordinates of the mask contour points in the
    format `(x, y)`. For more details, refer to the Masks Section from Predict Mode.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c.masks.xy` :: 提供掩码轮廓点的坐标，格式为 `(x, y)`。更多细节，请参阅预测模式中的掩码部分。'
- en: '`.pop()` :: As `masks.xy` is a list containing a single element, this element
    is extracted using the `pop()` method.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pop()` :: 由于 `masks.xy` 是一个包含单个元素的列表，因此使用 `pop()` 方法提取此元素。'
- en: '`.astype(np.int32)` :: Using `masks.xy` will return with a data type of `float32`,
    but this won''t be compatible with the OpenCV `drawContours()` function, so this
    will change the data type to `int32` for compatibility.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.astype(np.int32)` :: 使用 `masks.xy` 将返回 `float32` 数据类型，但这与 OpenCV 的 `drawContours()`
    函数不兼容，因此这将数据类型更改为 `int32` 以确保兼容性。'
- en: '`.reshape(-1, 1, 2)` :: Reformats the data into the required shape of `[N,
    1, 2]` where `N` is the number of contour points, with each point represented
    by a single entry `1`, and the entry is composed of `2` values. The `-1` denotes
    that the number of values along this dimension is flexible.</details> <details><summary>Expand
    for an explanation of the `drawContours()` configuration.</summary>'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.reshape(-1, 1, 2)` :: 将数据重新格式化为所需的 `[N, 1, 2]` 形状，其中 `N` 是轮廓点的数量，每个点由单个条目
    `1` 表示，该条目由 `2` 个值组成。`-1` 表示此维度上的值数量是灵活的。</details> <details><summary>展开以查看 `drawContours()`
    配置的解释。</summary>'
- en: Encapsulating the `contour` variable within square brackets, `[contour]`, was
    found to effectively generate the desired contour mask during testing.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `contour` 变量封装在方括号 `[contour]` 内，在测试中有效生成所需的轮廓掩模。
- en: The value `-1` specified for the `drawContours()` parameter instructs the function
    to draw all contours present in the image.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `drawContours()` 参数，指定的值 `-1` 指示函数绘制图像中存在的所有轮廓。
- en: The `tuple` `(255, 255, 255)` represents the color white, which is the desired
    color for drawing the contour in this binary mask.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tuple` `(255, 255, 255)` 表示颜色白色，这是在此二进制掩模中绘制轮廓所需的颜色。'
- en: The addition of `cv2.FILLED` will color all pixels enclosed by the contour boundary
    the same, in this case, all enclosed pixels will be white.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `cv2.FILLED` 将使得所有由轮廓边界包围的像素颜色相同，本例中，所有被包围的像素将会是白色。
- en: See [OpenCV Documentation on `drawContours()`](https://docs.opencv.org/4.8.0/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc)
    for more information.</details>
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅 [OpenCV `drawContours()` 文档](https://docs.opencv.org/4.8.0/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc)。</details>
- en: '* * *'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: Next there are 2 options for how to move forward with the image from this point
    and a subsequent option for each.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来有两种选项可以继续处理此图像，每种选项后面都有一个后续选项。
- en: Object Isolation Options
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象隔离选项
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <details class="question"><summary>How does this work?</summary>
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="question"><summary>这是如何工作的？</summary>
- en: First, the binary mask is first converted from a single-channel image to a three-channel
    image. This conversion is necessary for the subsequent step where the mask and
    the original image are combined. Both images must have the same number of channels
    to be compatible with the blending operation.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，将二进制掩模从单通道图像转换为三通道图像。这种转换对后续步骤至关重要，其中掩模和原始图像结合。两幅图像必须具有相同的通道数，以兼容混合操作。
- en: The original image and the three-channel binary mask are merged using the OpenCV
    function `bitwise_and()`. This operation retains only pixel values that are greater
    than zero `(> 0)` from both images. Since the mask pixels are greater than zero
    `(> 0)` only within the contour region, the pixels remaining from the original
    image are those that overlap with the contour.</details>
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenCV 函数 `bitwise_and()` 合并原始图像和三通道二进制掩模。此操作仅保留两幅图像中大于零的像素值。由于掩模像素仅在轮廓区域内大于零，因此从原始图像中保留的像素是与轮廓重叠的像素。</details>
- en: 'Isolate with Black Pixels: Sub-options'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用黑色像素进行隔离：子选项
- en: <details class="info"><summary>Full-size Image</summary>
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="info"><summary>全尺寸图像</summary>
- en: There are no additional steps required if keeping full size image.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果保留全尺寸图像，则无需任何额外步骤。
- en: '![Example Full size Isolated Object Image Black Background](img/d073effde74bca9c724b3b7736223dc6.png)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![示例全尺寸隔离对象图像黑色背景](img/d073effde74bca9c724b3b7736223dc6.png)'
- en: Example full-size output</details> <details class="info"><summary>Cropped object
    Image</summary>
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例全尺寸输出</details> <details class="info"><summary>裁剪的对象图像</summary>
- en: Additional steps required to crop image to only include object region.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要进一步裁剪图像以仅包括对象区域。
- en: '![Example Crop Isolated Object Image Black Background](img/037903d450d625af4d096d02c4102e2d.png)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![示例裁剪隔离对象图像黑色背景](img/037903d450d625af4d096d02c4102e2d.png)'
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For more information on bounding box results, see Boxes Section from Predict
    Mode
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有关边界框结果的更多信息，请参见预测模式中的框部分。
- en: <details class="question"><summary>What does this code do?</summary>
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="question"><summary>此代码的作用是什么？</summary>
- en: The `c.boxes.xyxy.cpu().numpy()` call retrieves the bounding boxes as a NumPy
    array in the `xyxy` format, where `xmin`, `ymin`, `xmax`, and `ymax` represent
    the coordinates of the bounding box rectangle. See Boxes Section from Predict
    Mode for more details.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c.boxes.xyxy.cpu().numpy()` 调用以 `xyxy` 格式作为 NumPy 数组检索边界框，其中 `xmin`、`ymin`、`xmax`
    和 `ymax` 表示边界框矩形的坐标。有关更多详细信息，请参见预测模式中的框部分。'
- en: The `squeeze()` operation removes any unnecessary dimensions from the NumPy
    array, ensuring it has the expected shape.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`squeeze()`操作从NumPy数组中移除任何不必要的维度，确保其具有预期的形状。'
- en: Converting the coordinate values using `.astype(np.int32)` changes the box coordinates
    data type from `float32` to `int32`, making them compatible for image cropping
    using index slices.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.astype(np.int32)`转换坐标值会将框坐标数据类型从`float32`更改为`int32`，使其适用于使用索引切片进行图像裁剪。
- en: Finally, the bounding box region is cropped from the image using index slicing.
    The bounds are defined by the `[ymin:ymax, xmin:xmax]` coordinates of the detection
    bounding box.</details></details>
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用索引切片从图像中裁剪边界框区域。边界由检测边界框的`[ymin:ymax, xmin:xmax]`坐标定义。</details></details>
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <details class="question"><summary>How does this work?</summary>
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="question"><summary>这是如何工作的？</summary>
- en: Using the NumPy `dstack()` function (array stacking along depth-axis) in conjunction
    with the binary mask generated, will create an image with four channels. This
    allows for all pixels outside of the object contour to be transparent when saving
    as a `PNG` file.</details>
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NumPy `dstack()`函数（沿深度轴堆叠数组）与生成的二进制掩码一起，将创建一个具有四个通道的图像。在保存为`PNG`文件时，这允许对象轮廓外的所有像素都是透明的。</details>
- en: 'Isolate with Transparent Pixels: Sub-options'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用透明像素隔离：子选项
- en: <details class="info"><summary>Full-size Image</summary>
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="info"><summary>全尺寸图像</summary>
- en: There are no additional steps required if keeping full size image.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果保留完整大小的图像，则不需要任何额外步骤。
- en: '![Example Full size Isolated Object Image No Background](img/db750014c472558ae7e4d0e0ef64b81a.png)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![示例全尺寸孤立对象图像无背景](img/db750014c472558ae7e4d0e0ef64b81a.png)'
- en: Example full-size output + transparent background</details> <details class="info"><summary>Cropped
    object Image</summary>
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例全尺寸输出 + 透明背景</details> <details class="info"><summary>裁剪对象图像</summary>
- en: Additional steps required to crop image to only include object region.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要额外步骤来裁剪图像，仅包括对象区域。
- en: '![Example Crop Isolated Object Image No Background](img/c69db48d3eabebdbe86fd35307c762f8.png)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![示例裁剪孤立对象图像无背景](img/c69db48d3eabebdbe86fd35307c762f8.png)'
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For more information on bounding box results, see Boxes Section from Predict
    Mode
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要了解边界框结果的更多信息，请参见预测模式下的框部分
- en: <details class="question"><summary>What does this code do?</summary>
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details class="question"><summary>这段代码做什么？</summary>
- en: When using `c.boxes.xyxy.cpu().numpy()`, the bounding boxes are returned as
    a NumPy array, using the `xyxy` box coordinates format, which correspond to the
    points `xmin, ymin, xmax, ymax` for the bounding box (rectangle), see Boxes Section
    from Predict Mode for more information.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`c.boxes.xyxy.cpu().numpy()`时，边界框将作为NumPy数组返回，使用`xyxy`框坐标格式，这对应于边界框（矩形）的`xmin,
    ymin, xmax, ymax`点，请参见预测模式的框部分获取更多信息。
- en: Adding `squeeze()` ensures that any extraneous dimensions are removed from the
    NumPy array.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`squeeze()`确保从NumPy数组中移除任何多余的维度。
- en: Converting the coordinate values using `.astype(np.int32)` changes the box coordinates
    data type from `float32` to `int32` which will be compatible when cropping the
    image using index slices.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.astype(np.int32)`转换坐标值会将框坐标数据类型从`float32`更改为`int32`，在使用索引切片裁剪图像时会兼容。
- en: Finally the image region for the bounding box is cropped using index slicing,
    where the bounds are set using the `[ymin:ymax, xmin:xmax]` coordinates of the
    detection bounding box.</details></details> <details class="question"><summary>What
    if I want the cropped object **including** the background?</summary>
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用索引切片裁剪边界框的图像区域，其中边界由检测边界框的`[ymin:ymax, xmin:xmax]`坐标设置。</details></details>
    <details class="question"><summary>如果我想要包括背景在内的裁剪对象，该怎么办？</summary>
- en: This is a built in feature for the Ultralytics library. See the `save_crop`
    argument for Predict Mode Inference Arguments for details.</details>
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是Ultralytics库的内置功能。有关详细信息，请参阅预测模式推理参数中的`save_crop`参数。</details>
- en: '* * *'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: What to do next is entirely left to you as the developer. A basic example of
    one possible next step (saving the image to file for future use) is shown.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的操作完全取决于您作为开发人员的选择。一个可能的下一步基本示例（将图像保存为文件以备将来使用）已显示。
- en: '**NOTE:** this step is optional and can be skipped if not required for your
    specific use case.<details class="example"><summary>Example Final Step</summary>'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意：** 如果对您的具体用例不需要，则可以选择跳过此步骤。<details class="example"><summary>最终示例步骤</summary>'
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, the `img_name` is the base-name of the source image file, `label`
    is the detected class-name, and `ci` is the index of the object detection (in
    case of multiple instances with the same class name).</details>
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个示例中，`img_name` 是源图像文件的基本名称，`label` 是检测到的类名，`ci` 是对象检测的索引（如果有多个具有相同类名的实例）。</details>
- en: Full Example code
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整示例代码
- en: Here, all steps from the previous section are combined into a single block of
    code. For repeated use, it would be optimal to define a function to do some or
    all commands contained in the `for`-loops, but that is an exercise left to the
    reader.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将前一节的所有步骤合并为一个代码块。对于重复使用，最好定义一个函数来执行`for`循环中的某些或所有命令，但这是留给读者的练习。
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The line populating `contour` is combined into a single line here, where it
    was split to multiple above.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此处将填充 `contour` 的行合并为单行，而不是像上面那样拆分为多行。
- en: What goes here is up to you!
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的内容由您决定！
- en: See Predict Mode for additional information.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有关附加信息，请参阅 Predict Mode。
- en: See Segment Task for more information.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参见 Segment Task 获取更多信息。
- en: Learn more about Working with Results
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细了解与结果一起工作
- en: Learn more about Segmentation Mask Results
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细了解分割掩模结果
- en: FAQ
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: How do I isolate objects using Ultralytics YOLOv8 for segmentation tasks?
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 Ultralytics YOLOv8 对象分割任务中孤立对象？
- en: 'To isolate objects using Ultralytics YOLOv8, follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ultralytics YOLOv8 对象分割任务中的孤立对象，请按照以下步骤进行：
- en: '**Load the model and run inference:**'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加载模型并运行推理：**'
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Generate a binary mask and draw contours:**'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成二进制掩模并绘制轮廓：**'
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Isolate the object using the binary mask:**'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用二进制掩模孤立对象：**'
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Refer to the guide on Predict Mode and the Segment Task for more information.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 Predict Mode 和 Segment Task 的指南获取更多信息。
- en: What options are available for saving the isolated objects after segmentation?
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分割任务中提供的保存孤立对象的选项有哪些？
- en: 'Ultralytics YOLOv8 offers two main options for saving isolated objects:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8 提供了两个主要选项来保存孤立对象：
- en: '**With a Black Background:**'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有黑色背景：**'
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**With a Transparent Background:**'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有透明背景：**'
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For further details, visit the Predict Mode section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解详细信息，请访问 Predict Mode 部分。
- en: How can I crop isolated objects to their bounding boxes using Ultralytics YOLOv8?
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 Ultralytics YOLOv8 对象分割任务中的边界框裁剪孤立对象？
- en: 'To crop isolated objects to their bounding boxes:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要裁剪孤立对象至其边界框：
- en: '**Retrieve bounding box coordinates:**'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检索边界框坐标：**'
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Crop the isolated image:**'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**裁剪孤立图像：**'
- en: '[PRE16]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Learn more about bounding box results in the Predict Mode documentation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解 Predict Mode 文档中的边界框结果。
- en: Why should I use Ultralytics YOLOv8 for object isolation in segmentation tasks?
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么应该在对象分割任务中使用 Ultralytics YOLOv8 进行对象孤立？
- en: 'Ultralytics YOLOv8 provides:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8 提供：
- en: '**High-speed** real-time object detection and segmentation.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高速** 实时对象检测和分割。'
- en: '**Accurate bounding box and mask generation** for precise object isolation.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准确的边界框和掩模生成**，用于精确的对象孤立。'
- en: '**Comprehensive documentation** and easy-to-use API for efficient development.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全面的文档** 和易于使用的 API，用于高效开发。'
- en: Explore the benefits of using YOLO in the Segment Task documentation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 探索在 Segment Task 文档中使用 YOLO 的好处。
- en: Can I save isolated objects including the background using Ultralytics YOLOv8?
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以使用 Ultralytics YOLOv8 保存包括背景在内的孤立对象吗？
- en: 'Yes, this is a built-in feature in Ultralytics YOLOv8\. Use the `save_crop`
    argument in the `predict()` method. For example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是 Ultralytics YOLOv8 中的内置功能。在 `predict()` 方法中使用 `save_crop` 参数。例如：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Read more about the `save_crop` argument in the Predict Mode Inference Arguments
    section.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 Predict Mode 推理参数部分中关于 `save_crop` 参数的更多信息。
