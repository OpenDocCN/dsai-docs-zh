["```py\n    In [1]: df = pd.DataFrame({'jim':[0, 0, 1, 1],\n     ...:                   'joe':['x', 'x', 'z', 'y'],\n     ...:                   'jolie':np.random.rand(4)}).set_index(['jim', 'joe'])\n     ...:\n\n    In [2]: df\n    Out[2]:\n     jolie\n    jim joe\n    0   x    0.126970\n     x    0.966718\n    1   z    0.260476\n     y    0.897237\n\n    [4 rows x 1 columns]\n\n    In [3]: df.index.lexsort_depth\n    Out[3]: 1\n\n    # in prior versions this would raise a KeyError\n    # will now show a PerformanceWarning\n    In [4]: df.loc[(1, 'z')]\n    Out[4]:\n     jolie\n    jim joe\n    1   z    0.260476\n\n    [1 rows x 1 columns]\n\n    # lexically sorting\n    In [5]: df2 = df.sort_index()\n\n    In [6]: df2\n    Out[6]:\n     jolie\n    jim joe\n    0   x    0.126970\n     x    0.966718\n    1   y    0.897237\n     z    0.260476\n\n    [4 rows x 1 columns]\n\n    In [7]: df2.index.lexsort_depth\n    Out[7]: 2\n\n    In [8]: df2.loc[(1,'z')]\n    Out[8]:\n     jolie\n    jim joe\n    1   z    0.260476\n\n    [1 rows x 1 columns] \n    ```", "```py\n    In [3]: cat = pd.Categorical(['a', 'b', 'a'], categories=['a', 'b', 'c'])\n\n    In [4]: cat\n    Out[4]:\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    In [5]: cat.unique()\n    Out[5]: array(['a', 'b', 'c'], dtype=object) \n    ```", "```py\n    In [1]: cat = pd.Categorical(['a', 'b', 'a'], categories=['a', 'b', 'c'])\n\n    In [2]: cat.unique()\n    Out[2]: \n    ['a', 'b']\n    Categories (3, object): ['a', 'b', 'c'] \n    ```", "```py\n    In [3]: data = pd.DataFrame({'x': [1, 2, 3]})\n\n    In [4]: data.y = 2\n\n    In [5]: data['y'] = [2, 4, 6]\n\n    In [6]: data\n    Out[6]: \n     x  y\n    0  1  2\n    1  2  4\n    2  3  6\n\n    [3 rows x 2 columns]\n\n    # this assignment was inconsistent\n    In [7]: data.y = 5 \n    ```", "```py\n    In [6]: data.y\n    Out[6]: 2\n\n    In [7]: data['y'].values\n    Out[7]: array([5, 5, 5]) \n    ```", "```py\n    In [8]: data.y\n    Out[8]: 5\n\n    In [9]: data['y'].values\n    Out[9]: array([2, 4, 6]) \n    ```", "```py\n    In [1]: s = pd.Series(np.arange(3), ['a', 'b', 'c'])\n    Out[1]:\n    a    0\n    b    1\n    c    2\n    dtype: int64\n\n    In [2]: s.loc['c':'a':-1]\n    Out[2]:\n    c    2\n    dtype: int64 \n    ```", "```py\n    In [10]: s = pd.Series(np.arange(3), ['a', 'b', 'c'])\n\n    In [11]: s.loc['c':'a':-1]\n    Out[11]: \n    c    2\n    b    1\n    a    0\n    Length: 3, dtype: int64 \n    ```", "```py\n    from sqlalchemy.types import String\n    data.to_sql('data_dtype', engine, dtype={'Col_1': String})  # noqa F821 \n    ```", "```py\n    >>> s = pd.Series([False, True, False], index=[0, 0, 1])\n    >>> s.any(level=0)\n    0     True\n    1    False\n    dtype: bool \n    ```", "```py\n    >>> p = pd.Panel(np.random.rand(2, 5, 4) > 0.1)\n    >>> p.all()\n     0      1      2     3\n    0   True   True   True  True\n    1   True  False   True  True\n    2   True   True   True  True\n    3  False   True  False  True\n    4   True   True   True  True \n    ```", "```py\n    In [1]: df = pd.DataFrame({'jim':[0, 0, 1, 1],\n     ...:                   'joe':['x', 'x', 'z', 'y'],\n     ...:                   'jolie':np.random.rand(4)}).set_index(['jim', 'joe'])\n     ...:\n\n    In [2]: df\n    Out[2]:\n     jolie\n    jim joe\n    0   x    0.126970\n     x    0.966718\n    1   z    0.260476\n     y    0.897237\n\n    [4 rows x 1 columns]\n\n    In [3]: df.index.lexsort_depth\n    Out[3]: 1\n\n    # in prior versions this would raise a KeyError\n    # will now show a PerformanceWarning\n    In [4]: df.loc[(1, 'z')]\n    Out[4]:\n     jolie\n    jim joe\n    1   z    0.260476\n\n    [1 rows x 1 columns]\n\n    # lexically sorting\n    In [5]: df2 = df.sort_index()\n\n    In [6]: df2\n    Out[6]:\n     jolie\n    jim joe\n    0   x    0.126970\n     x    0.966718\n    1   y    0.897237\n     z    0.260476\n\n    [4 rows x 1 columns]\n\n    In [7]: df2.index.lexsort_depth\n    Out[7]: 2\n\n    In [8]: df2.loc[(1,'z')]\n    Out[8]:\n     jolie\n    jim joe\n    1   z    0.260476\n\n    [1 rows x 1 columns] \n    ```", "```py\n    In [3]: cat = pd.Categorical(['a', 'b', 'a'], categories=['a', 'b', 'c'])\n\n    In [4]: cat\n    Out[4]:\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    In [5]: cat.unique()\n    Out[5]: array(['a', 'b', 'c'], dtype=object) \n    ```", "```py\n    In [1]: cat = pd.Categorical(['a', 'b', 'a'], categories=['a', 'b', 'c'])\n\n    In [2]: cat.unique()\n    Out[2]: \n    ['a', 'b']\n    Categories (3, object): ['a', 'b', 'c'] \n    ```", "```py\n    In [3]: data = pd.DataFrame({'x': [1, 2, 3]})\n\n    In [4]: data.y = 2\n\n    In [5]: data['y'] = [2, 4, 6]\n\n    In [6]: data\n    Out[6]: \n     x  y\n    0  1  2\n    1  2  4\n    2  3  6\n\n    [3 rows x 2 columns]\n\n    # this assignment was inconsistent\n    In [7]: data.y = 5 \n    ```", "```py\n    In [6]: data.y\n    Out[6]: 2\n\n    In [7]: data['y'].values\n    Out[7]: array([5, 5, 5]) \n    ```", "```py\n    In [8]: data.y\n    Out[8]: 5\n\n    In [9]: data['y'].values\n    Out[9]: array([2, 4, 6]) \n    ```", "```py\n    In [1]: s = pd.Series(np.arange(3), ['a', 'b', 'c'])\n    Out[1]:\n    a    0\n    b    1\n    c    2\n    dtype: int64\n\n    In [2]: s.loc['c':'a':-1]\n    Out[2]:\n    c    2\n    dtype: int64 \n    ```", "```py\n    In [10]: s = pd.Series(np.arange(3), ['a', 'b', 'c'])\n\n    In [11]: s.loc['c':'a':-1]\n    Out[11]: \n    c    2\n    b    1\n    a    0\n    Length: 3, dtype: int64 \n    ```", "```py\n    from sqlalchemy.types import String\n    data.to_sql('data_dtype', engine, dtype={'Col_1': String})  # noqa F821 \n    ```", "```py\n    >>> s = pd.Series([False, True, False], index=[0, 0, 1])\n    >>> s.any(level=0)\n    0     True\n    1    False\n    dtype: bool \n    ```", "```py\n    >>> p = pd.Panel(np.random.rand(2, 5, 4) > 0.1)\n    >>> p.all()\n     0      1      2     3\n    0   True   True   True  True\n    1   True  False   True  True\n    2   True   True   True  True\n    3  False   True  False  True\n    4   True   True   True  True \n    ```"]