- en: Docker Quickstart Guide for Ultralytics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ultralytics的Docker快速入门指南
- en: 原文：[`docs.ultralytics.com/guides/docker-quickstart/`](https://docs.ultralytics.com/guides/docker-quickstart/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/guides/docker-quickstart/`](https://docs.ultralytics.com/guides/docker-quickstart/)
- en: '![Ultralytics Docker Package Visual](img/59cab89e8385d76430661f6e35165197.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Ultralytics Docker Package Visual](img/59cab89e8385d76430661f6e35165197.png)'
- en: This guide serves as a comprehensive introduction to setting up a Docker environment
    for your Ultralytics projects. [Docker](https://docker.com/) is a platform for
    developing, shipping, and running applications in containers. It is particularly
    beneficial for ensuring that the software will always run the same, regardless
    of where it's deployed. For more details, visit the Ultralytics Docker repository
    on [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南旨在全面介绍为您的Ultralytics项目设置Docker环境。[Docker](https://docker.com/) 是一个用于开发、交付和运行容器化应用程序的平台。它特别有助于确保软件在部署的任何地方始终运行相同。有关更多详细信息，请访问[Docker
    Hub上的Ultralytics Docker仓库](https://hub.docker.com/r/ultralytics/ultralytics)。
- en: '![Docker Image Version](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker
    Pulls](https://hub.docker.com/r/ultralytics/ultralytics)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Docker镜像版本](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker拉取次数](https://hub.docker.com/r/ultralytics/ultralytics)'
- en: What You Will Learn
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您将学到什么
- en: Setting up Docker with NVIDIA support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带NVIDIA支持的Docker设置
- en: Installing Ultralytics Docker images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Ultralytics Docker映像
- en: Running Ultralytics in a Docker container with CPU or GPU support
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在支持CPU或GPU的Docker容器中运行Ultralytics
- en: Using a Display Server with Docker to Show Ultralytics Detection Results
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用显示服务器在Docker中显示Ultralytics检测结果
- en: Mounting local directories into the container
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将本地目录挂载到容器中
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Prerequisites
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: Make sure Docker is installed on your system. If not, you can download and install
    it from [Docker's website](https://www.docker.com/products/docker-desktop).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的系统已安装Docker。如果没有，请从[Docker的网站](https://www.docker.com/products/docker-desktop)下载并安装它。
- en: Ensure that your system has an NVIDIA GPU and NVIDIA drivers are installed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的系统具有NVIDIA GPU并安装了NVIDIA驱动程序。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Setting up Docker with NVIDIA Support
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用带NVIDIA支持的Docker设置
- en: 'First, verify that the NVIDIA drivers are properly installed by running:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过运行以下命令验证NVIDIA驱动程序是否正确安装：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing NVIDIA Docker Runtime
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装NVIDIA Docker运行时
- en: 'Now, let''s install the NVIDIA Docker runtime to enable GPU support in Docker
    containers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装NVIDIA Docker运行时，以在Docker容器中启用GPU支持：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Verify NVIDIA Runtime with Docker
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Docker验证NVIDIA运行时
- en: 'Run `docker info | grep -i runtime` to ensure that `nvidia` appears in the
    list of runtimes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `docker info | grep -i runtime` 来确保 `nvidia` 出现在运行时列表中：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Installing Ultralytics Docker Images
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Ultralytics Docker映像
- en: 'Ultralytics offers several Docker images optimized for various platforms and
    use-cases:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics提供了多个针对各种平台和用例优化的Docker映像：
- en: '**Dockerfile:** GPU image, ideal for training.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile:** GPU映像，用于训练。'
- en: '**Dockerfile-arm64:** For ARM64 architecture, suitable for devices like Raspberry
    Pi.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-arm64:** 适用于ARM64架构，适合树莓派等设备。'
- en: '**Dockerfile-cpu:** CPU-only version for inference and non-GPU environments.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-cpu:** 仅用于推断和非GPU环境。'
- en: '**Dockerfile-jetson:** Optimized for NVIDIA Jetson devices.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-jetson:** 专为NVIDIA Jetson设备优化。'
- en: '**Dockerfile-python:** Minimal Python environment for lightweight applications.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-python:** 适用于轻量级应用程序的最小Python环境。'
- en: '**Dockerfile-conda:** Includes [Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)
    and Ultralytics package installed via Conda.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-conda:** 包括[Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)和通过Conda安装的Ultralytics包。'
- en: 'To pull the latest image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要拉取最新的映像：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Running Ultralytics in Docker Container
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Docker容器中运行Ultralytics
- en: 'Here''s how to execute the Ultralytics Docker container:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何执行Ultralytics Docker容器的方法：
- en: Using only the CPU
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅使用CPU
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using GPUs
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用GPU
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-it` flag assigns a pseudo-TTY and keeps stdin open, allowing you to interact
    with the container. The `--ipc=host` flag enables sharing of host's IPC namespace,
    essential for sharing memory between processes. The `--gpus` flag allows the container
    to access the host's GPUs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`-it`标志分配一个伪TTY并保持stdin打开，允许您与容器交互。`--ipc=host`标志启用共享主机的IPC命名空间，对于进程间共享内存是必需的。`--gpus`标志允许容器访问主机的GPU。'
- en: Running Ultralytics in Docker Container
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Docker容器中运行Ultralytics
- en: 'Here''s how to execute the Ultralytics Docker container:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何执行Ultralytics Docker容器的方法：
- en: Using only the CPU
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅使用CPU
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using GPUs
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用GPU
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-it` flag assigns a pseudo-TTY and keeps stdin open, allowing you to interact
    with the container. The `--ipc=host` flag enables sharing of host's IPC namespace,
    essential for sharing memory between processes. The `--gpus` flag allows the container
    to access the host's GPUs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`-it` 标志分配一个伪 TTY 并保持 stdin 打开，允许你与容器交互。`--ipc=host` 标志启用主机 IPC 命名空间的共享，这对于进程之间的内存共享至关重要。`--gpus`
    标志允许容器访问主机的 GPU。'
- en: Note on File Accessibility
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件可访问性说明
- en: 'To work with files on your local machine within the container, you can use
    Docker volumes:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在容器内处理本地计算机上的文件，你可以使用 Docker 卷：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Replace `/path/on/host` with the directory path on your local machine and `/path/in/container`
    with the desired path inside the Docker container.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `/path/on/host` 替换为你本地计算机上的目录路径，将 `/path/in/container` 替换为 Docker 容器内的所需路径。
- en: Run graphical user interface (GUI) applications in a Docker Container
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行图形用户界面（GUI）应用程序
- en: Highly Experimental - User Assumes All Risk
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 高度实验性 - 用户承担所有风险
- en: The following instructions are experimental. Sharing a X11 socket with a Docker
    container poses potential security risks. Therefore, it's recommended to test
    this solution only in a controlled environment. For more information, refer to
    these resources on how to use `xhost`^([(1)](http://users.stat.umn.edu/~geyer/secure.html)[(2)](https://linux.die.net/man/1/xhost)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明是实验性的。与 Docker 容器共享 X11 套接字存在潜在的安全风险。因此，建议仅在受控环境中测试此解决方案。有关如何使用 `xhost`
    的更多信息，请参考这些资源^([(1)](http://users.stat.umn.edu/~geyer/secure.html)[(2)](https://linux.die.net/man/1/xhost))。
- en: 'Docker is primarily used to containerize background applications and CLI programs,
    but it can also run graphical programs. In the Linux world, two main graphic servers
    handle graphical display: [X11](https://www.x.org/wiki/) (also known as the X
    Window System) and [Wayland](https://wayland.freedesktop.org/). Before starting,
    it''s essential to determine which graphics server you are currently using. Run
    this command to find out:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 主要用于将后台应用程序和 CLI 程序容器化，但它也可以运行图形程序。在 Linux 世界中，有两个主要的图形服务器处理图形显示：[X11](https://www.x.org/wiki/)（也称为
    X 窗口系统）和 [Wayland](https://wayland.freedesktop.org/)。在开始之前，确定你当前使用的图形服务器是至关重要的。运行此命令以找出：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Setup and configuration of an X11 or Wayland display server is outside the scope
    of this guide. If the above command returns nothing, then you'll need to start
    by getting either working for your system before continuing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: X11 或 Wayland 显示服务器的设置和配置超出了本指南的范围。如果上述命令没有返回任何内容，那么你需要先确保你的系统上有一个可用的服务器，然后再继续。
- en: Running a Docker Container with a GUI
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行带 GUI 的 Docker 容器
- en: Example
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: <details class="info"><summary>Use GPUs</summary>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <details class="info"><summary>使用 GPU</summary>
- en: '[PRE10]</details>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]</details>'
- en: 'If you''re using X11, you can run the following command to allow the Docker
    container to access the X11 socket:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 X11，你可以运行以下命令以允许 Docker 容器访问 X11 套接字：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command sets the `DISPLAY` environment variable to the host's display,
    mounts the X11 socket, and maps the `.Xauthority` file to the container. The `xhost
    +local:docker` command allows the Docker container to access the X11 server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将 `DISPLAY` 环境变量设置为主机的显示，挂载 X11 套接字，并将 `.Xauthority` 文件映射到容器。`xhost +local:docker`
    命令允许 Docker 容器访问 X11 服务器。
- en: 'For Wayland, use the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Wayland，使用以下命令：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command sets the `DISPLAY` environment variable to the host's display,
    mounts the Wayland socket, and allows the Docker container to access the Wayland
    server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将 `DISPLAY` 环境变量设置为主机的显示，挂载 Wayland 套接字，并允许 Docker 容器访问 Wayland 服务器。
- en: Using Docker with a GUI
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用带 GUI 的 Docker
- en: 'Now you can display graphical applications inside your Docker container. For
    example, you can run the following CLI command to visualize the predictions from
    a YOLOv8 model:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在 Docker 容器内显示图形应用程序。例如，你可以运行以下 CLI 命令来可视化 YOLOv8 模型的预测：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <details class="info"><summary>Testing</summary>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <details class="info"><summary>测试</summary>
- en: A simple way to validate that the Docker group has access to the X11 server
    is to run a container with a GUI program like [`xclock`](https://www.x.org/archive/X11R6.8.1/doc/xclock.1.html)
    or [`xeyes`](https://www.x.org/releases/X11R7.5/doc/man/man1/xeyes.1.html). Alternatively,
    you can also install these programs in the Ultralytics Docker container to test
    the access to the X11 server of your GNU-Linux display server. If you run into
    any problems, consider setting the environment variable `-e QT_DEBUG_PLUGINS=1`.
    Setting this environment variable enables the output of debugging information,
    aiding in the troubleshooting process.</details>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证 Docker 组是否可以访问 X11 服务器的简单方法是运行包含 GUI 程序如[`xclock`](https://www.x.org/archive/X11R6.8.1/doc/xclock.1.html)或[`xeyes`](https://www.x.org/releases/X11R7.5/doc/man/man1/xeyes.1.html)的容器。或者，您也可以在
    Ultralytics Docker 容器中安装这些程序，以测试您的 GNU-Linux 显示服务器对 X11 服务器的访问权限。如果遇到任何问题，请考虑设置环境变量`-e
    QT_DEBUG_PLUGINS=1`。设置此环境变量会启用调试信息输出，有助于故障排除过程。</details>
- en: When finished with Docker GUI
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成 Docker GUI 后
- en: Revoke access
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销访问
- en: In both cases, don't forget to revoke access from the Docker group when you're
    done.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种情况下，完成后不要忘记从 Docker 组中撤销访问权限。
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <details class="question"><summary>Want to view image results directly in the
    Terminal?</summary>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <details class="question"><summary>想直接在终端中查看图像结果吗？</summary>
- en: Refer to the following guide on viewing the image results using a terminal</details>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下指南以在终端中查看图像结果</details>
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Congratulations! You're now set up to use Ultralytics with Docker and ready
    to take advantage of its powerful capabilities. For alternate installation methods,
    feel free to explore the Ultralytics quickstart documentation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经设置好了使用 Ultralytics 与 Docker，并准备利用其强大功能。如需备用安装方法，请随时查阅 Ultralytics 快速入门文档。
- en: FAQ
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: How do I set up Ultralytics with Docker?
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何设置 Ultralytics 与 Docker？
- en: 'To set up Ultralytics with Docker, first ensure that Docker is installed on
    your system. If you have an NVIDIA GPU, install the NVIDIA Docker runtime to enable
    GPU support. Then, pull the latest Ultralytics Docker image from Docker Hub using
    the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 中设置 Ultralytics，请确保系统已安装 Docker。如果您有 NVIDIA GPU，请安装 NVIDIA Docker
    运行时以启用 GPU 支持。然后，使用以下命令从 Docker Hub 拉取最新的 Ultralytics Docker 镜像：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For detailed steps, refer to our Docker Quickstart Guide.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细步骤，请参阅我们的 Docker 快速入门指南。
- en: What are the benefits of using Ultralytics Docker images for machine learning
    projects?
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ultralytics Docker 镜像用于机器学习项目有哪些好处？
- en: Using Ultralytics Docker images ensures a consistent environment across different
    machines, replicating the same software and dependencies. This is particularly
    useful for collaborating across teams, running models on various hardware, and
    maintaining reproducibility. For GPU-based training, Ultralytics provides optimized
    Docker images such as `Dockerfile` for general GPU usage and `Dockerfile-jetson`
    for NVIDIA Jetson devices. Explore [Ultralytics Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics)
    for more details.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ultralytics Docker 镜像可确保跨不同机器的一致环境，复制相同的软件和依赖关系。这对于团队协作、在各种硬件上运行模型和保持可重现性特别有用。对于基于
    GPU 的训练，Ultralytics 提供了优化的 Docker 镜像，如用于一般 GPU 使用的 `Dockerfile` 和用于 NVIDIA Jetson
    设备的 `Dockerfile-jetson`。请访问[Ultralytics Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics)了解更多详情。
- en: How can I run Ultralytics YOLO in a Docker container with GPU support?
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在带 GPU 支持的 Docker 容器中运行 Ultralytics YOLO？
- en: 'First, ensure that the NVIDIA Docker runtime is installed and configured. Then,
    use the following command to run Ultralytics YOLO with GPU support:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保安装和配置 NVIDIA Docker 运行时。然后，使用以下命令以 GPU 支持运行 Ultralytics YOLO：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command sets up a Docker container with GPU access. For additional details,
    see the Docker Quickstart Guide.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令设置具有 GPU 访问权限的 Docker 容器。有关更多详细信息，请参阅 Docker 快速入门指南。
- en: How do I visualize YOLO prediction results in a Docker container with a display
    server?
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在 Docker 容器中使用显示服务器可视化 YOLO 预测结果？
- en: 'To visualize YOLO prediction results with a GUI in a Docker container, you
    need to allow Docker to access your display server. For systems running X11, the
    command is:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 容器中使用 GUI 可视化 YOLO 预测结果，您需要允许 Docker 访问您的显示服务器。对于运行 X11 的系统，命令如下：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For systems running Wayland, use:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运行 Wayland 的系统，请使用：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: More information can be found in the Run graphical user interface (GUI) applications
    in a Docker Container section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅在 Docker 容器中运行图形用户界面（GUI）应用程序部分。
- en: Can I mount local directories into the Ultralytics Docker container?
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以将本地目录挂载到 Ultralytics Docker 容器中吗？
- en: 'Yes, you can mount local directories into the Ultralytics Docker container
    using the `-v` flag:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以使用 `-v` 标志将本地目录挂载到 Ultralytics Docker 容器中：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Replace `/path/on/host` with the directory on your local machine and `/path/in/container`
    with the desired path inside the container. This setup allows you to work with
    your local files within the container. For more information, refer to the relevant
    section on mounting local directories.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `/path/on/host` 替换为本地机器上的目录，将 `/path/in/container` 替换为容器内的所需路径。这样设置可以让你在容器内处理本地文件。有关挂载本地目录的更多信息，请参阅相关章节。
