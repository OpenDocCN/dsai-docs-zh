- en: Building from source
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源码编译
- en: 原文：[https://numpy.org/doc/1.26/user/building.html](https://numpy.org/doc/1.26/user/building.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/user/building.html](https://numpy.org/doc/1.26/user/building.html)
- en: Building locally on your machine gives you complete control over build options.
    If you are a MacOS or Linux user familiar with using the command line, you can
    continue with building NumPy locally by following the instructions below.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地计算机上构建可以完全控制构建选项。如果你是一名熟悉使用命令行的 MacOS 或 Linux 用户，则可以继续按照下面的说明构建 NumPy。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to build NumPy for development purposes, please refer to [Setting
    up and using your development environment](../dev/development_environment.html#development-environment)
    for additional information.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要构建用于开发目的的 NumPy，请参阅 [Setting up and using your development environment](../dev/development_environment.html#development-environment)
    获取更多信息。
- en: Prerequisites
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Building NumPy requires the following software installed:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译 NumPy 需要已安装以下软件：
- en: Python 3.9.x or newer
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3.9.x 或更高版本
- en: Please note that the Python development headers also need to be installed, e.g.,
    on Debian/Ubuntu one needs to install both *python3* and *python3-dev*. On Windows
    and macOS this is normally not an issue.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，还需要安装 Python 开发头文件，例如，在 Debian/Ubuntu 上需要同时安装 *python3* 和 *python3-dev*。在
    Windows 和 macOS 上通常不会出现此问题。
- en: Compilers
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器
- en: Much of NumPy is written in C and C++. You will need a C compiler that complies
    with the C99 standard, and a C++ compiler that complies with the C++17 standard.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NumPy 的很大一部分是用 C 和 C++ 编写的。你需要一个符合 C99 标准的 C 编译器，以及一个符合 C++17 标准的 C++ 编译器。
- en: While a FORTRAN 77 compiler is not necessary for building NumPy, it is needed
    to run the `numpy.f2py` tests. These tests are skipped if the compiler is not
    auto-detected.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管构建 NumPy 不需要 FORTRAN 77 编译器，在运行 `numpy.f2py` 测试时需要它。如果未自动检测到编译器，则会跳过这些测试。
- en: Note that NumPy is developed mainly using GNU compilers and tested on MSVC and
    Clang compilers. Compilers from other vendors such as Intel, Absoft, Sun, NAG,
    Compaq, Vast, Portland, Lahey, HP, IBM are only supported in the form of community
    feedback, and may not work out of the box. GCC 6.5 (and later) compilers are recommended.
    On ARM64 (aarch64) GCC 8.x (and later) are recommended.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，NumPy 主要是使用 GNU 编译器进行开发，并在 MSVC 和 Clang 编译器上进行测试。像 Intel、Absoft、Sun、NAG、Compaq、Vast、Portland、Lahey、HP、IBM
    等其他供应商的编译器仅以社区反馈的形式提供支持，并不保证可以直接使用。推荐使用 GCC 6.5（或更高版本）编译器。在 ARM64（aarch64）上推荐使用
    GCC 8.x（或更高版本）。
- en: Linear Algebra libraries
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线性代数库
- en: NumPy does not require any external linear algebra libraries to be installed.
    However, if these are available, NumPy’s setup script can detect them and use
    them for building. A number of different LAPACK library setups can be used, including
    optimized LAPACK libraries such as OpenBLAS or MKL. The choice and location of
    these libraries as well as include paths and other such build options can be specified
    in a `.pc` file, as documented in [BLAS and LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(in SciPy v1.11.2)").
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NumPy 不需要安装任何外部线性代数库。然而，如果这些库可用，NumPy 的设置脚本可以检测到并用于构建。可以使用多种不同的 LAPACK 库设置，包括优化的
    LAPACK 库，如 OpenBLAS 或 MKL。这些库的选择和位置以及包含路径和其他构建选项可以在 `.pc` 文件中指定，如 [BLAS 和 LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(in SciPy v1.11.2)") 中所述。
- en: Cython
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cython
- en: For building NumPy, you’ll need a recent version of Cython.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建 NumPy 需要一个较新版本的 Cython。
- en: The NumPy source code
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy 源代码
- en: Clone the repository following the instructions in [Contributing to NumPy](../dev/index.html).
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照 [Contributing to NumPy](../dev/index.html) 中的说明，克隆仓库。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting on version 1.26, NumPy will adopt Meson as its build system (see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration)
    and [Understanding Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(in SciPy v1.11.2)") for more details.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.26 开始，NumPy 将采用 Meson 作为构建系统（详见 [Status of numpy.distutils and migration
    advice](../reference/distutils_status_migration.html#distutils-status-migration)
    和 [Understanding Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(in SciPy v1.11.2)")）。
- en: Basic installation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本安装
- en: 'To build and install NumPy from a local copy of the source code, run:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要从本地源代码构建和安装 NumPy，请运行：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install all build dependencies and use Meson to compile and install
    the NumPy C-extensions and Python modules. If you need more control of build options
    and commands, see the following sections.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所有构建依赖项，并使用 Meson 编译和安装 NumPy 的 C 扩展和 Python 模块。如果需要对构建选项和命令有更多控制，请参阅以下各节。
- en: 'To perform an in-place build that can be run from the source folder run:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行可以从源文件夹运行的就地构建，请运行：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Note: for build instructions to do development work on NumPy itself, see*
    [Setting up and using your development environment](../dev/development_environment.html#development-environment).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：有关在NumPy本身上进行开发工作的构建说明，请参阅* [设置和使用开发环境](../dev/development_environment.html#development-environment)。'
- en: Advanced building with Meson
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Meson进行高级构建
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Meson支持标准环境变量`CC`，`CXX`和`FC`来选择特定的C、C++和/或Fortran编译器。这些环境变量在[Meson文档中的参考表](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables)中有文档说明。
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，环境变量仅在干净构建时应用，因为它们影响配置阶段（即meson setup）。增量重建不会对环境变量的更改做出反应-您必须运行`git clean
    -xdf`并进行完全重建，或运行`meson setup --reconfigure`。
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更多选项，包括选择编译器、设置自定义编译器标志和控制并行性，请参阅[编译器选择和自定义构建](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(在SciPy v1.11.2)")（来自SciPy文档）和[Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages)。
- en: Testing
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Make sure to test your builds. To ensure everything stays in shape, see if all
    tests pass.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 确保测试你的构建。为了确保一切都正常，查看所有测试是否通过。
- en: 'The test suite requires additional dependencies, which can easily be installed
    with:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件需要额外的依赖项，可以通过以下方式轻松安装：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the full test suite with:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整的测试套件：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试的详细信息，请参阅[测试构建](../dev/development_environment.html#testing-builds)。
- en: '## Accelerated BLAS/LAPACK libraries'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '## 加速BLAS/LAPACK库'
- en: NumPy searches for optimized linear algebra libraries such as BLAS and LAPACK.
    There are specific orders for searching these libraries, as described below and
    in the [meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)
    file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy搜索优化的线性代数库，例如BLAS和LAPACK。搜索这些库有特定的顺序，如下所述和[meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)文件中描述。
- en: Cross compilation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交叉编译
- en: For cross compilation instructions, see [Cross compilation](https://docs.scipy.org/doc/scipy/building/cross_compilation.html
    "(in SciPy v1.11.2)") and the [Meson documentation](meson).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于交叉编译指令，请参阅[交叉编译](https://docs.scipy.org/doc/scipy/building/cross_compilation.html
    "(在SciPy v1.11.2)")和[Meson文档](meson)。
- en: Prerequisites
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Building NumPy requires the following software installed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 构建NumPy需要安装以下软件：
- en: Python 3.9.x or newer
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3.9.x或更新版本
- en: Please note that the Python development headers also need to be installed, e.g.,
    on Debian/Ubuntu one needs to install both *python3* and *python3-dev*. On Windows
    and macOS this is normally not an issue.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，还需要安装Python开发头文件，例如，在Debian/Ubuntu上需要同时安装*python3*和*python3-dev*。在Windows和macOS上，这通常不是问题。
- en: Compilers
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器
- en: Much of NumPy is written in C and C++. You will need a C compiler that complies
    with the C99 standard, and a C++ compiler that complies with the C++17 standard.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NumPy的大部分代码是用C和C++编写的。您需要一个符合C99标准的C编译器，以及一个符合C++17标准的C++编译器。
- en: While a FORTRAN 77 compiler is not necessary for building NumPy, it is needed
    to run the `numpy.f2py` tests. These tests are skipped if the compiler is not
    auto-detected.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然构建NumPy不需要FORTRAN 77编译器，但运行`numpy.f2py`测试需要。如果编译器没有被自动检测到，则这些测试会被跳过。
- en: Note that NumPy is developed mainly using GNU compilers and tested on MSVC and
    Clang compilers. Compilers from other vendors such as Intel, Absoft, Sun, NAG,
    Compaq, Vast, Portland, Lahey, HP, IBM are only supported in the form of community
    feedback, and may not work out of the box. GCC 6.5 (and later) compilers are recommended.
    On ARM64 (aarch64) GCC 8.x (and later) are recommended.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，NumPy 主要是使用 GNU 编译器开发并在 MSVC 和 Clang 编译器上进行测试。来自其他供应商的编译器（如 Intel、Absoft、Sun、NAG、Compaq、Vast、Portland、Lahey、HP、IBM）仅通过社区反馈的形式支持，并且可能无法直接使用。推荐使用
    GCC 6.5（及更高版本）编译器。在 ARM64（aarch64）上，推荐使用 GCC 8.x（及更高版本）。
- en: Linear Algebra libraries
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线性代数库
- en: NumPy does not require any external linear algebra libraries to be installed.
    However, if these are available, NumPy’s setup script can detect them and use
    them for building. A number of different LAPACK library setups can be used, including
    optimized LAPACK libraries such as OpenBLAS or MKL. The choice and location of
    these libraries as well as include paths and other such build options can be specified
    in a `.pc` file, as documented in [BLAS and LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(in SciPy v1.11.2)").
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NumPy 不需要安装任何外部线性代数库。但是，如果这些库可用，NumPy 的设置脚本可以检测到并用于构建。可以使用多种不同的 LAPACK 库设置，包括经过优化的
    LAPACK 库，如 OpenBLAS 或 MKL。这些库的选择和位置以及包含路径等构建选项可以在 `.pc` 文件中指定，如 [BLAS 和 LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(在 SciPy v1.11.2 中)") 中所述。
- en: Cython
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cython
- en: For building NumPy, you’ll need a recent version of Cython.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要构建 NumPy，您需要一个较新版本的 Cython。
- en: The NumPy source code
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy 源代码
- en: Clone the repository following the instructions in [Contributing to NumPy](../dev/index.html).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照 [为 NumPy 做出贡献](../dev/index.html) 中的说明克隆存储库。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting on version 1.26, NumPy will adopt Meson as its build system (see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration)
    and [Understanding Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(in SciPy v1.11.2)") for more details.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.26 开始，NumPy 将采用 Meson 作为其构建系统（请参阅 [numpy.distutils 的状态和迁移建议](../reference/distutils_status_migration.html#distutils-status-migration)
    和 [理解 Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(在 SciPy v1.11.2 中)") 了解更多细节）。
- en: Basic installation
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本安装
- en: 'To build and install NumPy from a local copy of the source code, run:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要从源代码的本地副本构建并安装 NumPy，请运行：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will install all build dependencies and use Meson to compile and install
    the NumPy C-extensions and Python modules. If you need more control of build options
    and commands, see the following sections.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所有构建依赖项并使用 Meson 编译并安装 NumPy 的 C 扩展和 Python 模块。如果您需要更多控制构建选项和命令，请参见以下章节。
- en: 'To perform an in-place build that can be run from the source folder run:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行可以从源文件夹运行的原地构建，请运行：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Note: for build instructions to do development work on NumPy itself, see*
    [Setting up and using your development environment](../dev/development_environment.html#development-environment).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：有关在 NumPy 上进行开发工作的构建说明，请参阅* [配置和使用开发环境](../dev/development_environment.html#development-environment)。'
- en: Advanced building with Meson
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Meson 进行高级构建
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 支持标准环境变量 `CC`、`CXX` 和 `FC` 以选择特定的 C、C++ 和/或 Fortran 编译器。这些环境变量在 [Meson
    文档中的参考表中](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables)
    有文档记录。
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，环境变量只会在干净构建时生效，因为它们会影响配置阶段（即，meson 设置）。增量重建不会对环境变量的更改做出反应-您必须运行 `git clean
    -xdf` 并进行完整重建，或运行 `meson setup --reconfigure`。
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 更多选项包括选择编译器、设置自定义编译器标志和控制并行性，请参阅[编译器选择和自定义构建](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html)（来自SciPy文档）和[the
    Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages)。
- en: Advanced building with Meson
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Meson进行高级构建
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Meson支持标准环境变量`CC`、`CXX`和`FC`来选择特定的C、C++和/或Fortran编译器。这些环境变量在[Meson文档中的参考表](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables)中有文档。
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，只有在干净的构建过程中，环境变量才会得到应用，因为它们影响配置阶段（即meson setup）。增量重新构建不会对环境变量的更改作出反应-您必须运行`git
    clean -xdf`并进行全面重建，或者运行`meson setup --reconfigure`。
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更多选项包括选择编译器、设置自定义编译器标志和控制并行性，请参阅[编译器选择和自定义构建](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html)（来自SciPy文档）和[the
    Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages)。
- en: Testing
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Make sure to test your builds. To ensure everything stays in shape, see if all
    tests pass.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 确保测试您的构建。为了确保一切正常，请检查所有测试是否通过。
- en: 'The test suite requires additional dependencies, which can easily be installed
    with:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件需要额外的依赖项，可以通过以下命令轻松安装：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the full test suite with:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整的测试套件：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试的详细信息，请参阅[测试构建](../dev/development_environment.html#testing-builds)。
- en: '## Accelerated BLAS/LAPACK libraries'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '## 加速BLAS/LAPACK库'
- en: NumPy searches for optimized linear algebra libraries such as BLAS and LAPACK.
    There are specific orders for searching these libraries, as described below and
    in the [meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)
    file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy搜索优化的线性代数库，如BLAS和LAPACK。有特定的搜索这些库的顺序，如下所述和[meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)文件中描述的。
- en: Cross compilation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交叉编译
- en: For cross compilation instructions, see [Cross compilation](https://docs.scipy.org/doc/scipy/building/cross_compilation.html
    "(in SciPy v1.11.2)") and the [Meson documentation](meson).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如需交叉编译说明，请参阅[交叉编译](https://docs.scipy.org/doc/scipy/building/cross_compilation.html)和[Meson文档](meson)。
