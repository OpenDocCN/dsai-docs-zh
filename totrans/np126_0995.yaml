- en: Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.statistics.html](https://numpy.org/doc/1.26/reference/routines.statistics.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Order statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`ptp`](generated/numpy.ptp.html#numpy.ptp "numpy.ptp")(a[, axis, out, keepdims])
    | Range of values (maximum - minimum) along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`percentile`](generated/numpy.percentile.html#numpy.percentile "numpy.percentile")(a, q[, axis, out, ...])
    | Compute the q-th percentile of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanpercentile`](generated/numpy.nanpercentile.html#numpy.nanpercentile
    "numpy.nanpercentile")(a, q[, axis, out, ...]) | Compute the qth percentile of
    the data along the specified axis, while ignoring nan values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`quantile`](generated/numpy.quantile.html#numpy.quantile "numpy.quantile")(a, q[, axis, out, overwrite_input, ...])
    | Compute the q-th quantile of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanquantile`](generated/numpy.nanquantile.html#numpy.nanquantile "numpy.nanquantile")(a, q[, axis, out, ...])
    | Compute the qth quantile of the data along the specified axis, while ignoring
    nan values. |'
  prefs: []
  type: TYPE_TB
- en: Averages and variances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`median`](generated/numpy.median.html#numpy.median "numpy.median")(a[, axis, out, overwrite_input, keepdims])
    | Compute the median along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`average`](generated/numpy.average.html#numpy.average "numpy.average")(a[, axis, weights, returned, keepdims])
    | Compute the weighted average along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean")(a[, axis, dtype, out, keepdims, where])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](generated/numpy.std.html#numpy.std "numpy.std")(a[, axis, dtype, out, ddof, keepdims, where])
    | Compute the standard deviation along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](generated/numpy.var.html#numpy.var "numpy.var")(a[, axis, dtype, out, ddof, keepdims, where])
    | Compute the variance along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmedian`](generated/numpy.nanmedian.html#numpy.nanmedian "numpy.nanmedian")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmean`](generated/numpy.nanmean.html#numpy.nanmean "numpy.nanmean")(a[, axis, dtype, out, keepdims, where])
    | Compute the arithmetic mean along the specified axis, ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanstd`](generated/numpy.nanstd.html#numpy.nanstd "numpy.nanstd")(a[, axis, dtype, out, ddof, ...])
    | Compute the standard deviation along the specified axis, while ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanvar`](generated/numpy.nanvar.html#numpy.nanvar "numpy.nanvar")(a[, axis, dtype, out, ddof, ...])
    | Compute the variance along the specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: Correlating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`corrcoef`](generated/numpy.corrcoef.html#numpy.corrcoef "numpy.corrcoef")(x[, y, rowvar, bias, ddof, dtype])
    | Return Pearson product-moment correlation coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`correlate`](generated/numpy.correlate.html#numpy.correlate "numpy.correlate")(a, v[, mode])
    | Cross-correlation of two 1-dimensional sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cov`](generated/numpy.cov.html#numpy.cov "numpy.cov")(m[, y, rowvar, bias, ddof, fweights, ...])
    | Estimate a covariance matrix, given data and weights. |'
  prefs: []
  type: TYPE_TB
- en: Histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`histogram`](generated/numpy.histogram.html#numpy.histogram "numpy.histogram")(a[, bins, range, density, weights])
    | Compute the histogram of a dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogram2d`](generated/numpy.histogram2d.html#numpy.histogram2d "numpy.histogram2d")(x, y[, bins, range, density, ...])
    | Compute the bi-dimensional histogram of two data samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogramdd`](generated/numpy.histogramdd.html#numpy.histogramdd "numpy.histogramdd")(sample[, bins, range, density, ...])
    | Compute the multidimensional histogram of some data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bincount`](generated/numpy.bincount.html#numpy.bincount "numpy.bincount")(x, /[, weights, minlength])
    | Count number of occurrences of each value in array of non-negative ints. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogram_bin_edges`](generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges")(a[, bins, range, weights]) | Function to calculate
    only the edges of the bins used by the [`histogram`](generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram") function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`digitize`](generated/numpy.digitize.html#numpy.digitize "numpy.digitize")(x, bins[, right])
    | Return the indices of the bins to which each value in input array belongs. |'
  prefs: []
  type: TYPE_TB
- en: Order statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`ptp`](generated/numpy.ptp.html#numpy.ptp "numpy.ptp")(a[, axis, out, keepdims])
    | Range of values (maximum - minimum) along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`percentile`](generated/numpy.percentile.html#numpy.percentile "numpy.percentile")(a, q[, axis, out, ...])
    | Compute the q-th percentile of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanpercentile`](generated/numpy.nanpercentile.html#numpy.nanpercentile
    "numpy.nanpercentile")(a, q[, axis, out, ...]) | Compute the qth percentile of
    the data along the specified axis, while ignoring nan values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`quantile`](generated/numpy.quantile.html#numpy.quantile "numpy.quantile")(a, q[, axis, out, overwrite_input, ...])
    | Compute the q-th quantile of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanquantile`](generated/numpy.nanquantile.html#numpy.nanquantile "numpy.nanquantile")(a, q[, axis, out, ...])
    | Compute the qth quantile of the data along the specified axis, while ignoring
    nan values. |'
  prefs: []
  type: TYPE_TB
- en: Averages and variances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`median`](generated/numpy.median.html#numpy.median "numpy.median")(a[, axis, out, overwrite_input, keepdims])
    | Compute the median along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`average`](generated/numpy.average.html#numpy.average "numpy.average")(a[, axis, weights, returned, keepdims])
    | Compute the weighted average along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean")(a[, axis, dtype, out, keepdims, where])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](generated/numpy.std.html#numpy.std "numpy.std")(a[, axis, dtype, out, ddof, keepdims, where])
    | Compute the standard deviation along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](generated/numpy.var.html#numpy.var "numpy.var")(a[, axis, dtype, out, ddof, keepdims, where])
    | Compute the variance along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmedian`](generated/numpy.nanmedian.html#numpy.nanmedian "numpy.nanmedian")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmean`](generated/numpy.nanmean.html#numpy.nanmean "numpy.nanmean")(a[, axis, dtype, out, keepdims, where])
    | Compute the arithmetic mean along the specified axis, ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanstd`](generated/numpy.nanstd.html#numpy.nanstd "numpy.nanstd")(a[, axis, dtype, out, ddof, ...])
    | Compute the standard deviation along the specified axis, while ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanvar`](generated/numpy.nanvar.html#numpy.nanvar "numpy.nanvar")(a[, axis, dtype, out, ddof, ...])
    | Compute the variance along the specified axis, while ignoring NaNs. |'
  prefs: []
  type: TYPE_TB
- en: Correlating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`corrcoef`](generated/numpy.corrcoef.html#numpy.corrcoef "numpy.corrcoef")(x[, y, rowvar, bias, ddof, dtype])
    | Return Pearson product-moment correlation coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`correlate`](generated/numpy.correlate.html#numpy.correlate "numpy.correlate")(a, v[, mode])
    | Cross-correlation of two 1-dimensional sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cov`](generated/numpy.cov.html#numpy.cov "numpy.cov")(m[, y, rowvar, bias, ddof, fweights, ...])
    | Estimate a covariance matrix, given data and weights. |'
  prefs: []
  type: TYPE_TB
- en: Histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`histogram`](generated/numpy.histogram.html#numpy.histogram "numpy.histogram")(a[, bins, range, density, weights])
    | Compute the histogram of a dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogram2d`](generated/numpy.histogram2d.html#numpy.histogram2d "numpy.histogram2d")(x, y[, bins, range, density, ...])
    | Compute the bi-dimensional histogram of two data samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogramdd`](generated/numpy.histogramdd.html#numpy.histogramdd "numpy.histogramdd")(sample[, bins, range, density, ...])
    | Compute the multidimensional histogram of some data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bincount`](generated/numpy.bincount.html#numpy.bincount "numpy.bincount")(x, /[, weights, minlength])
    | Count number of occurrences of each value in array of non-negative ints. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogram_bin_edges`](generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges")(a[, bins, range, weights]) | Function to calculate
    only the edges of the bins used by the [`histogram`](generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram") function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`digitize`](generated/numpy.digitize.html#numpy.digitize "numpy.digitize")(x, bins[, right])
    | Return the indices of the bins to which each value in input array belongs. |'
  prefs: []
  type: TYPE_TB
