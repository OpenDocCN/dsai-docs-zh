- en: scipy.interpolate.CloughTocher2DInterpolator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.CloughTocher2DInterpolator.html#scipy.interpolate.CloughTocher2DInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.CloughTocher2DInterpolator.html#scipy.interpolate.CloughTocher2DInterpolator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: CloughTocher2DInterpolator(points, values, tol=1e-6).
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise cubic, C1 smooth, curvature-minimizing interpolator in 2D.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**ndarray of floats, shape (npoints, ndims); or Delaunay'
  prefs: []
  type: TYPE_NORMAL
- en: 2-D array of data point coordinates, or a precomputed Delaunay triangulation.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**ndarray of float or complex, shape (npoints, …)'
  prefs: []
  type: TYPE_NORMAL
- en: N-D array of data values at *points*. The length of *values* along the first
    axis must be equal to the length of *points*. Unlike some interpolators, the interpolation
    axis cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value used to fill in for requested points outside of the convex hull of the
    input points. If not provided, then the default is `nan`.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute/relative tolerance for gradient estimation.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations in gradient estimation.
  prefs: []
  type: TYPE_NORMAL
- en: '**rescale**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Rescale points to unit cube before performing interpolation. This is useful
    if some of the input dimensions have incommensurable units and differ by many
    orders of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`griddata`](scipy.interpolate.griddata.html#scipy.interpolate.griddata "scipy.interpolate.griddata")'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate unstructured D-D data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise linear interpolator in N > 1 dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`NearestNDInterpolator`](scipy.interpolate.NearestNDInterpolator.html#scipy.interpolate.NearestNDInterpolator
    "scipy.interpolate.NearestNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Nearest-neighbor interpolator in N > 1 dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn "scipy.interpolate.interpn")'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation on a regular grid or rectilinear grid.
  prefs: []
  type: TYPE_NORMAL
- en: '[`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolator on a regular or rectilinear grid in arbitrary dimensions ([`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn
    "scipy.interpolate.interpn") wraps this class).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The interpolant is constructed by triangulating the input data with Qhull [[1]](#rb5526418645e-1),
    and constructing a piecewise cubic interpolating Bezier polynomial on each triangle,
    using a Clough-Tocher scheme [[CT]](#rb5526418645e-ct). The interpolant is guaranteed
    to be continuously differentiable.
  prefs: []
  type: TYPE_NORMAL
- en: The gradients of the interpolant are chosen so that the curvature of the interpolating
    surface is approximatively minimized. The gradients necessary for this are estimated
    using the global algorithm described in [[Nielson83]](#rb5526418645e-nielson83)
    and [[Renka84]](#rb5526418645e-renka84).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For data on a regular grid use [`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn
    "scipy.interpolate.interpn") instead.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.qhull.org/](http://www.qhull.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[CT](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: See, for example, P. Alfeld, ‘’A trivariate Clough-Tocher scheme for tetrahedral
    data’’. Computer Aided Geometric Design, 1, 169 (1984); G. Farin, ‘’Triangular
    Bernstein-Bezier patches’’. Computer Aided Geometric Design, 3, 83 (1986).
  prefs: []
  type: TYPE_NORMAL
- en: '[[Nielson83](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: G. Nielson, ‘’A method for interpolating scattered data based upon a minimum
    norm network’’. Math. Comp., 40, 253 (1983).
  prefs: []
  type: TYPE_NORMAL
- en: '[[Renka84](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: R. J. Renka and A. K. Cline. ‘’A Triangle-based C1 interpolation method.’’,
    Rocky Mountain J. Math., 14, 223 (1984).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We can interpolate values on a 2D plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-CloughTocher2DInterpolator-1.png](../Images/62d756e77751b3531990e511e4979948.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.CloughTocher2DInterpolator.__call__.html#scipy.interpolate.CloughTocher2DInterpolator.__call__
    "scipy.interpolate.CloughTocher2DInterpolator.__call__")(xi) | Evaluate interpolator
    at given points. |'
  prefs: []
  type: TYPE_TB
