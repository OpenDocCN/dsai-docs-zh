- en: pandas.read_html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_html.html](https://pandas.pydata.org/docs/reference/api/pandas.read_html.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read HTML tables into a `list` of `DataFrame` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**io**str, path object, or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: String, path object (implementing `os.PathLike[str]`), or file-like object implementing
    a string `read()` function. The string can represent a URL or the HTML itself.
    Note that lxml only accepts the http, ftp and file url protocols. If you have
    a URL that starts with `'https'` you might try removing the `'s'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: Passing html literal strings is deprecated.
    Wrap literal string/bytes input in `io.StringIO`/`io.BytesIO` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**match**str or compiled regular expression, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The set of tables containing text matching this regex or string will be returned.
    Unless the HTML is extremely simple you will probably need to pass a non-empty
    string here. Defaults to ‘.+’ (match any non-empty string). The default value
    will return all tables contained on a page. This value is converted to a regular
    expression so that there is consistent behavior between Beautiful Soup and lxml.
  prefs: []
  type: TYPE_NORMAL
- en: '**flavor**{“lxml”, “html5lib”, “bs4”} or list-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The parsing engine (or list of parsing engines) to use. ‘bs4’ and ‘html5lib’
    are synonymous with each other, they are both there for backwards compatibility.
    The default of `None` tries to use `lxml` to parse and if that fails it falls
    back on `bs4` + `html5lib`.
  prefs: []
  type: TYPE_NORMAL
- en: '**header**int or list-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The row (or list of rows for a [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")) to use to make the columns headers.
  prefs: []
  type: TYPE_NORMAL
- en: '**index_col**int or list-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The column (or list of columns) to use to create the index.
  prefs: []
  type: TYPE_NORMAL
- en: '**skiprows**int, list-like or slice, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows to skip after parsing the column integer. 0-based. If a sequence
    of integers or a slice is given, will skip the rows indexed by that sequence.
    Note that a single element sequence means ‘skip the nth row’ whereas an integer
    means ‘skip n rows’.
  prefs: []
  type: TYPE_NORMAL
- en: '**attrs**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This is a dictionary of attributes that you can pass to use to identify the
    table in the HTML. These are not checked for validity before being passed to lxml
    or Beautiful Soup. However, these attributes must be valid HTML table attributes
    to work correctly. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: is a valid attribute dictionary because the ‘id’ HTML tag attribute is a valid
    HTML attribute for *any* HTML tag as per [this document](https://html.spec.whatwg.org/multipage/dom.html#global-attributes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: is *not* a valid attribute dictionary because ‘asdf’ is not a valid HTML attribute
    even if it is a valid XML attribute. Valid HTML 4.01 table attributes can be found
    [here](http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2). A working draft
    of the HTML 5 spec can be found [here](https://html.spec.whatwg.org/multipage/tables.html).
    It contains the latest information on table attributes for the modern web.
  prefs: []
  type: TYPE_NORMAL
- en: '**parse_dates**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: See [`read_csv()`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv") for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**thousands**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Separator to use to parse thousands. Defaults to `','`.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The encoding used to decode the web page. Defaults to `None`.``None`` preserves
    the previous encoding behavior, which depends on the underlying parser library
    (e.g., the parser library will try to use the encoding provided by the document).
  prefs: []
  type: TYPE_NORMAL
- en: '**decimal**str, default ‘.’'
  prefs: []
  type: TYPE_NORMAL
- en: Character to recognize as decimal point (e.g. use ‘,’ for European data).
  prefs: []
  type: TYPE_NORMAL
- en: '**converters**dict, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Dict of functions for converting values in certain columns. Keys can either
    be integers or column labels, values are functions that take one input argument,
    the cell (not column) content, and return the transformed content.
  prefs: []
  type: TYPE_NORMAL
- en: '**na_values**iterable, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Custom NA values.
  prefs: []
  type: TYPE_NORMAL
- en: '**keep_default_na**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If na_values are specified and keep_default_na is False the default NaN values
    are overridden, otherwise they’re appended to.
  prefs: []
  type: TYPE_NORMAL
- en: '**displayed_only**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether elements with “display: none” should be parsed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**extract_links**{None, “all”, “header”, “body”, “footer”}'
  prefs: []
  type: TYPE_NORMAL
- en: Table elements in the specified section(s) with <a> tags will have their href
    extracted.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: dfs
  prefs: []
  type: TYPE_NORMAL
- en: A list of DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: Read a comma-separated values (csv) file into DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Before using this function you should read the [gotchas about the HTML parsing
    libraries](../../user_guide/io.html#io-html-gotchas).
  prefs: []
  type: TYPE_NORMAL
- en: Expect to do some cleanup after you call this function. For example, you might
    need to manually assign column names if the column names are converted to NaN
    when you pass the header=0 argument. We try to assume as little as possible about
    the structure of the table and push the idiosyncrasies of the HTML contained in
    the table to the user.
  prefs: []
  type: TYPE_NORMAL
- en: This function searches for `<table>` elements and only for `<tr>` and `<th>`
    rows and `<td>` elements within each `<tr>` or `<th>` element in the table. `<td>`
    stands for “table data”. This function attempts to properly handle `colspan` and
    `rowspan` attributes. If the function has a `<thead>` argument, it is used to
    construct the header, otherwise the function attempts to find the header within
    the body (by putting rows with only `<th>` elements into the header).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to [`read_csv()`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    the header argument is applied **after** skiprows is applied.
  prefs: []
  type: TYPE_NORMAL
- en: This function will *always* return a list of [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") *or* it will fail, e.g., it will *not* return an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: See the [read_html documentation in the IO section of the docs](../../user_guide/io.html#io-read-html)
    for some examples of reading in HTML tables.
  prefs: []
  type: TYPE_NORMAL
