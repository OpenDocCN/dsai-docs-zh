["```py\n>>> import numpy as np\n>>> from scipy.linalg import eig, eigh\n>>> from scipy.sparse.linalg import eigs, eigsh\n>>> np.set_printoptions(suppress=True)\n>>> rng = np.random.default_rng()\n>>>\n>>> X = rng.random((100, 100)) - 0.5\n>>> X = np.dot(X, X.T)  # create a symmetric matrix \n```", "```py\n>>> evals_all, evecs_all = eigh(X) \n```", "```py\n>>> evals_large, evecs_large = eigsh(X, 3, which='LM')\n>>> print(evals_all[-3:])\n[29.22435321 30.05590784 30.58591252]\n>>> print(evals_large)\n[29.22435321 30.05590784 30.58591252]\n>>> print(np.dot(evecs_large.T, evecs_all[:,-3:]))\narray([[-1\\.  0\\.  0.],       # may vary (signs)\n [ 0\\.  1\\.  0.],\n [-0\\.  0\\. -1.]]) \n```", "```py\n>>> evals_small, evecs_small = eigsh(X, 3, which='SM')\nTraceback (most recent call last):       # may vary (convergence)\n...\nscipy.sparse.linalg._eigen.arpack.arpack.ArpackNoConvergence:\nARPACK error -1: No convergence (1001 iterations, 0/3 eigenvectors converged) \n```", "```py\n>>> evals_small, evecs_small = eigsh(X, 3, which='SM', tol=1E-2)\n>>> evals_all[:3]\narray([0.00053181, 0.00298319, 0.01387821])\n>>> evals_small\narray([0.00053181, 0.00298319, 0.01387821])\n>>> np.dot(evecs_small.T, evecs_all[:,:3])\narray([[ 0.99999999  0.00000024 -0.00000049],    # may vary (signs)\n [-0.00000023  0.99999999  0.00000056],\n [ 0.00000031 -0.00000037  0.99999852]]) \n```", "```py\n>>> evals_small, evecs_small = eigsh(X, 3, which='SM', maxiter=5000)\n>>> evals_all[:3]\narray([0.00053181, 0.00298319, 0.01387821])\n>>> evals_small\narray([0.00053181, 0.00298319, 0.01387821])\n>>> np.dot(evecs_small.T, evecs_all[:,:3])\narray([[ 1\\.  0\\.  0.],           # may vary (signs)\n [-0\\.  1\\.  0.],\n [ 0\\.  0\\. -1.]]) \n```", "```py\n>>> evals_small, evecs_small = eigsh(X, 3, sigma=0, which='LM')\n>>> evals_all[:3]\narray([0.00053181, 0.00298319, 0.01387821])\n>>> evals_small\narray([0.00053181, 0.00298319, 0.01387821])\n>>> np.dot(evecs_small.T, evecs_all[:,:3])\narray([[ 1\\.  0\\.  0.],    # may vary (signs)\n [ 0\\. -1\\. -0.],\n [-0\\. -0\\.  1.]]) \n```", "```py\n>>> evals_mid, evecs_mid = eigsh(X, 3, sigma=1, which='LM')\n>>> i_sort = np.argsort(abs(1. / (1 - evals_all)))[-3:]\n>>> evals_all[i_sort]\narray([0.94164107, 1.05464515, 0.99090277])\n>>> evals_mid\narray([0.94164107, 0.99090277, 1.05464515])\n>>> print(np.dot(evecs_mid.T, evecs_all[:,i_sort]))\narray([[-0\\.  1\\.  0.],     # may vary (signs)\n [-0\\. -0\\.  1.],\n [ 1\\.  0\\.  0.]] \n```", "```py\n>>> from scipy.sparse.linalg import LinearOperator\n>>> class Diagonal(LinearOperator):\n...     def __init__(self, diag, dtype='float32'):\n...         self.diag = diag\n...         self.shape = (len(self.diag), len(self.diag))\n...         self.dtype = np.dtype(dtype)\n...     def _matvec(self, x):\n...         return self.diag*x\n...     def _rmatvec(self, x):\n...         return self.diag*x \n```", "```py\n>>> N = 100\n>>> rng = np.random.default_rng()\n>>> d = rng.normal(0, 1, N).astype(np.float64)\n>>> D = np.diag(d)\n>>> Dop = Diagonal(d, dtype=np.float64) \n```", "```py\n>>> evals_all, evecs_all = eigh(D)\n>>> evals_large, evecs_large = eigsh(Dop, 3, which='LA', maxiter=1e3)\n>>> evals_all[-3:]\narray([1.53092498, 1.77243671, 2.00582508])\n>>> evals_large\narray([1.53092498, 1.77243671, 2.00582508])\n>>> print(np.dot(evecs_large.T, evecs_all[:,-3:]))\narray([[-1\\.  0\\.  0.],     # may vary (signs)\n [-0\\. -1\\.  0.],\n [ 0\\.  0\\. -1.]] \n```", "```py\n>>> class FirstDerivative(LinearOperator):\n...     def __init__(self, N, dtype='float32'):\n...         self.N = N\n...         self.shape = (self.N, self.N)\n...         self.dtype = np.dtype(dtype)\n...     def _matvec(self, x):\n...         y = np.zeros(self.N, self.dtype)\n...         y[1:-1] = (0.5*x[2:]-0.5*x[0:-2])\n...         return y\n...     def _rmatvec(self, x):\n...         y = np.zeros(self.N, self.dtype)\n...         y[0:-2] = y[0:-2] - (0.5*x[1:-1])\n...         y[2:] = y[2:] + (0.5*x[1:-1])\n...         return y \n```", "```py\n>>> N = 21\n>>> D = np.diag(0.5*np.ones(N-1), k=1) - np.diag(0.5*np.ones(N-1), k=-1)\n>>> D[0] = D[-1] = 0 # take away edge effects\n>>> Dop = FirstDerivative(N, dtype=np.float64) \n```", "```py\n>>> evals_all, evecs_all = eig(D)\n>>> evals_large, evecs_large = eigs(Dop, 4, which='LI')\n>>> evals_all_imag = evals_all.imag\n>>> isort_imag = np.argsort(np.abs(evals_all_imag))\n>>> evals_all_imag = evals_all_imag[isort_imag]\n>>> evals_large_imag = evals_large.imag\n>>> isort_imag = np.argsort(np.abs(evals_large_imag))\n>>> evals_large_imag = evals_large_imag[isort_imag]\n>>> evals_all_imag[-4:]\narray([-0.95105652, 0.95105652, -0.98768834, 0.98768834])\n>>> evals_large_imag\narray([0.95105652, -0.95105652, 0.98768834, -0.98768834]) # may vary \n```"]