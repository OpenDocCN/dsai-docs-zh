["```py\nscipy.optimize.basinhopping(func, x0, niter=100, T=1.0, stepsize=0.5, minimizer_kwargs=None, take_step=None, accept_test=None, callback=None, interval=50, disp=False, niter_success=None, seed=None, *, target_accept_rate=0.5, stepwise_factor=0.9)\n```", "```py\nexp( -(func(xnew) - func(xold)) / T ) \n```", "```py\n>>> import numpy as np\n>>> from scipy.optimize import basinhopping\n>>> func = lambda x: np.cos(14.5 * x - 0.3) + (x + 0.2) * x\n>>> x0 = [1.] \n```", "```py\n>>> minimizer_kwargs = {\"method\": \"BFGS\"}\n>>> ret = basinhopping(func, x0, minimizer_kwargs=minimizer_kwargs,\n...                    niter=200)\n>>> print(\"global minimum: x = %.4f, f(x) = %.4f\" % (ret.x, ret.fun))\nglobal minimum: x = -0.1951, f(x) = -1.0009 \n```", "```py\n>>> def func2d(x):\n...     f = np.cos(14.5 * x[0] - 0.3) + (x[1] + 0.2) * x[1] + (x[0] +\n...                                                            0.2) * x[0]\n...     df = np.zeros(2)\n...     df[0] = -14.5 * np.sin(14.5 * x[0] - 0.3) + 2. * x[0] + 0.2\n...     df[1] = 2. * x[1] + 0.2\n...     return f, df \n```", "```py\n>>> minimizer_kwargs = {\"method\":\"L-BFGS-B\", \"jac\":True}\n>>> x0 = [1.0, 1.0]\n>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n...                    niter=200)\n>>> print(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n...                                                           ret.x[1],\n...                                                           ret.fun))\nglobal minimum: x = [-0.1951, -0.1000], f(x) = -1.0109 \n```", "```py\n>>> class MyTakeStep:\n...    def __init__(self, stepsize=0.5):\n...        self.stepsize = stepsize\n...        self.rng = np.random.default_rng()\n...    def __call__(self, x):\n...        s = self.stepsize\n...        x[0] += self.rng.uniform(-2.*s, 2.*s)\n...        x[1:] += self.rng.uniform(-s, s, x[1:].shape)\n...        return x \n```", "```py\n>>> mytakestep = MyTakeStep()\n>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n...                    niter=200, take_step=mytakestep)\n>>> print(\"global minimum: x = [%.4f, %.4f], f(x) = %.4f\" % (ret.x[0],\n...                                                           ret.x[1],\n...                                                           ret.fun))\nglobal minimum: x = [-0.1951, -0.1000], f(x) = -1.0109 \n```", "```py\n>>> def print_fun(x, f, accepted):\n...         print(\"at minimum %.4f accepted %d\" % (f, int(accepted))) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,\n...                    niter=10, callback=print_fun, seed=rng)\nat minimum 0.4159 accepted 1\nat minimum -0.4317 accepted 1\nat minimum -1.0109 accepted 1\nat minimum -0.9073 accepted 1\nat minimum -0.4317 accepted 0\nat minimum -0.1021 accepted 1\nat minimum -0.7425 accepted 1\nat minimum -0.9073 accepted 1\nat minimum -0.4317 accepted 0\nat minimum -0.7425 accepted 1\nat minimum -0.9073 accepted 1 \n```"]