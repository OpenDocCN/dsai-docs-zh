- en: Building from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/building/index.html](https://docs.scipy.org/doc/scipy-1.12.0/building/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are only trying to install SciPy, we recommend using binaries - see [Installation](https://scipy.org/install)
    for details on that.
  prefs: []
  type: TYPE_NORMAL
- en: Building SciPy from source requires setting up system-level dependencies (compilers,
    BLAS/LAPACK libraries, etc.) first, and then invoking a build. The build may be
    done in order to install SciPy for local usage, develop SciPy itself, or build
    redistributable binary packages. And it may be desired to customize aspects of
    how the build is done. This guide will cover all these aspects. In addition, it
    provides background information on how the SciPy build works, and links to up-to-date
    guides for generic Python build & packaging documentation that is relevant.
  prefs: []
  type: TYPE_NORMAL
- en: '## System-level dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: SciPy uses compiled code for speed, which means you need compilers and some
    other system-level (i.e, non-Python / non-PyPI) dependencies to build it on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Conda, you can skip the steps in this section - with the exception
    of installing compilers for Windows or the Apple Developer Tools for macOS. All
    other dependencies will be installed automatically by the `mamba env create -f
    environment.yml` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the system Python and `pip`, you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: C, C++, and Fortran compilers (typically `gcc`, `g++`, and `gfortran`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python header files (typically a package named `python3-dev` or `python3-devel`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BLAS and LAPACK libraries. [OpenBLAS](https://github.com/xianyi/OpenBLAS/) is
    the SciPy default; other variants include [ATLAS](http://math-atlas.sourceforge.net/)
    and [MKL](https://software.intel.com/en-us/intel-mkl).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg-config` for dependency detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install SciPy build requirements, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SciPy build requirements, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SciPy build requirements, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SciPy build requirements, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Apple Developer Tools. An easy way to do this is to [open a terminal
    window](https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line),
    enter the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: and follow the prompts. Apple Developer Tools includes Git, the Clang C/C++
    compilers, and other development utilities that may be required.
  prefs: []
  type: TYPE_NORMAL
- en: Do *not* use the macOS system Python. Instead, install Python with [the python.org
    installer](https://www.python.org/downloads/) or with a package manager like Homebrew,
    MacPorts or Fink.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other system dependencies you need are a Fortran compiler, BLAS and LAPACK
    libraries, and pkg-config. They’re easiest to install with [Homebrew](https://brew.sh/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As of SciPy >=1.2.0, we do not support compiling against the system Accelerate
    library for BLAS and LAPACK. It does not support a sufficiently recent LAPACK
    interface. This is planned to change in 2023, because macOS 13.3 introduced a
    major upgrade to Accelerate which resolved all known issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'A compatible set of C, C++ and Fortran compilers is needed to build SciPy.
    This is trickier on Windows than on other platforms, because MSVC does not support
    Fortran, and gfortran and MSVC can’t be used together. You will need one of these
    sets of compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: Mingw-w64 compilers (`gcc`, `g++`, `gfortran`) - *recommended, because it’s
    easiest to install and is what we use for SciPy’s own CI and binaries*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MSVC + Intel Fortran (`ifort`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Intel compilers (`icc`, `ifort`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compared to macOS and Linux, building SciPy on Windows is a little more difficult,
    due to the need to set up these compilers. It is not possible to just call a one-liner
    on the command prompt as you would on other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: First, install Microsoft Visual Studio - the 2019 Community Edition or any newer
    version will work (see the [Visual Studio download site](https://visualstudio.microsoft.com/downloads/)).
    This is needed even if you use the MinGW-w64 or Intel compilers, in order to ensure
    you have the Windows Universal C Runtime (the other components of Visual Studio
    are not needed when using Mingw-w64, and can be deselected if desired, to save
    disk space).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several sources of binaries for MinGW-w64\. We recommend the RTools
    versions, which can be installed with Chocolatey (see Chocolatey install instructions
    [here](https://chocolatey.org/install)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In case of issues, we recommend using the exact same version as used in the
    [SciPy GitHub Actions CI jobs for Windows](https://github.com/scipy/scipy/blob/main/.github/workflows/windows.yml).
  prefs: []
  type: TYPE_NORMAL
- en: The MSVC installer does not put the compilers on the system path, and the install
    location may change. To query the install location, MSVC comes with a `vswhere.exe`
    command-line utility. And to make the C/C++ compilers available inside the shell
    you are using, you need to run a `.bat` file for the correct bitness and architecture
    (e.g., for 64-bit Intel CPUs, use `vcvars64.bat`).
  prefs: []
  type: TYPE_NORMAL
- en: For detailed guidance, see [Use the Microsoft C++ toolset from the command line](https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to MSVC, the Intel compilers are designed to be used with an activation
    script (`Intel\oneAPI\setvars.bat`) that you run in the shell you are using. This
    makes the compilers available on the path. For detailed guidance, see [Get Started
    with the Intel® oneAPI HPC Toolkit for Windows](https://www.intel.com/content/www/us/en/docs/oneapi-hpc-toolkit/get-started-guide-windows/2023-1/overview.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Compilers should be on the system path (i.e., the `PATH` environment variable
    should contain the directory in which the compiler executables can be found) in
    order to be found, with the exception of MSVC which will be found automatically
    if and only if there are no other compilers on the `PATH`. You can use any shell
    (e.g., Powershell, `cmd` or Git Bash) to invoke a build. To check that this is
    the case, try invoking a Fortran compiler in the shell you use (e.g., `gfortran
    --version` or `ifort --version`).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: When using a conda environment it is possible that the environment creation
    will not work due to an outdated Fortran compiler. If that happens, remove the
    `compilers` entry from `environment.yml` and try again. The Fortran compiler should
    be installed as described in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Building SciPy from source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to only install SciPy from source once and not do any development
    work, then the recommended way to build and install is to use `pip`. Otherwise,
    conda is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have a conda installation yet, we recommend using [Mambaforge](https://github.com/conda-forge/miniforge#mambaforge);
    any conda flavor will work though.
  prefs: []
  type: TYPE_NORMAL
- en: Building from source to use SciPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using a conda environment, `pip` is still the tool you use to invoke
    a from-source build of SciPy. It is important to always use the `--no-build-isolation`
    flag to the `pip install` command, to avoid building against a `numpy` wheel from
    PyPI. In order for that to work you must first install the remaining build dependencies
    into the conda environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '### Building from source for SciPy development'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to build from source in order to work on SciPy itself, first clone
    the SciPy repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you want to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a dedicated development environment (virtual environment or conda environment),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install all needed dependencies (*build*, and also *test*, *doc* and *optional*
    dependencies),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build SciPy with our `dev.py` developer interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step (3) is always the same, steps (1) and (2) are different between conda
    and virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `scipy-dev` development environment with every required and optional
    dependency installed, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are many tools to manage virtual environments, like `venv`, `virtualenv`/`virtualenvwrapper`,
    `pyenv`/`pyenv-virtualenv`, Poetry, PDM, Hatch, and more. Here we use the basic
    `venv` tool that is part of the Python stdlib. You can use any other tool; all
    we need is an activated Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: Create and activate a virtual environment in a new directory named `venv` (
    note that the exact activation command may be different based on your OS and shell
    - see [“How venvs work”](https://docs.python.org/3/library/venv.html#how-venvs-work)
    in the `venv` docs).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then install the Python-level dependencies (see `pyproject.toml`) from PyPI
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To build SciPy in an activated development environment, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will install SciPy inside the repository (by default in a `build-install`
    directory). You can then run tests (`python dev.py test`), drop into IPython (`python
    dev.py ipython`), or take other development steps like build the html documentation
    or running benchmarks. The `dev.py` interface is self-documenting, so please see
    `python dev.py --help` and `python dev.py <subcommand> --help` for detailed guidance.
  prefs: []
  type: TYPE_NORMAL
- en: IDE support & editable installs
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `dev.py` interface is our recommended way of working on SciPy, it
    has one limitation: because of the custom install location, SciPy installed using
    `dev.py` will not be recognized automatically within an IDE (e.g., for running
    a script via a “run” button, or setting breakpoints visually). This will work
    better with an *in-place build* (or “editable install”).'
  prefs: []
  type: TYPE_NORMAL
- en: Editable installs are supported. It is important to understand that **you may
    use either an editable install or dev.py in a given repository clone, but not
    both**. If you use editable installs, you have to use `pytest` and other development
    tools directly instead of using `dev.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use an editable install, ensure you start from a clean repository (run `git
    clean -xdf` if you’ve built with `dev.py` before) and have all dependencies set
    up correctly as described higher up on this page. Then do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When making changes to SciPy code, including to compiled code, there is no need
    to manually rebuild or reinstall. When you run `git clean -xdf`, which removes
    the built extension modules, remember to also uninstall SciPy with `pip uninstall
    scipy`.
  prefs: []
  type: TYPE_NORMAL
- en: See the [meson-python](https://mesonbuild.com/meson-python/) documentation on
    editable installs for more details on how things work under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing builds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Compiler selection and customizing a build](compilers_and_options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BLAS and LAPACK](blas_lapack.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cross compilation](cross_compilation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building redistributable binaries](redistributable_binaries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Understanding Meson](understanding_meson.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introspecting build steps](introspecting_a_build.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Meson and `distutils` ways of doing things](distutils_equivalents.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
