- en: Representation of holonomic functions in SymPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/holonomic/represent.html](https://docs.sympy.org/latest/modules/holonomic/represent.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Class [`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator
    "sympy.holonomic.holonomic.DifferentialOperator") is used to represent the annihilator
    but we create differential operators easily using the function [`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators"). Class [`HolonomicFunction`](#sympy.holonomic.holonomic.HolonomicFunction
    "sympy.holonomic.holonomic.HolonomicFunction") represents a holonomic function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explain this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Take \(\sin(x)\) for instance, the differential equation satisfied by it is
    \(y^{(2)}(x) + y(x) = 0\). By definition we conclude it is a holonomic function.
    The general solution of this ODE is \(C_{1} \cdot \sin(x) + C_{2} \cdot \cos(x)\)
    but to get \(\sin(x)\) we need to provide initial conditions i.e. \(y(0) = 0,
    y^{(1)}(0) = 1\).
  prefs: []
  type: TYPE_NORMAL
- en: To represent the same in this module one needs to provide the differential equation
    in the form of annihilator. Basically a differential operator is an operator on
    functions that differentiates them. So \(D^{n} \cdot y(x) = y^{(n)}(x)\) where
    \(y^{(n)}(x)\) denotes `n` times differentiation of \(y(x)\) with respect to `x`.
  prefs: []
  type: TYPE_NORMAL
- en: So the differential equation can also be written as \(D^{2} \cdot y(x) + y(x)
    = 0\) or \((D^{2} + 1) \cdot y(x) = 0\). The part left of \(y(x)\) is the annihilator
    i.e. \(D^{2}+1\).
  prefs: []
  type: TYPE_NORMAL
- en: 'So this is how one will represent \(\sin(x)\) as a Holonomic Function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The polynomial coefficients will be members of the ring `ZZ[x]` in the example.
    The `D` operator returned by the function [`DifferentialOperators()`](#sympy.holonomic.holonomic.DifferentialOperators
    "sympy.holonomic.holonomic.DifferentialOperators") can be used to create annihilators
    just like SymPy expressions. We currently use the older implementations of rings
    in SymPy for priority mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A Holonomic Function is a solution to a linear homogeneous ordinary differential
    equation with polynomial coefficients. This differential equation can also be
    represented by an annihilator i.e. a Differential Operator `L` such that \(L.f
    = 0\). For uniqueness of these functions, initial conditions can also be provided
    along with the annihilator.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Holonomic functions have closure properties and thus forms a ring. Given two
    Holonomic Functions f and g, their sum, product, integral and derivative is also
    a Holonomic Function.
  prefs: []
  type: TYPE_NORMAL
- en: For ordinary points initial condition should be a vector of values of the derivatives
    i.e. \([y(x_0), y'(x_0), y''(x_0) ... ]\).
  prefs: []
  type: TYPE_NORMAL
- en: 'For regular singular points initial conditions can also be provided in this
    format: \({s0: [C_0, C_1, ...], s1: [C^1_0, C^1_1, ...], ...}\) where s0, s1,
    … are the roots of indicial equation and vectors \([C_0, C_1, ...], [C^0_0, C^0_1,
    ...], ...\) are the corresponding initial terms of the associated power series.
    See Examples below.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: An example of initial conditions for regular singular points, the indicial equation
    has only one root \(1/2\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To plot a Holonomic Function, one can use \(.evalf()\) for numerical computation.
    Here’s an example on \(sin(x)**2/x\) using numpy and matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Differential Operators are elements of Weyl Algebra. The Operators are defined
    by a list of polynomials in the base ring and the parent ring of the Operator
    i.e. the algebra it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Takes a list of polynomials for each power of `Dx` and the parent ring which
    must be an instance of DifferentialOperatorAlgebra.
  prefs: []
  type: TYPE_NORMAL
- en: A Differential Operator can be created easily using the operator `Dx`. See examples
    below.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DifferentialOperatorAlgebra`](#sympy.holonomic.holonomic.DifferentialOperatorAlgebra
    "sympy.holonomic.holonomic.DifferentialOperatorAlgebra")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Checks if the differential equation is singular at x0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This function is used to create annihilators using `Dx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base:**'
  prefs: []
  type: TYPE_NORMAL
- en: Base polynomial ring for the algebra. The base polynomial ring is the ring of
    polynomials in \(x\) that will appear as coefficients in the operators.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**generator:**'
  prefs: []
  type: TYPE_NORMAL
- en: Generator of the algebra which can be either a noncommutative `Symbol` or a
    string. e.g. “Dx” or “D”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns an Algebra of Differential Operators also called Weyl Algebra and the
    operator for differentiation i.e. the `Dx` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'An Ore Algebra is a set of noncommutative polynomials in the intermediate `Dx`
    and coefficients in a base polynomial ring \(A\). It follows the commutation rule:'
  prefs: []
  type: TYPE_NORMAL
- en: \[Dxa = \sigma(a)Dx + \delta(a)\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(a \subset A\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Where \(\sigma: A \Rightarrow A\) is an endomorphism and \(\delta: A \rightarrow
    A\) is a skew-derivation i.e. \(\delta(ab) = \delta(a) b + \sigma(a) \delta(b)\).'
  prefs: []
  type: TYPE_NORMAL
- en: If one takes the sigma as identity map and delta as the standard derivation
    then it becomes the algebra of Differential Operators also called a Weyl Algebra
    i.e. an algebra whose elements are Differential Operators.
  prefs: []
  type: TYPE_NORMAL
- en: This class represents a Weyl Algebra and serves as the parent ring for Differential
    Operators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DifferentialOperator`](#sympy.holonomic.holonomic.DifferentialOperator "sympy.holonomic.holonomic.DifferentialOperator")'
  prefs: []
  type: TYPE_NORMAL
