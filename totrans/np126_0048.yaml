- en: numpy.ndarray.astype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.astype.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.astype.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Copy of the array, cast to a specified type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str or dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Typecode or data-type to which the array is cast.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’, ‘A’, ‘K’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the memory layout order of the result. ‘C’ means C order, ‘F’ means
    Fortran order, ‘A’ means ‘F’ order if all the arrays are Fortran contiguous, ‘C’
    order otherwise, and ‘K’ means as close to the order the array elements appear
    in memory as possible. Default is ‘K’.
  prefs: []
  type: TYPE_NORMAL
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls what kind of data casting may occur. Defaults to ‘unsafe’ for backwards
    compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: ‘no’ means the data types should not be cast at all.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘equiv’ means only byte-order changes are allowed.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘safe’ means only casts which can preserve values are allowed.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32,
    are allowed.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘unsafe’ means any data conversions may be done.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**subok**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, then sub-classes will be passed-through (default), otherwise the returned
    array will be forced to be a base-class array.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: By default, astype always returns a newly allocated array. If this is set to
    false, and the [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), *order*,
    and *subok* requirements are satisfied, the input array is returned instead of
    a copy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arr_t**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Unless [`copy`](numpy.copy.html#numpy.copy "numpy.copy") is False and the other
    conditions for returning the input array are satisfied (see description for [`copy`](numpy.copy.html#numpy.copy
    "numpy.copy") input parameter), *arr_t* is a new array of the same shape as the
    input array, with dtype, order given by [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype"), *order*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ComplexWarning
  prefs: []
  type: TYPE_NORMAL
- en: When casting from complex to float or int. To avoid this, one should use `a.real.astype(t)`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.17.0: Casting between a simple data type and a structured
    one is possible only for “unsafe” casting. Casting to multiple fields is allowed,
    but casting from multiple fields is not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.9.0: Casting from numeric to string types in ‘safe’ casting
    mode requires that the string dtype length is long enough to store the max integer/float
    value converted.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
