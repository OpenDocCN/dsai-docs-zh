["```py\nnumpy.random.default_rng(seed=None)\n```", "```py\n>>> import numpy as np\n>>> rng = np.random.default_rng(12345)\n>>> print(rng)\nGenerator(PCG64)\n>>> rfloat = rng.random()\n>>> rfloat\n0.22733602246716966\n>>> type(rfloat)\n<class 'float'> \n```", "```py\n>>> import numpy as np\n>>> rng = np.random.default_rng(12345)\n>>> rints = rng.integers(low=0, high=10, size=3)\n>>> rints\narray([6, 2, 7])\n>>> type(rints[0])\n<class 'numpy.int64'> \n```", "```py\n>>> import numpy as np\n>>> rng = np.random.default_rng(seed=42)\n>>> print(rng)\nGenerator(PCG64)\n>>> arr1 = rng.random((3, 3))\n>>> arr1\narray([[0.77395605, 0.43887844, 0.85859792],\n [0.69736803, 0.09417735, 0.97562235],\n [0.7611397 , 0.78606431, 0.12811363]]) \n```", "```py\n>>> import numpy as np\n>>> rng = np.random.default_rng(seed=42)\n>>> arr2 = rng.random((3, 3))\n>>> arr2\narray([[0.77395605, 0.43887844, 0.85859792],\n [0.69736803, 0.09417735, 0.97562235],\n [0.7611397 , 0.78606431, 0.12811363]]) \n```", "```py\nclass numpy.random.Generator(bit_generator)\n```", "```py\n>>> from numpy.random import Generator, PCG64\n>>> rng = Generator(PCG64())\n>>> rng.standard_normal()\n-0.203  # random \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x \narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> y = rng.permuted(x, axis=1, out=x)\n>>> x \narray([[ 1,  0,  2,  4,  3],  # random\n [ 6,  7,  8,  9,  5],\n [10, 14, 11, 13, 12]]) \n```", "```py\n>>> y is x\nTrue \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x\narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> rng.permutation(x, axis=1) \narray([[ 1,  3,  2,  0,  4],  # random\n [ 6,  8,  7,  5,  9],\n [11, 13, 12, 10, 14]]) \n```", "```py\n>>> rng.permuted(x, axis=1) \narray([[ 1,  0,  2,  4,  3],  # random\n [ 5,  7,  6,  9,  8],\n [10, 14, 12, 13, 11]]) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> a = ['A', 'B', 'C', 'D', 'E']\n>>> rng.shuffle(a)  # shuffle the list in-place\n>>> a \n['B', 'D', 'A', 'E', 'C']  # random \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x \narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> y = rng.permuted(x, axis=1, out=x)\n>>> x \narray([[ 1,  0,  2,  4,  3],  # random\n [ 6,  7,  8,  9,  5],\n [10, 14, 11, 13, 12]]) \n```", "```py\n>>> y is x\nTrue \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x\narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> rng.permutation(x, axis=1) \narray([[ 1,  3,  2,  0,  4],  # random\n [ 6,  8,  7,  5,  9],\n [11, 13, 12, 10, 14]]) \n```", "```py\n>>> rng.permuted(x, axis=1) \narray([[ 1,  0,  2,  4,  3],  # random\n [ 5,  7,  6,  9,  8],\n [10, 14, 12, 13, 11]]) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> a = ['A', 'B', 'C', 'D', 'E']\n>>> rng.shuffle(a)  # shuffle the list in-place\n>>> a \n['B', 'D', 'A', 'E', 'C']  # random \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x \narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> y = rng.permuted(x, axis=1, out=x)\n>>> x \narray([[ 1,  0,  2,  4,  3],  # random\n [ 6,  7,  8,  9,  5],\n [10, 14, 11, 13, 12]]) \n```", "```py\n>>> y is x\nTrue \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = np.arange(0, 15).reshape(3, 5)\n>>> x\narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n>>> rng.permutation(x, axis=1) \narray([[ 1,  3,  2,  0,  4],  # random\n [ 6,  8,  7,  5,  9],\n [11, 13, 12, 10, 14]]) \n```", "```py\n>>> rng.permuted(x, axis=1) \narray([[ 1,  0,  2,  4,  3],  # random\n [ 5,  7,  6,  9,  8],\n [10, 14, 12, 13, 11]]) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> a = ['A', 'B', 'C', 'D', 'E']\n>>> rng.shuffle(a)  # shuffle the list in-place\n>>> a \n['B', 'D', 'A', 'E', 'C']  # random \n```"]