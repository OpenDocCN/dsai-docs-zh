- en: Integration and ODEs (scipy.integrate)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数积分和常微分方程 (scipy.integrate)
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html)
- en: '## Integrating functions, given function object'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 函数积分，给定函数对象'
- en: '| [`quad`](generated/scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")(func, a, b[, args, full_output, ...])
    | Compute a definite integral. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`quad`](generated/scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")(func, a, b[, args, full_output, ...])
    | 计算定积分。 |'
- en: '| [`quad_vec`](generated/scipy.integrate.quad_vec.html#scipy.integrate.quad_vec
    "scipy.integrate.quad_vec")(f, a, b[, epsabs, epsrel, norm, ...]) | Adaptive integration
    of a vector-valued function. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`quad_vec`](generated/scipy.integrate.quad_vec.html#scipy.integrate.quad_vec
    "scipy.integrate.quad_vec")(f, a, b[, epsabs, epsrel, norm, ...]) | 向量值函数的自适应积分。
    |'
- en: '| [`dblquad`](generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad
    "scipy.integrate.dblquad")(func, a, b, gfun, hfun[, args, ...]) | Compute a double
    integral. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`dblquad`](generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad
    "scipy.integrate.dblquad")(func, a, b, gfun, hfun[, args, ...]) | 计算二重积分。 |'
- en: '| [`tplquad`](generated/scipy.integrate.tplquad.html#scipy.integrate.tplquad
    "scipy.integrate.tplquad")(func, a, b, gfun, hfun, qfun, rfun) | Compute a triple
    (definite) integral. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`tplquad`](generated/scipy.integrate.tplquad.html#scipy.integrate.tplquad
    "scipy.integrate.tplquad")(func, a, b, gfun, hfun, qfun, rfun) | 计算三重（定积分）。 |'
- en: '| [`nquad`](generated/scipy.integrate.nquad.html#scipy.integrate.nquad "scipy.integrate.nquad")(func, ranges[, args, opts, full_output])
    | Integration over multiple variables. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`nquad`](generated/scipy.integrate.nquad.html#scipy.integrate.nquad "scipy.integrate.nquad")(func, ranges[, args, opts, full_output])
    | 多变量积分。 |'
- en: '| [`fixed_quad`](generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad
    "scipy.integrate.fixed_quad")(func, a, b[, args, n]) | Compute a definite integral
    using fixed-order Gaussian quadrature. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`fixed_quad`](generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad
    "scipy.integrate.fixed_quad")(func, a, b[, args, n]) | 使用固定阶数的高斯积分计算定积分。 |'
- en: '| [`quadrature`](generated/scipy.integrate.quadrature.html#scipy.integrate.quadrature
    "scipy.integrate.quadrature")(func, a, b[, args, tol, rtol, ...]) | Compute a
    definite integral using fixed-tolerance Gaussian quadrature. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`quadrature`](generated/scipy.integrate.quadrature.html#scipy.integrate.quadrature
    "scipy.integrate.quadrature")(func, a, b[, args, tol, rtol, ...]) | 使用固定容差的高斯积分计算定积分。
    |'
- en: '| [`romberg`](generated/scipy.integrate.romberg.html#scipy.integrate.romberg
    "scipy.integrate.romberg")(function, a, b[, args, tol, rtol, ...]) | Romberg integration
    of a callable function or method. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`romberg`](generated/scipy.integrate.romberg.html#scipy.integrate.romberg
    "scipy.integrate.romberg")(function, a, b[, args, tol, rtol, ...]) | 对可调用函数或方法进行龙贝格积分。
    |'
- en: '| [`newton_cotes`](generated/scipy.integrate.newton_cotes.html#scipy.integrate.newton_cotes
    "scipy.integrate.newton_cotes")(rn[, equal]) | Return weights and error coefficient
    for Newton-Cotes integration. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`newton_cotes`](generated/scipy.integrate.newton_cotes.html#scipy.integrate.newton_cotes
    "scipy.integrate.newton_cotes")(rn[, equal]) | 返回牛顿-科特斯积分的权重和误差系数。 |'
- en: '| [`qmc_quad`](generated/scipy.integrate.qmc_quad.html#scipy.integrate.qmc_quad
    "scipy.integrate.qmc_quad")(func, a, b, *[, n_estimates, ...]) | Compute an integral
    in N-dimensions using Quasi-Monte Carlo quadrature. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`qmc_quad`](generated/scipy.integrate.qmc_quad.html#scipy.integrate.qmc_quad
    "scipy.integrate.qmc_quad")(func, a, b, *[, n_estimates, ...]) | 使用准蒙特卡洛积分法计算
    N 维积分。 |'
- en: '| [`IntegrationWarning`](generated/scipy.integrate.IntegrationWarning.html#scipy.integrate.IntegrationWarning
    "scipy.integrate.IntegrationWarning") | Warning on issues during integration.
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`IntegrationWarning`](generated/scipy.integrate.IntegrationWarning.html#scipy.integrate.IntegrationWarning
    "scipy.integrate.IntegrationWarning") | 关于积分过程中问题的警告。 |'
- en: '| [`AccuracyWarning`](generated/scipy.integrate.AccuracyWarning.html#scipy.integrate.AccuracyWarning
    "scipy.integrate.AccuracyWarning") |  |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`AccuracyWarning`](generated/scipy.integrate.AccuracyWarning.html#scipy.integrate.AccuracyWarning
    "scipy.integrate.AccuracyWarning") |  |'
- en: Integrating functions, given fixed samples
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给定固定样本的函数积分
- en: '| [`trapezoid`](generated/scipy.integrate.trapezoid.html#scipy.integrate.trapezoid
    "scipy.integrate.trapezoid")(y[, x, dx, axis]) | Integrate along the given axis
    using the composite trapezoidal rule. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`trapezoid`](generated/scipy.integrate.trapezoid.html#scipy.integrate.trapezoid
    "scipy.integrate.trapezoid")(y[, x, dx, axis]) | 使用复合梯形法则沿给定轴积分。 |'
- en: '| [`cumulative_trapezoid`](generated/scipy.integrate.cumulative_trapezoid.html#scipy.integrate.cumulative_trapezoid
    "scipy.integrate.cumulative_trapezoid")(y[, x, dx, axis, initial]) | Cumulatively
    integrate y(x) using the composite trapezoidal rule. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`cumulative_trapezoid`](generated/scipy.integrate.cumulative_trapezoid.html#scipy.integrate.cumulative_trapezoid
    "scipy.integrate.cumulative_trapezoid")(y[, x, dx, axis, initial]) | 使用复合梯形法累积积分y(x)。
    |'
- en: '| [`simpson`](generated/scipy.integrate.simpson.html#scipy.integrate.simpson
    "scipy.integrate.simpson")(y, *[, x, dx, axis, even]) | Integrate y(x) using samples
    along the given axis and the composite Simpson''s rule. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`simpson`](generated/scipy.integrate.simpson.html#scipy.integrate.simpson
    "scipy.integrate.simpson")(y, *[, x, dx, axis, even]) | 使用给定轴上的样本和复合Simpson法积分y(x)。
    |'
- en: '| [`cumulative_simpson`](generated/scipy.integrate.cumulative_simpson.html#scipy.integrate.cumulative_simpson
    "scipy.integrate.cumulative_simpson")(y, *[, x, dx, axis, initial]) | Cumulatively
    integrate y(x) using the composite Simpson''s 1/3 rule. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`cumulative_simpson`](generated/scipy.integrate.cumulative_simpson.html#scipy.integrate.cumulative_simpson
    "scipy.integrate.cumulative_simpson")(y, *[, x, dx, axis, initial]) | 使用复合Simpson''s
    1/3法累积积分y(x)。 |'
- en: '| [`romb`](generated/scipy.integrate.romb.html#scipy.integrate.romb "scipy.integrate.romb")(y[, dx, axis, show])
    | Romberg integration using samples of a function. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`romb`](generated/scipy.integrate.romb.html#scipy.integrate.romb "scipy.integrate.romb")(y[, dx, axis, show])
    | 使用函数样本的Romberg积分。 |'
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`scipy.special`](special.html#module-scipy.special "scipy.special") for orthogonal
    polynomials (special) for Gaussian quadrature roots and weights for other weighting
    factors and regions.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.special`](special.html#module-scipy.special "scipy.special") 用于正交多项式（特殊函数）的高斯积分根和其他权重因子和区域。'
- en: Solving initial value problems for ODE systems
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决ODE系统的初值问题
- en: The solvers are implemented as individual classes, which can be used directly
    (low-level usage) or through a convenience function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些求解器被实现为各自的类，可以直接使用（低级用法）或通过便捷函数使用。
- en: '| [`solve_ivp`](generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp")(fun, t_span, y0[, method, t_eval, ...]) | Solve an
    initial value problem for a system of ODEs. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`solve_ivp`](generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp")(fun, t_span, y0[, method, t_eval, ...]) | 解决ODE系统的初值问题。
    |'
- en: '| [`RK23`](generated/scipy.integrate.RK23.html#scipy.integrate.RK23 "scipy.integrate.RK23")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Explicit Runge-Kutta method of order 3(2). |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`RK23`](generated/scipy.integrate.RK23.html#scipy.integrate.RK23 "scipy.integrate.RK23")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | 3(2)阶显式Runge-Kutta方法。 |'
- en: '| [`RK45`](generated/scipy.integrate.RK45.html#scipy.integrate.RK45 "scipy.integrate.RK45")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Explicit Runge-Kutta method of order 5(4). |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`RK45`](generated/scipy.integrate.RK45.html#scipy.integrate.RK45 "scipy.integrate.RK45")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | 5(4)阶显式Runge-Kutta方法。 |'
- en: '| [`DOP853`](generated/scipy.integrate.DOP853.html#scipy.integrate.DOP853 "scipy.integrate.DOP853")(fun, t0, y0, t_bound[, max_step, ...])
    | Explicit Runge-Kutta method of order 8. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`DOP853`](generated/scipy.integrate.DOP853.html#scipy.integrate.DOP853 "scipy.integrate.DOP853")(fun, t0, y0, t_bound[, max_step, ...])
    | 8阶显式Runge-Kutta方法。 |'
- en: '| [`Radau`](generated/scipy.integrate.Radau.html#scipy.integrate.Radau "scipy.integrate.Radau")(fun, t0, y0, t_bound[, max_step, ...])
    | Implicit Runge-Kutta method of Radau IIA family of order 5. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`Radau`](generated/scipy.integrate.Radau.html#scipy.integrate.Radau "scipy.integrate.Radau")(fun, t0, y0, t_bound[, max_step, ...])
    | Radau IIA家族的隐式Runge-Kutta方法，5阶。 |'
- en: '| [`BDF`](generated/scipy.integrate.BDF.html#scipy.integrate.BDF "scipy.integrate.BDF")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Implicit method based on backward-differentiation formulas. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`BDF`](generated/scipy.integrate.BDF.html#scipy.integrate.BDF "scipy.integrate.BDF")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | 基于后向差分公式的隐式方法。 |'
- en: '| [`LSODA`](generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA "scipy.integrate.LSODA")(fun, t0, y0, t_bound[, first_step, ...])
    | Adams/BDF method with automatic stiffness detection and switching. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`LSODA`](generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA "scipy.integrate.LSODA")(fun, t0, y0, t_bound[, first_step, ...])
    | 具有自动刚度检测和切换的Adams/BDF方法。 |'
- en: '| [`OdeSolver`](generated/scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver")(fun, t0, y0, t_bound, vectorized) | Base class for
    ODE solvers. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`OdeSolver`](generated/scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver")(fun, t0, y0, t_bound, vectorized) | ODE求解器的基类。 |'
- en: '| [`DenseOutput`](generated/scipy.integrate.DenseOutput.html#scipy.integrate.DenseOutput
    "scipy.integrate.DenseOutput")(t_old, t) | Base class for local interpolant over
    step made by an ODE solver. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`DenseOutput`](generated/scipy.integrate.DenseOutput.html#scipy.integrate.DenseOutput
    "scipy.integrate.DenseOutput") | 用于 ODE 求解器在步长上的局部插值的基类。 |'
- en: '| [`OdeSolution`](generated/scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution")(ts, interpolants[, alt_segment]) | Continuous ODE
    solution. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`OdeSolution`](generated/scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution") | 连续的 ODE 解。 |'
- en: Old API
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旧 API
- en: These are the routines developed earlier for SciPy. They wrap older solvers
    implemented in Fortran (mostly ODEPACK). While the interface to them is not particularly
    convenient and certain features are missing compared to the new API, the solvers
    themselves are of good quality and work fast as compiled Fortran code. In some
    cases, it might be worth using this old API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是早期为 SciPy 开发的例程。它们封装了用 Fortran 实现的旧求解器（主要是 ODEPACK）。虽然它们的接口并不特别方便，与新 API
    相比某些功能也不完整，但这些求解器本身质量良好且作为编译后的 Fortran 代码运行速度快。在某些情况下，使用这个旧 API 可能是值得的。
- en: '| [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")(func, y0, t[, args, Dfun, col_deriv, ...])
    | Integrate a system of ordinary differential equations. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")
    | 积分一组常微分方程。 |'
- en: '| [`ode`](generated/scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")(f[, jac])
    | A generic interface class to numeric integrators. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`ode`](generated/scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")
    | 一个通用的数值积分器接口类。 |'
- en: '| [`complex_ode`](generated/scipy.integrate.complex_ode.html#scipy.integrate.complex_ode
    "scipy.integrate.complex_ode")(f[, jac]) | A wrapper of ode for complex systems.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`complex_ode`](generated/scipy.integrate.complex_ode.html#scipy.integrate.complex_ode
    "scipy.integrate.complex_ode") | 复杂系统的 ODE 包装器。 |'
- en: '| [`ODEintWarning`](generated/scipy.integrate.ODEintWarning.html#scipy.integrate.ODEintWarning
    "scipy.integrate.ODEintWarning") | Warning raised during the execution of [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint"). |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`ODEintWarning`](generated/scipy.integrate.ODEintWarning.html#scipy.integrate.ODEintWarning
    "scipy.integrate.ODEintWarning") | 在执行 [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") 过程中引发的警告。 |'
- en: Solving boundary value problems for ODE systems
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决常微分方程组的边界值问题。
- en: '| [`solve_bvp`](generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp
    "scipy.integrate.solve_bvp")(fun, bc, x, y[, p, S, fun_jac, ...]) | Solve a boundary
    value problem for a system of ODEs. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`solve_bvp`](generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp
    "scipy.integrate.solve_bvp") | 解决常微分方程组的边界值问题。 |'
