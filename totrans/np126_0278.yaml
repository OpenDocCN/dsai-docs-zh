- en: numpy.ufunc.reduce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.reduce.html](https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.reduce.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Reduces [`array`](numpy.array.html#numpy.array "numpy.array")’s dimension by
    one, by applying ufunc along one axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let \(array.shape = (N_0, ..., N_i, ..., N_{M-1})\). Then \(ufunc.reduce(array,
    axis=i)[k_0, ..,k_{i-1}, k_{i+1}, .., k_{M-1}]\) = the result of iterating *j*
    over \(range(N_i)\), cumulatively applying ufunc to each \(array[k_0, ..,k_{i-1},
    j, k_{i+1}, .., k_{M-1}]\). For a one-dimensional array, reduce produces results
    equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For example, add.reduce() is equivalent to sum().
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**array**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The array to act on.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which a reduction is performed. The default (*axis* = 0)
    is perform a reduction over the first dimension of the input array. *axis* may
    be negative, in which case it counts from the last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If this is None, a reduction is performed over all the axes. If this is a tuple
    of ints, a reduction is performed on multiple axes, instead of a single axis or
    all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: For operations which are either not commutative or not associative, doing a
    reduction over multiple axes is not well-defined. The ufuncs do not currently
    raise an exception in this case, but will likely do so in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type code, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type used to represent the intermediate results. Defaults to the data-type
    of the output array if this is provided, or the data-type of the input array if
    no output array is provided.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If not provided or None, a freshly-allocated
    array is returned. For consistency with `ufunc.__call__`, if given as a keyword,
    this may be wrapped in a 1-element tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.13.0: Tuples are allowed for keyword argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original [`array`](numpy.array.html#numpy.array "numpy.array").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value with which to start the reduction. If the ufunc has no identity or
    the dtype is object, this defaults to None - otherwise it defaults to ufunc.identity.
    If `None` is given, the first element of the reduction is used, and an error is
    thrown if the reduction is empty.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A boolean array which is broadcasted to match the dimensions of [`array`](numpy.array.html#numpy.array
    "numpy.array"), and selects elements to include in the reduction. Note that for
    ufuncs like `minimum` that do not have an identity defined, one has to pass in
    also `initial`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The reduced array. If *out* was supplied, *r* is a reference to it.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A multi-dimensional array example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `initial` keyword argument to initialize the reduction with
    a different value, and `where` to select specific elements to include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Allows reductions of empty arrays where they would normally fail, i.e. for ufuncs
    without an identity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
