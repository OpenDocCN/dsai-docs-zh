["```py\n>>> from sympy.solvers import solve\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> solve(x**2 - 1, x)\n[-1, 1] \n```", "```py\nsympy.solvers.solvers.solve(f, *symbols, **flags)\n```", "```py\n>>> from sympy import solve, Poly, Eq, Matrix, Symbol\n>>> from sympy.abc import x, y, z, a, b \n```", "```py\n>>> solve(x - 3, x)\n[3]\n>>> solve(Eq(x, 3), x)\n[3]\n>>> solve(Poly(x - 3), x)\n[3]\n>>> solve(Matrix([[x, x + y]]), x, y) == solve([x, x + y], x, y)\nTrue \n```", "```py\n>>> solve(x**2 - 4)\n[-2, 2]\n>>> solve((x - a)*(y - b))\n[{a: x}, {b: y}]\n>>> solve([x - 3, y - 1])\n{x: 3, y: 1}\n>>> solve([x - 3, y**2 - 1])\n[{x: 3, y: -1}, {x: 3, y: 1}] \n```", "```py\n> >>> #### *** feel free to skip to the stars below *** ####\n> \n> >>> from sympy import TableForm\n> \n> >>> h = [None, ';|;'.join(['e', 's', 'solve(e, s)', 'solve(e, s, dict=True)',\n> \n> ... 'solve(e, s, set=True)']).split(';')]\n> \n> >>> t = []\n> \n> >>> for e, s in [\n> \n> ...         (x - y, y),\n> \n> ...         (x - y, [x, y]),\n> \n> ...         (x**2 - y, [x, y]),\n> \n> ...         ([x - 3, y -1], [x, y]),\n> \n> ...         ]:\n> \n> ...     how = [{}, dict(dict=True), dict(set=True)]\n> \n> ...     res = [solve(e, s, **f) for f in how]\n> \n> ...     t.append([e, '|', s, '|'] + [res[0], '|', res[1], '|', res[2]])\n> \n> ...\n> \n> >>> # ******************************************************* #\n> \n> >>> TableForm(t, headings=h, alignments=\"<\")\n> \n> e              | s      | solve(e, s)  | solve(e, s, dict=True) | solve(e, s, set=True)\n> \n> ---------------------------------------------------------------------------------------\n> \n> x - y          | y      | [x]          | [{y: x}]               | ([y], {(x,)})\n> \n> x - y          | [x, y] | [(y, y)]     | [{x: y}]               | ([x, y], {(y, y)})\n> \n> x**2 - y       | [x, y] | [(x, x**2)]  | [{y: x**2}]            | ([x, y], {(x, x**2)})\n> \n> [x - 3, y - 1] | [x, y] | {x: 3, y: 1} | [{x: 3, y: 1}]         | ([x, y], {(3, 1)}) \n> ```", "```py\n>     >>> solve([x - y, y - 3], x)\n> \n>     {x: y} \n>     ```", "```py\n>>> e = a*x + b - 2*x - 3\n>>> solve(e, [a, b])\n{a: 2, b: 3}\n>>> solve([e], [a, b])\n{a: -b/x + (2*x + 3)/x} \n```", "```py\n>>> from sympy import sqrt\n>>> solve(3, x)\n[]\n>>> solve(x - 3, y)\n[]\n>>> solve(sqrt(x) + 1, x, set=True)\n([x], set()) \n```", "```py\n> >>> from sympy import exp, Function\n> \n> >>> f = Function('f') \n> ```", "```py\n> >>> solve(f(x) - x, f(x))\n> \n> [x]\n> \n> >>> solve(f(x).diff(x) - f(x) - x, f(x).diff(x))\n> \n> [x + f(x)]\n> \n> >>> solve(f(x).diff(x) - f(x) - x, f(x))\n> \n> [-x + Derivative(f(x), x)]\n> \n> >>> solve(x + exp(x)**2, exp(x), set=True)\n> \n> ([exp(x)], {(-sqrt(-x),), (sqrt(-x),)}) \n> ```", "```py\n> >>> from sympy import Indexed, IndexedBase, Tuple\n> \n> >>> A = IndexedBase('A')\n> \n> >>> eqs = Tuple(A[1] + A[2] - 3, A[1] - A[2] + 1)\n> \n> >>> solve(eqs, eqs.atoms(Indexed))\n> \n> {A[1]: 1, A[2]: 2} \n> ```", "```py\n>>> solve(x + exp(x), x)\n[-LambertW(1)]\n>>> solve(x + exp(x), x, implicit=True)\n[-exp(x)] \n```", "```py\n> >>> solve(x + 2 + sqrt(3), x + 2)\n> \n> [-sqrt(3)]\n> \n> >>> solve((x + 2 + sqrt(3), x + 4 + y), y, x + 2)\n> \n> {y: -2 + sqrt(3), x + 2: -sqrt(3)} \n> ```", "```py\n>     >>> eqs = (x*y + 3*y + sqrt(3), x + 4 + y)\n> \n>     >>> solve(eqs, y, x + 2)\n> \n>     {y: -sqrt(3)/(x + 3), x + 2: -2*x/(x + 3) - 6/(x + 3) + sqrt(3)/(x + 3)}\n> \n>     >>> solve(eqs, y*x, x)\n> \n>     {x: -y - 4, x*y: -3*y - sqrt(3)} \n>     ```", "```py\n>     >>> solve(sqrt(2) - 1, 1)\n> \n>     [sqrt(2)]\n> \n>     >>> solve(x - y + 1, 1)  # /!\\ -1 is targeted, too\n> \n>     [x/(y - 1)]\n> \n>     >>> [_.subs(z, -1) for _ in solve((x - y + 1).subs(-1, z), 1)]\n> \n>     [-x + y] \n>     ```", "```py\n>>> x = Symbol(\"x\")\n>>> solve(x**2 - 1)\n[-1, 1] \n```", "```py\n>>> pos = Symbol(\"pos\", positive=True)\n>>> solve(pos**2 - 1)\n[1] \n```", "```py\n>>> from sympy import sin, limit\n>>> solve(sin(x)/x)  # 0 is excluded\n[pi] \n```", "```py\n>>> solve(sin(x)/x, check=False)\n[0, pi] \n```", "```py\n>>> eq = x**2*(1/x - z**2/x)\n>>> solve(eq, x)\n[]\n>>> solve(eq, x, check=False)\n[0]\n>>> limit(eq, x, 0, '-')\n0\n>>> limit(eq, x, 0, '+')\n0 \n```", "```py\n>>> solve(x < 3)\n(-oo < x) & (x < 3)\n>>> solve([x < 3, x**2 > 4], x)\n((-oo < x) & (x < -2)) | ((2 < x) & (x < 3))\n>>> solve([x + y - 3, x > 3], x)\n(3 < x) & (x < oo) & Eq(x, 3 - y) \n```", "```py\n>>> solve(x**2 > 4)\n((-oo < x) & (x < -2)) | ((2 < x) & (x < oo)) \n```", "```py\n>>> r = Symbol('r', real=True)\n>>> solve(r**2 > 4)\n(2 < r) | (r < -2) \n```", "```py\n>>> from sympy import symbols\n>>> r, q = symbols('r, q', real=True)\n>>> solve([r + q - 3, r > 3], r)\n(3 < r) & Eq(r, 3 - q) \n```", "```py\n>>> from sympy import reduce_inequalities\n>>> reduce_inequalities([x**2 - 4])\nEq(x, -2) | Eq(x, 2) \n```", "```py\n>>> reduce_inequalities([0 <= x  - 1, y < 3], [x, y])\n(-oo < y) & (1 <= x) & (x < oo) & (y < 3) \n```", "```py\n>>> reduce_inequalities([0 <= x*y  - 1, y < 3], [x, y])\nTraceback (most recent call last):\n...\nNotImplementedError:\ninequality has more than one symbol of interest. \n```", "```py\n>>> solve(x**3 - x + 1)\n[-1/((-1/2 - sqrt(3)*I/2)*(3*sqrt(69)/2 + 27/2)**(1/3)) -\n(-1/2 - sqrt(3)*I/2)*(3*sqrt(69)/2 + 27/2)**(1/3)/3,\n-(-1/2 + sqrt(3)*I/2)*(3*sqrt(69)/2 + 27/2)**(1/3)/3 -\n1/((-1/2 + sqrt(3)*I/2)*(3*sqrt(69)/2 + 27/2)**(1/3)),\n-(3*sqrt(69)/2 + 27/2)**(1/3)/3 -\n1/(3*sqrt(69)/2 + 27/2)**(1/3)]\n>>> solve(x**3 - x + 1, cubics=False)\n[CRootOf(x**3 - x + 1, 0),\n CRootOf(x**3 - x + 1, 1),\n CRootOf(x**3 - x + 1, 2)] \n```", "```py\n>>> solve(x**3 - x + a, x, cubics=False)\n[] \n```", "```py\n>>> eq = x**3 + 3*x**2 + x - 1\n>>> solve(eq, cubics=False)\n[-1, -1 + sqrt(2), -sqrt(2) - 1] \n```", "```py\n>>> from sympy import root\n>>> eq = root(x**3 - 3*x**2, 3) + 1 - x\n>>> solve(eq)\n[]\n>>> solve(eq, check=False)\n[1/3] \n```", "```py\n>>> from sympy import real_root, S\n>>> eq = root(x, 3) - root(x, 5) + S(1)/7\n>>> solve(eq)  # this gives 2 solutions but misses a 3rd\n[CRootOf(7*x**5 - 7*x**3 + 1, 1)**15,\nCRootOf(7*x**5 - 7*x**3 + 1, 2)**15]\n>>> sol = solve(eq, check=False)\n>>> [abs(eq.subs(x,i).n(2)) for i in sol]\n[0.48, 0.e-110, 0.e-110, 0.052, 0.052] \n```", "```py\n>>> abs(real_root(eq.subs(x, sol[0])).n(2))\n0.e-110 \n```", "```py\n>>> expr = root(x, 3) - root(x, 5) \n```", "```py\n>>> expr1 = root(x, 3, 1) - root(x, 5, 1)\n>>> v = expr1.subs(x, -3) \n```", "```py\n>>> eq = Eq(expr, v); eq1 = Eq(expr1, v)\n>>> solve(eq, check=False), solve(eq1, check=False)\n([], []) \n```", "```py\n>>> from sympy.solvers.solvers import unrad\n>>> from sympy import nroots\n>>> e, (p, cov) = unrad(eq)\n>>> pvals = nroots(e)\n>>> inversion = solve(cov, x)[0]\n>>> xvals = [inversion.subs(p, i) for i in pvals] \n```", "```py\n>>> z = expr - v\n>>> [xi.n(chop=1e-9) for xi in xvals if abs(z.subs(x, xi).n()) < 1e-9]\n[]\n>>> z1 = expr1 - v\n>>> [xi.n(chop=1e-9) for xi in xvals if abs(z1.subs(x, xi).n()) < 1e-9]\n[-3.0] \n```", "```py\nsympy.solvers.solvers.solve_linear(lhs, rhs=0, symbols=[], exclude=[])\n```", "```py\n>>> from sympy import cancel, Pow \n```", "```py\n>>> from sympy import cos, sin, solve_linear\n>>> from sympy.abc import x, y, z\n>>> eq = y*cos(x)**2 + y*sin(x)**2 - y  # = y*(1 - 1) = 0\n>>> solve_linear(eq)\n(0, 1)\n>>> eq = cos(x)**2 + sin(x)**2  # = 1\n>>> solve_linear(eq)\n(0, 1)\n>>> solve_linear(x, exclude=[x])\n(0, 1) \n```", "```py\n>>> solve_linear(x + y**2)\n(x, -y**2)\n>>> solve_linear(1/x - y**2)\n(x, y**(-2)) \n```", "```py\n>>> solve_linear(x**2/y**2 - 3)\n(x**2 - 3*y**2, y**2) \n```", "```py\n>>> eq = 1/(1/x - 2)\n>>> eq.as_numer_denom()\n(x, 1 - 2*x)\n>>> solve_linear(eq)\n(0, 0) \n```", "```py\n>>> (1/x)**-1\nx\n>>> solve_linear((1/x)**-1)\n(x, 0) \n```", "```py\n>>> solve_linear(Pow(1/x, -1, evaluate=False))\n(0, 0) \n```", "```py\n>>> eq = x**2*(1/x - z**2/x)\n>>> solve_linear(cancel(eq))\n(x, 0)\n>>> solve_linear(eq)\n(x**2*(1 - z**2), x) \n```", "```py\n>>> solve_linear(x + y + z, symbols=[y])\n(y, -x - z) \n```", "```py\n>>> solve_linear(x + y + z, exclude=[x])\n(y, -x - z) \n```", "```py\nsympy.solvers.solvers.solve_linear_system(system, *symbols, **flags)\n```", "```py\n>>> from sympy import Matrix, solve_linear_system\n>>> from sympy.abc import x, y \n```", "```py\n x + 4 y ==  2\n-2 x +   y == 14 \n```", "```py\n>>> system = Matrix(( (1, 4, 2), (-2, 1, 14)))\n>>> solve_linear_system(system, x, y)\n{x: -6, y: 2} \n```", "```py\n>>> system = Matrix(( (0,0,0), (0,0,0) ))\n>>> solve_linear_system(system, x, y)\n{} \n```", "```py\nsympy.solvers.solvers.solve_linear_system_LU(matrix, syms)\n```", "```py\n>>> from sympy import Matrix, solve_linear_system_LU\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> solve_linear_system_LU(Matrix([\n... [1, 2, 0, 1],\n... [3, 2, 2, 1],\n... [2, 0, 0, 1]]), [x, y, z])\n{x: 1/2, y: 1/4, z: -1/2} \n```", "```py\nsympy.solvers.solvers.solve_undetermined_coeffs(equ, coeffs, *syms, **flags)\n```", "```py\n>>> from sympy import Eq, solve_undetermined_coeffs\n>>> from sympy.abc import a, b, c, h, p, k, x, y \n```", "```py\n>>> solve_undetermined_coeffs(Eq(a*x + a + b, x/2), [a, b], x)\n{a: 1/2, b: -1/2}\n>>> solve_undetermined_coeffs(a - 2, [a])\n{a: 2} \n```", "```py\n>>> X, Y, Z = y, x**y, y*x**y\n>>> eq = a*X + b*Y + c*Z - X - 2*Y - 3*Z\n>>> coeffs = a, b, c\n>>> syms = x, y\n>>> solve_undetermined_coeffs(eq, coeffs, syms)\n{a: 1, b: 2, c: 3} \n```", "```py\n>>> eq = a*x**2 + b*x + c - ((x - h)**2 + 4*p*k)/4/p\n>>> solve_undetermined_coeffs(eq, (h, p, k), x)\n{h: -b/(2*a), k: (4*a*c - b**2)/(4*a), p: 1/(4*a)} \n```", "```py\n>>> solve_undetermined_coeffs(a**2*x + b - x, [a, b], x)\n[{a: -1, b: 0}, {a: 1, b: 0}] \n```", "```py\n>>> solve_undetermined_coeffs(a*x - 2*x, [a], dict=True)\n[{a: 2}] \n```", "```py\nsympy.solvers.solvers.nsolve(*args, dict=False, **kwargs)\n```", "```py\n>>> from sympy import Symbol, nsolve\n>>> import mpmath\n>>> mpmath.mp.dps = 15\n>>> x1 = Symbol('x1')\n>>> x2 = Symbol('x2')\n>>> f1 = 3 * x1**2 - 2 * x2**2 - 1\n>>> f2 = x1**2 - 2 * x1 + x2**2 + 2 * x2 - 8\n>>> print(nsolve((f1, f2), (x1, x2), (-1, 1)))\nMatrix([[-1.19287309935246], [1.27844411169911]]) \n```", "```py\n>>> from sympy import sin, nsolve\n>>> from sympy.abc import x\n>>> nsolve(sin(x), x, 2)\n3.14159265358979\n>>> nsolve(sin(x), 2)\n3.14159265358979 \n```", "```py\n>>> from sympy import cos\n>>> nsolve(cos(x) - x, 1)\n0.739085133215161\n>>> nsolve(cos(x) - x, 1, prec=50)\n0.73908513321516064165531208767387340401341175890076\n>>> cos(_)\n0.73908513321516064165531208767387340401341175890076 \n```", "```py\n>>> from sympy import I\n>>> nsolve(x**2 + 2, I)\n1.4142135623731*I \n```", "```py\n>>> from sympy import cos, cosh\n>>> f = cos(x)*cosh(x) - 1\n>>> nsolve(f, 3.14*100)\nTraceback (most recent call last):\n...\nValueError: Could not find root within given tolerance. (1.39267e+230 > 2.1684e-19)\n>>> ans = nsolve(f, 3.14*100, verify=False); ans\n312.588469032184\n>>> f.subs(x, ans).n(2)\n2.1e+121\n>>> (f/f.diff(x)).subs(x, ans).n(2)\n7.4e-15 \n```", "```py\n>>> bounds = lambda i: (3.14*i, 3.14*(i + 1))\n>>> nsolve(f, bounds(100), solver='bisect', verify=False)\n315.730061685774 \n```", "```py\n>>> eq = x**2/(1 - x)/(1 - 2*x)**2 - 100\n>>> nsolve(eq, 0.46)\nTraceback (most recent call last):\n...\nValueError: Could not find root within given tolerance. (10000 > 2.1684e-19)\nTry another starting point or tweak arguments.\n>>> nsolve(eq.as_numer_denom()[0], 0.46)\n0.46792545969349058 \n```", "```py\nsympy.solvers.solvers.checksol(f, symbol, sol=None, **flags)\n```", "```py\n>>> from sympy import checksol, symbols\n>>> x, y = symbols('x,y')\n>>> checksol(x**4 - 1, x, 1)\nTrue\n>>> checksol(x**4 - 1, x, 0)\nFalse\n>>> checksol(x**2 + y**2 - 5**2, {x: 3, y: 4})\nTrue \n```", "```py\n>>> checksol(x**2 + x - x*(x + 1), {})\nTrue \n```", "```py\nsympy.solvers.solvers.unrad(eq, *syms, **flags)\n```", "```py\n>>> from sympy.solvers.solvers import unrad\n>>> from sympy.abc import x\n>>> from sympy import sqrt, Rational, root \n```", "```py\n>>> unrad(sqrt(x)*x**Rational(1, 3) + 2)\n(x**5 - 64, [])\n>>> unrad(sqrt(x) + root(x + 1, 3))\n(-x**3 + x**2 + 2*x + 1, [])\n>>> eq = sqrt(x) + root(x, 3) - 2\n>>> unrad(eq)\n(_p**3 + _p**2 - 2, [_p, _p**6 - x]) \n```", "```py\nsympy.solvers.deutils.ode_order(expr, func)\n```", "```py\n>>> from sympy import Function\n>>> from sympy.solvers.deutils import ode_order\n>>> from sympy.abc import x\n>>> f, g = map(Function, ['f', 'g'])\n>>> ode_order(f(x).diff(x, 2) + f(x).diff(x)**2 +\n... f(x).diff(x), f(x))\n2\n>>> ode_order(f(x).diff(x, 2) + g(x).diff(x, 3), f(x))\n2\n>>> ode_order(f(x).diff(x, 2) + g(x).diff(x, 3), g(x))\n3 \n```", "```py\nsympy.solvers.recurr.rsolve(f, y, init=None)\n```", "```py\n>>> from sympy import Function, rsolve\n>>> from sympy.abc import n\n>>> y = Function('y') \n```", "```py\n>>> f = (n - 1)*y(n + 2) - (n**2 + 3*n - 2)*y(n + 1) + 2*n*(n + 1)*y(n) \n```", "```py\n>>> rsolve(f, y(n))\n2**n*C0 + C1*factorial(n) \n```", "```py\n>>> rsolve(f, y(n), {y(0):0, y(1):3})\n3*2**n - 3*factorial(n) \n```", "```py\nsympy.solvers.recurr.rsolve_poly(coeffs, f, n, shift=0, **hints)\n```", "```py\n>>> from sympy import Symbol, rsolve_poly\n>>> n = Symbol('n', integer=True) \n```", "```py\n>>> rsolve_poly([-1, 1], 4*n**3, n)\nC0 + n**4 - 2*n**3 + n**2 \n```", "```py\nsympy.solvers.recurr.rsolve_ratio(coeffs, f, n, **hints)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy.solvers.recurr import rsolve_ratio\n>>> rsolve_ratio([-2*x**3 + x**2 + 2*x - 1, 2*x**3 + x**2 - 6*x,\n... - 2*x**3 - 11*x**2 - 18*x - 9, 2*x**3 + 13*x**2 + 22*x + 8], 0, x)\nC0*(2*x - 3)/(2*(x**2 - 1)) \n```", "```py\nsympy.solvers.recurr.rsolve_hyper(coeffs, f, n, **hints)\n```", "```py\n>>> from sympy.solvers import rsolve_hyper\n>>> from sympy.abc import x \n```", "```py\n>>> rsolve_hyper([-1, -1, 1], 0, x)\nC0*(1/2 - sqrt(5)/2)**x + C1*(1/2 + sqrt(5)/2)**x \n```", "```py\n>>> rsolve_hyper([-1, 1], 1 + x, x)\nC0 + x*(x + 1)/2 \n```", "```py\nsympy.solvers.polysys.solve_poly_system(seq, *gens, strict=False, **args)\n```", "```py\n>>> from sympy import solve_poly_system\n>>> from sympy.abc import x, y \n```", "```py\n>>> solve_poly_system([x*y - 2*y, 2*y**2 - x**2], x, y)\n[(0, 0), (2, -sqrt(2)), (2, sqrt(2))] \n```", "```py\n>>> solve_poly_system([x**5 - x + y**3, y**2 - 1], x, y, strict=True)\nTraceback (most recent call last):\n...\nUnsolvableFactorError \n```", "```py\nsympy.solvers.polysys.solve_triangulated(polys, *gens, **args)\n```", "```py\n>>> from sympy import solve_triangulated\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> F = [x**2 + y + z - 1, x + y**2 + z - 1, x + y + z**2 - 1] \n```", "```py\n>>> solve_triangulated(F, x, y, z)\n[(0, 0, 1), (0, 1, 0), (1, 0, 0)] \n```", "```py\nsympy.solvers.simplex.lpmax(f, constr)\n```", "```py\n>>> from sympy.solvers.simplex import lpmax\n>>> from sympy import Eq\n>>> from sympy.abc import x, y\n>>> lpmax(x, [2*x - 3*y >= -1, Eq(x+ 3*y,2), x <= 2*y])\n(4/5, {x: 4/5, y: 2/5}) \n```", "```py\n>>> lpmax(x, [x <= -1])\n(-1, {x: -1}) \n```", "```py\n>>> lpmax(x, [x <= -1, x >= 0])\nTraceback (most recent call last):\n...\nsympy.solvers.simplex.InfeasibleLPError: inconsistent/False constraint \n```", "```py\nsympy.solvers.simplex.lpmin(f, constr)\n```", "```py\n>>> from sympy.solvers.simplex import lpmin\n>>> from sympy import Eq\n>>> from sympy.abc import x, y\n>>> lpmin(x, [2*x - 3*y >= -1, Eq(x + 3*y, 2), x <= 2*y])\n(1/3, {x: 1/3, y: 5/9}) \n```", "```py\n>>> lpmin(x, [x >= 0, x <= 3])\n(0, {x: 0}) \n```", "```py\n>>> lpmin(x, [x <= 3])\nTraceback (most recent call last):\n...\nsympy.solvers.simplex.UnboundedLPError:\nObjective function can assume arbitrarily large values! \n```", "```py\nsympy.solvers.simplex.linprog(c, A=None, b=None, A_eq=None, b_eq=None, bounds=None)\n```", "```py\n>>> from sympy.solvers.simplex import linprog\n>>> from sympy import symbols, Eq, linear_eq_to_matrix as M, Matrix\n>>> x = x1, x2, x3, x4 = symbols('x1:5')\n>>> X = Matrix(x)\n>>> c, d = M(5*x2 + x3 + 4*x4 - x1, x)\n>>> a, b = M([5*x2 + 2*x3 + 5*x4 - (x1 + 5)], x)\n>>> aeq, beq = M([Eq(3*x2 + x4, 2), Eq(-x1 + x3 + 2*x4, 1)], x)\n>>> constr = [i <= j for i,j in zip(a*X, b)]\n>>> constr += [Eq(i, j) for i,j in zip(aeq*X, beq)]\n>>> linprog(c, a, b, aeq, beq)\n(9/2, [0, 1/2, 0, 1/2])\n>>> assert all(i.subs(dict(zip(x, _[1]))) for i in constr) \n```"]