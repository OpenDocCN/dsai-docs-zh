- en: pandas.eval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.eval.html](https://pandas.pydata.org/docs/reference/api/pandas.eval.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate a Python expression as a string using various backends.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following arithmetic operations are supported: `+`, `-`, `*`, `/`, `**`,
    `%`, `//` (python engine only) along with the following boolean operations: `|`
    (or), `&` (and), and `~` (not). Additionally, the `''pandas''` parser allows the
    use of [`and`](https://docs.python.org/3/reference/expressions.html#and "(in Python
    v3.12)"), [`or`](https://docs.python.org/3/reference/expressions.html#or "(in
    Python v3.12)"), and [`not`](https://docs.python.org/3/reference/expressions.html#not
    "(in Python v3.12)") with the same semantics as the corresponding bitwise operators.
    [`Series`](pandas.Series.html#pandas.Series "pandas.Series") and [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects are supported and behave as they would with plain
    ol’ Python evaluation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr**str'
  prefs: []
  type: TYPE_NORMAL
- en: The expression to evaluate. This string cannot contain any Python [statements](https://docs.python.org/3/reference/simple_stmts.html#simple-statements),
    only Python [expressions](https://docs.python.org/3/reference/simple_stmts.html#expression-statements).
  prefs: []
  type: TYPE_NORMAL
- en: '**parser**{‘pandas’, ‘python’}, default ‘pandas’'
  prefs: []
  type: TYPE_NORMAL
- en: The parser to use to construct the syntax tree from the expression. The default
    of `'pandas'` parses code slightly different than standard Python. Alternatively,
    you can parse an expression using the `'python'` parser to retain strict Python
    semantics. See the [enhancing performance](../../user_guide/enhancingperf.html#enhancingperf-eval)
    documentation for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**engine**{‘python’, ‘numexpr’}, default ‘numexpr’'
  prefs: []
  type: TYPE_NORMAL
- en: The engine used to evaluate the expression. Supported engines are
  prefs: []
  type: TYPE_NORMAL
- en: 'None : tries to use `numexpr`, falls back to `python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''numexpr''` : This default engine evaluates pandas objects using numexpr
    for large speed ups in complex expressions with large frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''python''` : Performs operations as if you had `eval`’d in top level python.
    This engine is generally not that useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More backends may be available in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '**local_dict**dict or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of local variables, taken from locals() by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**global_dict**dict or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of global variables, taken from globals() by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**resolvers**list of dict-like or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of objects implementing the `__getitem__` special method that you can
    use to inject an additional collection of namespaces to use for variable lookup.
    For example, this is used in the [`query()`](pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") method to inject the `DataFrame.index` and `DataFrame.columns`
    variables that refer to their respective [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of prior stack frames to traverse and add to the current scope. Most
    users will **not** need to change this parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**target**object, optional, default None'
  prefs: []
  type: TYPE_NORMAL
- en: This is the target object for assignment. It is used when there is variable
    assignment in the expression. If so, then target must support item assignment
    with string keys, and if a copy is being returned, it must also support .copy().
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If target is provided, and the expression mutates target, whether to modify
    target inplace. Otherwise, return a copy of target with the mutation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ndarray, numeric scalar, DataFrame, Series, or None
  prefs: []
  type: TYPE_NORMAL
- en: The completion value of evaluating the given code or None if `inplace=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many instances where such an error can be raised:'
  prefs: []
  type: TYPE_NORMAL
- en: target=None, but the expression is multiline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The expression is multiline, but not all them have item assignment. An example
    of such an arrangement is this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a = b + 1 a + 2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, there are expressions on different lines, making it multiline, but the
    last line has no variable assigned to the output of a + 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: inplace=True, but the expression is missing item assignment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Item assignment is provided, but the target does not support string item assignment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Item assignment is provided and inplace=False, but the target does not support
    the .copy() method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.query`](pandas.DataFrame.query.html#pandas.DataFrame.query "pandas.DataFrame.query")'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluates a boolean expression to query the columns of a frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.eval`](pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate a string describing operations on DataFrame columns.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The `dtype` of any objects involved in an arithmetic `%` operation are recursively
    cast to `float64`.
  prefs: []
  type: TYPE_NORMAL
- en: See the [enhancing performance](../../user_guide/enhancingperf.html#enhancingperf-eval)
    documentation for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can add a new column using `pd.eval`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
