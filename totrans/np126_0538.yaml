- en: numpy.format_float_positional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.format_float_positional.html](https://numpy.org/doc/1.26/reference/generated/numpy.format_float_positional.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Format a floating-point scalar as a decimal string in positional notation.
  prefs: []
  type: TYPE_NORMAL
- en: Provides control over rounding, trimming and padding. Uses and assumes IEEE
    unbiased rounding. Uses the “Dragon4” algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**python float or numpy floating scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Value to format.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**non-negative integer or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of digits to print. May be None if [`unique`](numpy.unique.html#numpy.unique
    "numpy.unique") is *True*, but must be an integer if unique is *False*.
  prefs: []
  type: TYPE_NORMAL
- en: '**unique**boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, use a digit-generation strategy which gives the shortest representation
    which uniquely identifies the floating-point number from other values of the same
    type, by judicious rounding. If *precision* is given fewer digits than necessary
    can be printed, or if *min_digits* is given more can be printed, in which cases
    the last digit is rounded with unbiased rounding. If *False*, digits are generated
    as if printing an infinite-precision value and stopping after *precision* digits,
    rounding the remaining value with unbiased rounding
  prefs: []
  type: TYPE_NORMAL
- en: '**fractional**boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, the cutoffs of *precision* and *min_digits* refer to the total number
    of digits after the decimal point, including leading zeros. If *False*, *precision*
    and *min_digits* refer to the total number of significant digits, before or after
    the decimal point, ignoring leading zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '**trim**one of ‘k’, ‘.’, ‘0’, ‘-’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Controls post-processing trimming of trailing digits, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘k’ : keep trailing zeros, keep decimal point (no trimming)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘.’ : trim all trailing zeros, leave decimal point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘0’ : trim all but the zero before the decimal point. Insert the zero if it
    is missing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘-’ : trim trailing zeros and any trailing decimal point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sign**boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to show the sign for positive values.
  prefs: []
  type: TYPE_NORMAL
- en: '**pad_left**non-negative integer, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Pad the left side of the string with whitespace until at least that many characters
    are to the left of the decimal point.
  prefs: []
  type: TYPE_NORMAL
- en: '**pad_right**non-negative integer, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Pad the right side of the string with whitespace until at least that many characters
    are to the right of the decimal point.
  prefs: []
  type: TYPE_NORMAL
- en: '**min_digits**non-negative integer or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum number of digits to print. Only has an effect if *unique=True* in which
    case additional digits past those necessary to uniquely identify the value may
    be printed, rounding the last additional digit.
  prefs: []
  type: TYPE_NORMAL
- en: '– versionadded:: 1.21.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rep**string'
  prefs: []
  type: TYPE_NORMAL
- en: The string representation of the floating point value
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`format_float_scientific`](numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
