- en: Comparison with R / R libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 R/R库的比较
- en: 原文：[https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html)
- en: 'Since pandas aims to provide a lot of the data manipulation and analysis functionality
    that people use [R](https://www.r-project.org/) for, this page was started to
    provide a more detailed look at the [R language](https://en.wikipedia.org/wiki/R_(programming_language))
    and its many third party libraries as they relate to pandas. In comparisons with
    R and CRAN libraries, we care about the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 pandas 旨在提供许多人们使用[R](https://www.r-project.org/)的数据操作和分析功能，因此本页面旨在更详细地查看[R语言](https://en.wikipedia.org/wiki/R_(programming_language))及其许多第三方库与
    pandas 的关系。在与 R 和 CRAN 库的比较中，我们关心以下几点：
- en: '**Functionality / flexibility**: what can/cannot be done with each tool'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能性/灵活性**：每个工具可以/不可以做什么'
- en: '**Performance**: how fast are operations. Hard numbers/benchmarks are preferable'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：操作有多快。最好提供硬性数据/基准'
- en: '**Ease-of-use**: Is one tool easier/harder to use (you may have to be the judge
    of this, given side-by-side code comparisons)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易用性**：一个工具更容易/更难使用（您可能需要通过并排代码比较来判断）'
- en: This page is also here to offer a bit of a translation guide for users of these
    R packages.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面还提供了一个为这些 R 包的用户提供一点翻译指南的页面。
- en: Quick reference
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速参考
- en: We’ll start off with a quick reference guide pairing some common R operations
    using [dplyr](https://cran.r-project.org/web/packages/dplyr/index.html) with pandas
    equivalents.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个快速参考指南开始，将一些常见的 R 操作（使用[dplyr](https://cran.r-project.org/web/packages/dplyr/index.html)）与
    pandas 的等效操作进行配对。
- en: Querying, filtering, sampling
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询、过滤、抽样
- en: '| R | pandas |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dim(df)` | `df.shape` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `dim(df)` | `df.shape` |'
- en: '| `head(df)` | `df.head()` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `head(df)` | `df.head()` |'
- en: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
- en: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
- en: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
- en: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
- en: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
- en: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` but see [[1]](#select-range)
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` 但请参见[[1]](#select-range)
    |'
- en: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
- en: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
- en: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
- en: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
- en: Sorting
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| R | pandas |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
- en: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
- en: Transforming
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: '| R | pandas |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
- en: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
- en: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
- en: Grouping and summarizing
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组和汇总
- en: '| R | pandas |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `summary(df)` | `df.describe()` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `summary(df)` | `df.describe()` |'
- en: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
- en: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
- en: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
- en: Base R
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础 R
- en: Slicing with R’s [`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 R 的[`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)进行切片
- en: R makes it easy to access `data.frame` columns by name
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: R 使得通过名称轻松访问 `data.frame` 列成为可能
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or by integer location
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或按整数位置
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Selecting multiple columns by name in pandas is straightforward
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中按名称选择多列很简单
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Selecting multiple noncontiguous columns by integer location can be achieved
    with a combination of the `iloc` indexer attribute and `numpy.r_`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过整数位置选择多个不连续列可以通过`iloc`索引器属性和`numpy.r_`的组合实现。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
- en: 'In R you may want to split data into subsets and compute the mean for each.
    Using a data.frame called `df` and splitting it into groups `by1` and `by2`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，您可能希望将数据拆分为子集并为每个子集计算平均值。使用名为`df`的数据框，并将其拆分为`by1`和`by2`组：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method is similar to base R `aggregate` function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法类似于基本的 R `aggregate`函数。'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
- en: 'A common way to select data in R is using `%in%` which is defined using the
    function `match`. The operator `%in%` is used to return a logical vector indicating
    if there is a match or not:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中选择数据的常见方法是使用`%in%`，该运算符使用函数`match`定义。运算符`%in%`用于返回指示是否存在匹配项的逻辑向量：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The [`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin") method is similar to R `%in%` operator:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin")方法类似于 R 的`%in%`运算符：'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `match` function returns a vector of the positions of matches of its first
    argument in its second:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`函数返回其第一个参数在第二个参数中匹配位置的向量：'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/indexing.html#indexing-basics-indexing-isin).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[重塑文档](../../user_guide/indexing.html#indexing-basics-indexing-isin)。
- en: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
- en: '`tapply` is similar to `aggregate`, but data can be in a ragged array, since
    the subclass sizes are possibly irregular. Using a data.frame called `baseball`,
    and retrieving information based on the array `team`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`tapply`类似于`aggregate`，但数据可以是不规则的数组，因为子类大小可能不规则。使用名为`baseball`的数据框，并根据数组`team`检索信息：'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In pandas we may use [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") method to handle this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们可以使用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")方法来处理这个问题：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[重塑文档](../../user_guide/reshaping.html#reshaping-pivot)。
- en: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
- en: 'The [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") method is similar to the base R `subset` function. In
    R you might want to get the rows of a `data.frame` where one column’s values are
    less than another column’s values:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")方法类似于基本的 R `subset`函数。在 R 中，您可能希望获取`data.frame`的行，其中一列的值小于另一列的值：'
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In pandas, there are a few ways to perform subsetting. You can use [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") or pass an expression as if it were an index/slice as
    well as standard boolean indexing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，有几种方法可以执行子集。您可以使用[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")或将表达式传递为索引/切片，以及标准布尔索引：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For more details and examples see [the query documentation](../../user_guide/indexing.html#indexing-query).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[查询文档](../../user_guide/indexing.html#indexing-query)。
- en: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
- en: 'An expression using a data.frame called `df` in R with the columns `a` and
    `b` would be evaluated using `with` like so:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为`df`的数据框，其中包含`a`和`b`列的表达式将使用`with`进行评估：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In pandas the equivalent expression, using the [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") method, would be:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，使用[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")方法的等效表达式将是：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In certain cases [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") will be much faster than evaluation in pure Python. For
    more details and examples see [the eval documentation](../../user_guide/enhancingperf.html#enhancingperf-eval).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") 比纯 Python 中的评估要快得多。更多详细信息和示例请参见 [eval 文档](../../user_guide/enhancingperf.html#enhancingperf-eval)。
- en: plyr
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plyr
- en: '`plyr` is an R library for the split-apply-combine strategy for data analysis.
    The functions revolve around three data structures in R, `a` for `arrays`, `l`
    for `lists`, and `d` for `data.frame`. The table below shows how these data structures
    could be mapped in Python.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`plyr` 是一个用于数据分析的 R 库，围绕着 R 中的三种数据结构 `a`（数组）、`l`（列表）和 `d`（数据框）展开。下表显示了这些数据结构在
    Python 中的映射方式。'
- en: '| R | Python |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| R | Python |'
- en: '| --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| array | list |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 数组 | 列表 |'
- en: '| lists | dictionary or list of objects |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | 字典或对象列表 |'
- en: '| data.frame | dataframe |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| data.frame | 数据框 |'
- en: ddply
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ddply
- en: 'An expression using a data.frame called `df` in R where you want to summarize
    `x` by `month`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `df` 的 data.frame 来按 `month` 汇总 `x` 的表达式：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In pandas the equivalent expression, using the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method, would be:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，等效的表达式，使用 [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 方法，将是：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-aggregate).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见 [分组文档](../../user_guide/groupby.html#groupby-aggregate)。
- en: reshape / reshape2
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reshape / reshape2
- en: meltarray
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltarray
- en: 'An expression using a 3 dimensional array called `a` in R where you want to
    melt it into a data.frame:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `a` 的 3 维数组来将其融合成一个 data.frame 的表达式：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In Python, since `a` is a list, you can simply use list comprehension.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，由于 `a` 是一个列表，你可以简单地使用列表推导式。
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: meltlist
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltlist
- en: 'An expression using a list called `a` in R where you want to melt it into a
    data.frame:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `a` 的列表来将其融合成一个 data.frame 的表达式：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In Python, this list would be a list of tuples, so [`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") method would convert it to a dataframe as required.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，这个列表将是一个元组的列表，因此 [`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 方法将其转换为所需的数据框。
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For more details and examples see [the Into to Data Structures documentation](../../user_guide/dsintro.html#dsintro).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见 [数据结构入门文档](../../user_guide/dsintro.html#dsintro)。
- en: meltdf
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltdf
- en: 'An expression using a data.frame called `cheese` in R where you want to reshape
    the data.frame:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `cheese` 的 data.frame 来重新塑造数据框的表达式：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In Python, the [`melt()`](../../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt") method is the R equivalent:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，[`melt()`](../../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    方法是 R 中的等效方法：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-melt).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见 [重塑文档](../../user_guide/reshaping.html#reshaping-melt)。
- en: cast
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cast
- en: 'In R `acast` is an expression using a data.frame called `df` in R to cast into
    a higher dimensional array:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，`acast` 是使用名为 `df` 的 data.frame 来转换为更高维数组的表达式：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In Python the best way is to make use of [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，最好的方法是利用 [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly for `dcast` which uses a data.frame called `df` in R to aggregate
    information based on `Animal` and `FeedType`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在 R 中使用名为 `df` 的 data.frame 来基于 `Animal` 和 `FeedType` 聚合信息的 `dcast`：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Python can approach this in two different ways. Firstly, similar to above using
    [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以通过两种不同的方式来处理这个问题。首先，类似于上面使用 [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The second approach is to use the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用 [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 方法：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot)
    or [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见 [重塑文档](../../user_guide/reshaping.html#reshaping-pivot) 或 [分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
- en: pandas has a data type for categorical data.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 有一种用于分类数据的数据类型。
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In pandas this is accomplished with `pd.cut` and `astype("category")`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中可以用 `pd.cut` 和 `astype("category")` 实现：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For more details and examples see [categorical introduction](../../user_guide/categorical.html#categorical)
    and the [API documentation](../../reference/arrays.html#api-arrays-categorical).
    There is also a documentation regarding the [differences to R’s factor](../../user_guide/categorical.html#categorical-rfactor).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情和示例请参阅 [分类简介](../../user_guide/categorical.html#categorical) 和 [API 文档](../../reference/arrays.html#api-arrays-categorical)。还有关于
    [与 R 的因子的区别](../../user_guide/categorical.html#categorical-rfactor) 的文档。
- en: Quick reference
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速参考
- en: We’ll start off with a quick reference guide pairing some common R operations
    using [dplyr](https://cran.r-project.org/web/packages/dplyr/index.html) with pandas
    equivalents.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个快速参考指南开始，将一些常见的 R 操作（使用 [dplyr](https://cran.r-project.org/web/packages/dplyr/index.html)）与
    pandas 的等价操作进行对比。
- en: Querying, filtering, sampling
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询、过滤、抽样
- en: '| R | pandas |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dim(df)` | `df.shape` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `dim(df)` | `df.shape` |'
- en: '| `head(df)` | `df.head()` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `head(df)` | `df.head()` |'
- en: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
- en: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
- en: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
- en: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
- en: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
- en: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` but see [[1]](#select-range)
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` 但见 [[1]](#select-range)
    |'
- en: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
- en: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
- en: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
- en: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
- en: Sorting
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| R | pandas |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
- en: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
- en: Transforming
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: '| R | pandas |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
- en: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
- en: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
- en: Grouping and summarizing
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组和汇总
- en: '| R | pandas |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `summary(df)` | `df.describe()` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `summary(df)` | `df.describe()` |'
- en: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
- en: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
- en: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
- en: Querying, filtering, sampling
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询、过滤、抽样
- en: '| R | pandas |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dim(df)` | `df.shape` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `dim(df)` | `df.shape` |'
- en: '| `head(df)` | `df.head()` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `head(df)` | `df.head()` |'
- en: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `slice(df, 1:10)` | `df.iloc[:9]` |'
- en: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `filter(df, col1 == 1, col2 == 1)` | `df.query(''col1 == 1 & col2 == 1'')`
    |'
- en: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `df[df$col1 == 1 & df$col2 == 1,]` | `df[(df.col1 == 1) & (df.col2 == 1)]`
    |'
- en: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1, col2)` | `df[[''col1'', ''col2'']]` |'
- en: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col1:col3)` | `df.loc[:, ''col1'':''col3'']` |'
- en: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` but see [[1]](#select-range)
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, -(col1:col3))` | `df.drop(cols_to_drop, axis=1)` 但见 [[1]](#select-range)
    |'
- en: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1))` | `df[[''col1'']].drop_duplicates()` |'
- en: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `distinct(select(df, col1, col2))` | `df[[''col1'', ''col2'']].drop_duplicates()`
    |'
- en: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `sample_n(df, 10)` | `df.sample(n=10)` |'
- en: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `sample_frac(df, 0.01)` | `df.sample(frac=0.01)` |'
- en: Sorting
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序
- en: '| R | pandas |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, col1, col2)` | `df.sort_values([''col1'', ''col2''])` |'
- en: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `arrange(df, desc(col1))` | `df.sort_values(''col1'', ascending=False)` |'
- en: Transforming
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: '| R | pandas |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: R | pandas |
- en: '| --- | --- |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `select(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})[''col_one'']`
    |'
- en: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `rename(df, col_one = col1)` | `df.rename(columns={''col1'': ''col_one''})`
    |'
- en: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `mutate(df, c=a-b)` | `df.assign(c=df[''a'']-df[''b''])` |'
- en: Grouping and summarizing
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组和汇总
- en: '| R | pandas |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| R | pandas |'
- en: '| --- | --- |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `summary(df)` | `df.describe()` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `summary(df)` | `df.describe()` |'
- en: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `gdf <- group_by(df, col1)` | `gdf = df.groupby(''col1'')` |'
- en: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, avg=mean(col1, na.rm=TRUE))` | `df.groupby(''col1'').agg({''col1'':
    ''mean''})` |'
- en: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `summarise(gdf, total=sum(col1))` | `df.groupby(''col1'').sum()` |'
- en: Base R
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本 R
- en: Slicing with R’s [`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 R 的 [`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)
    进行切片
- en: R makes it easy to access `data.frame` columns by name
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: R 使得通过名称轻松访问 `data.frame` 列
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: or by integer location
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 或通过整数位置
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Selecting multiple columns by name in pandas is straightforward
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中通过名称选择多列很简单
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Selecting multiple noncontiguous columns by integer location can be achieved
    with a combination of the `iloc` indexer attribute and `numpy.r_`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过整数位置选择多个不连续的列可以通过 `iloc` 索引器属性和 `numpy.r_` 的组合实现。
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
- en: 'In R you may want to split data into subsets and compute the mean for each.
    Using a data.frame called `df` and splitting it into groups `by1` and `by2`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，您可能希望将数据拆分为子集，并为每个子集计算平均值。使用名为 `df` 的数据框，并将其拆分为 `by1` 和 `by2` 组：
- en: '[PRE34]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method is similar to base R `aggregate` function.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 方法类似于基本的 R `aggregate` 函数。'
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
- en: 'A common way to select data in R is using `%in%` which is defined using the
    function `match`. The operator `%in%` is used to return a logical vector indicating
    if there is a match or not:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 用 `%in%` 在 R 中选择数据的常见方法是使用 `match` 函数定义的。操作符 `%in%` 用于返回一个逻辑向量，指示是否有匹配项：
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The [`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin") method is similar to R `%in%` operator:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin") 方法类似于 R 的 `%in%` 操作符：'
- en: '[PRE37]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `match` function returns a vector of the positions of matches of its first
    argument in its second:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`match` 函数返回其第一个参数在第二个参数中的匹配位置的向量：'
- en: '[PRE38]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/indexing.html#indexing-basics-indexing-isin).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[重塑文档](../../user_guide/indexing.html#indexing-basics-indexing-isin)。
- en: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
- en: '`tapply` is similar to `aggregate`, but data can be in a ragged array, since
    the subclass sizes are possibly irregular. Using a data.frame called `baseball`,
    and retrieving information based on the array `team`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`tapply` 类似于 `aggregate`，但数据可以是不规则的，因为子类大小可能不规则。使用名为 `baseball` 的数据框，并根据数组
    `team` 检索信息：'
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In pandas we may use [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") method to handle this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们可以使用 [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") 方法来处理这个问题：
- en: '[PRE40]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅[重塑文档](../../user_guide/reshaping.html#reshaping-pivot)。
- en: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
- en: 'The [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") method is similar to the base R `subset` function. In
    R you might want to get the rows of a `data.frame` where one column’s values are
    less than another column’s values:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")方法类似于基本的 R `subset` 函数。在 R 中，您可能希望获取`data.frame`的行，其中一列的值小于另一列的值：'
- en: '[PRE41]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In pandas, there are a few ways to perform subsetting. You can use [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") or pass an expression as if it were an index/slice as
    well as standard boolean indexing:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，有几种执行子集的方法。您可以使用[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")或将表达式传递为索引/切片，以及标准布尔索引：
- en: '[PRE42]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: For more details and examples see [the query documentation](../../user_guide/indexing.html#indexing-query).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[查询文档](../../user_guide/indexing.html#indexing-query)。
- en: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
- en: 'An expression using a data.frame called `df` in R with the columns `a` and
    `b` would be evaluated using `with` like so:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为`df`的数据框（data.frame）和列`a`和`b`的表达式将使用`with`进行评估，如下所示：
- en: '[PRE43]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In pandas the equivalent expression, using the [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") method, would be:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，使用[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")方法的等价表达式将是：
- en: '[PRE44]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In certain cases [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") will be much faster than evaluation in pure Python. For
    more details and examples see [the eval documentation](../../user_guide/enhancingperf.html#enhancingperf-eval).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")比纯 Python 中的评估要快得多。更多详细信息和示例请参见[评估文档](../../user_guide/enhancingperf.html#enhancingperf-eval)。
- en: Slicing with R’s [`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 R 的[`c`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html)进行切片
- en: R makes it easy to access `data.frame` columns by name
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: R 可以轻松通过名称访问`data.frame`列
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: or by integer location
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 或通过整数位置
- en: '[PRE46]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Selecting multiple columns by name in pandas is straightforward
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中按名称选择多个列非常简单
- en: '[PRE47]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Selecting multiple noncontiguous columns by integer location can be achieved
    with a combination of the `iloc` indexer attribute and `numpy.r_`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`iloc`索引器属性和`numpy.r_`的组合可以实现通过整数位置选择多个非连续列。
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`aggregate`](https://stat.ethz.ch/R-manual/R-patched/library/stats/html/aggregate.html)'
- en: 'In R you may want to split data into subsets and compute the mean for each.
    Using a data.frame called `df` and splitting it into groups `by1` and `by2`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，您可能希望将数据拆分为子集并为每个子集计算平均值。使用名为`df`的数据框，并将其拆分为组`by1`和`by2`：
- en: '[PRE49]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method is similar to base R `aggregate` function.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法类似于基本的 R `aggregate` 函数。'
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`match` / `%in%`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/match.html)'
- en: 'A common way to select data in R is using `%in%` which is defined using the
    function `match`. The operator `%in%` is used to return a logical vector indicating
    if there is a match or not:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中选择数据的常见方式是使用`%in%`，该运算符使用`match`函数定义。运算符`%in%`用于返回一个逻辑向量，指示是否存在匹配项：
- en: '[PRE51]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The [`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin") method is similar to R `%in%` operator:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isin()`](../../reference/api/pandas.DataFrame.isin.html#pandas.DataFrame.isin
    "pandas.DataFrame.isin")方法类似于 R 的`%in%`运算符：'
- en: '[PRE52]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `match` function returns a vector of the positions of matches of its first
    argument in its second:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`函数返回其第一个参数在第二个参数中匹配位置的向量：'
- en: '[PRE53]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/indexing.html#indexing-basics-indexing-isin).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[重塑文档](../../user_guide/indexing.html#indexing-basics-indexing-isin)。
- en: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`tapply`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/tapply.html)'
- en: '`tapply` is similar to `aggregate`, but data can be in a ragged array, since
    the subclass sizes are possibly irregular. Using a data.frame called `baseball`,
    and retrieving information based on the array `team`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`tapply` 类似于 `aggregate`，但数据可以是不规则的数组，因为子类大小可能不规则。使用名为 `baseball` 的 data.frame，并根据数组
    `team` 检索信息：'
- en: '[PRE54]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In pandas we may use [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") method to handle this:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，我们可以使用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")方法来处理这个问题：
- en: '[PRE55]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[重塑文档](../../user_guide/reshaping.html#reshaping-pivot)。
- en: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`subset`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/subset.html)'
- en: 'The [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") method is similar to the base R `subset` function. In
    R you might want to get the rows of a `data.frame` where one column’s values are
    less than another column’s values:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")方法类似于基本的 R `subset` 函数。在 R 中，您可能希望获取 `data.frame` 的行，其中一个列的值小于另一个列的值：'
- en: '[PRE56]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In pandas, there are a few ways to perform subsetting. You can use [`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query") or pass an expression as if it were an index/slice as
    well as standard boolean indexing:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，有几种方法可以执行子集。您可以使用[`query()`](../../reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")或将表达式传递为索引/切片，以及标准布尔索引：
- en: '[PRE57]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: For more details and examples see [the query documentation](../../user_guide/indexing.html#indexing-query).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[查询文档](../../user_guide/indexing.html#indexing-query)。
- en: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`with`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/with.html)'
- en: 'An expression using a data.frame called `df` in R with the columns `a` and
    `b` would be evaluated using `with` like so:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `df` 的 data.frame，具有列 `a` 和 `b`，将使用 `with` 进行评估，如下所示：
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In pandas the equivalent expression, using the [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") method, would be:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，等效的��达式，使用[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")方法，将是：
- en: '[PRE59]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In certain cases [`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") will be much faster than evaluation in pure Python. For
    more details and examples see [the eval documentation](../../user_guide/enhancingperf.html#enhancingperf-eval).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，[`eval()`](../../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")比纯 Python 中的评估要快得多。更多详细信息和示例请参见[eval文档](../../user_guide/enhancingperf.html#enhancingperf-eval)。
- en: plyr
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plyr
- en: '`plyr` is an R library for the split-apply-combine strategy for data analysis.
    The functions revolve around three data structures in R, `a` for `arrays`, `l`
    for `lists`, and `d` for `data.frame`. The table below shows how these data structures
    could be mapped in Python.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`plyr` 是用于数据分析的分割-应用-组合策略的 R 库。这些函数围绕 R 中的三种数据结构展开，`a` 代表 `arrays`，`l` 代表 `lists`，`d`
    代表 `data.frame`。下表显示了这些数据结构在 Python 中的映射方式。'
- en: '| R | Python |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| R | Python |'
- en: '| --- | --- |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| array | list |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| array | list |'
- en: '| lists | dictionary or list of objects |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| lists | 字典或对象列表 |'
- en: '| data.frame | dataframe |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| data.frame | dataframe |'
- en: ddply
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ddply
- en: 'An expression using a data.frame called `df` in R where you want to summarize
    `x` by `month`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `df` 的 data.frame 表达式，您想要按 `month` 汇总 `x`：
- en: '[PRE60]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In pandas the equivalent expression, using the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method, would be:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，等效的表达式，使用[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法，将是：
- en: '[PRE61]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-aggregate).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[分组文档](../../user_guide/groupby.html#groupby-aggregate)。
- en: ddply
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ddply
- en: 'An expression using a data.frame called `df` in R where you want to summarize
    `x` by `month`:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中使用名为 `df` 的 data.frame 表达式，您想要按 `month` 汇总 `x`：
- en: '[PRE62]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In pandas the equivalent expression, using the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method, would be:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，等效的表达式，使用[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法，将是：
- en: '[PRE63]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: For more details and examples see [the groupby documentation](../../user_guide/groupby.html#groupby-aggregate).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节和示例请参见[分组文档](../../user_guide/groupby.html#groupby-aggregate)。
- en: reshape / reshape2
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: reshape / reshape2
- en: meltarray
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltarray
- en: 'An expression using a 3 dimensional array called `a` in R where you want to
    melt it into a data.frame:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`a`的三维数组的表达式，你想要将其融化成数据框：
- en: '[PRE64]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In Python, since `a` is a list, you can simply use list comprehension.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，由于`a`是一个列表，你可以简单地使用列表推导式。
- en: '[PRE65]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: meltlist
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltlist
- en: 'An expression using a list called `a` in R where you want to melt it into a
    data.frame:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`a`的列表的表达式，你想要将其融化成数据框：
- en: '[PRE66]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In Python, this list would be a list of tuples, so [`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") method would convert it to a dataframe as required.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，这个列表将是一个元组的列表，所以[`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")方法会将其转换为所需的数据框。
- en: '[PRE67]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: For more details and examples see [the Into to Data Structures documentation](../../user_guide/dsintro.html#dsintro).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节和示例请参见[数据结构介绍文档](../../user_guide/dsintro.html#dsintro)。
- en: meltdf
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltdf
- en: 'An expression using a data.frame called `cheese` in R where you want to reshape
    the data.frame:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`cheese`的数据框的表达式，你想要重塑数据框：
- en: '[PRE68]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In Python, the [`melt()`](../../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt") method is the R equivalent:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，[`melt()`](../../reference/api/pandas.melt.html#pandas.melt "pandas.melt")方法是R的等价物：
- en: '[PRE69]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-melt).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节和示��请参见[重塑文档](../../user_guide/reshaping.html#reshaping-melt)。
- en: cast
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: 'In R `acast` is an expression using a data.frame called `df` in R to cast into
    a higher dimensional array:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，`acast`是一个使用名为`df`的数据框来转换为更高维数组的表达式：
- en: '[PRE70]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In Python the best way is to make use of [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，最好的方法是利用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE71]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Similarly for `dcast` which uses a data.frame called `df` in R to aggregate
    information based on `Animal` and `FeedType`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`dcast`，它使用在R中名为`df`的数据框来根据`Animal`和`FeedType`聚合信息的表达式：
- en: '[PRE72]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Python can approach this in two different ways. Firstly, similar to above using
    [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以用两种不同的方式来处理这个问题。首先，类似于上面使用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE73]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The second approach is to use the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法：
- en: '[PRE74]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot)
    or [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节和示例请参见[重塑文档](../../user_guide/reshaping.html#reshaping-pivot)或[分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
- en: pandas has a data type for categorical data.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: pandas有一个用于分类数据的数据类型。
- en: '[PRE75]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In pandas this is accomplished with `pd.cut` and `astype("category")`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，可以通过`pd.cut`和`astype("category")`来实现：
- en: '[PRE76]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: For more details and examples see [categorical introduction](../../user_guide/categorical.html#categorical)
    and the [API documentation](../../reference/arrays.html#api-arrays-categorical).
    There is also a documentation regarding the [differences to R’s factor](../../user_guide/categorical.html#categorical-rfactor).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节和示例请参见[分类介绍](../../user_guide/categorical.html#categorical)和[API文档](../../reference/arrays.html#api-arrays-categorical)。还有关于[R的因子](../../user_guide/categorical.html#categorical-rfactor)的差异的文档。
- en: meltarray
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltarray
- en: 'An expression using a 3 dimensional array called `a` in R where you want to
    melt it into a data.frame:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`a`的三维数组的表达式，你想要将其融化成数据框：
- en: '[PRE77]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: In Python, since `a` is a list, you can simply use list comprehension.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，由于`a`是一个列表，你可以简单地使用列表推导式。
- en: '[PRE78]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: meltlist
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltlist
- en: 'An expression using a list called `a` in R where you want to melt it into a
    data.frame:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`a`的列表的表达式，你想要将其融化成数据框：
- en: '[PRE79]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In Python, this list would be a list of tuples, so [`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") method would convert it to a dataframe as required.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，这个列表将是一个元组的列表，所以[`DataFrame()`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")方法会将其转换为所需的数据框。
- en: '[PRE80]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: For more details and examples see [the Into to Data Structures documentation](../../user_guide/dsintro.html#dsintro).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[数据结构介绍文档](../../user_guide/dsintro.html#dsintro)。
- en: meltdf
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: meltdf
- en: 'An expression using a data.frame called `cheese` in R where you want to reshape
    the data.frame:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中使用名为`cheese`的数据框进行数据重塑的表达式：
- en: '[PRE81]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In Python, the [`melt()`](../../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt") method is the R equivalent:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，[`melt()`](../../reference/api/pandas.melt.html#pandas.melt "pandas.melt")方法相当于R中的：
- en: '[PRE82]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-melt).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[重塑文档](../../user_guide/reshaping.html#reshaping-melt)。
- en: cast
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cast
- en: 'In R `acast` is an expression using a data.frame called `df` in R to cast into
    a higher dimensional array:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，`acast`是使用名为`df`的数据框进行高维数组转换的表达式：
- en: '[PRE83]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'In Python the best way is to make use of [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，最佳方式是利用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE84]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Similarly for `dcast` which uses a data.frame called `df` in R to aggregate
    information based on `Animal` and `FeedType`:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`dcast`，它使用R中名为`df`的数据框根据`Animal`和`FeedType`聚合信息：
- en: '[PRE85]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Python can approach this in two different ways. Firstly, similar to above using
    [`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"):'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以通过两种不同的方式来实现。首先，类似于上面使用[`pivot_table()`](../../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")：
- en: '[PRE86]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The second approach is to use the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用[`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")方法：
- en: '[PRE87]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: For more details and examples see [the reshaping documentation](../../user_guide/reshaping.html#reshaping-pivot)
    or [the groupby documentation](../../user_guide/groupby.html#groupby-split).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[重塑文档](../../user_guide/reshaping.html#reshaping-pivot)或[分组文档](../../user_guide/groupby.html#groupby-split)。
- en: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`factor`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/factor.html)'
- en: pandas has a data type for categorical data.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: pandas有一种用于分类数据的数据类型。
- en: '[PRE88]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'In pandas this is accomplished with `pd.cut` and `astype("category")`:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，可以通过`pd.cut`和`astype("category")`来实现：
- en: '[PRE89]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: For more details and examples see [categorical introduction](../../user_guide/categorical.html#categorical)
    and the [API documentation](../../reference/arrays.html#api-arrays-categorical).
    There is also a documentation regarding the [differences to R’s factor](../../user_guide/categorical.html#categorical-rfactor).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息和示例请参见[分类介绍](../../user_guide/categorical.html#categorical)和[API文档](../../reference/arrays.html#api-arrays-categorical)。还有一份关于[R中因子的差异](../../user_guide/categorical.html#categorical-rfactor)的文档。
