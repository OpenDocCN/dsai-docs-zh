- en: scipy.optimize.nnls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.nnls.html#scipy.optimize.nnls](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.nnls.html#scipy.optimize.nnls)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Solve `argmin_x || Ax - b ||_2` for `x>=0`.
  prefs: []
  type: TYPE_NORMAL
- en: This problem, often called as NonNegative Least Squares, is a convex optimization
    problem with convex constraints. It typically arises when the `x` models quantities
    for which only nonnegative values are attainable; weight of ingredients, component
    costs and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**(m, n) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficient array
  prefs: []
  type: TYPE_NORMAL
- en: '**b**(m,) ndarray, float'
  prefs: []
  type: TYPE_NORMAL
- en: Right-hand side vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter: int, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations, optional. Default value is `3 * n`.
  prefs: []
  type: TYPE_NORMAL
- en: '**atol: float**'
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance value used in the algorithm to assess closeness to zero in the projected
    residual `(A.T @ (A x - b)` entries. Increasing this value relaxes the solution
    constraints. A typical relaxation value can be selected as `max(m, n) * np.linalg.norm(a,
    1) * np.spacing(1.)`. This value is not set as default since the norm operation
    becomes expensive for large problems hence can be used only when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Solution vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**rnorm**float'
  prefs: []
  type: TYPE_NORMAL
- en: The 2-norm of the residual, `|| Ax-b ||_2`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lsq_linear`](scipy.optimize.lsq_linear.html#scipy.optimize.lsq_linear "scipy.optimize.lsq_linear")'
  prefs: []
  type: TYPE_NORMAL
- en: Linear least squares with bounds on the variables
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The code is based on [[2]](#r7b6f74a06af2-2) which is an improved version of
    the classical algorithm of [[1]](#r7b6f74a06af2-1). It utilizes an active set
    method and solves the KKT (Karush-Kuhn-Tucker) conditions for the non-negative
    least squares problem.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: ': Lawson C., Hanson R.J., “Solving Least Squares Problems”, SIAM, 1995, [DOI:10.1137/1.9781611971217](https://doi.org/10.1137/1.9781611971217)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: ': Bro, Rasmus and de Jong, Sijmen, “A Fast Non-Negativity- Constrained Least
    Squares Algorithm”, Journal Of Chemometrics, 1997, [DOI:10.1002/(SICI)1099-128X(199709/10)11:5<393::AID-CEM483>3.0.CO;2-L](https://doi.org/10.1002/(SICI)1099-128X(199709/10)11:5<393::AID-CEM483>3.0.CO;2-L)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
