["```py\n>>> from sympy.vector import CoordSys3D\n>>> N = CoordSys3D('N')\n>>> M = N.locate_new('M', 3*N.i + 4*N.j + 5*N.k)\n>>> M.position_wrt(N)\n3*N.i + 4*N.j + 5*N.k\n>>> N.origin.express_coordinates(M)\n(-3, -4, -5) \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> A = CoordSys3D('A') \n```", "```py\n>>> from sympy import Symbol\n>>> theta = Symbol('theta') \n```", "```py\n>>> B = A.orient_new_axis('B', theta, A.k) \n```", "```py\n>>> from sympy.vector import AxisOrienter\n>>> axis_orienter = AxisOrienter(theta, A.k) \n```", "```py\n>>> B = A.orient_new('B', axis_orienter) \n```", "```py\n>>> from sympy.vector import BodyOrienter\n>>> from sympy.abc import a, b, c\n>>> body_orienter = BodyOrienter(a, b, c, 'XYZ')\n>>> C = A.orient_new('C', (axis_orienter, body_orienter)) \n```", "```py\n>>> B.position_wrt(A)\n0 \n```", "```py\n>>> B = A.orient_new_axis('B', a, A.k)\n>>> B.rotation_matrix(A)\nMatrix([\n[ cos(a), sin(a), 0],\n[-sin(a), cos(a), 0],\n[      0,      0, 1]])\n>>> B.rotation_matrix(B)\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]]) \n```", "```py\n>>> C = A.orient_new_axis('C', a, A.k, location=2*A.j)\n>>> C.position_wrt(A)\n2*A.j\n>>> from sympy.vector import express\n>>> express(A.position_wrt(C), C)\n(-2*sin(a))*C.i + (-2*cos(a))*C.j \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy import sin, cos\n>>> A = CoordSys3D('A', transformation='spherical')\n>>> B = CoordSys3D('A', transformation=lambda x,y,z: (x*sin(y), x*cos(y), z)) \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> A = CoordSys3D('A')\n>>> B = A.create_new('B', transformation='spherical') \n```", "```py\n>>> from sympy.vector import CoordSys3D, express\n>>> from sympy.abc import a, b, c\n>>> N = CoordSys3D('N')\n>>> M = N.orient_new_axis('M', a, N.k) \n```", "```py\n>>> v1 = N.i + N.j + N.k\n>>> express(v1, M)\n(sin(a) + cos(a))*M.i + (-sin(a) + cos(a))*M.j + M.k\n>>> v2 = N.i + M.j\n>>> express(v2, N)\n(1 - sin(a))*N.i + (cos(a))*N.j \n```", "```py\n>>> d = 2*(M.i | N.j) + 3* (M.j | N.k)\n>>> express(d, M)\n(2*sin(a))*(M.i|M.i) + (2*cos(a))*(M.i|M.j) + 3*(M.j|M.k)\n>>> express(d, M, N)\n2*(M.i|N.j) + 3*(M.j|N.k) \n```", "```py\n>>> R = N.locate_new('R', N.i + 2*N.j + 3*N.k)\n>>> T_N = N.x + N.y + N.z\n>>> express(T_N, R, variables=True)\nR.x + R.y + R.z + 6 \n```", "```py\n>>> P = R.origin.locate_new('P', a*R.i + b*R.j + c*R.k)\n>>> P.express_coordinates(N)\n(a + 1, b + 2, c + 3)\n>>> P.express_coordinates(R)\n(a, b, c)\n>>> v = N.i + N.j + N.k\n>>> v.to_matrix(M)\nMatrix([\n[ sin(a) + cos(a)],\n[-sin(a) + cos(a)],\n[               1]])\n>>> v.to_matrix(N)\nMatrix([\n[1],\n[1],\n[1]]) \n```"]