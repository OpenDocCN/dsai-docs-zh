- en: scipy.spatial.cKDTree
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.spatial.cKDTree
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.cKDTree.html#scipy.spatial.cKDTree](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.cKDTree.html#scipy.spatial.cKDTree)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.cKDTree.html#scipy.spatial.cKDTree](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.cKDTree.html#scipy.spatial.cKDTree)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: kd-tree for quick nearest-neighbor lookup
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用于快速最近邻查找的kd树
- en: This class provides an index into a set of k-dimensional points which can be
    used to rapidly look up the nearest neighbors of any point.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供对一组k维点的索引，可用于快速查找任意点的最近邻居。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`cKDTree`](#scipy.spatial.cKDTree "scipy.spatial.cKDTree") is functionally
    identical to [`KDTree`](scipy.spatial.KDTree.html#scipy.spatial.KDTree "scipy.spatial.KDTree").
    Prior to SciPy v1.6.0, [`cKDTree`](#scipy.spatial.cKDTree "scipy.spatial.cKDTree")
    had better performance and slightly different functionality but now the two names
    exist only for backward-compatibility reasons. If compatibility with SciPy < 1.6
    is not a concern, prefer [`KDTree`](scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree").'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cKDTree`](#scipy.spatial.cKDTree "scipy.spatial.cKDTree")在功能上与[`KDTree`](scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree")相同。在SciPy v1.6.0之前，[`cKDTree`](#scipy.spatial.cKDTree "scipy.spatial.cKDTree")性能更好，功能略有不同，但现在这两个名称仅用于向后兼容。如果不考虑与SciPy
    < 1.6的兼容性问题，请优先使用[`KDTree`](scipy.spatial.KDTree.html#scipy.spatial.KDTree "scipy.spatial.KDTree")。'
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '参数: '
- en: '**data**array_like, shape (n,m)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**data**类似数组，形状为(n,m)'
- en: The n data points of dimension m to be indexed. This array is not copied unless
    this is necessary to produce a contiguous array of doubles, and so modifying this
    data will result in bogus results. The data are also copied if the kd-tree is
    built with copy_data=True.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要索引的n个m维数据点。除非必须生成连续的双精度数组，否则不会复制此数组，因此修改这些数据将导致伪数据结果。如果使用copy_data=True构建kd树，则也会复制数据。
- en: '**leafsize**positive int, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**leafsize**正整数，可选'
- en: 'The number of points at which the algorithm switches over to brute-force. Default:
    16.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 算法切换到暴力方法的点数。默认值：16。
- en: '**compact_nodes**bool, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**compact_nodes**布尔值，可选'
- en: 'If True, the kd-tree is built to shrink the hyperrectangles to the actual data
    range. This usually gives a more compact tree that is robust against degenerated
    input data and gives faster queries at the expense of longer build time. Default:
    True.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则构建kd树以缩小超矩形至实际数据范围。这通常会得到更紧凑的树，能够处理退化输入数据并在查询时提供更快的速度，但会增加构建时间。默认值：True。
- en: '**copy_data**bool, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy_data**布尔值，可选'
- en: 'If True the data is always copied to protect the kd-tree against data corruption.
    Default: False.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则始终复制数据以保护kd树免受数据损坏。默认值：False。
- en: '**balanced_tree**bool, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**balanced_tree**布尔值，可选'
- en: 'If True, the median is used to split the hyperrectangles instead of the midpoint.
    This usually gives a more compact tree and faster queries at the expense of longer
    build time. Default: True.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则使用中位数来分割超矩形，而不是使用中点。这通常会给出更紧凑的树和更快的查询速度，但会增加构建时间。默认值：True。
- en: '**boxsize**array_like or scalar, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**boxsize**类似数组或标量，可选'
- en: Apply a m-d toroidal topology to the KDTree.. The topology is generated by \(x_i
    + n_i L_i\) where \(n_i\) are integers and \(L_i\) is the boxsize along i-th dimension.
    The input data shall be wrapped into \([0, L_i)\). A ValueError is raised if any
    of the data is outside of this bound.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对KDTree应用m维环形拓扑结构。拓扑结构由\(x_i + n_i L_i\)生成，其中\(n_i\)为整数，\(L_i\)为第i维的箱尺寸。输入数据将被包装到\([0,
    L_i)\)。如果任何数据超出此边界，则会引发ValueError。
- en: Notes
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The algorithm used is described in Maneewongvatana and Mount 1999. The general
    idea is that the kd-tree is a binary tree, each of whose nodes represents an axis-aligned
    hyperrectangle. Each node specifies an axis and splits the set of points based
    on whether their coordinate along that axis is greater than or less than a particular
    value.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所使用的算法描述在Maneewongvatana和Mount 1999年的论文中。其主要思想是kd树是一棵二叉树，每个节点代表一个轴对齐的超矩形。每个节点指定一个轴，并根据它们沿该轴的坐标是否大于或小于特定值来分割点集。
- en: During construction, the axis and splitting point are chosen by the “sliding
    midpoint” rule, which ensures that the cells do not all become long and thin.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建过程中，通过“滑动中位数”规则选择轴和分割点，以确保单元格不会全部变得又长又薄。
- en: The tree can be queried for the r closest neighbors of any given point (optionally
    returning only those within some maximum distance of the point). It can also be
    queried, with a substantial gain in efficiency, for the r approximate closest
    neighbors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以查询树以获取任意给定点的最接近的 r 个邻居（可选仅返回距离该点某些最大距离内的邻居）。还可以查询，效率大大提高，获取 r 个近似最近邻居。
- en: For large dimensions (20 is already large) do not expect this to run significantly
    faster than brute force. High-dimensional nearest-neighbor queries are a substantial
    open problem in computer science.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大维度（20 已经很大），不要指望此方法比暴力搜索运行更快。高维度最近邻查询是计算机科学中一个重要的开放问题。
- en: 'Attributes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**data**ndarray, shape (n,m)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**data**ndarray，形状为 (n,m)'
- en: The n data points of dimension m to be indexed. This array is not copied unless
    this is necessary to produce a contiguous array of doubles. The data are also
    copied if the kd-tree is built with *copy_data=True*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要索引的 n 个维度为 m 的数据点。除非需要生成连续的 double 数组，否则不会复制此数组。如果使用 *copy_data=True* 构建 kd
    树，则还会复制数据。
- en: '**leafsize**positive int'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**leafsize**正整数'
- en: The number of points at which the algorithm switches over to brute-force.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 算法切换到暴力搜索的点数。
- en: '**m**int'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**m**int'
- en: The dimension of a single data-point.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 单个数据点的维数。
- en: '**n**int'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int'
- en: The number of data points.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点的数量。
- en: '**maxes**ndarray, shape (m,)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxes**ndarray，形状为 (m,)'
- en: The maximum value in each dimension of the n data points.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: n 个数据点每个维度的最大值。
- en: '**mins**ndarray, shape (m,)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**mins**ndarray，形状为 (m,)'
- en: The minimum value in each dimension of the n data points.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: n 个数据点中每个维度的最小值。
- en: '**tree**object, class cKDTreeNode'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**tree**对象，类 cKDTreeNode'
- en: This attribute exposes a Python view of the root node in the cKDTree object.
    A full Python view of the kd-tree is created dynamically on the first access.
    This attribute allows you to create your own query functions in Python.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性提供了 cKDTree 对象中根节点的 Python 视图。kd 树的完整 Python 视图在首次访问时动态创建。此属性允许您在 Python
    中创建自己的查询函数。
- en: '**size**int'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**size**int'
- en: The number of nodes in the tree.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 树中的节点数。
- en: Methods
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`count_neighbors`](scipy.spatial.cKDTree.count_neighbors.html#scipy.spatial.cKDTree.count_neighbors
    "scipy.spatial.cKDTree.count_neighbors")(self, other, r[, p, ...]) | Count how
    many nearby pairs can be formed. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`count_neighbors`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.count_neighbors.html#scipy.spatial.cKDTree.count_neighbors
    "scipy.spatial.cKDTree.count_neighbors")(self, other, r[, p, ...]) | 计算可以形成的附近对数。
    |'
- en: '| [`query`](scipy.spatial.cKDTree.query.html#scipy.spatial.cKDTree.query "scipy.spatial.cKDTree.query")(self, x[, k, eps, p, ...])
    | Query the kd-tree for nearest neighbors |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`query`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html#scipy.spatial.cKDTree.query
    "scipy.spatial.cKDTree.query")(self, x[, k, eps, p, ...]) | 查询 kd 树的最近邻居 |'
- en: '| [`query_ball_point`](scipy.spatial.cKDTree.query_ball_point.html#scipy.spatial.cKDTree.query_ball_point
    "scipy.spatial.cKDTree.query_ball_point")(self, x, r[, p, eps, ...]) | Find all
    points within distance r of point(s) x. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`query_ball_point`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_ball_point.html#scipy.spatial.cKDTree.query_ball_point
    "scipy.spatial.cKDTree.query_ball_point")(self, x, r[, p, eps, ...]) | 查找距离点 x
    距离小于 r 的所有点。 |'
- en: '| [`query_ball_tree`](scipy.spatial.cKDTree.query_ball_tree.html#scipy.spatial.cKDTree.query_ball_tree
    "scipy.spatial.cKDTree.query_ball_tree")(self, other, r[, p, eps]) | Find all
    pairs of points between *self* and *other* whose distance is at most r |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`query_ball_tree`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_ball_tree.html#scipy.spatial.cKDTree.query_ball_tree
    "scipy.spatial.cKDTree.query_ball_tree")(self, other, r[, p, eps]) | 找到 *self*
    和 *other* 之间距离最多为 r 的所有点对。 |'
- en: '| [`query_pairs`](scipy.spatial.cKDTree.query_pairs.html#scipy.spatial.cKDTree.query_pairs
    "scipy.spatial.cKDTree.query_pairs")(self, r[, p, eps, output_type]) | Find all
    pairs of points in *self* whose distance is at most r. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`query_pairs`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_pairs.html#scipy.spatial.cKDTree.query_pairs
    "scipy.spatial.cKDTree.query_pairs")(self, r[, p, eps, output_type]) | 找到距离 *self*
    中任意一对点距离最多为 r 的所有点对。 |'
- en: '| [`sparse_distance_matrix`](scipy.spatial.cKDTree.sparse_distance_matrix.html#scipy.spatial.cKDTree.sparse_distance_matrix
    "scipy.spatial.cKDTree.sparse_distance_matrix")(self, other, max_distance) | Compute
    a sparse distance matrix |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`sparse_distance_matrix`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.sparse_distance_matrix.html#scipy.spatial.cKDTree.sparse_distance_matrix
    "scipy.spatial.cKDTree.sparse_distance_matrix")(self, other, max_distance) | 计算稀疏距离矩阵
    |'
