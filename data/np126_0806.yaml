- en: numpy.ma.arange
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ma.arange
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return evenly spaced values within a given interval.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定间隔内返回均匀间隔的值。
- en: '`arange` can be called with a varying number of positional arguments:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`arange`可以用不同数量的位置参数调用：'
- en: '`arange(stop)`: Values are generated within the half-open interval `[0, stop)`
    (in other words, the interval including *start* but excluding *stop*).'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arange(stop)`：在半开放区间 `[0, stop)` 内生成值（换句话说，包括* start *但不包括* stop *的区间）。'
- en: '`arange(start, stop)`: Values are generated within the half-open interval `[start,
    stop)`.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arange(start, stop)`：在半开放区间 `[start, stop)` 内生成值。'
- en: '`arange(start, stop, step)` Values are generated within the half-open interval
    `[start, stop)`, with spacing between values given by `step`.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arange(start, stop, step)`：在半开放区间 `[start, stop)` 之间生成值，值之间的间隔由`step`给出。'
- en: For integer arguments the function is roughly equivalent to the Python built-in
    [`range`](https://docs.python.org/3/library/stdtypes.html#range "(in Python v3.11)"),
    but returns an ndarray rather than a `range` instance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整数参数，该函数与Python内置的[`range`](https://docs.python.org/3/library/stdtypes.html#range
    "(在 Python v3.11 中)")大致等价，但返回的是一个ndarray而不是`range`实例。
- en: When using a non-integer step, such as 0.1, it is often better to use [`numpy.linspace`](numpy.linspace.html#numpy.linspace
    "numpy.linspace").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用非整数步长，例如0.1时，通常最好使用[`numpy.linspace`](numpy.linspace.html#numpy.linspace
    "numpy.linspace")。
- en: See the Warning sections below for more information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅下面的警告部分。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**start**integer or real, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**start**：整数或实数，可选'
- en: Start of interval. The interval includes this value. The default start value
    is 0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 区间开始。 区间包括此值。 默认起始值为0。
- en: '**stop**integer or real'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**stop**：整数或实数'
- en: End of interval. The interval does not include this value, except in some cases
    where *step* is not an integer and floating point round-off affects the length
    of *out*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 区间结束。 不包括此值，但在某些情况下除外，*步长*不是整数，并且浮点舍入会影响*out*的长度。
- en: '**step**integer or real, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**step**：整数或实数，可选'
- en: Spacing between values. For any output *out*, this is the distance between two
    adjacent values, `out[i+1] - out[i]`. The default step size is 1\. If *step* is
    specified as a position argument, *start* must also be given.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 值之间的间隔。 对于任何输出*out*，这是两个相邻值之间的距离，`out[i+1] - out[i]`。默认步长为1。如果步长被指定为位置参数，则必须同时给出*start*。
- en: '**dtype**dtype, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**：dtype，可选'
- en: The type of the output array. If [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")
    is not given, infer the data type from the other input arguments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 输出数组的类型。如果没有给出[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")，则从其他输入参数中推断数据类型。
- en: '**like**array_like, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**like**：array_like, optional'
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参考对象，以允许创建不是NumPy数组的数组。如果传递给`like`的类似数组支持`__array_function__`协议，则结果将由它定义。在这种情况下，它确保创建与通过此参数传入的数组对象兼容的数组对象。
- en: New in version 1.20.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.20.0 中的新功能。
- en: 'Returns:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**arange**MaskedArray'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**arange**：MaskedArray'
- en: Array of evenly spaced values.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 均匀间隔的数组。
- en: For floating point arguments, the length of the result is `ceil((stop - start)/step)`.
    Because of floating point overflow, this rule may result in the last element of
    *out* being greater than *stop*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于浮点参数，结果的长度为`ceil((stop - start)/step)`。由于浮点溢出，这一规则可能导致*out*的最后一个元素大于* stop
    *。
- en: Warning
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The length of the output might not be numerically stable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的长度可能不是数值稳定的。
- en: 'Another stability issue is due to the internal implementation of [`numpy.arange`](numpy.arange.html#numpy.arange
    "numpy.arange"). The actual step value used to populate the array is `dtype(start
    + step) - dtype(start)` and not *step*. Precision loss can occur here, due to
    casting or due to using floating points when *start* is much larger than *step*.
    This can lead to unexpected behaviour. For example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个稳定性问题是由于内部实现[`numpy.arange`](numpy.arange.html#numpy.arange "numpy.arange")。用于填充数组的实际步长值是`dtype(start
    + step) - dtype(start)`而不是* step *。在这里可能会发生精度损失，由于强制转换或使用浮点数时* start *远大于* step
    *。这可能导致意外行为。例如：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In such cases, the use of [`numpy.linspace`](numpy.linspace.html#numpy.linspace
    "numpy.linspace") should be preferred.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '在这种情况下，应该优先使用[`numpy.linspace`](numpy.linspace.html#numpy.linspace "numpy.linspace")。 '
- en: 'The built-in [`range`](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.11)") generates [Python built-in integers that have arbitrary size](https://docs.python.org/3/c-api/long.html
    "(in Python v3.11)"), while [`numpy.arange`](numpy.arange.html#numpy.arange "numpy.arange")
    produces [`numpy.int32`](../arrays.scalars.html#numpy.int32 "numpy.int32") or
    [`numpy.int64`](../arrays.scalars.html#numpy.int64 "numpy.int64") numbers. This
    may result in incorrect results for large integer values:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 内置函数[`range`](https://docs.python.org/3/library/stdtypes.html#range "(in Python
    v3.11)")生成具有任意大小的[Python内置整数](https://docs.python.org/3/c-api/long.html "(in Python
    v3.11)")，而[`numpy.arange`](numpy.arange.html#numpy.arange "numpy.arange")生成[`numpy.int32`](../arrays.scalars.html#numpy.int32
    "numpy.int32")或[`numpy.int64`](../arrays.scalars.html#numpy.int64 "numpy.int64")类型的数字。对于大整数值，可能导致错误的结果：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`numpy.linspace`](numpy.linspace.html#numpy.linspace "numpy.linspace")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.linspace`](numpy.linspace.html#numpy.linspace "numpy.linspace")'
- en: Evenly spaced numbers with careful handling of endpoints.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理端点时，保证数字间隔均匀。
- en: '[`numpy.ogrid`](numpy.ogrid.html#numpy.ogrid "numpy.ogrid")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ogrid`](numpy.ogrid.html#numpy.ogrid "numpy.ogrid")'
- en: Arrays of evenly spaced numbers in N-dimensions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在N维空间中产生均匀间隔的数字数组。
- en: '[`numpy.mgrid`](numpy.mgrid.html#numpy.mgrid "numpy.mgrid")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.mgrid`](numpy.mgrid.html#numpy.mgrid "numpy.mgrid")'
- en: Grid-shaped arrays of evenly spaced numbers in N-dimensions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在N维空间中产生形状为网格的均匀间隔数字数组。
- en: '[How to create arrays with regularly-spaced values](../../user/how-to-partition.html#how-to-partition)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何创建带有等间距值的数组](../../user/how-to-partition.html#how-to-partition)'
- en: Examples
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
