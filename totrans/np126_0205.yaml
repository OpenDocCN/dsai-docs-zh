- en: numpy.s_
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.s_
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.s_.html](https://numpy.org/doc/1.26/reference/generated/numpy.s_.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.s_.html](https://numpy.org/doc/1.26/reference/generated/numpy.s_.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A nicer way to build up index tuples for arrays.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为数组构建索引元组的更好方法。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Use one of the two predefined instances `index_exp` or [`s_`](#numpy.s_ "numpy.s_")
    rather than directly using *IndexExpression*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个预定义实例`index_exp`或[`s_`](https://numpy.org/doc/1.26/reference/generated/numpy.s_.html)而不是直接使用*IndexExpression*。
- en: For any index combination, including slicing and axis insertion, `a[indices]`
    is the same as `a[np.index_exp[indices]]` for any array *a*. However, `np.index_exp[indices]`
    can be used anywhere in Python code and returns a tuple of slice objects that
    can be used in the construction of complex index expressions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何索引组合，包括切片和轴插入，`a[indices]`与`a[np.index_exp[indices]]`对于任何数组*a*来说是相同的。然而，`np.index_exp[indices]`可以在Python代码的任何地方使用，并返回一个可以用于构建复杂索引表达式的切片对象元组。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**maketuple**bool'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**maketuple**bool'
- en: If True, always returns a tuple.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，始终返回一个元组。
- en: See also
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '`index_exp`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`index_exp`'
- en: 'Predefined instance that always returns a tuple: *index_exp = IndexExpression(maketuple=True)*.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义实例，始终返回一个元组：*index_exp = IndexExpression(maketuple=True)*。
- en: '[`s_`](#numpy.s_ "numpy.s_")'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`s_`](https://numpy.org/doc/1.26/reference/generated/numpy.s_.html)'
- en: 'Predefined instance without tuple conversion: *s_ = IndexExpression(maketuple=False)*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义实例，不进行元组转换：*s_ = IndexExpression(maketuple=False)*。
- en: Notes
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can do all this with *slice()* plus a few special objects, but there’s a
    lot to remember and this version is simpler because it uses the standard array
    indexing syntax.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用*slice()*加上一些特殊对象来完成所有这些操作，但这样做需要记住很多东西，这个版本更简单，因为它使用标准的数组索引语法。
- en: Examples
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
