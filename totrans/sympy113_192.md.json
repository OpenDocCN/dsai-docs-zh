["```py\nsympy.physics.mechanics.msubs(expr, *sub_dicts, smart=False, **kwargs)\n```", "```py\n>>> from sympy.physics.mechanics import dynamicsymbols, msubs\n>>> x = dynamicsymbols('x')\n>>> msubs(x.diff() + x, {x: 1})\nDerivative(x(t), t) + 1 \n```", "```py\n>>> x, y, z = dynamicsymbols('x, y, z')\n>>> sub1 = {x: 1, y: 2}\n>>> sub2 = {z: 3, x.diff(): 4}\n>>> msubs(x.diff() + x + y + z, sub1, sub2)\n10 \n```", "```py\n>>> from sympy import sin, tan\n>>> (sin(x)/tan(x)).subs(x, 0)\nnan\n>>> msubs(sin(x)/tan(x), {x: 0}, smart=True)\n1 \n```", "```py\nsympy.physics.mechanics.find_dynamicsymbols(expression, exclude=None, reference_frame=None)\n```", "```py\n>>> from sympy.physics.mechanics import dynamicsymbols, find_dynamicsymbols\n>>> from sympy.physics.mechanics import ReferenceFrame\n>>> x, y = dynamicsymbols('x, y')\n>>> expr = x + x.diff()*y\n>>> find_dynamicsymbols(expr)\n{x(t), y(t), Derivative(x(t), t)}\n>>> find_dynamicsymbols(expr, exclude=[x, y])\n{Derivative(x(t), t)}\n>>> a, b, c = dynamicsymbols('a, b, c')\n>>> A = ReferenceFrame('A')\n>>> v = a * A.x + b * A.y + c * A.z\n>>> find_dynamicsymbols(v, reference_frame=A)\n{a(t), b(t), c(t)} \n```"]