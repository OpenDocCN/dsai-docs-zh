["```py\nscipy.optimize.brute(func, ranges, args=(), Ns=20, full_output=0, finish=<function fmin>, disp=False, workers=1)\n```", "```py\n>>> import numpy as np\n>>> params = (2, 3, 7, 8, 9, 10, 44, -1, 2, 26, 1, -2, 0.5)\n>>> def f1(z, *params):\n...     x, y = z\n...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n...     return (a * x**2 + b * x * y + c * y**2 + d*x + e*y + f) \n```", "```py\n>>> def f2(z, *params):\n...     x, y = z\n...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n...     return (-g*np.exp(-((x-h)**2 + (y-i)**2) / scale)) \n```", "```py\n>>> def f3(z, *params):\n...     x, y = z\n...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n...     return (-j*np.exp(-((x-k)**2 + (y-l)**2) / scale)) \n```", "```py\n>>> def f(z, *params):\n...     return f1(z, *params) + f2(z, *params) + f3(z, *params) \n```", "```py\n>>> rranges = (slice(-4, 4, 0.25), slice(-4, 4, 0.25))\n>>> from scipy import optimize\n>>> resbrute = optimize.brute(f, rranges, args=params, full_output=True,\n...                           finish=optimize.fmin)\n>>> resbrute[0]  # global minimum\narray([-1.05665192,  1.80834843])\n>>> resbrute[1]  # function value at global minimum\n-3.4085818767 \n```"]