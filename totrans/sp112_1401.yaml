- en: SciPy contributor guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/contributor_toc.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/contributor_toc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This guide is designed to help you quickly find the information you need about
    SciPy development after you’ve reviewed the introductory material in [Ways to
    Contribute](../hacking.html#hacking) or [Contributor quickstart guide](../dev_quickstart.html#dev-quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also watch [SciPy Development Workflow](https://youtu.be/HgU01gJbzMY),
    a five-minute video example of fixing a bug and submitting a pull request (*note:
    this video is from 2018, so the build steps are different by now - the overall
    workflow is still the same though*).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Building from source](../../building/index.html#building-from-source) - how
    to set up a development environment, including installing compilers and SciPy
    dependencies, cloning the SciPy repository on GitHub and updating git submodules,
    and using the `dev.py` interface for building and running tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Editing SciPy](#editing-scipy) - how to edit SciPy Python code, with tips
    on finding which module contains SciPy functionality to be edited, adding new
    modules to SciPy, and complying with PEP8 style standards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unit tests](#unit-tests) - how to write and run unit tests for SciPy with
    the pytest framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation](#docs) - how to write reStructuredText documentation that complies
    with docstring standards, build documentation locally with Sphinx, and view documentation
    built during continuous integration checks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Benchmarks](#toc-benchmarking) - how to benchmark code with airspeed velocity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Compiled code](#compiled-code) - how to add fast, compiled code to SciPy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Continuous Integration](continuous_integration.html#continuous-integration)
    - how does our continuous integration system works and how to debug your PR'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Editing SciPy'
  prefs: []
  type: TYPE_NORMAL
- en: '[Development workflow](development_workflow.html#development-workflow) lays
    out what to do after your development environment is set up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PEP8 and SciPy](pep8.html#pep8-scipy) gives some tips for ensuring that your
    code is PEP8 compliant'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Git for development](../gitwash/gitwash.html#git-development) is a guide to
    using `git`, the distributed version-control system used to manage the changes
    made to SciPy code from around the world'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy API](../../reference/index.html#scipy-api) contains some important notes
    about how SciPy code is organized and documents the structure of the SciPy API;
    if you are going to import other SciPy code, read this first'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reviewing Pull Requests](reviewing_prs.html#reviewing-prs) explains how to
    review another author’s SciPy code locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Triaging and curating issues](../triage.html#triaging) explains how to curate
    issues and PRs, as well as how GitHub team permissions work for SciPy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adding New Methods, Functions, and Classes](adding_new.html#adding-new) has
    information on how to add new methods, functions and classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy Core Developer Guide](../core-dev/index.html#core-dev-guide) has background
    information including how decisions are made and how a release is prepared; it’s
    geared toward [Core Developers](../governance.html#governance), but contains useful
    information for all contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Code and Documentation Style Guide - The Missing Bits](../missing-bits.html#missing-bits)
    - code and documentation style guide  ## Unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing guidelines](https://numpy.org/devdocs/reference/testing.html "(in
    NumPy v2.0.dev0)") is the definitive guide to writing unit tests of NumPy or SciPy
    code (part of the NumPy documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running SciPy Tests Locally](devpy_test.html#devpy-test) documents `dev.py
    test`, the command to build SciPy and run tests locally  ## Documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation style](https://numpy.org/devdocs/dev/howto-docs.html#howto-document
    "(in NumPy v2.0.dev0)") contains everything you need to know about writing docstrings,
    which are rendered to produce HTML documentation using [Sphinx](http://www.sphinx-doc.org/en/master/)
    (part of the NumPy documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributing to the SciPy documentation](rendering_documentation.html#contributing-docs)
    contains information on how to contribute to the SciPy documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rendering documentation locally with Sphinx](rendering_documentation.html#rendering-documentation)
    it’s important to check how changes to the documentation render before merging
    a PR; this document explains how you can do that  ## Benchmarks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Benchmarking SciPy with airspeed velocity](benchmarking.html#benchmarking-with-asv)
    explains how to add benchmarks to SciPy using [airspeed velocity](https://asv.readthedocs.io/en/stable/)  ##
    Compiled code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Adding Cython to SciPy](cython.html#adding-cython) extending and compiling
    Python code with [Cython](https://cython.org/) can significantly improve its performance;
    this document helps you get started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beyond Python](compiled_code.html#other-languages) discusses the use of C,
    C++, and Fortran code in SciPy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Public Cython APIs](public_cython_api.html#public-cython-api) on guidelines
    on exposing public Cython APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
