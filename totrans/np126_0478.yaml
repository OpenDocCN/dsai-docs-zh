- en: numpy.emath.sqrt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.emath.sqrt.html](https://numpy.org/doc/1.26/reference/generated/numpy.emath.sqrt.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the square root of x.
  prefs: []
  type: TYPE_NORMAL
- en: For negative input elements, a complex value is returned (unlike [`numpy.sqrt`](numpy.sqrt.html#numpy.sqrt
    "numpy.sqrt") which returns NaN).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input value(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The square root of *x*. If *x* was a scalar, so is *out*, otherwise an array
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.sqrt`](numpy.sqrt.html#numpy.sqrt "numpy.sqrt")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For real, non-negative inputs this works just like [`numpy.sqrt`](numpy.sqrt.html#numpy.sqrt
    "numpy.sqrt"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But it automatically handles negative inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Different results are expected because: floating point 0.0 and -0.0 are distinct.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more control, explicitly use complex() as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
