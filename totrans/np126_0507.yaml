- en: numpy.fft.hfft
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.fft.hfft
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Compute the FFT of a signal that has Hermitian symmetry, i.e., a real spectrum.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算���有Hermite对称性的信号的FFT，即实谱。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a**array_like'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**array_like'
- en: The input array.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数组。
- en: '**n**int, optional'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int，可选'
- en: Length of the transformed axis of the output. For *n* output points, `n//2 +
    1` input points are necessary. If the input is longer than this, it is cropped.
    If it is shorter than this, it is padded with zeros. If *n* is not given, it is
    taken to be `2*(m-1)` where `m` is the length of the input along the axis specified
    by *axis*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的转换轴的长度。对于 *n* 个输出点，需要 `n//2 + 1` 个输入点。如果输入长度超过这个值，则会被截断。如果长度小于这个值，则用零填充。如果没有给出
    *n*，则将其视为 `2*(m-1)`，其中 *m* 是由 *axis* 指定的轴上的输入长度。
- en: '**axis**int, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**int，可选'
- en: Axis over which to compute the FFT. If not given, the last axis is used.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算FFT的轴。如果未给出，则使用最后一个轴。
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**norm**{“backward”, “ortho”, “forward”}，可选'
- en: New in version 1.10.0.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 1.10.0版本中的新内容。
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化模式（参见[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft")）。默认为“backward”。指示正向/反向转换对的哪个方向被缩放以及使用什么标准化因子。
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 1.20.0版本中的新内容：添加了“backward”、“forward”值。
- en: 'Returns:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**out**ndarray'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**ndarray'
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is *n*, or, if *n* is not given, `2*m - 2` where `m` is the length of the
    transformed axis of the input. To get an odd number of output points, *n* must
    be specified, for instance as `2*m - 1` in the typical case,
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 截断或零填充的输入，沿 *axis* 指示的轴变换，或者如果未指定 *axis*，则沿最后一个轴变换。转换轴的长度为 *n*，或者，如果未给出 *n*，则为
    `2*m-2`，其中 *m* 是输入的转换轴的长度。要获得奇数个输出点，必须指定 *n*，例如在典型情况下指定为 `2*m-1`，
- en: 'Raises:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: IndexError
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 索引错误
- en: If *axis* is not a valid axis of *a*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*axis*不是*a*的有效轴。
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")'
- en: Compute the one-dimensional FFT for real input.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算实输入的一维FFT。
- en: '[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft "numpy.fft.ihfft")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft "numpy.fft.ihfft")'
- en: The inverse of [`hfft`](#numpy.fft.hfft "numpy.fft.hfft").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hfft`](#numpy.fft.hfft "numpy.fft.hfft")的逆。'
- en: Notes
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`hfft`](#numpy.fft.hfft "numpy.fft.hfft")/[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft
    "numpy.fft.ihfft") are a pair analogous to [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft
    "numpy.fft.rfft")/[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft"),
    but for the opposite case: here the signal has Hermitian symmetry in the time
    domain and is real in the frequency domain. So here it’s [`hfft`](#numpy.fft.hfft
    "numpy.fft.hfft") for which you must supply the length of the result if it is
    to be odd.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hfft`](#numpy.fft.hfft "numpy.fft.hfft")/[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft
    "numpy.fft.ihfft")是一对类似于[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")/[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft
    "numpy.fft.irfft")的函数，但适用于相反的情况：这里信号在时域具有Hermite对称性，在频域是实数。所以这里是[`hfft`](#numpy.fft.hfft
    "numpy.fft.hfft")，你必须提供结果长度（如果长度为奇数）。'
- en: 'even: `ihfft(hfft(a, 2*len(a) - 2)) == a`, within roundoff error,'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偶数：`ihfft(hfft(a, 2*len(a) - 2)) == a`，舍入误差内，
- en: 'odd: `ihfft(hfft(a, 2*len(a) - 1)) == a`, within roundoff error.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奇数：`ihfft(hfft(a, 2*len(a) - 1)) == a`，舍入误差内。
- en: The correct interpretation of the hermitian input depends on the length of the
    original data, as given by *n*. This is because each input shape could correspond
    to either an odd or even length signal. By default, [`hfft`](#numpy.fft.hfft "numpy.fft.hfft")
    assumes an even output length which puts the last entry at the Nyquist frequency;
    aliasing with its symmetric counterpart. By Hermitian symmetry, the value is thus
    treated as purely real. To avoid losing information, the shape of the full signal
    **must** be given.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Hermite 输入的正确解释取决于原始数据的长度，由 *n* 给出。这是因为每个输入形状可以对应于奇数长度或偶数长度信号。默认情况下，[`hfft`](#numpy.fft.hfft
    "numpy.fft.hfft")假设一个偶数长度的输出，这使得最后一个条目位于Nyquist频率处；与其对称对应的混叠。通过Hermite对称性，该值因此被视为纯实数。为了避免丢失信息，必须给出全信号的形状。
- en: Examples
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
