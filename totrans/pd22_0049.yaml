- en: Frequently Asked Questions (FAQ)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题（FAQ）
- en: 原文：[https://pandas.pydata.org/docs/user_guide/gotchas.html](https://pandas.pydata.org/docs/user_guide/gotchas.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/gotchas.html](https://pandas.pydata.org/docs/user_guide/gotchas.html)
- en: '## DataFrame memory usage'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## DataFrame 内存使用情况'
- en: The memory usage of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (including the index) is shown when calling the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"). A configuration option, `display.memory_usage` (see
    [the list of options](options.html#options-available)), specifies if the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") memory usage will be displayed when invoking the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 时，[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况（包括索引）会显示出来。一个配置选项，`display.memory_usage`（参见[选项列表](options.html#options-available)），指定了在调用
    [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")
    方法时是否会显示 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况。
- en: 'For example, the memory usage of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") below is shown when calling [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在调用 [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 时，下面的 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况会显示如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `+` symbol indicates that the true memory usage could be higher, because
    pandas does not count the memory used by values in columns with `dtype=object`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 符号表示真实内存使用量可能更高，因为 pandas 不会计算具有 `dtype=object` 的列中的值所使用的内存。'
- en: Passing `memory_usage='deep'` will enable a more accurate memory usage report,
    accounting for the full usage of the contained objects. This is optional as it
    can be expensive to do this deeper introspection.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 `memory_usage='deep'` 将启用更准确的内存使用报告，考虑到所包含对象的完整使用情况。这是可选的，因为进行这种更深层次的内省可能很昂贵。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default the display option is set to `True` but can be explicitly overridden
    by passing the `memory_usage` argument when invoking [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，显示选项设置为 `True`，但是在调用 [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 时可以通过显式传递 `memory_usage` 参数来明确覆盖。
- en: 'The memory usage of each column can be found by calling the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method. This returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with an index represented by column names and memory usage of
    each column shown in bytes. For the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") above, the memory usage of each column and the total memory
    usage can be found with the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过调用 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法找到每列的内存使用情况。这会返回一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，其索引由列名表示，并显示每列的内存使用情况（以字节为单位）。对于上述的 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")，可以通过 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法找到每列的内存使用情况和总内存使用情况：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By default the memory usage of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") index is shown in the returned [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), the memory usage of the index can be suppressed by passing the
    `index=False` argument:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，返回的 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    中显示 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    索引的内存使用情况，可以通过传递 `index=False` 参数来抑制索引的内存使用情况：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The memory usage displayed by the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") method utilizes the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method to determine the memory usage of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") while also formatting the output in human-readable units (base-2
    representation; i.e. 1KB = 1024 bytes).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 方法显示的内存使用情况利用了 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法来确定 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况，同时以人类可读的单位格式化输出（基于2的表示法；即 1KB = 1024 字节）。'
- en: 'See also [Categorical Memory Usage](categorical.html#categorical-memory).  ##
    Using if/truth statements with pandas'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '另请参阅 [分类记忆用法](categorical.html#categorical-memory)。  ## 在 pandas 中使用 if/truth
    语句'
- en: 'pandas follows the NumPy convention of raising an error when you try to convert
    something to a `bool`. This happens in an `if`-statement or when using the boolean
    operations: `and`, `or`, and `not`. It is not clear what the result of the following
    code should be:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 遵循 NumPy 的惯例，当你尝试将某些内容转换为 `bool` 时会引发错误。这会在 `if` 语句中或使用布尔操作：`and`、`or`
    和 `not` 时发生。以下代码的结果不清楚：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Should it be `True` because it’s not zero-length, or `False` because there
    are `False` values? It is unclear, so instead, pandas raises a `ValueError`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 应该是 `True` 吗，因为它不是零长度，还是 `False` 因为有 `False` 值？不清楚，所以 pandas 引发了 `ValueError`：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You need to explicitly choose what you want to do with the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), e.g. use [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any"), [`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") or [`empty()`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty"). Alternatively, you might want to compare if the pandas
    object is `None`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要明确选择你想要对 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 做什么，例如使用 [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any")、[`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") 或 [`empty()`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty")。或者，你可能想要比较 pandas 对象是否为 `None`：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Below is how to check if any of the values are `True`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何检查任何值是否为 `True`：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Bitwise boolean
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位运算布尔值
- en: Bitwise boolean operators like `==` and `!=` return a boolean [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") which performs an element-wise comparison when compared to a
    scalar.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算布尔运算符如 `==` 和 `!=` 返回一个布尔 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，与标量进行比较时执行逐元素比较。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See [boolean comparisons](basics.html#basics-compare) for more examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [布尔值比较](basics.html#basics-compare) 获取更多示例。
- en: Using the `in` operator
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `in` 运算符
- en: Using the Python `in` operator on a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") tests for membership in the **index**, not membership among the
    values.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    上使用 Python `in` 运算符测试成员身份在**索引**中，而不是在值之间。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If this behavior is surprising, keep in mind that using `in` on a Python dictionary
    tests keys, not values, and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") are dict-like. To test for membership in the values, use the
    method [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin"):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这种行为令人惊讶，请记住，在 Python 字典上使用 `in` 测试键，而不是值，并且 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 类似于字典。要测试成员身份是否在值中，请使用方法 [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin")：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    likewise, `in` applies to the column axis, testing for membership in the list
    of column names.  ## Mutating with User Defined Function (UDF) methods'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '对于 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")，同样地，`in`
    应用于列轴，测试是否在列名列表中。  ## 通过用户定义的函数 (UDF) 方法进行变异'
- en: This section applies to pandas methods that take a UDF. In particular, the methods
    [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"), [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate"), [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform"), and [`DataFrame.filter()`](../reference/api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分适用于需要 UDF 的 pandas 方法。特别是 [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")、[`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")、[`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 和 [`DataFrame.filter()`](../reference/api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter") 方法。
- en: 'It is a general rule in programming that one should not mutate a container
    while it is being iterated over. Mutation will invalidate the iterator, causing
    unexpected behavior. Consider the example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，通常的规则是在容器被迭代时不要改变容器。变异将使迭代器无效，导致意外行为。考虑以下例子：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: One probably would have expected that the result would be `[1, 3, 5]`. When
    using a pandas method that takes a UDF, internally pandas is often iterating over
    the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or other pandas object. Therefore, if the UDF mutates (changes) the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), unexpected behavior can arise.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会期望结果是 `[1, 3, 5]`。当使用需要 UDF 的 pandas 方法时，内部 pandas 通常会迭代 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 或其他 pandas 对象。因此，如果 UDF 改变了 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")，可能会出现意外行为。
- en: 'Here is a similar example with [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个类似的例子，使用 [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To resolve this issue, one can make a copy so that the mutation does not apply
    to the container being iterated over.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，可以制作一份副本，这样变异就不会应用于正在迭代的容器。
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Missing value representation for NumPy types
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 类型的缺失值表示
- en: '`np.nan` as the `NA` representation for NumPy types'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.nan` 作为 NumPy 类型的 `NA` 表示'
- en: 'For lack of `NA` (missing) support from the ground up in NumPy and Python in
    general, `NA` could have been represented with:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在 NumPy 和 Python 中普遍缺乏对 `NA`（缺失）的支持，`NA` 可以用以下方式表示：
- en: 'A *masked array* solution: an array of data and an array of boolean values
    indicating whether a value is there or is missing.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种 *掩码数组* 解决方案：一个数据数组和一个布尔值数组，指示值是否存在或缺失。
- en: Using a special sentinel value, bit pattern, or set of sentinel values to denote
    `NA` across the dtypes.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特殊的哨兵值、位模式或一组哨兵值来表示各种 dtypes 中的 `NA`。
- en: The special value `np.nan` (Not-A-Number) was chosen as the `NA` value for NumPy
    types, and there are API functions like [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") and [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") which can be used across the dtypes to detect NA values.
    However, this choice has a downside of coercing missing integer data as float
    types as shown in [Support for integer NA](#gotchas-intna).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 选择特殊值 `np.nan`（非数字）作为 NumPy 类型的 `NA` 值，并且有一些 API 函数如 [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") 和 [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") 可以用于各种 dtypes 来检测 NA 值。然而，这个选择有一个缺点，即将缺失的整数数据强制转换为浮点类型，如
    [整数 NA 的支持](#gotchas-intna) 所示。
- en: '`NA` type promotions for NumPy types'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 类型的 `NA` 类型提升
- en: 'When introducing NAs into an existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") via [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") or some other means, boolean and integer types will be
    promoted to a different dtype in order to store the NAs. The promotions are summarized
    in this table:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex")或其他方式向现有的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")引入NA时，布尔和整数类型将被提升为不同的dtype以存储NA。这些提升总结在这个表中：
- en: '| Typeclass | Promotion dtype for storing NAs |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 用于存储NA的提升dtype |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `floating` | no change |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `floating` | 无变化 |'
- en: '| `object` | no change |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `object` | 无变化 |'
- en: '| `integer` | cast to `float64` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `integer` | 转换为`float64` |'
- en: '| `boolean` | cast to `object` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `boolean` | 转换为`object` |'
- en: '### Support for integer `NA`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '### 支持整数`NA`'
- en: 'In the absence of high performance `NA` support being built into NumPy from
    the ground up, the primary casualty is the ability to represent NAs in integer
    arrays. For example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中没有从头开始构建高性能`NA`支持的情况下，主要的牺牲品是无法在整数数组中表示NA。例如：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This trade-off is made largely for memory and performance reasons, and also
    so that the resulting [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") continues to be “numeric”.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这种权衡主要是出于内存和性能原因，以及确保生成的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")继续是“数值型”的原因。
- en: If you need to represent integers with possibly missing values, use one of the
    nullable-integer extension dtypes provided by pandas or pyarrow
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要表示可能缺失值的整数，请使用pandas或pyarrow提供的可空整数扩展dtypes之一
- en: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
- en: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
- en: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
- en: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
- en: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See [Nullable integer data type](integer_na.html#integer-na) and [PyArrow Functionality](pyarrow.html#pyarrow)
    for more.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[可空整数数据类型](integer_na.html#integer-na)和[PyArrow功能](pyarrow.html#pyarrow)以获取更多信息。
- en: Why not make NumPy like R?
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么不让NumPy像R一样呢？
- en: 'Many people have suggested that NumPy should simply emulate the `NA` support
    present in the more domain-specific statistical programming language [R](https://www.r-project.org/).
    Part of the reason is the NumPy type hierarchy:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人建议NumPy应该简单地模仿更多领域特定的统计编程语言[R](https://www.r-project.org/)中存在的`NA`支持。部分原因是NumPy类型层次结构：
- en: '| Typeclass | Dtypes |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | Dtypes |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.floating` | `float16, float32, float64, float128` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.floating` | `float16, float32, float64, float128` |'
- en: '| `numpy.integer` | `int8, int16, int32, int64` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.integer` | `int8, int16, int32, int64` |'
- en: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
- en: '| `numpy.object_` | `object_` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.object_` | `object_` |'
- en: '| `numpy.bool_` | `bool_` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.bool_` | `bool_` |'
- en: '| `numpy.character` | `bytes_, str_` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.character` | `bytes_, str_` |'
- en: 'The R language, by contrast, only has a handful of built-in data types: `integer`,
    `numeric` (floating-point), `character`, and `boolean`. `NA` types are implemented
    by reserving special bit patterns for each type to be used as the missing value.
    While doing this with the full NumPy type hierarchy would be possible, it would
    be a more substantial trade-off (especially for the 8- and 16-bit data types)
    and implementation undertaking.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，R语言只有少数几种内置数据类型：`integer`、`numeric`（浮点数）、`character`和`boolean`。`NA`类型是通过为每种类型保留特殊的位模式来实现的，用作缺失值。虽然在整个NumPy类型层次结构中执行此操作是可能的，但这将是一个更重大的权衡（特别是对于8位和16位数据类型），并且需要更多的实现工作。
- en: However, R `NA` semantics are now available by using masked NumPy types such
    as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")
    or PyArrow types ([`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，R的`NA`语义现在可通过使用遮罩NumPy类型（例如[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")）或PyArrow类型（[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")）来实现。
- en: Differences with NumPy
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与NumPy的差异
- en: For [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects, [`var()`](../reference/api/pandas.DataFrame.var.html#pandas.DataFrame.var
    "pandas.DataFrame.var") normalizes by `N-1` to produce [unbiased estimates of
    the population variance](https://en.wikipedia.org/wiki/Bias_of_an_estimator),
    while NumPy’s `numpy.var()` normalizes by N, which measures the variance of the
    sample. Note that [`cov()`](../reference/api/pandas.DataFrame.cov.html#pandas.DataFrame.cov
    "pandas.DataFrame.cov") normalizes by `N-1` in both pandas and NumPy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象，[`var()`](../reference/api/pandas.DataFrame.var.html#pandas.DataFrame.var
    "pandas.DataFrame.var")通过`N-1`进行归一化以生成[无偏的总体方差估计](https://en.wikipedia.org/wiki/Bias_of_an_estimator)，而NumPy的`numpy.var()`通过N进行归一化，该方法测量样本的方差。请注意，[`cov()`](../reference/api/pandas.DataFrame.cov.html#pandas.DataFrame.cov
    "pandas.DataFrame.cov")在pandas和NumPy中都通过`N-1`进行归一化。
- en: '## Thread-safety'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '## 线程安全性'
- en: pandas is not 100% thread safe. The known issues relate to the [`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy") method. If you are doing a lot of copying of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects shared among threads, we recommend holding locks inside
    the threads where the data copying occurs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: pandas并非100%线程安全。已知问题与[`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy")方法有关。如果您在线程之间共享的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象上进行大量复制操作，我们建议在发生数据复制的线程内持有锁定。
- en: See [this link](https://stackoverflow.com/questions/13592618/python-pandas-dataframe-thread-safe)
    for more information.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[此链接](https://stackoverflow.com/questions/13592618/python-pandas-dataframe-thread-safe)。
- en: Byte-ordering issues
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字节顺序问题
- en: 'Occasionally you may have to deal with data that were created on a machine
    with a different byte order than the one on which you are running Python. A common
    symptom of this issue is an error like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔你可能需要处理在与运行Python的机器上的字节顺序不同的机器上创建的数据。此问题的常见症状是错误，例如：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To deal with this issue you should convert the underlying NumPy array to the
    native system byte order *before* passing it to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructors using something similar to the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理此问题，您应该在将底层NumPy数组传递给[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")构造函数之前将其转换为本机系统字节顺序，*如下所示*：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See [the NumPy documentation on byte order](https://numpy.org/doc/stable/user/basics.byteswapping.html)
    for more details.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详情，请参阅[NumPy关于字节顺序的文档](https://numpy.org/doc/stable/user/basics.byteswapping.html)。
- en: '## DataFrame memory usage'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '## DataFrame内存使用情况'
- en: The memory usage of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (including the index) is shown when calling the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"). A configuration option, `display.memory_usage` (see
    [the list of options](options.html#options-available)), specifies if the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") memory usage will be displayed when invoking the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info")时，会显示[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")（包括索引）的内存使用情况。配置选项`display.memory_usage`（请参阅[选项列表](options.html#options-available)）指定在调用[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info")方法时是否显示[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的内存使用情况。
- en: 'For example, the memory usage of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") below is shown when calling [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，调用 [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 时，下面的 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况会显示出来：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `+` symbol indicates that the true memory usage could be higher, because
    pandas does not count the memory used by values in columns with `dtype=object`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 符号表示真正的内存使用量可能更高，因为 pandas 不计算具有 `dtype=object` 的列中值的内存使用量。'
- en: Passing `memory_usage='deep'` will enable a more accurate memory usage report,
    accounting for the full usage of the contained objects. This is optional as it
    can be expensive to do this deeper introspection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递 `memory_usage='deep'` 将启用更准确的内存使用报告，考虑到所包含对象的完整使用情况。这是可选的，因为进行更深入的内省可能会很昂贵。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: By default the display option is set to `True` but can be explicitly overridden
    by passing the `memory_usage` argument when invoking [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info").
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，显示选项设置为 `True`，但可以通过在调用 [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 时传递 `memory_usage` 参数来显式地覆盖。
- en: 'The memory usage of each column can be found by calling the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method. This returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with an index represented by column names and memory usage of
    each column shown in bytes. For the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") above, the memory usage of each column and the total memory
    usage can be found with the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法可以找到每列的内存使用情况。这将返回一个由列名表示的索引的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，其中显示了每列的内存使用情况（以字节为单位）。对于上述的 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")，可以通过 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法找到每列的内存使用情况和总内存使用情况：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By default the memory usage of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") index is shown in the returned [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), the memory usage of the index can be suppressed by passing the
    `index=False` argument:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，返回的 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    中显示了 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    索引的内存使用情况，可以通过传递 `index=False` 参数来抑制索引的内存使用情况：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The memory usage displayed by the [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") method utilizes the [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") method to determine the memory usage of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") while also formatting the output in human-readable units (base-2
    representation; i.e. 1KB = 1024 bytes).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") 方法显示的内存使用情况利用 [`memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") 方法来确定 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的内存使用情况，同时以人类可读的单位格式化输出（基于2的表示法；即 1KB = 1024 字节）。'
- en: See also [Categorical Memory Usage](categorical.html#categorical-memory).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [分类内存使用](categorical.html#categorical-memory)。
- en: '## Using if/truth statements with pandas'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用 pandas 进行 if/truth 语句'
- en: 'pandas follows the NumPy convention of raising an error when you try to convert
    something to a `bool`. This happens in an `if`-statement or when using the boolean
    operations: `and`, `or`, and `not`. It is not clear what the result of the following
    code should be:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 遵循 NumPy 的惯例，当你尝试将某些东西转换为 `bool` 时会引发错误。这发生在 `if` 语句中或在使用布尔运算时：`and`、`or`
    和 `not`。下面的代码应该得到什么结果不清楚：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Should it be `True` because it’s not zero-length, or `False` because there
    are `False` values? It is unclear, so instead, pandas raises a `ValueError`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该是 `True`，因为它不是零长度，还是 `False`，因为存在 `False` 值？不清楚，因此，pandas 引发了一个 `ValueError`：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You need to explicitly choose what you want to do with the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), e.g. use [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any"), [`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") or [`empty()`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty"). Alternatively, you might want to compare if the pandas
    object is `None`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要明确选择您要对[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")进行的操作，例如使用[`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any")、[`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all")或[`empty()`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty")。或者，您可能想要比较pandas对象是否为`None`：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Below is how to check if any of the values are `True`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何检查任何值是否为`True`：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Bitwise boolean
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位运算布尔
- en: Bitwise boolean operators like `==` and `!=` return a boolean [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") which performs an element-wise comparison when compared to a
    scalar.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 像`==`和`!=`这样的位运算布尔运算符返回一个布尔[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，当与标量比较时进行逐元素比较。
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: See [boolean comparisons](basics.html#basics-compare) for more examples.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[布尔比较](basics.html#basics-compare)以获取更多示例。
- en: Using the `in` operator
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`in`运算符
- en: Using the Python `in` operator on a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") tests for membership in the **index**, not membership among the
    values.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")上使用Python的`in`运算符测试是否属于**索引**，而不是值之间的成员关系。
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If this behavior is surprising, keep in mind that using `in` on a Python dictionary
    tests keys, not values, and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") are dict-like. To test for membership in the values, use the
    method [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin"):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此行为令人惊讶，请记住，在Python字典上使用`in`测试键，而不是值，而[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")类似于字典。要测试值的成员资格，请使用方法[`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin")：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    likewise, `in` applies to the column axis, testing for membership in the list
    of column names.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")，同样地，`in`应用于列轴，测试是否在列名列表中。
- en: Bitwise boolean
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位运算布尔
- en: Bitwise boolean operators like `==` and `!=` return a boolean [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") which performs an element-wise comparison when compared to a
    scalar.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 像`==`和`!=`这样的位运算布尔运算符返回一个布尔[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，当与标量比较时进行逐元素比较。
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See [boolean comparisons](basics.html#basics-compare) for more examples.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[布尔比较](basics.html#basics-compare)以获取更多示例。
- en: Using the `in` operator
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`in`运算符
- en: Using the Python `in` operator on a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") tests for membership in the **index**, not membership among the
    values.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")上使用Python的`in`运算符测试是否属于**索引**，而不是值之间的成员关系。
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If this behavior is surprising, keep in mind that using `in` on a Python dictionary
    tests keys, not values, and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") are dict-like. To test for membership in the values, use the
    method [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin"):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此行为令人惊讶，请记住，在Python字典上使用`in`测试键，而不是值，而[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")类似于字典。要测试值的成员资格，请使用方法[`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin")：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    likewise, `in` applies to the column axis, testing for membership in the list
    of column names.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")，同样地，`in`应用于列轴，测试是否在列名列表中。
- en: '## Mutating with User Defined Function (UDF) methods'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用用户定义函数（UDF）方法进行变异'
- en: This section applies to pandas methods that take a UDF. In particular, the methods
    [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"), [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate"), [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform"), and [`DataFrame.filter()`](../reference/api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter").
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本节适用于接受 UDF 的 pandas 方法。特别是，方法 [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")、[`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")、[`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 和 [`DataFrame.filter()`](../reference/api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")。
- en: 'It is a general rule in programming that one should not mutate a container
    while it is being iterated over. Mutation will invalidate the iterator, causing
    unexpected behavior. Consider the example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 编程中的一个通用规则是，在迭代容器时不应该改变容器。改变会使迭代器失效，导致意外行为。考虑下面的例子：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: One probably would have expected that the result would be `[1, 3, 5]`. When
    using a pandas method that takes a UDF, internally pandas is often iterating over
    the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or other pandas object. Therefore, if the UDF mutates (changes) the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), unexpected behavior can arise.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能本来期望结果会是`[1, 3, 5]`。当使用一个接受用户定义函数（UDF）的 pandas 方法时，内部 pandas 经常会迭代[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 或其他 pandas 对象。因此，如果 UDF 改变了 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")，可能会导致意外行为的发生。
- en: 'Here is a similar example with [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个类似的例子，使用了 [`DataFrame.apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To resolve this issue, one can make a copy so that the mutation does not apply
    to the container being iterated over.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此问题，可以制作一个副本，以便变化不适用于被迭代的容器。
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Missing value representation for NumPy types
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 类型的缺失值表示
- en: '`np.nan` as the `NA` representation for NumPy types'
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.nan` 作为 NumPy 类型的 `NA` 表示'
- en: 'For lack of `NA` (missing) support from the ground up in NumPy and Python in
    general, `NA` could have been represented with:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 和 Python 一般都不支持从底层开始的 `NA`（缺失）支持，因此 `NA` 可以用以下方式表示：
- en: 'A *masked array* solution: an array of data and an array of boolean values
    indicating whether a value is there or is missing.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*掩码数组* 解决方案：一个数据数组和一个布尔值数组，指示值是否存在或缺失。'
- en: Using a special sentinel value, bit pattern, or set of sentinel values to denote
    `NA` across the dtypes.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特殊的哨兵值、位模式或一组哨兵值来表示跨 dtypes 的 `NA`。
- en: The special value `np.nan` (Not-A-Number) was chosen as the `NA` value for NumPy
    types, and there are API functions like [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") and [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") which can be used across the dtypes to detect NA values.
    However, this choice has a downside of coercing missing integer data as float
    types as shown in [Support for integer NA](#gotchas-intna).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了特殊值 `np.nan`（Not-A-Number）作为 NumPy 类型的 `NA` 值，并且有像 [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") 和 [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") 这样的 API 函数，可以用于跨 dtypes 检测 NA 值。然而，这种选择的缺点是会将缺失的整数数据强制转换为浮点类型，如在
    [整数 NA 的支持](#gotchas-intna) 中所示。
- en: '`NA` type promotions for NumPy types'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 类型的 `NA` 类型提升
- en: 'When introducing NAs into an existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") via [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") or some other means, boolean and integer types will be
    promoted to a different dtype in order to store the NAs. The promotions are summarized
    in this table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 或其他方式将 NA 引入现有的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 或 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 时，布尔和整数类型将被提升为不同的 dtype 以存储 NA。这些提升总结在这个表中：
- en: '| Typeclass | Promotion dtype for storing NAs |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 类型类 | 用于存储 NA 的提升 dtype |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `floating` | no change |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `floating` | 无变化 |'
- en: '| `object` | no change |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `object` | 无变化 |'
- en: '| `integer` | cast to `float64` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `integer` | 转换为 `float64` |'
- en: '| `boolean` | cast to `object` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `boolean` | 转换为 `object` |'
- en: '### Support for integer `NA`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '### 对整数 `NA` 的支持'
- en: 'In the absence of high performance `NA` support being built into NumPy from
    the ground up, the primary casualty is the ability to represent NAs in integer
    arrays. For example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中没有内置高性能的 `NA` 支持的情况下，主要的牺牲是无法在整数数组中表示 NA。例如：
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This trade-off is made largely for memory and performance reasons, and also
    so that the resulting [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") continues to be “numeric”.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这种权衡主要是为了内存和性能原因，以及确保生成的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 仍然是“数值型”的。
- en: If you need to represent integers with possibly missing values, use one of the
    nullable-integer extension dtypes provided by pandas or pyarrow
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要表示可能缺失值的整数，请使用 pandas 或 pyarrow 提供的可空整数扩展 dtypes 之一
- en: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
- en: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
- en: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
- en: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
- en: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See [Nullable integer data type](integer_na.html#integer-na) and [PyArrow Functionality](pyarrow.html#pyarrow)
    for more.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[可空整数数据类型](integer_na.html#integer-na)和[PyArrow 功能](pyarrow.html#pyarrow)。
- en: Why not make NumPy like R?
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么不让 NumPy 像 R 一样？
- en: 'Many people have suggested that NumPy should simply emulate the `NA` support
    present in the more domain-specific statistical programming language [R](https://www.r-project.org/).
    Part of the reason is the NumPy type hierarchy:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人建议 NumPy 应该简单地模仿更多领域特定的统计编程语言 [R](https://www.r-project.org/) 中存在的 `NA` 支持。部分原因是
    NumPy 的类型层次结构：
- en: '| Typeclass | Dtypes |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 类型类 | Dtypes |'
- en: '| --- | --- |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.floating` | `float16, float32, float64, float128` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.floating` | `float16, float32, float64, float128` |'
- en: '| `numpy.integer` | `int8, int16, int32, int64` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.integer` | `int8, int16, int32, int64` |'
- en: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
- en: '| `numpy.object_` | `object_` |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.object_` | `object_` |'
- en: '| `numpy.bool_` | `bool_` |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.bool_` | `bool_` |'
- en: '| `numpy.character` | `bytes_, str_` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.character` | `bytes_, str_` |'
- en: 'The R language, by contrast, only has a handful of built-in data types: `integer`,
    `numeric` (floating-point), `character`, and `boolean`. `NA` types are implemented
    by reserving special bit patterns for each type to be used as the missing value.
    While doing this with the full NumPy type hierarchy would be possible, it would
    be a more substantial trade-off (especially for the 8- and 16-bit data types)
    and implementation undertaking.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，R 语言只有少数几种内置数据类型：`integer`、`numeric`（浮点数）、`character` 和 `boolean`。 `NA`
    类型是通过为每种类型保留特殊的位模式来实现的，用作缺失值。虽然在 NumPy 的完整类型层次结构中执行这一操作是可能的，但这将是一个更为重大的权衡（特别是对于
    8 位和 16 位数据类型）和实现任务。
- en: However, R `NA` semantics are now available by using masked NumPy types such
    as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")
    or PyArrow types ([`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过使用像 [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") 或 PyArrow 类型（[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")）这样的掩码 NumPy 类型，现在可以使用 R `NA` 语义。
- en: '`np.nan` as the `NA` representation for NumPy types'
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `np.nan` 作为 NumPy 类型的 `NA` 表示
- en: 'For lack of `NA` (missing) support from the ground up in NumPy and Python in
    general, `NA` could have been represented with:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 和 Python 在一般情况下缺乏从头开始的 `NA`（缺失）支持，`NA` 可以用以下方式表示：
- en: 'A *masked array* solution: an array of data and an array of boolean values
    indicating whether a value is there or is missing.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种 *掩码数组* 解决方案：一个数据数组和一个布尔值数组，指示值是否存在或缺失。
- en: Using a special sentinel value, bit pattern, or set of sentinel values to denote
    `NA` across the dtypes.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特殊的标记值、位模式或一组标记值来表示跨数据类型的 `NA`。
- en: The special value `np.nan` (Not-A-Number) was chosen as the `NA` value for NumPy
    types, and there are API functions like [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") and [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") which can be used across the dtypes to detect NA values.
    However, this choice has a downside of coercing missing integer data as float
    types as shown in [Support for integer NA](#gotchas-intna).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了特殊值 `np.nan`（非数字）作为 NumPy 类型的 `NA` 值，还有像 [`DataFrame.isna()`](../reference/api/pandas.DataFrame.isna.html#pandas.DataFrame.isna
    "pandas.DataFrame.isna") 和 [`DataFrame.notna()`](../reference/api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna") 这样的 API 函数，可以跨数据类��用于检测 NA 值。然而，这种选择的缺点是将缺失的整数数据强制转换为浮点类型，如
    [整数 NA 支持](#gotchas-intna) 中所示。
- en: '`NA` type promotions for NumPy types'
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 类型的`NA`类型提升
- en: 'When introducing NAs into an existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") via [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") or some other means, boolean and integer types will be
    promoted to a different dtype in order to store the NAs. The promotions are summarized
    in this table:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过 [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 或其他方式将 NAs 引入现有的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 或 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 时，布尔值和整数类型将被提升为不同的数据类型以存储 NA。这些提升总结在这个表中：
- en: '| Typeclass | Promotion dtype for storing NAs |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 类型类 | 用于存储 NA 的提升数据类型 |'
- en: '| --- | --- |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `floating` | no change |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `浮点数` | 无变化 |'
- en: '| `object` | no change |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `对象` | 无变化 |'
- en: '| `integer` | cast to `float64` |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `整数` | 转换为 `float64` |'
- en: '| `boolean` | cast to `object` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `布尔值` | 转换为 `对象` |'
- en: '### Support for integer `NA`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '### 整数 `NA` 支持'
- en: 'In the absence of high performance `NA` support being built into NumPy from
    the ground up, the primary casualty is the ability to represent NAs in integer
    arrays. For example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中没有从头开始构建高性能`NA`支持的情况下，主要的牺牲品是无法在整数数组中表示 NA。例如：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This trade-off is made largely for memory and performance reasons, and also
    so that the resulting [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") continues to be “numeric”.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这种权衡主要是出于内存和性能原因，以及确保生成的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 仍然是“数值型”的。
- en: If you need to represent integers with possibly missing values, use one of the
    nullable-integer extension dtypes provided by pandas or pyarrow
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要表示可能缺失值的整数，请使用 pandas 或 pyarrow 提供的可空整数扩展数据类型之一
- en: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int8Dtype`](../reference/api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")'
- en: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int16Dtype`](../reference/api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")'
- en: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int32Dtype`](../reference/api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")'
- en: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")'
- en: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")'
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: See [Nullable integer data type](integer_na.html#integer-na) and [PyArrow Functionality](pyarrow.html#pyarrow)
    for more.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参见[可空整数数据类型](integer_na.html#integer-na)和[PyArrow功能](pyarrow.html#pyarrow)。
- en: Why not make NumPy like R?
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么不让NumPy像R一样？
- en: 'Many people have suggested that NumPy should simply emulate the `NA` support
    present in the more domain-specific statistical programming language [R](https://www.r-project.org/).
    Part of the reason is the NumPy type hierarchy:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人建议NumPy应该简单地模仿更多领域特定的统计编程语言[R](https://www.r-project.org/)中存在的`NA`支持。部分原因是NumPy类型层次结构：
- en: '| Typeclass | Dtypes |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 类型类 | 数据类型 |'
- en: '| --- | --- |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.floating` | `float16, float32, float64, float128` |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.floating` | `float16, float32, float64, float128` |'
- en: '| `numpy.integer` | `int8, int16, int32, int64` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.integer` | `int8, int16, int32, int64` |'
- en: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.unsignedinteger` | `uint8, uint16, uint32, uint64` |'
- en: '| `numpy.object_` | `object_` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.object_` | `object_` |'
- en: '| `numpy.bool_` | `bool_` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.bool_` | `bool_` |'
- en: '| `numpy.character` | `bytes_, str_` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.character` | `bytes_, str_` |'
- en: 'The R language, by contrast, only has a handful of built-in data types: `integer`,
    `numeric` (floating-point), `character`, and `boolean`. `NA` types are implemented
    by reserving special bit patterns for each type to be used as the missing value.
    While doing this with the full NumPy type hierarchy would be possible, it would
    be a more substantial trade-off (especially for the 8- and 16-bit data types)
    and implementation undertaking.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，R语言只有少数几种内置数据类型：`integer`、`numeric`（浮点数）、`character`和`boolean`。`NA`类型是通过为每种类型保留特殊的位模式来实现的，以用作缺失值。虽然使用完整的NumPy类型层次结构进行此操作是可能的，但这将是一个更重大的折衷（特别是对于8位和16位数据类型）和实施任务。
- en: However, R `NA` semantics are now available by using masked NumPy types such
    as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")
    or PyArrow types ([`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在可以通过使用掩码NumPy类型（如[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")）或PyArrow类型（[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")）来实现R的`NA`语义。
- en: Differences with NumPy
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与NumPy的差异
- en: For [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects, [`var()`](../reference/api/pandas.DataFrame.var.html#pandas.DataFrame.var
    "pandas.DataFrame.var") normalizes by `N-1` to produce [unbiased estimates of
    the population variance](https://en.wikipedia.org/wiki/Bias_of_an_estimator),
    while NumPy’s `numpy.var()` normalizes by N, which measures the variance of the
    sample. Note that [`cov()`](../reference/api/pandas.DataFrame.cov.html#pandas.DataFrame.cov
    "pandas.DataFrame.cov") normalizes by `N-1` in both pandas and NumPy.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象，[`var()`](../reference/api/pandas.DataFrame.var.html#pandas.DataFrame.var
    "pandas.DataFrame.var")通过`N-1`进行归一化，以产生[总体方差的无偏估计](https://en.wikipedia.org/wiki/Bias_of_an_estimator)，而NumPy的`numpy.var()`通过N进行归一化，这测量了样本的方差。请注意，[`cov()`](../reference/api/pandas.DataFrame.cov.html#pandas.DataFrame.cov
    "pandas.DataFrame.cov")在pandas和NumPy中都通过`N-1`进行归一化。
- en: '## Thread-safety'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '## 线程安全性'
- en: pandas is not 100% thread safe. The known issues relate to the [`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy") method. If you are doing a lot of copying of [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects shared among threads, we recommend holding locks inside
    the threads where the data copying occurs.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: pandas并非100%线程安全。已知问题与[`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy")方法有关。如果您正在对在线程之间共享的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象进行大量复制，我们建议在进行数据复制的线程内部保持锁定。
- en: See [this link](https://stackoverflow.com/questions/13592618/python-pandas-dataframe-thread-safe)
    for more information.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参见[此链接](https://stackoverflow.com/questions/13592618/python-pandas-dataframe-thread-safe)。
- en: Byte-ordering issues
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字节顺序问题
- en: 'Occasionally you may have to deal with data that were created on a machine
    with a different byte order than the one on which you are running Python. A common
    symptom of this issue is an error like:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能需要处理在与运行Python的机器上具有不同字节顺序的机器上创建的数据。这个问题的常见症状是出现错误，如：
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To deal with this issue you should convert the underlying NumPy array to the
    native system byte order *before* passing it to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructors using something similar to the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，您应该在将其传递给[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")构造函数之前，将底层NumPy数组转换为本机系统字节顺序，类似于以下内容：
- en: '[PRE42]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See [the NumPy documentation on byte order](https://numpy.org/doc/stable/user/basics.byteswapping.html)
    for more details.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 查看更多详细信息，请参阅[NumPy文档中关于字节顺序的部分](https://numpy.org/doc/stable/user/basics.byteswapping.html)。
