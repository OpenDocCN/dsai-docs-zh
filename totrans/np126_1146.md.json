["```py\n>>> np.zeros(10)//1\narray([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.]) \n```", "```py\n>>> np.zeros(10)//1\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \n```", "```py\nnpy_intp const fixed_dims[] = {1, 2, 3};\n// no longer complains that the const-qualifier is discarded\nnpy_intp size = PyArray_MultiplyList(fixed_dims, 3); \n```", "```py\nNPY_BLAS_ORDER=openblas python setup.py build \n```", "```py\nNPY_LAPACK_ORDER=openblas python setup.py build \n```", "```py\ndef foo():\n    pass \n```", "```py\ndef foo():\n    with np.errstate(...):\n        pass \n```", "```py\n@np.errstate(...)\ndef foo():\n    pass \n```", "```py\nfrom fractions import Fraction\na = np.array([[Fraction(1, 2), Fraction(1, 3)], [Fraction(1, 3), Fraction(1, 2)]])\nb = a @ a \n```", "```py\n>>> np.zeros(10)//1\narray([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.]) \n```", "```py\n>>> np.zeros(10)//1\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \n```", "```py\n>>> np.zeros(10)//1\narray([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.]) \n```", "```py\n>>> np.zeros(10)//1\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) \n```", "```py\nnpy_intp const fixed_dims[] = {1, 2, 3};\n// no longer complains that the const-qualifier is discarded\nnpy_intp size = PyArray_MultiplyList(fixed_dims, 3); \n```", "```py\nnpy_intp const fixed_dims[] = {1, 2, 3};\n// no longer complains that the const-qualifier is discarded\nnpy_intp size = PyArray_MultiplyList(fixed_dims, 3); \n```", "```py\nNPY_BLAS_ORDER=openblas python setup.py build \n```", "```py\nNPY_LAPACK_ORDER=openblas python setup.py build \n```", "```py\nNPY_BLAS_ORDER=openblas python setup.py build \n```", "```py\nNPY_LAPACK_ORDER=openblas python setup.py build \n```", "```py\ndef foo():\n    pass \n```", "```py\ndef foo():\n    with np.errstate(...):\n        pass \n```", "```py\n@np.errstate(...)\ndef foo():\n    pass \n```", "```py\nfrom fractions import Fraction\na = np.array([[Fraction(1, 2), Fraction(1, 3)], [Fraction(1, 3), Fraction(1, 2)]])\nb = a @ a \n```", "```py\ndef foo():\n    pass \n```", "```py\ndef foo():\n    with np.errstate(...):\n        pass \n```", "```py\n@np.errstate(...)\ndef foo():\n    pass \n```", "```py\nfrom fractions import Fraction\na = np.array([[Fraction(1, 2), Fraction(1, 3)], [Fraction(1, 3), Fraction(1, 2)]])\nb = a @ a \n```"]