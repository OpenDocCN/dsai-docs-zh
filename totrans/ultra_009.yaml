- en: Model Benchmarking with Ultralytics YOLO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/modes/benchmark/`](https://docs.ultralytics.com/modes/benchmark/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Ultralytics YOLO ecosystem and integrations](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once your model is trained and validated, the next logical step is to evaluate
    its performance in various real-world scenarios. Benchmark mode in Ultralytics
    YOLOv8 serves this purpose by providing a robust framework for assessing the speed
    and accuracy of your model across a range of export formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/j8uQc0qB91s?start=105`](https://www.youtube.com/embed/j8uQc0qB91s?start=105)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Ultralytics Modes Tutorial: Benchmark'
  prefs: []
  type: TYPE_NORMAL
- en: Why Is Benchmarking Crucial?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Informed Decisions:** Gain insights into the trade-offs between speed and
    accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Allocation:** Understand how different export formats perform on
    different hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimization:** Learn which export format offers the best performance for
    your specific use case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost Efficiency:** Make more efficient use of hardware resources based on
    benchmark results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key Metrics in Benchmark Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**mAP50-95:** For object detection, segmentation, and pose estimation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**accuracy_top5:** For image classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inference Time:** Time taken for each image in milliseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported Export Formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ONNX:** For optimal CPU performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorRT:** For maximal GPU efficiency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenVINO:** For Intel hardware optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoreML, TensorFlow SavedModel, and More:** For diverse deployment needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Export to ONNX or OpenVINO for up to 3x CPU speedup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export to TensorRT for up to 5x GPU speedup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run YOLOv8n benchmarks on all supported export formats including ONNX, TensorRT
    etc. See Arguments section below for a full list of export arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arguments such as `model`, `data`, `imgsz`, `half`, `device`, and `verbose`
    provide users with the flexibility to fine-tune the benchmarks to their specific
    needs and compare the performance of different export formats with ease.
  prefs: []
  type: TYPE_NORMAL
- en: '| Key | Default Value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `model` | `None` | Specifies the path to the model file. Accepts both `.pt`
    and `.yaml` formats, e.g., `"yolov8n.pt"` for pre-trained models or configuration
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `None` | Path to a YAML file defining the dataset for benchmarking,
    typically including paths and settings for validation data. Example: `"coco8.yaml"`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `imgsz` | `640` | The input image size for the model. Can be a single integer
    for square images or a tuple `(width, height)` for non-square, e.g., `(640, 480)`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `half` | `False` | Enables FP16 (half-precision) inference, reducing memory
    usage and possibly increasing speed on compatible hardware. Use `half=True` to
    enable. |'
  prefs: []
  type: TYPE_TB
- en: '| `int8` | `False` | Activates INT8 quantization for further optimized performance
    on supported devices, especially useful for edge devices. Set `int8=True` to use.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `device` | `None` | Defines the computation device(s) for benchmarking, such
    as `"cpu"`, `"cuda:0"`, or a list of devices like `"cuda:0,1"` for multi-GPU setups.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `verbose` | `False` | Controls the level of detail in logging output. A boolean
    value; set `verbose=True` for detailed logs or a float for thresholding errors.
    |'
  prefs: []
  type: TYPE_TB
- en: Export Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Benchmarks will attempt to run automatically on all possible export formats
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '| Format | `format` Argument | Model | Metadata | Arguments |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [PyTorch](https://pytorch.org/) | - | `yolov8n.pt` | ✅ | - |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | `torchscript` | `yolov8n.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | `onnx` | `yolov8n.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | `openvino` | `yolov8n_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
  prefs: []
  type: TYPE_TB
- en: '| TensorRT | `engine` | `yolov8n.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| CoreML | `coreml` | `yolov8n.mlpackage` | ✅ | `imgsz`, `half`, `int8`, `nms`,
    `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | `saved_model` | `yolov8n_saved_model/` | ✅ | `imgsz`, `keras`,
    `int8`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | `pb` | `yolov8n.pb` | ❌ | `imgsz`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | `tflite` | `yolov8n.tflite` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
  prefs: []
  type: TYPE_TB
- en: '| TF Edge TPU | `edgetpu` | `yolov8n_edgetpu.tflite` | ✅ | `imgsz` |'
  prefs: []
  type: TYPE_TB
- en: '| TF.js | `tfjs` | `yolov8n_web_model/` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | `paddle` | `yolov8n_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | `ncnn` | `yolov8n_ncnn_model/` | ✅ | `imgsz`, `half`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: See full `export` details in the Export page.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I benchmark my YOLOv8 model's performance using Ultralytics?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ultralytics YOLOv8 offers a Benchmark mode to assess your model''s performance
    across different export formats. This mode provides insights into key metrics
    such as mean Average Precision (mAP50-95), accuracy, and inference time in milliseconds.
    To run benchmarks, you can use either Python or CLI commands. For example, to
    benchmark on a GPU:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more details on benchmark arguments, visit the Arguments section.
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of exporting YOLOv8 models to different formats?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exporting YOLOv8 models to different formats such as ONNX, TensorRT, and OpenVINO
    allows you to optimize performance based on your deployment environment. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ONNX:** Provides up to 3x CPU speedup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorRT:** Offers up to 5x GPU speedup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenVINO:** Specifically optimized for Intel hardware. These formats enhance
    both the speed and accuracy of your models, making them more efficient for various
    real-world applications. Visit the Export page for complete details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is benchmarking crucial in evaluating YOLOv8 models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Benchmarking your YOLOv8 models is essential for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Informed Decisions:** Understand the trade-offs between speed and accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Allocation:** Gauge the performance across different hardware options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimization:** Determine which export format offers the best performance
    for specific use cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost Efficiency:** Optimize hardware usage based on benchmark results. Key
    metrics such as mAP50-95, Top-5 accuracy, and inference time help in making these
    evaluations. Refer to the Key Metrics section for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which export formats are supported by YOLOv8, and what are their advantages?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YOLOv8 supports a variety of export formats, each tailored for specific hardware
    and use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ONNX:** Best for CPU performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorRT:** Ideal for GPU efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenVINO:** Optimized for Intel hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoreML & TensorFlow:** Useful for iOS and general ML applications. For a
    complete list of supported formats and their respective advantages, check out
    the Supported Export Formats section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What arguments can I use to fine-tune my YOLOv8 benchmarks?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When running benchmarks, several arguments can be customized to suit specific
    needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**model:** Path to the model file (e.g., "yolov8n.pt").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data:** Path to a YAML file defining the dataset (e.g., "coco8.yaml").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**imgsz:** The input image size, either as a single integer or a tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**half:** Enable FP16 inference for better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**int8:** Activate INT8 quantization for edge devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**device:** Specify the computation device (e.g., "cpu", "cuda:0").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose:** Control the level of logging detail. For a full list of arguments,
    refer to the Arguments section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
