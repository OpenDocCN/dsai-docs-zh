- en: scipy.signal.lti
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lti.html#scipy.signal.lti](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lti.html#scipy.signal.lti)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Continuous-time linear time invariant system base class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***system**arguments'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`lti`](#scipy.signal.lti "scipy.signal.lti") class can be instantiated
    with either 2, 3 or 4 arguments. The following gives the number of arguments and
    the corresponding continuous-time subclass that is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '2: [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"): (numerator, denominator)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '3: [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"): (zeros, poles, gain)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '4: [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace "scipy.signal.StateSpace"):
    (A, B, C, D)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Each argument can be an array or a sequence.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"), [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"), [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`lti`](#scipy.signal.lti "scipy.signal.lti") instances do not exist directly.
    Instead, [`lti`](#scipy.signal.lti "scipy.signal.lti") creates an instance of
    one of its subclasses: [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") or [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain").'
  prefs: []
  type: TYPE_NORMAL
- en: If (numerator, denominator) is passed in for `*system`, coefficients for both
    the numerator and denominator should be specified in descending exponent order
    (e.g., `s^2 + 3s + 5` would be represented as `[1, 3, 5]`).
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of properties that are not directly part of the current system
    representation (such as the [`zeros`](scipy.signal.lti.zeros.html#scipy.signal.lti.zeros
    "scipy.signal.lti.zeros") of a [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace") system) is very inefficient and may lead to numerical
    inaccuracies. It is better to convert to the specific system representation first.
    For example, call `sys = sys.to_zpk()` before accessing/changing the zeros, poles
    or gain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(s) = \frac{5(s - 1)(s - 2)}{(s - 3)(s -
    4)}\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(s) = \frac{3s + 4}{1s + 2}\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`dt`](scipy.signal.lti.dt.html#scipy.signal.lti.dt "scipy.signal.lti.dt")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the sampling time of the system, *None* for [`lti`](#scipy.signal.lti
    "scipy.signal.lti") systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[`poles`](scipy.signal.lti.poles.html#scipy.signal.lti.poles "scipy.signal.lti.poles")'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](scipy.signal.lti.zeros.html#scipy.signal.lti.zeros "scipy.signal.lti.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`bode`](scipy.signal.lti.bode.html#scipy.signal.lti.bode "scipy.signal.lti.bode")([w, n])
    | Calculate Bode magnitude and phase data of a continuous-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`freqresp`](scipy.signal.lti.freqresp.html#scipy.signal.lti.freqresp "scipy.signal.lti.freqresp")([w, n])
    | Calculate the frequency response of a continuous-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`impulse`](scipy.signal.lti.impulse.html#scipy.signal.lti.impulse "scipy.signal.lti.impulse")([X0, T, N])
    | Return the impulse response of a continuous-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`output`](scipy.signal.lti.output.html#scipy.signal.lti.output "scipy.signal.lti.output")(U, T[, X0])
    | Return the response of a continuous-time system to input *U*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`step`](scipy.signal.lti.step.html#scipy.signal.lti.step "scipy.signal.lti.step")([X0, T, N])
    | Return the step response of a continuous-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_discrete`](scipy.signal.lti.to_discrete.html#scipy.signal.lti.to_discrete
    "scipy.signal.lti.to_discrete")(dt[, method, alpha]) | Return a discretized version
    of the current system. |'
  prefs: []
  type: TYPE_TB
