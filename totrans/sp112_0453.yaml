- en: scipy.optimize.root_scalar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find a root of a scalar function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable'
  prefs: []
  type: TYPE_NORMAL
- en: A function to find a root of.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to the objective function and its derivative(s).
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of solver. Should be one of
  prefs: []
  type: TYPE_NORMAL
- en: ‘bisect’ [(see here)](../optimize.root_scalar-bisect.html#optimize-root-scalar-bisect)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘brentq’ [(see here)](../optimize.root_scalar-brentq.html#optimize-root-scalar-brentq)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘brenth’ [(see here)](../optimize.root_scalar-brenth.html#optimize-root-scalar-brenth)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘ridder’ [(see here)](../optimize.root_scalar-ridder.html#optimize-root-scalar-ridder)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘toms748’ [(see here)](../optimize.root_scalar-toms748.html#optimize-root-scalar-toms748)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘newton’ [(see here)](../optimize.root_scalar-newton.html#optimize-root-scalar-newton)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘secant’ [(see here)](../optimize.root_scalar-secant.html#optimize-root-scalar-secant)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘halley’ [(see here)](../optimize.root_scalar-halley.html#optimize-root-scalar-halley)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bracket: A sequence of 2 floats, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: An interval bracketing a root. *f(x, *args)* must have different signs at the
    two endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess.
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A second guess.
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime**bool or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *fprime* is a boolean and is True, *f* is assumed to return the value of
    the objective function and of the derivative. *fprime* can also be a callable
    returning the derivative of *f*. In this case, it must accept the same arguments
    as *f*.
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime2**bool or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *fprime2* is a boolean and is True, *f* is assumed to return the value of
    the objective function and of the first and second derivatives. *fprime2* can
    also be a callable returning the second derivative of *f*. In this case, it must
    accept the same arguments as *f*.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance (absolute) for termination.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance (relative) for termination.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '**options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of solver options. E.g., `k`, see [`show_options()`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options") for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sol**RootResults'
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution represented as a `RootResults` object. Important attributes are:
    `root` the solution , `converged` a boolean flag indicating if the algorithm exited
    successfully and `flag` which describes the cause of the termination. See [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") for a description of other attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")'
  prefs: []
  type: TYPE_NORMAL
- en: Additional options accepted by the solvers
  prefs: []
  type: TYPE_NORMAL
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  prefs: []
  type: TYPE_NORMAL
- en: Find a root of a vector function.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This section describes the available solvers that can be selected by the ‘method’
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The default is to use the best method available for the situation presented.
    If a bracket is provided, it may use one of the bracketing methods. If a derivative
    and an initial value are specified, it may select one of the derivative-based
    methods. If no method is judged applicable, it will raise an Exception.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments for each method are as follows (x=required, o=optional).
  prefs: []
  type: TYPE_NORMAL
- en: '| method | f | args | bracket | x0 | x1 | fprime | fprime2 | xtol | rtol |
    maxiter | options |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [bisect](../optimize.root_scalar-bisect.html#optimize-root-scalar-bisect)
    | x | o | x |  |  |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [brentq](../optimize.root_scalar-brentq.html#optimize-root-scalar-brentq)
    | x | o | x |  |  |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [brenth](../optimize.root_scalar-brenth.html#optimize-root-scalar-brenth)
    | x | o | x |  |  |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [ridder](../optimize.root_scalar-ridder.html#optimize-root-scalar-ridder)
    | x | o | x |  |  |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [toms748](../optimize.root_scalar-toms748.html#optimize-root-scalar-toms748)
    | x | o | x |  |  |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [secant](../optimize.root_scalar-secant.html#optimize-root-scalar-secant)
    | x | o |  | x | o |  |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [newton](../optimize.root_scalar-newton.html#optimize-root-scalar-newton)
    | x | o |  | x |  | o |  | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: '| [halley](../optimize.root_scalar-halley.html#optimize-root-scalar-halley)
    | x | o |  | x |  | x | x | o | o | o | o |'
  prefs: []
  type: TYPE_TB
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Find the root of a simple cubic
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The [`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq "scipy.optimize.brentq")
    method takes as input a bracket
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The [`newton`](scipy.optimize.newton.html#scipy.optimize.newton "scipy.optimize.newton")
    method takes as input a single point and uses the derivative(s).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The function can provide the value and derivative(s) in a single call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
