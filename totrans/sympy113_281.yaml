- en: Examples from Wester’s Article
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自Wester文章的示例
- en: Original text：[https://docs.sympy.org/latest/modules/polys/wester.html](https://docs.sympy.org/latest/modules/polys/wester.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/polys/wester.html](https://docs.sympy.org/latest/modules/polys/wester.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 引言'
- en: In this tutorial we present examples from Wester’s article concerning comparison
    and critique of mathematical abilities of several computer algebra systems (see
    [[Wester1999]](#wester1999)). All the examples are related to polynomial and algebraic
    computations and SymPy specific remarks were added to all of them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们提供了来自Wester文章的示例，涉及比较和批评多个计算机代数系统的数学能力（参见 [[Wester1999]](#wester1999)）。所有示例与多项式和代数计算相关，并且针对所有示例都添加了SymPy特定的注释。
- en: Examples
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: 'All examples in this tutorial are computable, so one can just copy and paste
    them into a Python shell and do something useful with them. All computations were
    done using the following setup:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中的所有示例都是可计算的，因此可以直接复制粘贴到Python shell中，并做一些有用的事情。所有计算都是在以下设置下完成的：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Simple univariate polynomial factorization
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单的单变量多项式因式分解
- en: 'To obtain a factorization of a polynomial use [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") function. By default [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") returns the result in unevaluated form, so the
    content of the input polynomial is left unexpanded, as in the following example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得多项式的因式分解，请使用 [`factor()`](reference.html#sympy.polys.polytools.factor "sympy.polys.polytools.factor")
    函数。默认情况下，[`factor()`](reference.html#sympy.polys.polytools.factor "sympy.polys.polytools.factor")
    返回未评估的形式的结果，因此输入多项式的内容保持未展开，如以下示例所示：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To achieve the same effect in a more systematic way use [`primitive()`](reference.html#sympy.polys.polytools.primitive
    "sympy.polys.polytools.primitive") function, which returns the content and the
    primitive part of the input polynomial:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要以更系统的方式实现相同的效果，请使用 [`primitive()`](reference.html#sympy.polys.polytools.primitive
    "sympy.polys.polytools.primitive") 函数，该函数返回输入多项式的内容和原始部分：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The content and the primitive part can be computed only over a ring. To simplify
    coefficients of a polynomial over a field use [`monic()`](reference.html#sympy.polys.polytools.monic
    "sympy.polys.polytools.monic").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 只能在环上计算多项式的内容和原始部分。要在域上简化多项式的系数，请使用 [`monic()`](reference.html#sympy.polys.polytools.monic
    "sympy.polys.polytools.monic")。
- en: Univariate GCD, resultant and factorization
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单变量 GCD、结果和因式分解
- en: 'Consider univariate polynomials `f`, `g` and `h` over integers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑整数环上的单变量多项式 `f`, `g` 和 `h`：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can compute the greatest common divisor (GCD) of two polynomials using [`gcd()`](reference.html#sympy.polys.polytools.gcd
    "sympy.polys.polytools.gcd") function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 [`gcd()`](reference.html#sympy.polys.polytools.gcd "sympy.polys.polytools.gcd")
    函数计算两个多项式的最大公约数（GCD）：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We see that `f` and `g` have no common factors. However, `f*h` and `g*h` have
    an obvious factor `h`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 `f` 和 `g` 没有共同的因子。然而，`f*h` 和 `g*h` 显然有一个因子 `h`：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The same can be verified using the resultant of univariate polynomials:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用单变量多项式的结果来验证相同的内容：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Factorization of large univariate polynomials (of degree 120 in this case)
    over integers is also possible:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在此情况下，可以对整数上的度数为 120 的大型单变量多项式进行因式分解：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Multivariate GCD and factorization
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多变量 GCD 和因式分解
- en: 'What can be done in univariate case, can be also done for multivariate polynomials.
    Consider the following polynomials `f`, `g` and `h` in \(\mathbb{Z}[x,y,z]\):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在单变量情况下可以做的事情，也可以用于多变量多项式。考虑以下在 \(\mathbb{Z}[x,y,z]\) 上的多项式 `f`, `g` 和 `h`：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As previously, we can verify that `f` and `g` have no common factors:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们可以验证 `f` 和 `g` 没有共同的因子：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, `f*h` and `g*h` have an obvious factor `h`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`f*h` 和 `g*h` 显然有一个因子 `h`：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Multivariate factorization of large polynomials is also possible:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以对大型多项式进行多变量因式分解：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Support for symbols in exponents
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持指数中的符号
- en: 'Polynomial manipulation functions provided by [`sympy.polys`](reference.html#module-sympy.polys
    "sympy.polys") are mostly used with integer exponents. However, it’s perfectly
    valid to compute with symbolic exponents, e.g.:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.polys`](reference.html#module-sympy.polys "sympy.polys") 提供的多项式操作函数大多数用于整数指数。然而，使用符号指数进行计算也是完全有效的，例如：'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Testing if polynomials have common zeros
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试多项式是否有共同的零点
- en: 'To test if two polynomials have a root in common we can use [`resultant()`](reference.html#sympy.polys.polytools.resultant
    "sympy.polys.polytools.resultant") function. The theory says that the resultant
    of two polynomials vanishes if there is a common zero of those polynomials. For
    example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试两个多项式是否有共同的根，可以使用[`resultant()`](reference.html#sympy.polys.polytools.resultant
    "sympy.polys.polytools.resultant")函数。理论表明，如果两个多项式有共同的零点，则它们的 resultant 为零。例如：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can visualize this fact by factoring the polynomials:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将多项式因式分解来可视化这个事实：
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In both cases we obtained the factor \(x + 1\) which tells us that the common
    root is \(x = -1\).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们得到的因子是 \(x + 1\)，这告诉我们共同的根是 \(x = -1\)。
- en: Normalizing simple rational functions
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规范化简单的有理函数
- en: 'To remove common factors from the numerator and the denominator of a rational
    function the elegant way, use [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") function. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要从有理函数的分子和分母中优雅地去除公因子，可以使用[`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel")函数。例如：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Expanding expressions and factoring back
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展开表达式然后因式分解
- en: 'One can work easily we expressions in both expanded and factored forms. Consider
    a polynomial `f` in expanded form. We differentiate it and factor the result back:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可以轻松地处理展开和因式分解形式的表达式。考虑一个展开形式的多项式 `f`。我们对它进行微分，然后将结果因式分解回来：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The same can be achieved in factored form:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样可以以因式分解的形式实现：
- en: '[PRE17]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Factoring in terms of cyclotomic polynomials
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以旋轮多项式的形式进行因式分解
- en: 'SymPy can very efficiently decompose polynomials of the form \(x^n \pm 1\)
    in terms of cyclotomic polynomials:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 可以非常高效地将形如 \(x^n \pm 1\) 的多项式分解为旋轮多项式的形式：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The original Wester`s example was \(x^{100} - 1\), but was truncated for readability
    purpose. Note that this is not a big struggle for [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") to decompose polynomials of degree 1000 or greater.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的 Wester 的例子是 \(x^{100} - 1\)，但为了便于阅读而被截断了。请注意，这对于 [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") 来说，并不是解分解 1000 次或更高次多项式的难题。
- en: Univariate factoring over Gaussian numbers
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在高斯数上一元因式分解
- en: 'Consider a univariate polynomial `f` with integer coefficients:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个具有整数系数的一元多项式 `f`：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We want to obtain a factorization of `f` over Gaussian numbers. To do this
    we use [`factor()`](reference.html#sympy.polys.polytools.factor "sympy.polys.polytools.factor")
    as previously, but this time we set `gaussian` keyword to `True`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在高斯数上对 `f` 进行因式分解。为此，我们使用 [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor")，并将 `gaussian` 关键字设置为 `True`：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As the result we got a splitting factorization of `f` with monic factors (this
    is a general rule when computing in a field with SymPy). The `gaussian` keyword
    is useful for improving code readability, however the same result can be computed
    using more general syntax:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是我们得到了 `f` 的分裂因式分解，其中每个因子都是首一的（在 SymPy 中计算域中的一般规则）。`gaussian` 关键字有助于提高代码可读性，不过也可以使用更通用的语法得到相同的结果：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Computing with automatic field extensions
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用自动域扩展进行计算
- en: 'Consider two univariate polynomials `f` and `g`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个一元多项式 `f` 和 `g`：
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We would like to reduce degrees of the numerator and the denominator of a rational
    function `f/g`. To do this we employ [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望简化有理函数 `f/g` 的分子和分母的次数。为此，我们使用 [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") 函数：
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Unfortunately nothing interesting happened. This is because by default SymPy
    treats \(\sqrt{2}\) as a generator, obtaining a bivariate polynomial for the numerator.
    To make [`cancel()`](reference.html#sympy.polys.polytools.cancel "sympy.polys.polytools.cancel")
    recognize algebraic properties of \(\sqrt{2}\), one needs to use `extension` keyword:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有发生什么有趣的事情。这是因为默认情况下，SymPy 将 \(\sqrt{2}\) 视为生成器，从而获得了分子的双变量多项式。要使 [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") 认识到 \(\sqrt{2}\) 的代数性质，需要使用 `extension` 关键字：
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Setting `extension=True` tells [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") to find minimal algebraic number domain for the
    coefficients of `f/g`. The automatically inferred domain is \(\mathbb{Q}(\sqrt{2})\).
    If one doesn’t want to rely on automatic inference, the same result can be obtained
    by setting the `extension` keyword with an explicit algebraic number:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`extension=True`告诉[`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel")，以找到`f/g`系数的最小代数数域。自动推断的域是\(\mathbb{Q}(\sqrt{2})\)。如果不想依赖自动推断，可以通过设置`extension`关键字与显式的代数数来获得相同的结果：
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Univariate factoring over various domains
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在各种域上的单变量因式分解
- en: 'Consider a univariate polynomial `f` with integer coefficients:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个整系数的单变量多项式`f`：
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With [`sympy.polys`](reference.html#module-sympy.polys "sympy.polys") we can
    obtain factorizations of `f` over different domains, which includes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`sympy.polys`](reference.html#module-sympy.polys "sympy.polys")，我们可以在不同的域上获得`f`的因式分解，包括：
- en: 'rationals:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有理数：
- en: '[PRE27]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'finite fields:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有限域：
- en: '[PRE28]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'algebraic numbers:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代数数：
- en: '[PRE29]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Factoring polynomials into linear factors
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将多项式分解为线性因子
- en: 'Currently SymPy can factor polynomials into irreducibles over various domains,
    which can result in a splitting factorization (into linear factors). However,
    there is currently no systematic way to infer a splitting field (algebraic number
    field) automatically. In future the following syntax will be implemented:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当前SymPy可以将多项式因式分解为各种域上的不可约因子，这可能导致分裂因式分解（成线性因子）。然而，目前还没有系统的方法自动推断分裂域（代数数域）。在未来，将实现以下语法：
- en: '[PRE30]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note this is different from `extension=True`, because the later only tells how
    expression parsing should be done, not what should be the domain of computation.
    One can simulate the `split` keyword for several classes of polynomials using
    [`solve()`](../solvers/solvers.html#sympy.solvers.solvers.solve "sympy.solvers.solvers.solve")
    function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这与`extension=True`不同，因为后者仅告诉表达式解析应该如何进行，而不指定计算域。可以使用[`solve()`](../solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")函数模拟多个多项式类的`split`关键字。
- en: Advanced factoring over finite fields
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在大有限域上的高级因式分解
- en: 'Consider a univariate polynomial `f` with integer coefficients:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个整系数的单变量多项式`f`：
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can factor `f` over a large finite field \(F_{65537}\):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在大有限域\(F_{65537}\)上对`f`进行因式分解：
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'and expand the resulting factorization back:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将结果的因式分解展开回来：
- en: '[PRE33]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'obtaining polynomial `f`. This was done using symmetric polynomial representation
    over finite fields The same thing can be done using non-symmetric representation:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 获得多项式`f`。这是通过对有限域上的对称多项式表示来完成的。使用非对称表示也可以做同样的事情：
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As with symmetric representation we can expand the factorization to get the
    input polynomial back. This time, however, we need to truncate coefficients of
    the expanded polynomial modulo 65537:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与对称表示一样，我们可以展开因式分解以获得输入多项式。然而，这次我们需要对展开多项式的系数模65537进行截断：
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Working with expressions as polynomials
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为多项式处理表达式
- en: 'Consider a multivariate polynomial `f` in \(\mathbb{Z}[x,y,z]\):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个多变量多项式`f`在\(\mathbb{Z}[x,y,z]\)中：
- en: '[PRE36]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We want to compute factorization of `f`. To do this we use `factor` as usually,
    however we note that the polynomial in consideration is already in expanded form,
    so we can tell the factorization routine to skip expanding `f`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望计算`f`的因式分解。为此，我们通常使用`factor`，但需要注意的是，考虑的多项式已经处于展开形式，因此可以告诉因式分解例程跳过展开`f`：
- en: '[PRE37]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The default in [`sympy.polys`](reference.html#module-sympy.polys "sympy.polys")
    is to expand all expressions given as arguments to polynomial manipulation functions
    and [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    class. If we know that expanding is unnecessary, then by setting `expand=False`
    we can save quite a lot of time for complicated inputs. This can be really important
    when computing with expressions like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`sympy.polys`](reference.html#module-sympy.polys "sympy.polys")中，默认情况是展开所有作为多项式操作函数和[`Poly`](reference.html#sympy.polys.polytools.Poly
    "sympy.polys.polytools.Poly")类参数给出的表达式。如果我们知道展开是不必要的，可以通过设置`expand=False`节省处理复杂输入的大量时间。当处理像以下表达式时，这可能非常重要：
- en: '[PRE38]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Computing reduced Gröbner bases
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算减少的Gröbner基础
- en: 'To compute a reduced Gröbner basis for a set of polynomials use the [`groebner()`](reference.html#sympy.polys.polytools.groebner
    "sympy.polys.polytools.groebner") function. The function accepts various monomial
    orderings, e.g.: `lex`, `grlex` and `grevlex`, or a user defined one, via `order`
    keyword. The `lex` ordering is the most interesting because it has elimination
    property, which means that if the system of polynomial equations to [`groebner()`](reference.html#sympy.polys.polytools.groebner
    "sympy.polys.polytools.groebner") is zero-dimensional (has finite number of solutions)
    the last element of the basis is a univariate polynomial. Consider the following
    example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要为一组多项式计算简化的 Gröbner 基础，请使用 [`groebner()`](reference.html#sympy.polys.polytools.groebner
    "sympy.polys.polytools.groebner") 函数。该函数接受各种单项式排序方式，例如：`lex`、`grlex` 和 `grevlex`，或者通过
    `order` 关键字定义用户自定义排序。`lex` 排序是最有趣的，因为它具有消除属性，这意味着如果多项式方程系统向 [`groebner()`](reference.html#sympy.polys.polytools.groebner
    "sympy.polys.polytools.groebner") 零维（有有限个解）时，基础的最后一个元素是一个一元多项式。考虑以下示例：
- en: '[PRE39]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result is an ordinary Python list, so we can easily apply a function to
    all its elements, for example we can factor those elements:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个普通的 Python 列表，因此我们可以轻松地将一个函数应用到它的所有元素上，例如我们可以因式分解这些元素：
- en: '[PRE40]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'From the above we can easily find all solutions of the system of polynomial
    equations. Or we can use [`solve()`](../solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") to achieve this in a more systematic way:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的内容中，我们可以轻松地找到多项式方程组的所有解。或者我们可以使用 [`solve()`](../solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") 以更系统的方式实现：
- en: '[PRE41]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Multivariate factoring over algebraic numbers
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多元素数上的因式分解
- en: 'Computing with multivariate polynomials over various domains is as simple as
    in univariate case. For example consider the following factorization over \(\mathbb{Q}(\sqrt{-3})\):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种域上使用多元多项式进行计算与一元情况一样简单。例如，考虑以下在 \(\mathbb{Q}(\sqrt{-3})\) 上的因式分解：
- en: '[PRE42]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Currently multivariate polynomials over finite fields aren’t supported.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不支持有限域上的多元多项式。
- en: Partial fraction decomposition
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分分式分解
- en: 'Consider a univariate rational function `f` with integer coefficients:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个具有整数系数的一元有理函数 `f`：
- en: '[PRE43]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To decompose `f` into partial fractions use [`apart()`](reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `f` 分解成部分分式，请使用 [`apart()`](reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart")
    函数：
- en: '[PRE44]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To return from partial fractions to the rational function use a composition
    of [`together()`](reference.html#sympy.polys.rationaltools.together "sympy.polys.rationaltools.together")
    and [`cancel()`](reference.html#sympy.polys.polytools.cancel "sympy.polys.polytools.cancel"):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要从部分分式返回有理函数，请使用 [`together()`](reference.html#sympy.polys.rationaltools.together
    "sympy.polys.rationaltools.together") 和 [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") 的组合：
- en: '[PRE45]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Literature
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文献
- en: '[[Wester1999](#id1)]'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Wester1999](#id1)]'
- en: Michael J. Wester, A Critique of the Mathematical Abilities of CA Systems, 1999,
    [https://www.math.unm.edu/~wester/cas/book/Wester.pdf](https://www.math.unm.edu/~wester/cas/book/Wester.pdf)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Michael J. Wester, 《CA系统的数学能力批评》, 1999, [https://www.math.unm.edu/~wester/cas/book/Wester.pdf](https://www.math.unm.edu/~wester/cas/book/Wester.pdf)
