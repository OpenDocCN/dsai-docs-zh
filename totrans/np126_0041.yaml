- en: numpy.ndarray.tolist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the array as an `a.ndim`-levels deep nested list of Python scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy of the array data as a (nested) Python list. Data items are converted
    to the nearest compatible builtin Python type, via the [`item`](numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item") function.
  prefs: []
  type: TYPE_NORMAL
- en: If `a.ndim` is 0, then since the depth of the nested list is 0, it will not
    be a list at all, but a simple Python scalar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**none**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**object, or list of object, or list of list of object, or …'
  prefs: []
  type: TYPE_NORMAL
- en: The possibly nested list of array elements.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The array may be recreated via `a = np.array(a.tolist())`, although this may
    sometimes lose precision.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For a 1D array, `a.tolist()` is almost the same as `list(a)`, except that `tolist`
    changes numpy scalars to Python scalars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, for a 2D array, `tolist` applies recursively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The base case for this recursion is a 0D array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
