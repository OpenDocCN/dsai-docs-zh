- en: pandas.read_sql
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html](https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read SQL query or database table into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: This function is a convenience wrapper around `read_sql_table` and `read_sql_query`
    (for backward compatibility). It will delegate to the specific function depending
    on the provided input. A SQL query will be routed to `read_sql_query`, while a
    database table name will be routed to `read_sql_table`. Note that the delegated
    function might have more specific notes about their functionality not listed here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sql**str or SQLAlchemy Selectable (select or text object)'
  prefs: []
  type: TYPE_NORMAL
- en: SQL query to be executed or a table name.
  prefs: []
  type: TYPE_NORMAL
- en: '**con**ADBC Connection, SQLAlchemy connectable, str, or sqlite3 connection'
  prefs: []
  type: TYPE_NORMAL
- en: ADBC provides high performance I/O with native type support, where available.
    Using SQLAlchemy makes it possible to use any DB supported by that library. If
    a DBAPI2 object, only sqlite3 is supported. The user is responsible for engine
    disposal and connection closure for the ADBC connection and SQLAlchemy connectable;
    str connections are closed automatically. See [here](https://docs.sqlalchemy.org/en/20/core/connections.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**index_col**str or list of str, optional, default: None'
  prefs: []
  type: TYPE_NORMAL
- en: Column(s) to set as index(MultiIndex).
  prefs: []
  type: TYPE_NORMAL
- en: '**coerce_float**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Attempts to convert values of non-string, non-numeric objects (like decimal.Decimal)
    to floating point, useful for SQL result sets.
  prefs: []
  type: TYPE_NORMAL
- en: '**params**list, tuple or dict, optional, default: None'
  prefs: []
  type: TYPE_NORMAL
- en: 'List of parameters to pass to execute method. The syntax used to pass parameters
    is database driver dependent. Check your database driver documentation for which
    of the five syntax styles, described in PEP 249’s paramstyle, is supported. Eg.
    for psycopg2, uses %(name)s so use params={‘name’ : ‘value’}.'
  prefs: []
  type: TYPE_NORMAL
- en: '**parse_dates**list or dict, default: None'
  prefs: []
  type: TYPE_NORMAL
- en: List of column names to parse as dates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dict of `{column_name: format string}` where format string is strftime compatible
    in case of parsing string times, or is one of (D, s, ns, ms, us) in case of parsing
    integer timestamps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dict of `{column_name: arg dict}`, where the arg dict corresponds to the keyword
    arguments of [`pandas.to_datetime()`](pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") Especially useful with databases without native Datetime
    support, such as SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**columns**list, default: None'
  prefs: []
  type: TYPE_NORMAL
- en: List of column names to select from SQL table (only used when reading a table).
  prefs: []
  type: TYPE_NORMAL
- en: '**chunksize**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If specified, return an iterator where chunksize is the number of rows to include
    in each chunk.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**Type name or dict of columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type for data or columns. E.g. np.float64 or {‘a’: np.float64, ‘b’: np.int32,
    ‘c’: ‘Int64’}. The argument is ignored if a table is passed instead of a query.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame or Iterator[DataFrame]
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_sql_table`](pandas.read_sql_table.html#pandas.read_sql_table "pandas.read_sql_table")'
  prefs: []
  type: TYPE_NORMAL
- en: Read SQL database table into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_sql_query`](pandas.read_sql_query.html#pandas.read_sql_query "pandas.read_sql_query")'
  prefs: []
  type: TYPE_NORMAL
- en: Read SQL query into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Read data from SQL via either a SQL query or a SQL tablename. When using a SQLite
    database only SQL queries are accepted, providing only the SQL tablename will
    result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply date parsing to columns through the `parse_dates` argument The `parse_dates`
    argument calls `pd.to_datetime` on the provided columns. Custom argument values
    for applying `pd.to_datetime` on a column are specified via a dictionary format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 2.2.0: pandas now supports reading via ADBC drivers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
