- en: scipy.signal.sosfreqz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sosfreqz.html#scipy.signal.sosfreqz](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sosfreqz.html#scipy.signal.sosfreqz)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the frequency response of a digital filter in SOS format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given *sos*, an array with shape (n, 6) of second order sections of a digital
    filter, compute the frequency response of the system function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: for z = exp(omega*1j), where B{k}(z) and A{k}(z) are numerator and denominator
    of the transfer function of the k-th second order section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sos**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array of second-order filter coefficients, must have shape `(n_sections, 6)`.
    Each row corresponds to a second-order section, with the first three columns providing
    the numerator coefficients and the last three providing the denominator coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**worN**{None, int, array_like}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If a single integer, then compute at that many frequencies (default is N=512).
    Using a number that is fast for FFT computations can result in faster computations
    (see Notes of [`freqz`](scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz")).
  prefs: []
  type: TYPE_NORMAL
- en: If an array_like, compute the response at the frequencies given (must be 1-D).
    These are in the same units as *fs*.
  prefs: []
  type: TYPE_NORMAL
- en: '**whole**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normally, frequencies are computed from 0 to the Nyquist frequency, fs/2 (upper-half
    of unit-circle). If *whole* is True, compute frequencies from 0 to fs.
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the digital system. Defaults to 2*pi radians/sample
    (so w is from 0 to pi).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**w**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The frequencies at which *h* was computed, in the same units as *fs*. By default,
    *w* is normalized to the range [0, pi) (radians/sample).
  prefs: []
  type: TYPE_NORMAL
- en: '**h**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The frequency response, as complex numbers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`freqz`](scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz"),
    [`sosfilt`](scipy.signal.sosfilt.html#scipy.signal.sosfilt "scipy.signal.sosfilt")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Design a 15th-order bandpass filter in SOS format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute the frequency response at 1500 points from DC to Nyquist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Plot the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-sosfreqz-1_00_00.png](../Images/31fa9c10c66cfce14cfe294600776242.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the same filter is implemented as a single transfer function, numerical
    error corrupts the frequency response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-sosfreqz-1_01_00.png](../Images/71facdf79e27432faa5cfdf248e1255a.png)'
  prefs: []
  type: TYPE_IMG
