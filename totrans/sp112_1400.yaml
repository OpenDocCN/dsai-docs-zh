- en: Development workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Note: consider watching* [SciPy Development Workflow](https://youtu.be/HgU01gJbzMY)
    *before or after reading to see an example of fixing a bug and submitting a pull
    request.*'
  prefs: []
  type: TYPE_NORMAL
- en: This guide assumes that you have created your own fork (copy) of the SciPy repository,
    cloned the repository on your own machine, and built SciPy from this source code.
    If you haven’t, check the [Building from source](../../building/index.html#building-from-source)
    pages appropriate to your system. Before getting started here, there are two other
    things you need to do just once before you start modifying SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, introduce yourself to Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This information credits you for your work, but note that it will become publicly
    available if you “push” your work to GitHub. See [Setting your commit email address
    in Git](https://help.github.com/en/articles/setting-your-commit-email-address-in-git)
    for more information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the root directory of your local SciPy repository and enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This associates the name `upstream` with the official SciPy repository located
    at [https://github.com/scipy/scipy.git](https://github.com/scipy/scipy.git). Note
    that when you cloned your fork of the SciPy repository, Git already associated
    the name `origin` with your fork. The reason you need both of these [“remotes”](https://help.github.com/en/categories/managing-remotes)
    is that you will typically start with the latest version of SciPy from the official
    repository `upstream`, make changes, “push” your changes to your fork of the repository
    `origin`, and then submit a “pull request” asking SciPy to “pull” your changes
    from your fork into the official repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initialize git submodules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This fetches and updates any submodules that SciPy needs (such as *Boost*).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Basic workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hack away! See [below](#editing-workflow).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Core developers* If you want to push changes without further review, see the
    notes [below](../gitwash/useful_git.html#pushing-to-main).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: There are many online tutorials to help you [learn git](https://www.atlassian.com/git/tutorials/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  prefs: []
  type: TYPE_NORMAL
- en: '### Making a new feature branch'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to the SciPy root directory in your terminal and fetch new
    commits from the `upstream` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Equivalently, you might want to keep the main branch of your own repository
    up to date and create a new branch based on that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In order, these commands
  prefs: []
  type: TYPE_NORMAL
- en: ensure that the `main` branch of your local repository is checked out,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: apply all the latest changes from the `upstream/main` (main SciPy repository
    main branch) to your local `main` branch, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: create and check out a new branch (`-b`) based on your local `main` branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In any case, it’s important that your feature branch include the latest changes
    from the upstream main to help avoid [merge conflicts](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line)
    when it’s time to submit a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also a good idea to build this branch and run tests before continuing.
    Assuming you’ve followed one of the [Building from source](../../building/index.html#building-from-source)
    pages to set up your development environment, you’ll need to activate your development
    environment and then run tests (note that the `dev.py test` command will perform
    a build automatically if needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]  ### The editing workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In more detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Push the changes to your forked repo on [github](https://github.com/scipy/scipy):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/scipy/scipy) repo called `origin`.
    In git >= 1.7, you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on, [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/scipy/scipy)
    repo. Subsequent push calls are then simplified to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You have to use `--set-upstream` for each new branch that you create.
  prefs: []
  type: TYPE_NORMAL
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](../gitwash/useful_git.html#rebasing-on-main) instructions to apply those
    changes to your branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Writing the commit message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard acronyms to start the commit message with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add some markers to skip part of the continuous integration. See [Continuous
    Integration](continuous_integration.html#continuous-integration).  #### Asking
    for your changes to be merged with the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, you should initiate a code review. This involves sending an email
    to the [SciPy mailing list](https://mail.python.org/mailman3/lists/scipy-dev.python.org/)
    with a link to your PR along with a description of and a motivation for your changes.  ####
    Checklist before submitting a PR'
  prefs: []
  type: TYPE_NORMAL
- en: Did you check that the code can be distributed under a BSD license? See [License
    Considerations](../hacking.html#license-considerations).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there unit tests with good code coverage? See [NumPy/SciPy Testing Guidelines](https://docs.scipy.org/doc/numpy/reference/testing.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do all unit tests pass locally? See [Building from source for SciPy development](../../building/index.html#the-dev-py-interface).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do all public function have docstrings including examples? See the [numpydoc
    docstring guide](https://numpydoc.readthedocs.io/en/latest/format.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the documentation render correctly? See [Rendering documentation locally
    with Sphinx](rendering_documentation.html#rendering-documentation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the code style correct? See [PEP8 and SciPy](pep8.html#pep8-scipy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there benchmarks? See [Benchmarking SciPy with airspeed velocity](benchmarking.html#benchmarking-with-asv).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the commit message [formatted correctly](https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
    "(in NumPy v2.0.dev0)")?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Is the docstring of the new functionality tagged with `.. versionadded:: X.Y.Z`
    (where `X.Y.Z` is the version number of the next release? See the `updating`,
    `workers`, and `constraints` documentation of [`differential_evolution`](https://github.com/scipy/scipy/blob/main/scipy/optimize/_differentialevolution.py),
    for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of larger additions, is there a tutorial or more extensive module-level
    description? Tutorial files are in `doc/source/tutorial`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If new files are added, are they integrated correctly via `meson.build`? See
    [Compiled code](contributor_toc.html#compiled-code) for more information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
