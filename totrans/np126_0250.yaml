- en: numpy.memmap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.memmap
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html](https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html](https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a memory-map to an array stored in a *binary* file on disk.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在磁盘上的*二进制*文件中创建一个数组的内存映射。
- en: Memory-mapped files are used for accessing small segments of large files on
    disk, without reading the entire file into memory. NumPy’s memmap’s are array-like
    objects. This differs from Python’s `mmap` module, which uses file-like objects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 内存映射文件被用于访问磁盘上大文件的小片段，而不需要将整个文件读入内存。NumPy的`memmap`是类似数组的对象。这与Python的`mmap`模块不同，后者使用类似文件的对象。
- en: This subclass of ndarray has some unpleasant interactions with some operations,
    because it doesn’t quite fit properly as a subclass. An alternative to using this
    subclass is to create the `mmap` object yourself, then create an ndarray with
    ndarray.__new__ directly, passing the object created in its ‘buffer=’ parameter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个ndarray的子类与一些操作有一些不愉快的交互，因为它不太适合作为一个子类。使用这个子类的另一种方法是自己创建`mmap`对象，然后直接用`ndarray.__new__`创建一个ndarray，将创建的对象传递给它的‘buffer=’参数。
- en: This class may at some point be turned into a factory function which returns
    a view into an mmap buffer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类在一定时候可能会被转换成一个工厂函数，返回一个视图到一个`mmap`缓冲区。
- en: Flush the memmap instance to write the changes to the file. Currently there
    is no API to close the underlying `mmap`. It is tricky to ensure the resource
    is actually closed, since it may be shared between different memmap instances.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新`memmap`实例以将更改写入文件。目前没有API来关闭底层的`mmap`。确保资源实际上关闭是有技巧的，因为它可能在不同的`memmap`实例之间共享。
- en: 'Parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**filename**str, file-like object, or pathlib.Path instance'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件名**字符串，类似文件对象或pathlib.Path实例'
- en: The file name or file object to be used as the array data buffer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用作数组数据缓冲区的文件名或文件对象。
- en: '**dtype**data-type, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**数据类型，可选'
- en: The data-type used to interpret the file contents. Default is [`uint8`](../arrays.scalars.html#numpy.uint8
    "numpy.uint8").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解释文件内容的数据类型。默认为[`uint8`](../arrays.scalars.html#numpy.uint8 "numpy.uint8")。
- en: '**mode**{‘r+’, ‘r’, ‘w+’, ‘c’}, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**{‘r+’, ‘r’, ‘w+’, ‘c’}，可选'
- en: 'The file is opened in this mode:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种模式打开文件：
- en: '| ‘r’ | Open existing file for reading only. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| ‘r’ | 仅打开现有文件以供读取。 |'
- en: '| ‘r+’ | Open existing file for reading and writing. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| ‘r+’ | 打开现有文件以供读取和写入。 |'
- en: '| ‘w+’ | Create or overwrite existing file for reading and writing. If `mode
    == ''w+''` then [`shape`](numpy.shape.html#numpy.shape "numpy.shape") must also
    be specified. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| ‘w+’ | 创建或覆盖现有文件以供读取和写入。如果`mode == ''w+''`，则必须同时指定[`shape`](numpy.shape.html#numpy.shape
    "numpy.shape")。 |'
- en: '| ‘c’ | Copy-on-write: assignments affect data in memory, but changes are not
    saved to disk. The file on disk is read-only. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| ‘c’ | 写时复制：赋值影响内存中的数据，但更改不会保存到磁盘上。文件是只读的。 |'
- en: Default is ‘r+’.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为‘r+’。
- en: '**offset**int, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**偏移量**整数，可选'
- en: In the file, array data starts at this offset. Since *offset* is measured in
    bytes, it should normally be a multiple of the byte-size of [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype"). When `mode != 'r'`, even positive offsets beyond end of file are
    valid; The file will be extended to accommodate the additional data. By default,
    `memmap` will start at the beginning of the file, even if `filename` is a file
    pointer `fp` and `fp.tell() != 0`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，数组数据从这个偏移量开始。由于*offset*以字节为单位，所以通常应该是[`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype")的字节大小的倍数。当`mode != 'r'`时，甚至文件末尾之后的正偏移量也是有效的；文件将被扩展以容纳附加数据。默认情况下，`memmap`将从文件的开头开始，即使`filename`是文件指针`fp`且`fp.tell()
    != 0`。
- en: '**shape**tuple, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**形状**元组，可选'
- en: The desired shape of the array. If `mode == 'r'` and the number of remaining
    bytes after *offset* is not a multiple of the byte-size of [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype"), you must specify [`shape`](numpy.shape.html#numpy.shape "numpy.shape").
    By default, the returned array will be 1-D with the number of elements determined
    by file size and data-type.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的期望形状。如果`mode == 'r'`并且*offset*之后剩余的字节数不是[`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype")的字节大小的倍数，你必须指定[`shape`](numpy.shape.html#numpy.shape "numpy.shape")。默认情况下，返回的数组将是1-D数组，其元素数量由文件大小和数据类型确定。
- en: '**order**{‘C’, ‘F’}, optional'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺序**{‘C’, ‘F’}，可选'
- en: 'Specify the order of the ndarray memory layout: [row-major](../../glossary.html#term-row-major),
    C-style or [column-major](../../glossary.html#term-column-major), Fortran-style.
    This only has an effect if the shape is greater than 1-D. The default order is
    ‘C’.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 指定 ndarray 内存布局的顺序：[行优先](../../glossary.html#term-row-major)、C 风格或[列优先](../../glossary.html#term-column-major)、Fortran
    风格。只有在形状大于 1-D 时才会生效。默认顺序是 ‘C’。
- en: See also
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`lib.format.open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lib.format.open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")'
- en: Create or load a memory-mapped `.npy` file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建或加载一个内存映射的`.npy`文件。
- en: Notes
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The memmap object can be used anywhere an ndarray is accepted. Given a memmap
    `fp`, `isinstance(fp, numpy.ndarray)` returns `True`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: memmap 对象可用于任何接受 ndarray 的地方。给定一个 memmap `fp`，`isinstance(fp, numpy.ndarray)`
    返回 `True`。
- en: Memory-mapped files cannot be larger than 2GB on 32-bit systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内存映射文件在 32 位系统上不能超过 2GB。
- en: When a memmap causes a file to be created or extended beyond its current size
    in the filesystem, the contents of the new part are unspecified. On systems with
    POSIX filesystem semantics, the extended part will be filled with zero bytes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当 memmap 导致在文件系统中创建或扩展超出当前大小的文件时，新部分的内容是未指定的。在具有 POSIX 文件系统语义的系统上，扩展部分将填充为零字节。
- en: Examples
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example uses a temporary file so that doctest doesn’t write files to your
    directory. You would use a ‘normal’ filename.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用一个临时文件，以便 doctest 不会将文件写入您的目录。您会使用一个‘正常’的文件名。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a memmap with dtype and shape that matches our data:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个与我们的数据匹配的 dtype 和形状的 memmap：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Write data to memmap array:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据写入 memmap 数组：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Flushes memory changes to disk in order to read them back
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新内存更改以便读取它们
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Load the memmap and verify data was stored:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 加载 memmap 并验证数据已存储：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Read-only memmap:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 只读 memmap：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Copy-on-write memmap:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 写时复制 memmap：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It’s possible to assign to copy-on-write array, but values are only written
    into the memory copy of the array, and not written to disk:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将值分配给写时复制数组，但值仅写入数组的内存副本，而不写入磁盘：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File on disk is unchanged:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘上的文件保持不变：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Offset into a memmap:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: memmap 的偏移：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Attributes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**filename**str or pathlib.Path instance'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件名**str 或 pathlib.Path 实例'
- en: Path to the mapped file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 映射文件的路径。
- en: '**offset**int'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**偏移量**int'
- en: Offset position in the file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的偏移位置。
- en: '**mode**str'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**str'
- en: File mode.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 文件模式。
- en: Methods
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`flush`](numpy.memmap.flush.html#numpy.memmap.flush "numpy.memmap.flush")()
    | Write any changes in the array to the file on disk. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`flush`](numpy.memmap.flush.html#numpy.memmap.flush "numpy.memmap.flush")()
    | 将数组中的任何更改写入磁盘上的文件。 |'
