["```py\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> image = datasets.face(gray=True).astype(np.float32)\n>>> derfilt = np.array([1.0, -2, 1.0], dtype=np.float32)\n>>> ck = signal.cspline2d(image, 8.0)\n>>> deriv = (signal.sepfir2d(ck, derfilt, [1]) +\n...          signal.sepfir2d(ck, [1], derfilt)) \n```", "```py\nlaplacian = np.array([[0,1,0], [1,-4,1], [0,1,0]], dtype=np.float32)\nderiv2 = signal.convolve2d(ck,laplacian,mode='same',boundary='symm') \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show() \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(deriv)\n>>> plt.gray()\n>>> plt.title('Output of spline edge filter')\n>>> plt.show() \n```", "```py\n>>> x = np.array([1.0, 2.0, 3.0])\n>>> h = np.array([0.0, 1.0, 0.0, 0.0, 0.0])\n>>> signal.convolve(x, h)\narray([ 0.,  1.,  2.,  3.,  0.,  0.,  0.])\n>>> signal.convolve(x, h, 'same')\narray([ 2.,  3.,  0.]) \n```", "```py\n>>> x = np.array([[1., 1., 0., 0.], [1., 1., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])\n>>> h = np.array([[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 0.]])\n>>> signal.convolve(x, h)\narray([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n [ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> image = datasets.face(gray=True)\n>>> w = np.zeros((50, 50))\n>>> w[0][0] = 1.0\n>>> w[49][25] = 1.0\n>>> image_new = signal.fftconvolve(image, w) \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show() \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(image_new)\n>>> plt.gray()\n>>> plt.title('Filtered image')\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> image = np.asarray(datasets.ascent(), np.float64)\n>>> w = signal.windows.gaussian(51, 10.0)\n>>> image_new = signal.sepfir2d(image, w, w) \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show() \n```", "```py\n>>> plt.figure()\n>>> plt.imshow(image_new)\n>>> plt.gray()\n>>> plt.title('Filtered image')\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> from scipy import signal \n```", "```py\n>>> x = np.array([1., 0., 0., 0.])\n>>> b = np.array([1.0/2, 1.0/4])\n>>> a = np.array([1.0, -1.0/3])\n>>> signal.lfilter(b, a, x)\narray([0.5, 0.41666667, 0.13888889, 0.0462963])\n>>> zi = signal.lfiltic(b, a, y=[2.])\n>>> signal.lfilter(b, a, x, zi=zi)\n(array([ 1.16666667,  0.63888889,  0.21296296,  0.07098765]), array([0.02366])) \n```", "```py\n>>> b = np.array([1.0/2, 1.0/4])\n>>> a = np.array([1.0, -1.0/3])\n>>> signal.tf2zpk(b, a)\n(array([-0.5]), array([ 0.33333333]), 0.5) \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> b1 = signal.firwin(40, 0.5)\n>>> b2 = signal.firwin(41, [0.3, 0.8])\n>>> w1, h1 = signal.freqz(b1)\n>>> w2, h2 = signal.freqz(b2) \n```", "```py\n>>> plt.title('Digital filter frequency response')\n>>> plt.plot(w1, 20*np.log10(np.abs(h1)), 'b')\n>>> plt.plot(w2, 20*np.log10(np.abs(h2)), 'r')\n>>> plt.ylabel('Amplitude Response (dB)')\n>>> plt.xlabel('Frequency (rad/sample)')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> b = signal.firwin2(150, [0.0, 0.3, 0.6, 1.0], [1.0, 2.0, 0.5, 0.0])\n>>> w, h = signal.freqz(b) \n```", "```py\n>>> plt.title('Digital filter frequency response')\n>>> plt.plot(w, np.abs(h))\n>>> plt.title('Digital filter frequency response')\n>>> plt.ylabel('Amplitude Response')\n>>> plt.xlabel('Frequency (rad/sample)')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> b, a = signal.iirfilter(4, Wn=0.2, rp=5, rs=60, btype='lowpass', ftype='ellip')\n>>> w, h = signal.freqz(b, a) \n```", "```py\n>>> plt.title('Digital filter frequency response')\n>>> plt.plot(w, 20*np.log10(np.abs(h)))\n>>> plt.title('Digital filter frequency response')\n>>> plt.ylabel('Amplitude Response [dB]')\n>>> plt.xlabel('Frequency (rad/sample)')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> b, a = signal.iirdesign(wp=100, ws=200, gpass=2.0, gstop=40., analog=True)\n>>> w, h = signal.freqs(b, a) \n```", "```py\n>>> plt.title('Analog filter frequency response')\n>>> plt.plot(w, 20*np.log10(np.abs(h)))\n>>> plt.ylabel('Amplitude Response [dB]')\n>>> plt.xlabel('Frequency')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> z, p, k = signal.tf2zpk(b, a) \n```", "```py\n>>> plt.plot(np.real(z), np.imag(z), 'ob', markerfacecolor='none')\n>>> plt.plot(np.real(p), np.imag(p), 'xr')\n>>> plt.legend(['Zeros', 'Poles'], loc=2) \n```", "```py\n>>> plt.title('Pole / Zero Plot')\n>>> plt.xlabel('Real')\n>>> plt.ylabel('Imaginary')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> fs = 10e3\n>>> N = 1e5\n>>> amp = 2*np.sqrt(2)\n>>> freq = 1270.0\n>>> noise_power = 0.001 * fs / 2\n>>> time = np.arange(N) / fs\n>>> x = amp*np.sin(2*np.pi*freq*time)\n>>> x += np.random.normal(scale=np.sqrt(noise_power), size=time.shape) \n```", "```py\n>>> f, Pper_spec = signal.periodogram(x, fs, 'flattop', scaling='spectrum') \n```", "```py\n>>> plt.semilogy(f, Pper_spec)\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('PSD')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> fs = 10e3\n>>> N = 1e5\n>>> amp = 2*np.sqrt(2)\n>>> freq = 1270.0\n>>> noise_power = 0.001 * fs / 2\n>>> time = np.arange(N) / fs\n>>> x = amp*np.sin(2*np.pi*freq*time)\n>>> x += np.random.normal(scale=np.sqrt(noise_power), size=time.shape) \n```", "```py\n>>> f, Pwelch_spec = signal.welch(x, fs, scaling='spectrum') \n```", "```py\n>>> plt.semilogy(f, Pwelch_spec)\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('PSD')\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.fft import fftshift\n>>> from scipy.signal import stft, istft, spectrogram, ShortTimeFFT\n...\n>>> fs, N = 200, 1001  # 200 Hz sampling rate for 5 s signal\n>>> t_z = np.arange(N) / fs  # time indexes for signal\n>>> z = np.exp(2j*np.pi*70 * (t_z - 0.2*t_z**2))  # complex-valued chirp\n...\n>>> nperseg, noverlap = 50, 40\n>>> win = ('gaussian', 1e-2 * fs)  # Gaussian with 0.01 s standard dev.\n...\n>>> # Legacy STFT:\n>>> f0_u, t0, Sz0_u = stft(z, fs, win, nperseg, noverlap,\n...                        return_onesided=False, scaling='spectrum')\n>>> f0, Sz0 = fftshift(f0_u), fftshift(Sz0_u, axes=0)\n...\n>>> # New STFT:\n>>> SFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap,\n...                                fft_mode='centered',\n...                                scale_to='magnitude', phase_shift=None)\n>>> Sz1 = SFT.stft(z)\n...\n>>> # Plot results:\n>>> fig1, axx = plt.subplots(2, 1, sharex='all', sharey='all',\n...                          figsize=(6., 5.))  # enlarge figure a bit\n>>> t_lo, t_hi, f_lo, f_hi = SFT.extent(N, center_bins=True)\n>>> t_str0 = r\"Legacy stft() produces $%d\\times%d$ points\" % Sz0.T.shape\n>>> t_str1 = r\"ShortTimeFFT produces $%d\\times%d$ points\" % Sz1.T.shape\n>>> _ = axx[0].set(title=t_str0, xlim=(t_lo, t_hi), ylim=(f_lo, f_hi))\n>>> _ = axx[1].set(title=t_str1, xlabel=\"Time $t$ in seconds \" +\n...                rf\"($\\Delta t= %g\\,$s)\" % SFT.delta_t)\n...\n>>> # Calculate extent of plot with centered bins since imshow\n... # does not interpolate by default:\n... dt2 = (nperseg-noverlap) / fs  / 2 # equals SFT.delta_t / 2\n>>> df2 = fs / nperseg / 2 # equals SFT.delta_f / 2\n>>> extent0 = (-dt2, t0[-1] + dt2, f0[0] - df2, f0[-1] - df2)\n>>> extent1 = SFT.extent(N, center_bins=True)\n...\n>>> kw = dict(origin='lower', aspect='auto', cmap='viridis')\n>>> im1a = axx[0].imshow(abs(Sz0), extent=extent0, **kw)\n>>> im1b = axx[1].imshow(abs(Sz1), extent=extent1, **kw)\n>>> fig1.colorbar(im1b, ax=axx, label=\"Magnitude $|S_z(t, f)|$\")\n>>> _ = fig1.supylabel(rf\"Frequency $f$ in Hertz ($\\Delta f = %g\\,$Hz)\" %\n...                    SFT.delta_f)\n>>> plt.show() \n```", "```py\n>>> np.allclose(Sz0, Sz1[:, 2:-1])\nTrue \n```", "```py\n>>> abs(Sz1[:, 1]).min(), abs(Sz1[:, 1]).max()\n(6.925060911593139e-07, 8.00271269218721e-07) \n```", "```py\n>>> t0_r, z0_r = istft(Sz0_u, fs, win, nperseg, noverlap,\n...                    input_onesided=False, scaling='spectrum')\n>>> z1_r = SFT.istft(Sz1, k1=N)\n...\n>>> len(z0_r), len(z)\n(1010, 1001)\n>>> np.allclose(z0_r[:N], z)\nTrue\n>>> np.allclose(z1_r, z)\nTrue \n```", "```py\n>>> np.allclose(SFT.spectrogram(z), abs(Sz1)**2)\nTrue \n```", "```py\n>>> # Legacy spectrogram (detrending for complex signals not useful):\n>>> f2_u, t2, Sz2_u = spectrogram(z, fs, win, nperseg, noverlap,\n...                               detrend=None, return_onesided=False,\n...                               scaling='spectrum', mode='complex')\n>>> f2, Sz2 = fftshift(f2_u), fftshift(Sz2_u, axes=0)\n...\n>>> # New STFT:\n... SFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap,\n...                                fft_mode='centered',\n...                                scale_to='magnitude', phase_shift=None)\n>>> Sz3 = SFT.stft(z, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)\n>>> t3 = SFT.t(N, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)\n...\n>>> np.allclose(t2, t3)\nTrue\n>>> np.allclose(f2, SFT.f)\nTrue\n>>> np.allclose(Sz2, Sz3)\nTrue \n```", "```py\n>>> t2\narray([0.125, 0.175, 0.225, 0.275, 0.325, 0.375, 0.425, 0.475, 0.525,\n ...\n 4.625, 4.675, 4.725, 4.775, 4.825, 4.875]) \n```", "```py\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> t = np.linspace(-10, 10, 20)\n>>> y = 1 + t + 0.01*t**2\n>>> yconst = signal.detrend(y, type='constant')\n>>> ylin = signal.detrend(y, type='linear') \n```", "```py\n>>> plt.plot(t, y, '-rx')\n>>> plt.plot(t, yconst, '-bo')\n>>> plt.plot(t, ylin, '-k+')\n>>> plt.grid()\n>>> plt.legend(['signal', 'const. detrend', 'linear detrend'])\n>>> plt.show() \n```"]