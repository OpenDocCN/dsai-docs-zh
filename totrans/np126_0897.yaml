- en: numpy.min
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.min.html](https://numpy.org/doc/1.26/reference/generated/numpy.min.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the minimum of an array or minimum along an axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input data.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which to operate. By default, flattened input is used.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If this is a tuple of ints, the minimum is selected over multiple axes, instead
    of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. Must be of the same shape
    and buffer length as the expected output. See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If the default value is passed, then *keepdims* will not be passed through to
    the `min` method of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), however any non-default value will be. If the sub-class’ method
    does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an output element. Must be present to allow computation
    on empty slice. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to compare for the minimum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**min**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum of *a*. If *axis* is None, the result is a scalar value. If *axis* is
    an int, the result is an array of dimension `a.ndim - 1`. If *axis* is a tuple,
    the result is an array of dimension `a.ndim - len(axis)`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`amax`](numpy.amax.html#numpy.amax "numpy.amax")'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an array along a given axis, propagating any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nanmin`](numpy.nanmin.html#numpy.nanmin "numpy.nanmin")'
  prefs: []
  type: TYPE_NORMAL
- en: The minimum value of an array along a given axis, ignoring any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum`](numpy.minimum.html#numpy.minimum "numpy.minimum")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise minimum of two arrays, propagating any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fmin`](numpy.fmin.html#numpy.fmin "numpy.fmin")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise minimum of two arrays, ignoring any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`argmin`](numpy.argmin.html#numpy.argmin "numpy.argmin")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the indices of the minimum values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nanmax`](numpy.nanmax.html#numpy.nanmax "numpy.nanmax"), [`maximum`](numpy.maximum.html#numpy.maximum
    "numpy.maximum"), [`fmax`](numpy.fmax.html#numpy.fmax "numpy.fmax")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NaN values are propagated, that is if at least one item is NaN, the corresponding
    min value will be NaN as well. To ignore NaN values (MATLAB behavior), please
    use nanmin.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t use [`min`](#numpy.min "numpy.min") for element-wise comparison of 2 arrays;
    when `a.shape[0]` is 2, `minimum(a[0], a[1])` is faster than `min(a, axis=0)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the initial value is used as one of the elements for which the minimum
    is determined, unlike for the default argument Python’s max function, which is
    only used for empty iterables.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this isn’t the same as Python’s `default` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
