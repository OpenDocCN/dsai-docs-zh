- en: scipy.stats.multiscale_graphcorr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multiscale_graphcorr.html#scipy.stats.multiscale_graphcorr](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multiscale_graphcorr.html#scipy.stats.multiscale_graphcorr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Multiscale Graph Correlation (MGC) test statistic.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, for each point, MGC finds the \(k\)-nearest neighbors for one
    property (e.g. cloud density), and the \(l\)-nearest neighbors for the other property
    (e.g. grass wetness) [[1]](#r882c1b4c2283-1). This pair \((k, l)\) is called the
    “scale”. A priori, however, it is not know which scales will be most informative.
    So, MGC computes all distance pairs, and then efficiently computes the distance
    correlations for all scales. The local correlations illustrate which scales are
    relatively informative about the relationship. The key, therefore, to successfully
    discover and decipher relationships between disparate data modalities is to adaptively
    determine which scales are the most informative, and the geometric implication
    for the most informative scales. Doing so not only provides an estimate of whether
    the modalities are related, but also provides insight into how the determination
    was made. This is especially important in high-dimensional data, where simple
    visualizations do not reveal relationships to the unaided human eye. Characterizations
    of this implementation in particular have been derived from and benchmarked within
    in [[2]](#r882c1b4c2283-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x, y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: If `x` and `y` have shapes `(n, p)` and `(n, q)` where *n* is the number of
    samples and *p* and *q* are the number of dimensions, then the MGC independence
    test will be run. Alternatively, `x` and `y` can have shapes `(n, n)` if they
    are distance or similarity matrices, and `compute_distance` must be sent to `None`.
    If `x` and `y` have shapes `(n, p)` and `(m, p)`, an unpaired two-sample MGC test
    will be run.
  prefs: []
  type: TYPE_NORMAL
- en: '**compute_distance**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A function that computes the distance or similarity among the samples within
    each data matrix. Set to `None` if `x` and `y` are already distance matrices.
    The default uses the euclidean norm metric. If you are calling a custom function,
    either create the distance matrix before-hand or create a function of the form
    `compute_distance(x)` where *x* is the data matrix for which pairwise distances
    are calculated.
  prefs: []
  type: TYPE_NORMAL
- en: '**reps**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of replications used to estimate the null when using the permutation
    test. The default is `1000`.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int or map-like callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If `workers` is an int the population is subdivided into `workers` sections
    and evaluated in parallel (uses `multiprocessing.Pool <multiprocessing>`). Supply
    `-1` to use all cores available to the Process. Alternatively supply a map-like
    callable, such as `multiprocessing.Pool.map` for evaluating the p-value in parallel.
    This evaluation is carried out as `workers(func, iterable)`. Requires that *func*
    be pickleable. The default is `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '**is_twosamp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, a two sample test will be run. If `x` and `y` have shapes `(n, p)`
    and `(m, p)`, this optional will be overridden and set to `True`. Set to `True`
    if `x` and `y` both have shapes `(n, p)` and a two sample test is desired. The
    default is `False`. Note that this will not run if inputs are distance matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**MGCResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object containing attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: statisticfloat
  prefs: []
  type: TYPE_NORMAL
- en: The sample MGC test statistic within *[-1, 1]*.
  prefs: []
  type: TYPE_NORMAL
- en: pvaluefloat
  prefs: []
  type: TYPE_NORMAL
- en: The p-value obtained via permutation.
  prefs: []
  type: TYPE_NORMAL
- en: mgc_dictdict
  prefs: []
  type: TYPE_NORMAL
- en: 'Contains additional useful results:'
  prefs: []
  type: TYPE_NORMAL
- en: mgc_mapndarray
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A 2D representation of the latent geometry of the relationship.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: opt_scale(int, int)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The estimated optimal scale as a *(x, y)* pair.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: null_distlist
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The null distribution derived from the permuted matrices.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pearsonr`](scipy.stats.pearsonr.html#scipy.stats.pearsonr "scipy.stats.pearsonr")'
  prefs: []
  type: TYPE_NORMAL
- en: Pearson correlation coefficient and p-value for testing non-correlation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`kendalltau`](scipy.stats.kendalltau.html#scipy.stats.kendalltau "scipy.stats.kendalltau")'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates Kendall’s tau.
  prefs: []
  type: TYPE_NORMAL
- en: '[`spearmanr`](scipy.stats.spearmanr.html#scipy.stats.spearmanr "scipy.stats.spearmanr")'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates a Spearman rank-order correlation coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'A description of the process of MGC and applications on neuroscience data can
    be found in [[1]](#r882c1b4c2283-1). It is performed using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Two distance matrices \(D^X\) and \(D^Y\) are computed and modified to be mean
    zero columnwise. This results in two \(n \times n\) distance matrices \(A\) and
    \(B\) (the centering and unbiased modification) [[3]](#r882c1b4c2283-3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For all values \(k\) and \(l\) from \(1, ..., n\),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The \(k\)-nearest neighbor and \(l\)-nearest neighbor graphs are calculated
    for each property. Here, \(G_k (i, j)\) indicates the \(k\)-smallest values of
    the \(i\)-th row of \(A\) and \(H_l (i, j)\) indicates the \(l\) smallested values
    of the \(i\)-th row of \(B\)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let \(\circ\) denotes the entry-wise matrix product, then local correlations
    are summed and normalized using the following statistic:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: \[c^{kl} = \frac{\sum_{ij} A G_k B H_l} {\sqrt{\sum_{ij} A^2 G_k \times \sum_{ij}
    B^2 H_l}}\]
  prefs: []
  type: TYPE_NORMAL
- en: The MGC test statistic is the smoothed optimal local correlation of \(\{ c^{kl}
    \}\). Denote the smoothing operation as \(R(\cdot)\) (which essentially set all
    isolated large correlations) as 0 and connected large correlations the same as
    before, see [[3]](#r882c1b4c2283-3).) MGC is,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \[MGC_n (x, y) = \max_{(k, l)} R \left(c^{kl} \left( x_n, y_n \right) \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: The test statistic returns a value between \((-1, 1)\) since it is normalized.
  prefs: []
  type: TYPE_NORMAL
- en: The p-value returned is calculated using a permutation test. This process is
    completed by first randomly permuting \(y\) to estimate the null distribution
    and then calculating the probability of observing a test statistic, under the
    null, at least as extreme as the observed test statistic.
  prefs: []
  type: TYPE_NORMAL
- en: 'MGC requires at least 5 samples to run with reliable results. It can also handle
    high-dimensional data sets. In addition, by manipulating the input data matrices,
    the two-sample testing problem can be reduced to the independence testing problem
    [[4]](#r882c1b4c2283-4). Given sample data \(U\) and \(V\) of sizes \(p \times
    n\) \(p \times m\), data matrix \(X\) and \(Y\) can be created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: \[X = [U | V] \in \mathcal{R}^{p \times (n + m)} Y = [0_{1 \times n} | 1_{1
    \times m}] \in \mathcal{R}^{(n + m)}\]
  prefs: []
  type: TYPE_NORMAL
- en: Then, the MGC statistic can be calculated as normal. This methodology can be
    extended to similar tests such as distance correlation [[4]](#r882c1b4c2283-4).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1] ([1](#id1),[2](#id3))'
  prefs: []
  type: TYPE_NORMAL
- en: Vogelstein, J. T., Bridgeford, E. W., Wang, Q., Priebe, C. E., Maggioni, M.,
    & Shen, C. (2019). Discovering and deciphering relationships across disparate
    data modalities. ELife.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Panda, S., Palaniappan, S., Xiong, J., Swaminathan, A., Ramachandran, S., Bridgeford,
    E. W., … Vogelstein, J. T. (2019). mgcpy: A Comprehensive High Dimensional Independence
    Testing Python Package. [arXiv:1907.02088](https://arxiv.org/abs/1907.02088)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] ([1](#id4),[2](#id5))'
  prefs: []
  type: TYPE_NORMAL
- en: Shen, C., Priebe, C.E., & Vogelstein, J. T. (2019). From distance correlation
    to multiscale graph correlation. Journal of the American Statistical Association.
  prefs: []
  type: TYPE_NORMAL
- en: '[4] ([1](#id6),[2](#id7))'
  prefs: []
  type: TYPE_NORMAL
- en: Shen, C. & Vogelstein, J. T. (2018). The Exact Equivalence of Distance and Kernel
    Methods for Hypothesis Testing. [arXiv:1806.05514](https://arxiv.org/abs/1806.05514)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To run an unpaired two-sample test,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: or, if shape of the inputs are the same,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
