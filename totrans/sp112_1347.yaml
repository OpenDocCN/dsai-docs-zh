- en: scipy.stats.bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a two-sided bootstrap confidence interval of a statistic.
  prefs: []
  type: TYPE_NORMAL
- en: When *method* is `'percentile'` and *alternative* is `'two-sided'`, a bootstrap
    confidence interval is computed according to the following procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Resample the data: for each sample in *data* and for each of *n_resamples*,
    take a random sample of the original sample (with replacement) of the same size
    as the original sample.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Compute the bootstrap distribution of the statistic: for each set of resamples,
    compute the test statistic.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Determine the confidence interval: find the interval of the bootstrap distribution
    that is'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: symmetric about the median and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: contains *confidence_level* of the resampled statistic values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: While the `'percentile'` method is the most intuitive, it is rarely used in
    practice. Two more common methods are available, `'basic'` (‘reverse percentile’)
    and `'BCa'` (‘bias-corrected and accelerated’); they differ in how step 3 is performed.
  prefs: []
  type: TYPE_NORMAL
- en: If the samples in *data* are taken at random from their respective distributions
    \(n\) times, the confidence interval returned by [`bootstrap`](#scipy.stats.bootstrap
    "scipy.stats.bootstrap") will contain the true value of the statistic for those
    distributions approximately *confidence_level*\(\, \times \, n\) times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**sequence of array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Each element of data is a sample from an underlying distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Statistic for which the confidence interval is to be calculated. *statistic*
    must be a callable that accepts `len(data)` samples as separate arguments and
    returns the resulting statistic. If *vectorized* is set `True`, *statistic* must
    also accept a keyword argument *axis* and be vectorized to compute the statistic
    along the provided *axis*.
  prefs: []
  type: TYPE_NORMAL
- en: '**n_resamples**int, default: `9999`'
  prefs: []
  type: TYPE_NORMAL
- en: The number of resamples performed to form the bootstrap distribution of the
    statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '**batch**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of resamples to process in each vectorized call to *statistic*. Memory
    usage is O( *batch* * `n` ), where `n` is the sample size. Default is `None`,
    in which case `batch = n_resamples` (or `batch = max(n_resamples, n)` for `method='BCa'`).
  prefs: []
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *vectorized* is set `False`, *statistic* will not be passed keyword argument
    *axis* and is expected to calculate the statistic only for 1D samples. If `True`,
    *statistic* will be passed keyword argument *axis* and is expected to calculate
    the statistic along *axis* when passed an ND sample array. If `None` (default),
    *vectorized* will be set `True` if `axis` is a parameter of *statistic*. Use of
    a vectorized statistic typically reduces computation time.
  prefs: []
  type: TYPE_NORMAL
- en: '**paired**bool, default: `False`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the statistic treats corresponding elements of the samples in *data*
    as paired.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, default: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the samples in *data* along which the *statistic* is calculated.
  prefs: []
  type: TYPE_NORMAL
- en: '**confidence_level**float, default: `0.95`'
  prefs: []
  type: TYPE_NORMAL
- en: The confidence level of the confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**alternative**{‘two-sided’, ‘less’, ‘greater’}, default: `''two-sided''`'
  prefs: []
  type: TYPE_NORMAL
- en: Choose `'two-sided'` (default) for a two-sided confidence interval, `'less'`
    for a one-sided confidence interval with the lower bound at `-np.inf`, and `'greater'`
    for a one-sided confidence interval with the upper bound at `np.inf`. The other
    bound of the one-sided confidence intervals is the same as that of a two-sided
    confidence interval with *confidence_level* twice as far from 1.0; e.g. the upper
    bound of a 95% `'less'` confidence interval is the same as the upper bound of
    a 90% `'two-sided'` confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{‘percentile’, ‘basic’, ‘bca’}, default: `''BCa''`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to return the ‘percentile’ bootstrap confidence interval (`'percentile'`),
    the ‘basic’ (AKA ‘reverse’) bootstrap confidence interval (`'basic'`), or the
    bias-corrected and accelerated bootstrap confidence interval (`'BCa'`).
  prefs: []
  type: TYPE_NORMAL
- en: '**bootstrap_result**BootstrapResult, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Provide the result object returned by a previous call to [`bootstrap`](#scipy.stats.bootstrap
    "scipy.stats.bootstrap") to include the previous bootstrap distribution in the
    new bootstrap distribution. This can be used, for example, to change *confidence_level*,
    change *method*, or see the effect of performing additional resampling without
    repeating computations.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pseudorandom number generator state used to generate resamples.
  prefs: []
  type: TYPE_NORMAL
- en: If *random_state* is `None` (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *random_state* is an int, a new
    `RandomState` instance is used, seeded with *random_state*. If *random_state*
    is already a `Generator` or `RandomState` instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**BootstrapResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object with attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: confidence_intervalConfidenceInterval
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap confidence interval as an instance of [`collections.namedtuple`](https://docs.python.org/3/library/collections.html#collections.namedtuple
    "(in Python v3.12)") with attributes *low* and *high*.
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap_distributionndarray
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap distribution, that is, the value of *statistic* for each resample.
    The last dimension corresponds with the resamples (e.g. `res.bootstrap_distribution.shape[-1]
    == n_resamples`).
  prefs: []
  type: TYPE_NORMAL
- en: standard_errorfloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap standard error, that is, the sample standard deviation of the
    bootstrap distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DegenerateDataWarning`](scipy.stats.DegenerateDataWarning.html#scipy.stats.DegenerateDataWarning
    "scipy.stats.DegenerateDataWarning")'
  prefs: []
  type: TYPE_NORMAL
- en: Generated when `method='BCa'` and the bootstrap distribution is degenerate (e.g.
    all elements are identical).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Elements of the confidence interval may be NaN for `method='BCa'` if the bootstrap
    distribution is degenerate (e.g. all elements are identical). In this case, consider
    using another *method* or inspecting *data* for indications that other analysis
    may be more appropriate (e.g. all observations are identical).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: B. Efron and R. J. Tibshirani, An Introduction to the Bootstrap, Chapman & Hall/CRC,
    Boca Raton, FL, USA (1993)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Nathaniel E. Helwig, “Bootstrap Confidence Intervals”, [http://users.stat.umn.edu/~helwig/notes/bootci-Notes.pdf](http://users.stat.umn.edu/~helwig/notes/bootci-Notes.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping (statistics), Wikipedia, [https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29](https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have sampled data from an unknown distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We are interested in the standard deviation of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The bootstrap is used to approximate the variability we would expect if we were
    to repeatedly sample from the unknown distribution and calculate the statistic
    of the sample each time. It does this by repeatedly resampling values *from the
    original sample* with replacement and calculating the statistic of each resample.
    This results in a “bootstrap distribution” of the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-bootstrap-1_00_00.png](../Images/abb2880498e968323995d5b605f78362.png)'
  prefs: []
  type: TYPE_IMG
- en: The standard error quantifies this variability. It is calculated as the standard
    deviation of the bootstrap distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The bootstrap distribution of the statistic is often approximately normal with
    scale equal to the standard error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-bootstrap-1_01_00.png](../Images/8044ecca14a370b6a8a7b9e54bf7a3df.png)'
  prefs: []
  type: TYPE_IMG
- en: This suggests that we could construct a 90% confidence interval on the statistic
    based on quantiles of this normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Due to central limit theorem, this normal approximation is accurate for a variety
    of statistics and distributions underlying the samples; however, the approximation
    is not reliable in all cases. Because [`bootstrap`](#scipy.stats.bootstrap "scipy.stats.bootstrap")
    is designed to work with arbitrary underlying distributions and statistics, it
    uses more advanced techniques to generate an accurate confidence interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If we sample from the original distribution 1000 times and form a bootstrap
    confidence interval for each sample, the confidence interval contains the true
    value of the statistic approximately 90% of the time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Rather than writing a loop, we can also determine the confidence intervals for
    all 1000 samples at once.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, *ci_l* and *ci_u* contain the confidence interval for each of the `n_trials
    = 1000` samples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And again, approximately 90% contain the true value, `std_true = 4`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[`bootstrap`](#scipy.stats.bootstrap "scipy.stats.bootstrap") can also be used
    to estimate confidence intervals of multi-sample statistics, including those calculated
    by hypothesis tests. [`scipy.stats.mood`](scipy.stats.mood.html#scipy.stats.mood
    "scipy.stats.mood") perform’s Mood’s test for equal scale parameters, and it returns
    two outputs: a statistic, and a p-value. To get a confidence interval for the
    test statistic, we first wrap [`scipy.stats.mood`](scipy.stats.mood.html#scipy.stats.mood
    "scipy.stats.mood") in a function that accepts two sample arguments, accepts an
    *axis* keyword argument, and returns only the statistic.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the ‘percentile’ method with the default 95% confidence level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The bootstrap estimate of the standard error is also available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Paired-sample statistics work, too. For example, consider the Pearson correlation
    coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We wrap [`pearsonr`](scipy.stats.pearsonr.html#scipy.stats.pearsonr "scipy.stats.pearsonr")
    so that it returns only the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We call [`bootstrap`](#scipy.stats.bootstrap "scipy.stats.bootstrap") using
    `paired=True`. Also, since `my_statistic` isn’t vectorized to calculate the statistic
    along a given axis, we pass in `vectorized=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The result object can be passed back into [`bootstrap`](#scipy.stats.bootstrap
    "scipy.stats.bootstrap") to perform additional resampling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'or to change the confidence interval options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: without repeating computation of the original bootstrap distribution.
  prefs: []
  type: TYPE_NORMAL
