- en: Essential Classes in sympy.vector (docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/vector/api/classes.html](https://docs.sympy.org/latest/modules/vector/api/classes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represents a coordinate system in 3-D space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The orientation/location parameters are necessary if this system is being defined
    at a certain orientation or location wrt another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new CoordSys3D instance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**transformation** : Lambda, Tuple, str'
  prefs: []
  type: TYPE_NORMAL
- en: Transformation defined by transformation equations or chosen from predefined
    ones.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The position vector of the new system’s origin wrt the parent instance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rotation_matrix** : SymPy ImmutableMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: The rotation matrix of the new coordinate system with respect to the parent.
    In other words, the output of new_system.rotation_matrix(parent).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**parent** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system wrt which the orientation/location (or both) is being
    defined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns a CoordSys3D which is connected to self by transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new CoordSys3D instance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**transformation** : Lambda, Tuple, str'
  prefs: []
  type: TYPE_NORMAL
- en: Transformation defined by transformation equations or chosen from predefined
    ones.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns a CoordSys3D with its origin located at the given position wrt this
    coordinate system’s origin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new CoordSys3D instance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**position** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The position vector of the new system’s origin wrt this one.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creates a new CoordSys3D oriented in the user-specified way with respect to
    this system.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the documentation of the orienter classes for more information
    about the orientation procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new CoordSys3D instance.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**orienters** : iterable/Orienter'
  prefs: []
  type: TYPE_NORMAL
- en: An Orienter or an iterable of Orienters for orienting the new coordinate system.
    If an Orienter is provided, it is applied to get the new system. If an iterable
    is provided, the orienters will be applied in the order in which they appear in
    the iterable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new coordinate system’s origin wrt this system’s origin.
    If not specified, the origins are taken to be coincident.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using an AxisOrienter
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using a BodyOrienter
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using a SpaceOrienter
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using a QuaternionOrienter
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Axis rotation is a rotation about an arbitrary axis by some angle. The angle
    is supplied as a SymPy expr scalar, and the axis is supplied as a Vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : string'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The angle by which the new system is to be rotated
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The axis around which the rotation has to be performed
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new coordinate system’s origin wrt this system’s origin.
    If not specified, the origins are taken to be coincident.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Body orientation takes this coordinate system through three successive simple
    rotations.
  prefs: []
  type: TYPE_NORMAL
- en: Body fixed rotations include both Euler Angles and Tait-Bryan Angles, see [https://en.wikipedia.org/wiki/Euler_angles](https://en.wikipedia.org/wiki/Euler_angles).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : string'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle1, angle2, angle3** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Three successive angles to rotate the coordinate system by
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rotation_order** : string'
  prefs: []
  type: TYPE_NORMAL
- en: String defining the order of axes for rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new coordinate system’s origin wrt this system’s origin.
    If not specified, the origins are taken to be coincident.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A ‘Body’ fixed rotation is described by three angles and three body-fixed rotation
    axes. To orient a coordinate system D with respect to N, each sequential rotation
    is always about the orthogonal unit vectors fixed to D. For example, a ‘123’ rotation
    will specify rotations about N.i, then D.j, then D.k. (Initially, D.i is same
    as N.i) Therefore,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: is same as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Acceptable rotation orders are of length 3, expressed in XYZ or 123, and cannot
    have a rotation about about an axis twice in a row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Quaternion orientation orients the new CoordSys3D with Quaternions, defined
    as a finite rotation about lambda, a unit vector, by some amount theta.
  prefs: []
  type: TYPE_NORMAL
- en: 'This orientation is described by four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: q0 = cos(theta/2)
  prefs: []
  type: TYPE_NORMAL
- en: q1 = lambda_x sin(theta/2)
  prefs: []
  type: TYPE_NORMAL
- en: q2 = lambda_y sin(theta/2)
  prefs: []
  type: TYPE_NORMAL
- en: q3 = lambda_z sin(theta/2)
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion does not take in a rotation order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : string'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**q0, q1, q2, q3** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The quaternions to rotate the coordinate system by
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new coordinate system’s origin wrt this system’s origin.
    If not specified, the origins are taken to be coincident.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Space rotation is similar to Body rotation, but the rotations are applied in
    the opposite order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : string'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the new coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle1, angle2, angle3** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Three successive angles to rotate the coordinate system by
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rotation_order** : string'
  prefs: []
  type: TYPE_NORMAL
- en: String defining the order of axes for rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**location** : Vector(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The location of the new coordinate system’s origin wrt this system’s origin.
    If not specified, the origins are taken to be coincident.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**vector_names, variable_names** : iterable(optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterables of 3 strings each, with custom names for base vectors and base scalars
    of the new system respectively. Used for simple str printing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To orient a coordinate system D with respect to N, each sequential rotation
    is always about N’s orthogonal unit vectors. For example, a ‘123’ rotation will
    specify rotations about N.i, then N.j, then N.k. Therefore,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: is same as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`CoordSys3D.orient_new_body`](#sympy.vector.coordsysrect.CoordSys3D.orient_new_body
    "sympy.vector.coordsysrect.CoordSys3D.orient_new_body")'
  prefs: []
  type: TYPE_NORMAL
- en: method to orient via Euler angles
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the position vector of the origin of this coordinate system with respect
    to another Point/CoordSys3D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Point/CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: If other is a Point, the position of this system’s origin wrt it is returned.
    If its an instance of CoordSyRect, the position wrt its origin is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns the direction cosine matrix(DCM), also known as the ‘rotation matrix’
    of this coordinate system with respect to another system.
  prefs: []
  type: TYPE_NORMAL
- en: If v_a is a vector defined in system ‘A’ (in matrix format) and v_b is the same
    vector defined in system ‘B’, then v_a = A.rotation_matrix(B) * v_b.
  prefs: []
  type: TYPE_NORMAL
- en: A SymPy Matrix is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The system which the DCM is generated to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Returns a dictionary which expresses the coordinate variables (base scalars)
    of this frame in terms of the variables of otherframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The other system to map the variables to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Super class for all Vector classes. Ideally, neither this class nor any of its
    subclasses should be instantiated by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Returns the components of this vector in the form of a Python dictionary mapping
    BaseVector instances to the corresponding measure numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns the cross product of this Vector with another Vector or Dyadic instance.
    The cross product is a Vector, if ‘other’ is a Vector. If ‘other’ is a Dyadic,
    this returns a Dyadic instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other: Vector/Dyadic**'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector or Dyadic we are crossing with.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Returns the dot product of this Vector, either with another Vector, or a Dyadic,
    or a Del operator. If ‘other’ is a Vector, returns the dot product scalar (SymPy
    expression). If ‘other’ is a Dyadic, the dot product is returned as a Vector.
    If ‘other’ is an instance of Del, returns the directional derivative operator
    as a Python function. If this function is applied to a scalar expression, it returns
    the directional derivative of the scalar field wrt this Vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other: Vector/Dyadic/Del**'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector or Dyadic we are dotting with, or a Del operator .
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the magnitude of this vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Returns the normalized version of this vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the outer product of this vector with another, in the form of a Dyadic
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector with respect to which the outer product is to be computed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Returns the vector or scalar projection of the ‘other’ on ‘self’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The constituents of this vector in different coordinate systems, as per its
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a dict mapping each CoordSys3D to the corresponding constituent Vector.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix form of this vector with respect to the specified coordinate
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The system wrt which the matrix form is to be computed
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Super class for all Dyadic-classes.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1074](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dyadic_tensor](https://en.wikipedia.org/wiki/Dyadic_tensor)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1075](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Kane, T., Levinson, D. Dynamics Theory and Applications. 1985 McGraw-Hill
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Returns the components of this dyadic in the form of a Python dictionary mapping
    BaseDyadic instances to the corresponding measure numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Returns the cross product between this Dyadic, and a Vector, as a Vector instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector that we are crossing this Dyadic with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Returns the dot product(also called inner product) of this Dyadic, with another
    Dyadic or Vector. If ‘other’ is a Dyadic, this returns a Dyadic. Else, it returns
    a Vector (unless an error is encountered).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Dyadic/Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The other Dyadic or Vector to take the inner product with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix form of the dyadic with respect to one or two coordinate
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system that the rows and columns of the matrix correspond to.
    If a second system is provided, this only corresponds to the rows of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**second_system** : CoordSys3D, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system that the columns of the matrix correspond to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Represents the vector differential operator, usually represented in mathematical
    expressions as the ‘nabla’ symbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Represents the cross product between this operator and a given vector - equal
    to the curl of the vector field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vect** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The vector whose curl is to be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Represents the dot product between this operator and a given vector - equal
    to the divergence of the vector field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vect** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The vector whose divergence is to be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Returns the gradient of the given scalar field, as a Vector instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**scalar_field** : SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: The scalar field to calculate the gradient of.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Represents a parametric region in space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**definition** : tuple to define base scalars in terms of parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds** : Parameter or a tuple of length 3 to define parameter and corresponding
    lower and upper bound.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of a parametric region determines whether a region is a curve, surface
    or volume region. It does not represent its dimensions in space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Represents an implicit region in space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**variables** : tuple to map variables in implicit equation to base scalars.'
  prefs: []
  type: TYPE_NORMAL
- en: '**equation** : An expression or Eq denoting the implicit equation of the region.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns the multiplicity of a singular point on the region.
  prefs: []
  type: TYPE_NORMAL
- en: A singular point (x,y) of region is said to be of multiplicity m if all the
    partial derivatives off to order m - 1 vanish there.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Returns the rational parametrization of implicit region.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: For some conics, regular_points() is unable to find a point on curve. To calulcate
    the parametric representation in such cases, user need to determine a point on
    the region and pass it using reg_point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Christoph M. Hoffmann, “Conversion Methods between Parametric and Implicit
    Curves and Surfaces”, Purdue e-Pubs, 1990\. Available: [https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1827&context=cstech](https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1827&context=cstech)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Returns a point on the implicit region.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Erik Hillgarter, “Rational Points on Conics”, Diploma Thesis, RISC-Linz, J.
    Kepler Universitat Linz, 1996\. Available: [https://www3.risc.jku.at/publications/download/risc_1355/Rational%20Points%20on%20Conics.pdf](https://www3.risc.jku.at/publications/download/risc_1355/Rational%20Points%20on%20Conics.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Returns a set of singular points of the region.
  prefs: []
  type: TYPE_NORMAL
- en: The singular points are those points on the region where all partial derivatives
    vanish.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Represents integral of a scalar or vector field over a Parametric Region
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
