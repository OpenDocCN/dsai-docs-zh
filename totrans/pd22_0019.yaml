- en: Comparison with SAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_sas.html](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_sas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For potential users coming from [SAS](https://en.wikipedia.org/wiki/SAS_(software))
    this page is meant to demonstrate how different SAS operations would be performed
    in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to pandas, you might want to first read through [10 Minutes to
    pandas](../../user_guide/10min.html#min) to familiarize yourself with the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'As is customary, we import pandas and NumPy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | SAS |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | data set |'
  prefs: []
  type: TYPE_TB
- en: '| column | variable |'
  prefs: []
  type: TYPE_TB
- en: '| row | observation |'
  prefs: []
  type: TYPE_TB
- en: '| groupby | BY-group |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | `.` |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to a SAS data set - a two-dimensional data
    source with labeled columns that can be of different types. As will be shown in
    this document, almost any operation that can be applied to a data set using SAS’s
    `DATA` step, can also be accomplished in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    SAS doesn’t have a separate data structure for a single column, but in general,
    working with a `Series` is analogous to referencing a column in the `DATA` step.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index` - which are labels on the *rows*
    of the data. SAS does not have an exactly analogous concept. A data set’s rows
    are essentially unlabeled, other than an implicit integer index that can be accessed
    during the `DATA` step (`_N_`).
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, if no index is specified, an integer index is also used by default
    (first row = 0, second row = 1, and so on). While using a labeled `Index` or `MultiIndex`
    can enable sophisticated analyses and is ultimately an important part of pandas
    to understand, for this comparison we will essentially ignore the `Index` and
    just treat the `DataFrame` as a collection of columns. Please see the [indexing
    documentation](../../user_guide/indexing.html#indexing) for much more on how to
    use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: Data input / output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A SAS data set can be built from specified values by placing the data after
    a `datalines` statement and specifying the column names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like SAS, pandas provides utilities for reading in data from many formats. The
    `tips` dataset, found within the pandas tests ([csv](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/tips.csv))
    will be used in many of the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: SAS provides `PROC IMPORT` to read csv data into a data set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The pandas method is [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), which works similarly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Like `PROC IMPORT`, `read_csv` can take a number of parameters to specify how
    the data should be parsed. For example, if the data was instead tab delimited,
    and did not have column names, the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In addition to text/csv, pandas supports a variety of other data formats such
    as Excel, HDF5, and SQL databases. These are all read via a `pd.read_*` function.
    See the [IO documentation](../../user_guide/io.html#io) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent in SAS would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The inverse of `PROC IMPORT` in SAS is `PROC EXPORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Similarly in pandas, the opposite of `read_csv` is [`to_csv()`](../../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), and other data formats follow a similar api.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Data operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `DATA` step, arbitrary math expressions can be used on new or existing
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filtering in SAS is done with an `if` or `where` statement, on one or more columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if/then logic can be used to create new columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides a variety of functions to do operations on date/datetime columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas operations are shown below. In addition to these functions
    pandas supports other Time Series features not available in Base SAS (such as
    resampling and custom offsets) - see the [timeseries documentation](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides keywords in the `DATA` step to select, drop, and rename columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in SAS is accomplished via `PROC SORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: String processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the length of a character string with the [LENGTHN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002284668.htm)
    and [LENGTHC](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002283942.htm)
    functions. `LENGTHN` excludes trailing blanks and `LENGTHC` includes trailing
    blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the position of a character in a string with the [FINDW](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002978282.htm)
    function. `FINDW` takes the string defined by the first argument and searches
    for the first position of the substring you supply as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS extracts a substring from a string based on its position with the [SUBSTR](https://support.sas.com/documentation/cdl/en/imlug/66845/HTML/default/viewer.htm#imlug_langref_sect455.htm)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [SCAN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000214639.htm)
    function returns the nth word from a string. The first argument is the string
    you want to parse and the second argument specifies which word you want to extract.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [UPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245965.htm)
    [LOWCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245912.htm)
    and [PROPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/a002598106.htm)
    functions change the case of the argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tables will be used in the merge examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In SAS, data must be explicitly sorted before merging. Different types of joins
    are accomplished using the `in=` dummy variables to track whether a match was
    found in one or both input frames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: pandas DataFrames have a [`merge()`](../../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") method, which provides similar functionality. The data
    does not have to be sorted ahead of time, and different join types are accomplished
    via the `how` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both pandas and SAS have a representation for missing data.
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents missing data with the special float value `NaN` (not a number).
    Many of the semantics are the same; for example missing data propagates through
    numeric operations, and is ignored by default for aggregations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: One difference is that missing data cannot be compared to its sentinel value.
    For example, in SAS you could do this to filter missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In pandas, [`Series.isna()`](../../reference/api/pandas.Series.isna.html#pandas.Series.isna
    "pandas.Series.isna") and [`Series.notna()`](../../reference/api/pandas.Series.notna.html#pandas.Series.notna
    "pandas.Series.notna") can be used to filter the rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'pandas provides [a variety of methods to work with missing data](../../user_guide/missing_data.html#missing-data).
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Drop rows with missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Forward fill from previous rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Replace missing values with a specified value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: GroupBy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aggregation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS’s `PROC SUMMARY` can be used to group by one or more key variables and compute
    aggregations on numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a flexible `groupby` mechanism that allows similar aggregations.
    See the [groupby documentation](../../user_guide/groupby.html#groupby) for more
    details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Transformation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if the group aggregations need to be used with the original frame, it
    must be merged back together. For example, to subtract the mean for each observation
    by smoker group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a [Transformation](../../user_guide/groupby.html#groupby-transform)
    mechanism that allows these type of operations to be succinctly expressed in one
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: By group processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to aggregation, pandas `groupby` can be used to replicate most other
    by group processing from SAS. For example, this `DATA` step reads the data by
    sex/smoker group and filters to the first entry for each.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In pandas this would be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Other considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Disk vs memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas operates exclusively in memory, where a SAS data set exists on disk.
    This means that the size of data able to be loaded in pandas is limited by your
    machine’s memory, but also that the operations on that data may be faster.
  prefs: []
  type: TYPE_NORMAL
- en: If out of core processing is needed, one possibility is the [dask.dataframe](https://docs.dask.org/en/latest/dataframe.html)
    library (currently in development) which provides a subset of pandas functionality
    for an on-disk `DataFrame`
  prefs: []
  type: TYPE_NORMAL
- en: Data interop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a [`read_sas()`](../../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") method that can read SAS data saved in the XPORT or SAS7BDAT
    binary format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify the file format directly. By default, pandas will try to
    infer the file format based on its extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: XPORT is a relatively limited format and the parsing of it is not as optimized
    as some of the other pandas readers. An alternative way to interop data between
    SAS and pandas is to serialize to csv.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | SAS |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | data set |'
  prefs: []
  type: TYPE_TB
- en: '| column | variable |'
  prefs: []
  type: TYPE_TB
- en: '| row | observation |'
  prefs: []
  type: TYPE_TB
- en: '| groupby | BY-group |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | `.` |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to a SAS data set - a two-dimensional data
    source with labeled columns that can be of different types. As will be shown in
    this document, almost any operation that can be applied to a data set using SAS’s
    `DATA` step, can also be accomplished in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    SAS doesn’t have a separate data structure for a single column, but in general,
    working with a `Series` is analogous to referencing a column in the `DATA` step.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index` - which are labels on the *rows*
    of the data. SAS does not have an exactly analogous concept. A data set’s rows
    are essentially unlabeled, other than an implicit integer index that can be accessed
    during the `DATA` step (`_N_`).
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, if no index is specified, an integer index is also used by default
    (first row = 0, second row = 1, and so on). While using a labeled `Index` or `MultiIndex`
    can enable sophisticated analyses and is ultimately an important part of pandas
    to understand, for this comparison we will essentially ignore the `Index` and
    just treat the `DataFrame` as a collection of columns. Please see the [indexing
    documentation](../../user_guide/indexing.html#indexing) for much more on how to
    use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | SAS |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | data set |'
  prefs: []
  type: TYPE_TB
- en: '| column | variable |'
  prefs: []
  type: TYPE_TB
- en: '| row | observation |'
  prefs: []
  type: TYPE_TB
- en: '| groupby | BY-group |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | `.` |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to a SAS data set - a two-dimensional data
    source with labeled columns that can be of different types. As will be shown in
    this document, almost any operation that can be applied to a data set using SAS’s
    `DATA` step, can also be accomplished in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    SAS doesn’t have a separate data structure for a single column, but in general,
    working with a `Series` is analogous to referencing a column in the `DATA` step.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index` - which are labels on the *rows*
    of the data. SAS does not have an exactly analogous concept. A data set’s rows
    are essentially unlabeled, other than an implicit integer index that can be accessed
    during the `DATA` step (`_N_`).
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, if no index is specified, an integer index is also used by default
    (first row = 0, second row = 1, and so on). While using a labeled `Index` or `MultiIndex`
    can enable sophisticated analyses and is ultimately an important part of pandas
    to understand, for this comparison we will essentially ignore the `Index` and
    just treat the `DataFrame` as a collection of columns. Please see the [indexing
    documentation](../../user_guide/indexing.html#indexing) for much more on how to
    use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: Data input / output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A SAS data set can be built from specified values by placing the data after
    a `datalines` statement and specifying the column names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like SAS, pandas provides utilities for reading in data from many formats. The
    `tips` dataset, found within the pandas tests ([csv](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/tips.csv))
    will be used in many of the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: SAS provides `PROC IMPORT` to read csv data into a data set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The pandas method is [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), which works similarly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Like `PROC IMPORT`, `read_csv` can take a number of parameters to specify how
    the data should be parsed. For example, if the data was instead tab delimited,
    and did not have column names, the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In addition to text/csv, pandas supports a variety of other data formats such
    as Excel, HDF5, and SQL databases. These are all read via a `pd.read_*` function.
    See the [IO documentation](../../user_guide/io.html#io) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent in SAS would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The inverse of `PROC IMPORT` in SAS is `PROC EXPORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Similarly in pandas, the opposite of `read_csv` is [`to_csv()`](../../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), and other data formats follow a similar api.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A SAS data set can be built from specified values by placing the data after
    a `datalines` statement and specifying the column names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like SAS, pandas provides utilities for reading in data from many formats. The
    `tips` dataset, found within the pandas tests ([csv](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/tips.csv))
    will be used in many of the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: SAS provides `PROC IMPORT` to read csv data into a data set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The pandas method is [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), which works similarly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Like `PROC IMPORT`, `read_csv` can take a number of parameters to specify how
    the data should be parsed. For example, if the data was instead tab delimited,
    and did not have column names, the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: In addition to text/csv, pandas supports a variety of other data formats such
    as Excel, HDF5, and SQL databases. These are all read via a `pd.read_*` function.
    See the [IO documentation](../../user_guide/io.html#io) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent in SAS would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The inverse of `PROC IMPORT` in SAS is `PROC EXPORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Similarly in pandas, the opposite of `read_csv` is [`to_csv()`](../../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv"), and other data formats follow a similar api.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Data operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `DATA` step, arbitrary math expressions can be used on new or existing
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filtering in SAS is done with an `if` or `where` statement, on one or more columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if/then logic can be used to create new columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides a variety of functions to do operations on date/datetime columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas operations are shown below. In addition to these functions
    pandas supports other Time Series features not available in Base SAS (such as
    resampling and custom offsets) - see the [timeseries documentation](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides keywords in the `DATA` step to select, drop, and rename columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in SAS is accomplished via `PROC SORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `DATA` step, arbitrary math expressions can be used on new or existing
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filtering in SAS is done with an `if` or `where` statement, on one or more columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if/then logic can be used to create new columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides a variety of functions to do operations on date/datetime columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas operations are shown below. In addition to these functions
    pandas supports other Time Series features not available in Base SAS (such as
    resampling and custom offsets) - see the [timeseries documentation](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS provides keywords in the `DATA` step to select, drop, and rename columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in SAS is accomplished via `PROC SORT`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: String processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the length of a character string with the [LENGTHN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002284668.htm)
    and [LENGTHC](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002283942.htm)
    functions. `LENGTHN` excludes trailing blanks and `LENGTHC` includes trailing
    blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the position of a character in a string with the [FINDW](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002978282.htm)
    function. `FINDW` takes the string defined by the first argument and searches
    for the first position of the substring you supply as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS extracts a substring from a string based on its position with the [SUBSTR](https://support.sas.com/documentation/cdl/en/imlug/66845/HTML/default/viewer.htm#imlug_langref_sect455.htm)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [SCAN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000214639.htm)
    function returns the nth word from a string. The first argument is the string
    you want to parse and the second argument specifies which word you want to extract.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [UPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245965.htm)
    [LOWCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245912.htm)
    and [PROPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/a002598106.htm)
    functions change the case of the argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the length of a character string with the [LENGTHN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002284668.htm)
    and [LENGTHC](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002283942.htm)
    functions. `LENGTHN` excludes trailing blanks and `LENGTHC` includes trailing
    blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS determines the position of a character in a string with the [FINDW](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a002978282.htm)
    function. `FINDW` takes the string defined by the first argument and searches
    for the first position of the substring you supply as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS extracts a substring from a string based on its position with the [SUBSTR](https://support.sas.com/documentation/cdl/en/imlug/66845/HTML/default/viewer.htm#imlug_langref_sect455.htm)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [SCAN](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000214639.htm)
    function returns the nth word from a string. The first argument is the string
    you want to parse and the second argument specifies which word you want to extract.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SAS [UPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245965.htm)
    [LOWCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a000245912.htm)
    and [PROPCASE](https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/a002598106.htm)
    functions change the case of the argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tables will be used in the merge examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: In SAS, data must be explicitly sorted before merging. Different types of joins
    are accomplished using the `in=` dummy variables to track whether a match was
    found in one or both input frames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: pandas DataFrames have a [`merge()`](../../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") method, which provides similar functionality. The data
    does not have to be sorted ahead of time, and different join types are accomplished
    via the `how` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both pandas and SAS have a representation for missing data.
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents missing data with the special float value `NaN` (not a number).
    Many of the semantics are the same; for example missing data propagates through
    numeric operations, and is ignored by default for aggregations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: One difference is that missing data cannot be compared to its sentinel value.
    For example, in SAS you could do this to filter missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: In pandas, [`Series.isna()`](../../reference/api/pandas.Series.isna.html#pandas.Series.isna
    "pandas.Series.isna") and [`Series.notna()`](../../reference/api/pandas.Series.notna.html#pandas.Series.notna
    "pandas.Series.notna") can be used to filter the rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'pandas provides [a variety of methods to work with missing data](../../user_guide/missing_data.html#missing-data).
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Drop rows with missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Forward fill from previous rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Replace missing values with a specified value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Drop rows with missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Forward fill from previous rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Replace missing values with a specified value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: GroupBy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aggregation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS’s `PROC SUMMARY` can be used to group by one or more key variables and compute
    aggregations on numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a flexible `groupby` mechanism that allows similar aggregations.
    See the [groupby documentation](../../user_guide/groupby.html#groupby) for more
    details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Transformation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if the group aggregations need to be used with the original frame, it
    must be merged back together. For example, to subtract the mean for each observation
    by smoker group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a [Transformation](../../user_guide/groupby.html#groupby-transform)
    mechanism that allows these type of operations to be succinctly expressed in one
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: By group processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to aggregation, pandas `groupby` can be used to replicate most other
    by group processing from SAS. For example, this `DATA` step reads the data by
    sex/smoker group and filters to the first entry for each.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'In pandas this would be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Aggregation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SAS’s `PROC SUMMARY` can be used to group by one or more key variables and compute
    aggregations on numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a flexible `groupby` mechanism that allows similar aggregations.
    See the [groupby documentation](../../user_guide/groupby.html#groupby) for more
    details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Transformation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SAS, if the group aggregations need to be used with the original frame, it
    must be merged back together. For example, to subtract the mean for each observation
    by smoker group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: pandas provides a [Transformation](../../user_guide/groupby.html#groupby-transform)
    mechanism that allows these type of operations to be succinctly expressed in one
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: By group processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to aggregation, pandas `groupby` can be used to replicate most other
    by group processing from SAS. For example, this `DATA` step reads the data by
    sex/smoker group and filters to the first entry for each.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'In pandas this would be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Other considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Disk vs memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas operates exclusively in memory, where a SAS data set exists on disk.
    This means that the size of data able to be loaded in pandas is limited by your
    machine’s memory, but also that the operations on that data may be faster.
  prefs: []
  type: TYPE_NORMAL
- en: If out of core processing is needed, one possibility is the [dask.dataframe](https://docs.dask.org/en/latest/dataframe.html)
    library (currently in development) which provides a subset of pandas functionality
    for an on-disk `DataFrame`
  prefs: []
  type: TYPE_NORMAL
- en: Data interop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a [`read_sas()`](../../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") method that can read SAS data saved in the XPORT or SAS7BDAT
    binary format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify the file format directly. By default, pandas will try to
    infer the file format based on its extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: XPORT is a relatively limited format and the parsing of it is not as optimized
    as some of the other pandas readers. An alternative way to interop data between
    SAS and pandas is to serialize to csv.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Disk vs memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas operates exclusively in memory, where a SAS data set exists on disk.
    This means that the size of data able to be loaded in pandas is limited by your
    machine’s memory, but also that the operations on that data may be faster.
  prefs: []
  type: TYPE_NORMAL
- en: If out of core processing is needed, one possibility is the [dask.dataframe](https://docs.dask.org/en/latest/dataframe.html)
    library (currently in development) which provides a subset of pandas functionality
    for an on-disk `DataFrame`
  prefs: []
  type: TYPE_NORMAL
- en: Data interop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a [`read_sas()`](../../reference/api/pandas.read_sas.html#pandas.read_sas
    "pandas.read_sas") method that can read SAS data saved in the XPORT or SAS7BDAT
    binary format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify the file format directly. By default, pandas will try to
    infer the file format based on its extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: XPORT is a relatively limited format and the parsing of it is not as optimized
    as some of the other pandas readers. An alternative way to interop data between
    SAS and pandas is to serialize to csv.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
