- en: numpy.histogram2d
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.histogram2d.html](https://numpy.org/doc/1.26/reference/generated/numpy.histogram2d.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the bi-dimensional histogram of two data samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like, shape (N,)'
  prefs: []
  type: TYPE_NORMAL
- en: An array containing the x coordinates of the points to be histogrammed.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like, shape (N,)'
  prefs: []
  type: TYPE_NORMAL
- en: An array containing the y coordinates of the points to be histogrammed.
  prefs: []
  type: TYPE_NORMAL
- en: '**bins**int or array_like or [int, int] or [array, array], optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bin specification:'
  prefs: []
  type: TYPE_NORMAL
- en: If int, the number of bins for the two dimensions (nx=ny=bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If [int, int], the number of bins in each dimension (nx, ny = bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A combination [int, array] or [array, int], where int is the number of bins
    and array is the bin edges.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**range**array_like, shape(2,2), optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The leftmost and rightmost edges of the bins along each dimension (if not specified
    explicitly in the *bins* parameters): `[[xmin, xmax], [ymin, ymax]]`. All values
    outside of this range will be considered outliers and not tallied in the histogram.'
  prefs: []
  type: TYPE_NORMAL
- en: '**density**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If False, the default, returns the number of samples in each bin. If True, returns
    the probability *density* function at the bin, `bin_count / sample_count / bin_area`.
  prefs: []
  type: TYPE_NORMAL
- en: '**weights**array_like, shape(N,), optional'
  prefs: []
  type: TYPE_NORMAL
- en: An array of values `w_i` weighing each sample `(x_i, y_i)`. Weights are normalized
    to 1 if *density* is True. If *density* is False, the values of the returned histogram
    are equal to the sum of the weights belonging to the samples falling into each
    bin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H**ndarray, shape(nx, ny)'
  prefs: []
  type: TYPE_NORMAL
- en: The bi-dimensional histogram of samples *x* and *y*. Values in *x* are histogrammed
    along the first dimension and values in *y* are histogrammed along the second
    dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**xedges**ndarray, shape(nx+1,)'
  prefs: []
  type: TYPE_NORMAL
- en: The bin edges along the first dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**yedges**ndarray, shape(ny+1,)'
  prefs: []
  type: TYPE_NORMAL
- en: The bin edges along the second dimension.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`histogram`](numpy.histogram.html#numpy.histogram "numpy.histogram")'
  prefs: []
  type: TYPE_NORMAL
- en: 1D histogram
  prefs: []
  type: TYPE_NORMAL
- en: '[`histogramdd`](numpy.histogramdd.html#numpy.histogramdd "numpy.histogramdd")'
  prefs: []
  type: TYPE_NORMAL
- en: Multidimensional histogram
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When *density* is True, then the returned histogram is the sample density, defined
    such that the sum over bins of the product `bin_value * bin_area` is 1.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the histogram does not follow the Cartesian convention where
    *x* values are on the abscissa and *y* values on the ordinate axis. Rather, *x*
    is histogrammed along the first dimension of the array (vertical), and *y* along
    the second dimension of the array (horizontal). This ensures compatibility with
    [`histogramdd`](numpy.histogramdd.html#numpy.histogramdd "numpy.histogramdd").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct a 2-D histogram with variable bin width. First define the bin edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we create a histogram H with random bin content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[`imshow`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow
    "(in Matplotlib v3.8.0)") can only display square bins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh
    "(in Matplotlib v3.8.0)") can display actual edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[`NonUniformImage`](https://matplotlib.org/stable/api/image_api.html#matplotlib.image.NonUniformImage
    "(in Matplotlib v3.8.0)") can be used to display actual bin edges with interpolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/numpy-histogram2d-1_00_00.png](../Images/9302319899990f7c8a985e4254739c99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is also possible to construct a 2-D histogram without specifying bin edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we can plot the histogram using [`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh
    "(in Matplotlib v3.8.0)"), and a [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html#matplotlib.pyplot.hexbin
    "(in Matplotlib v3.8.0)") for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/numpy-histogram2d-1_01_00.png](../Images/61f9989e3ade545f241d4dca6ce9c659.png)'
  prefs: []
  type: TYPE_IMG
