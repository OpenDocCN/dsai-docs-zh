- en: Sparse matrices (scipy.sparse)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SciPy 2-D sparse array package for numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This package is switching to an array interface, compatible with NumPy arrays,
    from the older matrix interface. We recommend that you use the array objects ([`bsr_array`](generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array"), [`coo_array`](generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array"), etc.) for all new work.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the array interface, please note that:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x * y` no longer performs matrix multiplication, but element-wise multiplication
    (just like with NumPy arrays). To make code work with both arrays and matrices,
    use `x @ y` for matrix multiplication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations such as *sum*, that used to produce dense matrices, now produce arrays,
    whose multiplication behavior differs similarly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse arrays currently must be two-dimensional. This also means that all *slicing*
    operations on these objects must produce two-dimensional results, or they will
    result in an error. This will be addressed in a future version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The construction utilities ([`eye`](generated/scipy.sparse.eye.html#scipy.sparse.eye
    "scipy.sparse.eye"), [`kron`](generated/scipy.sparse.kron.html#scipy.sparse.kron
    "scipy.sparse.kron"), [`random`](generated/scipy.sparse.random.html#scipy.sparse.random
    "scipy.sparse.random"), [`diags`](generated/scipy.sparse.diags.html#scipy.sparse.diags
    "scipy.sparse.diags"), etc.) have not yet been ported, but their results can be
    wrapped into arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sparse array classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`bsr_array`](generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array")(arg1[, shape, dtype, copy, blocksize]) | Block Sparse
    Row format sparse array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`coo_array`](generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")(arg1[, shape, dtype, copy]) | A sparse array in COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`csc_array`](generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array")(arg1[, shape, dtype, copy]) | Compressed Sparse Column
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`csr_array`](generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array")(arg1[, shape, dtype, copy]) | Compressed Sparse Row
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dia_array`](generated/scipy.sparse.dia_array.html#scipy.sparse.dia_array
    "scipy.sparse.dia_array")(arg1[, shape, dtype, copy]) | Sparse array with DIAgonal
    storage. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dok_array`](generated/scipy.sparse.dok_array.html#scipy.sparse.dok_array
    "scipy.sparse.dok_array")(arg1[, shape, dtype, copy]) | Dictionary Of Keys based
    sparse array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array")(arg1[, shape, dtype, copy]) | Row-based LIst of Lists
    sparse array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sparray`](generated/scipy.sparse.sparray.html#scipy.sparse.sparray "scipy.sparse.sparray")()
    | This class provides a base class for all sparse arrays. |'
  prefs: []
  type: TYPE_TB
- en: Sparse matrix classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`bsr_matrix`](generated/scipy.sparse.bsr_matrix.html#scipy.sparse.bsr_matrix
    "scipy.sparse.bsr_matrix")(arg1[, shape, dtype, copy, blocksize]) | Block Sparse
    Row format sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`coo_matrix`](generated/scipy.sparse.coo_matrix.html#scipy.sparse.coo_matrix
    "scipy.sparse.coo_matrix")(arg1[, shape, dtype, copy]) | A sparse matrix in COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`csc_matrix`](generated/scipy.sparse.csc_matrix.html#scipy.sparse.csc_matrix
    "scipy.sparse.csc_matrix")(arg1[, shape, dtype, copy]) | Compressed Sparse Column
    matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`csr_matrix`](generated/scipy.sparse.csr_matrix.html#scipy.sparse.csr_matrix
    "scipy.sparse.csr_matrix")(arg1[, shape, dtype, copy]) | Compressed Sparse Row
    matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dia_matrix`](generated/scipy.sparse.dia_matrix.html#scipy.sparse.dia_matrix
    "scipy.sparse.dia_matrix")(arg1[, shape, dtype, copy]) | Sparse matrix with DIAgonal
    storage. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dok_matrix`](generated/scipy.sparse.dok_matrix.html#scipy.sparse.dok_matrix
    "scipy.sparse.dok_matrix")(arg1[, shape, dtype, copy]) | Dictionary Of Keys based
    sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lil_matrix`](generated/scipy.sparse.lil_matrix.html#scipy.sparse.lil_matrix
    "scipy.sparse.lil_matrix")(arg1[, shape, dtype, copy]) | Row-based LIst of Lists
    sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spmatrix`](generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix "scipy.sparse.spmatrix")()
    | This class provides a base class for all sparse matrix classes. |'
  prefs: []
  type: TYPE_TB
- en: Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Building sparse arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`diags_array`](generated/scipy.sparse.diags_array.html#scipy.sparse.diags_array
    "scipy.sparse.diags_array")(diagonals, /, *[, offsets, ...]) | Construct a sparse
    array from diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eye_array`](generated/scipy.sparse.eye_array.html#scipy.sparse.eye_array
    "scipy.sparse.eye_array")(m[, n, k, dtype, format]) | Identity matrix in sparse
    array format |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_array`](generated/scipy.sparse.random_array.html#scipy.sparse.random_array
    "scipy.sparse.random_array")(shape, *[, density, format, ...]) | Return a sparse
    array of uniformly random numbers in [0, 1) |'
  prefs: []
  type: TYPE_TB
- en: '| [`block_array`](generated/scipy.sparse.block_array.html#scipy.sparse.block_array
    "scipy.sparse.block_array")(blocks, *[, format, dtype]) | Build a sparse array
    from sparse sub-blocks |'
  prefs: []
  type: TYPE_TB
- en: 'Building sparse matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`eye`](generated/scipy.sparse.eye.html#scipy.sparse.eye "scipy.sparse.eye")(m[, n, k, dtype, format])
    | Sparse matrix with ones on diagonal |'
  prefs: []
  type: TYPE_TB
- en: '| [`identity`](generated/scipy.sparse.identity.html#scipy.sparse.identity "scipy.sparse.identity")(n[, dtype, format])
    | Identity matrix in sparse format |'
  prefs: []
  type: TYPE_TB
- en: '| [`diags`](generated/scipy.sparse.diags.html#scipy.sparse.diags "scipy.sparse.diags")(diagonals[, offsets, shape, format, dtype])
    | Construct a sparse matrix from diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spdiags`](generated/scipy.sparse.spdiags.html#scipy.sparse.spdiags "scipy.sparse.spdiags")(data, diags[, m, n, format])
    | Return a sparse matrix from diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bmat`](generated/scipy.sparse.bmat.html#scipy.sparse.bmat "scipy.sparse.bmat")(blocks[, format, dtype])
    | Build a sparse array or matrix from sparse sub-blocks |'
  prefs: []
  type: TYPE_TB
- en: '| [`random`](generated/scipy.sparse.random.html#scipy.sparse.random "scipy.sparse.random")(m, n[, density, format, dtype, ...])
    | Generate a sparse matrix of the given shape and density with randomly distributed
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rand`](generated/scipy.sparse.rand.html#scipy.sparse.rand "scipy.sparse.rand")(m, n[, density, format, dtype, ...])
    | Generate a sparse matrix of the given shape and density with uniformly distributed
    values. |'
  prefs: []
  type: TYPE_TB
- en: Building larger structures from smaller (array or matrix)
  prefs: []
  type: TYPE_NORMAL
- en: '| [`kron`](generated/scipy.sparse.kron.html#scipy.sparse.kron "scipy.sparse.kron")(A, B[, format])
    | kronecker product of sparse matrices A and B |'
  prefs: []
  type: TYPE_TB
- en: '| [`kronsum`](generated/scipy.sparse.kronsum.html#scipy.sparse.kronsum "scipy.sparse.kronsum")(A, B[, format])
    | kronecker sum of square sparse matrices A and B |'
  prefs: []
  type: TYPE_TB
- en: '| [`block_diag`](generated/scipy.sparse.block_diag.html#scipy.sparse.block_diag
    "scipy.sparse.block_diag")(mats[, format, dtype]) | Build a block diagonal sparse
    matrix or array from provided matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril`](generated/scipy.sparse.tril.html#scipy.sparse.tril "scipy.sparse.tril")(A[, k, format])
    | Return the lower triangular portion of a sparse array or matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu`](generated/scipy.sparse.triu.html#scipy.sparse.triu "scipy.sparse.triu")(A[, k, format])
    | Return the upper triangular portion of a sparse array or matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`hstack`](generated/scipy.sparse.hstack.html#scipy.sparse.hstack "scipy.sparse.hstack")(blocks[, format, dtype])
    | Stack sparse matrices horizontally (column wise) |'
  prefs: []
  type: TYPE_TB
- en: '| [`vstack`](generated/scipy.sparse.vstack.html#scipy.sparse.vstack "scipy.sparse.vstack")(blocks[, format, dtype])
    | Stack sparse arrays vertically (row wise) |'
  prefs: []
  type: TYPE_TB
- en: 'Save and load sparse matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`save_npz`](generated/scipy.sparse.save_npz.html#scipy.sparse.save_npz "scipy.sparse.save_npz")(file, matrix[, compressed])
    | Save a sparse matrix or array to a file using `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`load_npz`](generated/scipy.sparse.load_npz.html#scipy.sparse.load_npz "scipy.sparse.load_npz")(file)
    | Load a sparse array/matrix from a file using `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: 'Sparse tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`find`](generated/scipy.sparse.find.html#scipy.sparse.find "scipy.sparse.find")(A)
    | Return the indices and values of the nonzero elements of a matrix |'
  prefs: []
  type: TYPE_TB
- en: 'Identifying sparse arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: use *isinstance(A, sp.sparse.sparray)* to check whether an array or matrix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use *A.format == ‘csr’* to check the sparse format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Identifying sparse matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`issparse`](generated/scipy.sparse.issparse.html#scipy.sparse.issparse "scipy.sparse.issparse")(x)
    | Is *x* of a sparse array or sparse matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix`](generated/scipy.sparse.isspmatrix.html#scipy.sparse.isspmatrix
    "scipy.sparse.isspmatrix")(x) | Is *x* of a sparse matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_csc`](generated/scipy.sparse.isspmatrix_csc.html#scipy.sparse.isspmatrix_csc
    "scipy.sparse.isspmatrix_csc")(x) | Is *x* of csc_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_csr`](generated/scipy.sparse.isspmatrix_csr.html#scipy.sparse.isspmatrix_csr
    "scipy.sparse.isspmatrix_csr")(x) | Is *x* of csr_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_bsr`](generated/scipy.sparse.isspmatrix_bsr.html#scipy.sparse.isspmatrix_bsr
    "scipy.sparse.isspmatrix_bsr")(x) | Is *x* of a bsr_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_lil`](generated/scipy.sparse.isspmatrix_lil.html#scipy.sparse.isspmatrix_lil
    "scipy.sparse.isspmatrix_lil")(x) | Is *x* of lil_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_dok`](generated/scipy.sparse.isspmatrix_dok.html#scipy.sparse.isspmatrix_dok
    "scipy.sparse.isspmatrix_dok")(x) | Is *x* of dok_array type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_coo`](generated/scipy.sparse.isspmatrix_coo.html#scipy.sparse.isspmatrix_coo
    "scipy.sparse.isspmatrix_coo")(x) | Is *x* of coo_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspmatrix_dia`](generated/scipy.sparse.isspmatrix_dia.html#scipy.sparse.isspmatrix_dia
    "scipy.sparse.isspmatrix_dia")(x) | Is *x* of dia_matrix type? |'
  prefs: []
  type: TYPE_TB
- en: Submodules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`csgraph`](sparse.csgraph.html#module-scipy.sparse.csgraph "scipy.sparse.csgraph")
    | Compressed sparse graph routines (scipy.sparse.csgraph) |'
  prefs: []
  type: TYPE_TB
- en: '| [`linalg`](sparse.linalg.html#module-scipy.sparse.linalg "scipy.sparse.linalg")
    | Sparse linear algebra (scipy.sparse.linalg) |'
  prefs: []
  type: TYPE_TB
- en: Exceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`SparseEfficiencyWarning`](generated/scipy.sparse.SparseEfficiencyWarning.html#scipy.sparse.SparseEfficiencyWarning
    "scipy.sparse.SparseEfficiencyWarning") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`SparseWarning`](generated/scipy.sparse.SparseWarning.html#scipy.sparse.SparseWarning
    "scipy.sparse.SparseWarning") |  |'
  prefs: []
  type: TYPE_TB
- en: Usage information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are seven available sparse array types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`csc_array`](generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array"): Compressed Sparse Column format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`csr_array`](generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array"): Compressed Sparse Row format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`bsr_array`](generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array"): Block Sparse Row format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array"): List of Lists format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`dok_array`](generated/scipy.sparse.dok_array.html#scipy.sparse.dok_array
    "scipy.sparse.dok_array"): Dictionary of Keys format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`coo_array`](generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array"): COOrdinate format (aka IJV, triplet format)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`dia_array`](generated/scipy.sparse.dia_array.html#scipy.sparse.dia_array
    "scipy.sparse.dia_array"): DIAgonal format'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: To construct an array efficiently, use either [`dok_array`](generated/scipy.sparse.dok_array.html#scipy.sparse.dok_array
    "scipy.sparse.dok_array") or [`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array"). The [`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array") class supports basic slicing and fancy indexing with
    a similar syntax to NumPy arrays. As illustrated below, the COO format may also
    be used to efficiently construct arrays. Despite their similarity to NumPy arrays,
    it is **strongly discouraged** to use NumPy functions directly on these arrays
    because NumPy may not properly convert them for computations, leading to unexpected
    (and incorrect) results. If you do want to apply a NumPy function to these arrays,
    first check if SciPy has its own implementation for the given sparse array class,
    or **convert the sparse array to a NumPy array** (e.g., using the `toarray` method
    of the class) first before applying the method.
  prefs: []
  type: TYPE_NORMAL
- en: To perform manipulations such as multiplication or inversion, first convert
    the array to either CSC or CSR format. The [`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array") format is row-based, so conversion to CSR is efficient,
    whereas conversion to CSC is less so.
  prefs: []
  type: TYPE_NORMAL
- en: All conversions among the CSR, CSC, and COO formats are efficient, linear-time
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Matrix vector product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To do a vector product between a sparse array and a vector simply use the array
    `dot` method, as described in its docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'As of NumPy 1.7, `np.dot` is not aware of sparse arrays, therefore using it
    will result on unexpected results or errors. The corresponding dense array should
    be obtained first instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: but then all the performance advantages would be lost.
  prefs: []
  type: TYPE_NORMAL
- en: The CSR format is especially suitable for fast matrix vector products.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Construct a 1000x1000 [`lil_array`](generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array") and add some values to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now convert it to CSR format and solve A x = b for x:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert it to a dense array and solve, and check that the result is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can compute norm of the error with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It should be small :)
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Construct an array in COO format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the indices do not need to be sorted.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate (i,j) entries are summed when converting to CSR or CSC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is useful for constructing finite-element stiffness and mass matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Further details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSR column indices are not necessarily sorted. Likewise for CSC row indices.
    Use the `.sorted_indices()` and `.sort_indices()` methods when sorted indices
    are required (e.g., when passing data to other libraries).
  prefs: []
  type: TYPE_NORMAL
