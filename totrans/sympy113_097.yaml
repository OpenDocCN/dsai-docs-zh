- en: Algebras
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/algebras.html](https://docs.sympy.org/latest/modules/algebras.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Algebras module for SymPy provides support for basic algebraic operations
    on Quaternions.
  prefs: []
  type: TYPE_NORMAL
- en: '## Quaternion Reference'
  prefs: []
  type: TYPE_NORMAL
- en: This section lists the classes implemented by the Algebras module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provides basic quaternion operations. Quaternion objects can be instantiated
    as `Quaternion(a, b, c, d)` as in \(q = a + bi + cj + dk\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**norm** : None or number'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-defined quaternion norm. If a value is given, Quaternion.norm returns this
    pre-defined value instead of calculating the norm
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Quaternions over complex fields can be defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining symbolic unit quaternions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/](https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Quaternion](https://en.wikipedia.org/wiki/Quaternion)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adds quaternions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Quaternion'
  prefs: []
  type: TYPE_NORMAL
- en: The quaternion to add to current (self) quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The resultant quaternion after adding self to other
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Quaternions over complex fields :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Returns the angle of the quaternion measured in the real-axis plane.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Given a quaternion \(q = a + bi + cj + dk\) where \(a\), \(b\), \(c\) and \(d\)
    are real numbers, returns the angle of the quaternion given by
  prefs: []
  type: TYPE_NORMAL
- en: \[\theta := 2 \operatorname{atan_2}\left(\sqrt{b^2 + c^2 + d^2}, {a}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if the transformation arcs represented by the input quaternions
    happen in the same plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : a Quaternion'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if the planes of the two quaternions are the same, apart from its
    orientation/sign.'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : if the planes of the two quaternions are not the same, apart from
    its orientation/sign.'
  prefs: []
  type: TYPE_NORMAL
- en: '**None** : if plane of either of the quaternion is unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Two quaternions are said to be coplanar (in this arc sense) when their axes
    are parallel. The plane of a quaternion is the one normal to its axis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vector_coplanar`](#sympy.algebras.Quaternion.vector_coplanar "sympy.algebras.Quaternion.vector_coplanar"),
    [`is_pure`](#sympy.algebras.Quaternion.is_pure "sympy.algebras.Quaternion.is_pure")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns \(\mathbf{Ax}(q)\), the axis of the quaternion \(q\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Given a quaternion \(q = a + bi + cj + dk\), returns \(\mathbf{Ax}(q)\) i.e.,
    the versor of the vector part of that quaternion equal to \(\mathbf{U}[\mathbf{V}(q)]\).
    The axis is always an imaginary unit with square equal to \(-1 + 0i + 0j + 0k\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vector_part`](#sympy.algebras.Quaternion.vector_part "sympy.algebras.Quaternion.vector_part")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the exponential of \(q\), given by \(e^q\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The exponential of the quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns quaternion from elements of a column vector`. If vector_only is True,
    returns only imaginary part as a Matrix of length 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**elements** : Matrix, list or tuple of length 3 or 4\. If length is 3,'
  prefs: []
  type: TYPE_NORMAL
- en: 'assume real part is zero. Default value: False'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: A quaternion created from the input elements.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Returns a rotation quaternion given the axis and the angle of rotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vector** : tuple of three numbers'
  prefs: []
  type: TYPE_NORMAL
- en: The vector representation of the given axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle** : number'
  prefs: []
  type: TYPE_NORMAL
- en: The angle by which axis is rotated (in radians).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The normalized rotation quaternion calculated from the given axis and the angle
    of rotation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns quaternion equivalent to rotation represented by the Euler angles, in
    the sequence defined by `seq`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angles** : list, tuple or Matrix of 3 numbers'
  prefs: []
  type: TYPE_NORMAL
- en: The Euler angles (in radians).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**seq** : string of length 3'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the sequence of rotations. For extrinsic rotations, seq must be all
    lowercase and its elements must be from the set `{'x', 'y', 'z'}` For intrinsic
    rotations, seq must be all uppercase and its elements must be from the set `{'X',
    'Y', 'Z'}`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The normalized rotation quaternion calculated from the Euler angles in the given
    sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the equivalent quaternion of a matrix. The quaternion will be normalized
    only if the matrix is special orthogonal (orthogonal and det(M) = 1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**M** : Matrix'
  prefs: []
  type: TYPE_NORMAL
- en: Input matrix to be converted to equivalent quaternion. M must be special orthogonal
    (orthogonal and det(M) = 1) for the quaternion to be normalized.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The quaternion equivalent to given matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index vector of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quaternion: representing index vector of the provided quaternion.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The index vector is given by \(\mathbf{T}(q)\), the norm (or magnitude) of the
    quaternion \(q\), multiplied by \(\mathbf{Ax}(q)\), the axis of \(q\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`axis`](#sympy.algebras.Quaternion.axis "sympy.algebras.Quaternion.axis"),
    [`norm`](#sympy.algebras.Quaternion.norm "sympy.algebras.Quaternion.norm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Computes integration of quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: Integration of the quaternion(self) with the given variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Indefinite Integral of quaternion :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Definite integral of quaternion :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Returns true if the quaternion is pure, false if the quaternion is not pure
    or returns none if it is unknown.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A pure quaternion (also a vector quaternion) is a quaternion with scalar part
    equal to 0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scalar_part`](#sympy.algebras.Quaternion.scalar_part "sympy.algebras.Quaternion.scalar_part")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns true if the quaternion is a zero quaternion or false if it is not a
    zero quaternion and None if the value is unknown.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A zero quaternion is a quaternion with both scalar part and vector part equal
    to 0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scalar_part`](#sympy.algebras.Quaternion.scalar_part "sympy.algebras.Quaternion.scalar_part"),
    [`vector_part`](#sympy.algebras.Quaternion.vector_part "sympy.algebras.Quaternion.vector_part")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the logarithm of the quaternion, given by \(\log q\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the natural logarithm of the norm(magnitude) of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`norm`](#sympy.algebras.Quaternion.norm "sympy.algebras.Quaternion.norm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Multiplies quaternions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Quaternion or symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The quaternion to multiply to current (self) quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The resultant quaternion after multiplying self with other
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Quaternions over complex fields :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Returns the norm of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns the normalized form of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Returns the orthogonality of two quaternions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : a Quaternion'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if the two pure quaternions seen as 3D vectors are orthogonal.'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : if the two pure quaternions seen as 3D vectors are not orthogonal.'
  prefs: []
  type: TYPE_NORMAL
- en: '**None** : if the two pure quaternions seen as 3D vectors are orthogonal is
    unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Two pure quaternions are called orthogonal when their product is anti-commutative.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if the two pure quaternions seen as 3D vectors are parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : a Quaternion'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if the two pure quaternions seen as 3D vectors are parallel.'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : if the two pure quaternions seen as 3D vectors are not parallel.'
  prefs: []
  type: TYPE_NORMAL
- en: '**None** : if the two pure quaternions seen as 3D vectors are parallel is unknown.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Two pure quaternions are called parallel when their vector product is commutative
    which implies that the quaternions seen as 3D vectors have same direction.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Finds the pth power of the quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Power to be applied on quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: Returns the p-th power of the current quaternion. Returns the inverse if p =
    -1.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Computes the pth power in the cos-sin form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Power to be applied on quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Quaternion
  prefs: []
  type: TYPE_NORMAL
- en: The p-th power in the cos-sin form.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns 4 x 4 Matrix equivalent to a Hamilton product from the left. This can
    be useful when treating quaternion elements as column vectors. Given a quaternion
    \(q = a + bi + cj + dk\) where a, b, c and d are real numbers, the product matrix
    from the left is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}M = \begin{bmatrix} a &-b &-c &-d \\ b & a &-d & c \\ c & d &
    a &-b \\ d &-c & b & a \end{bmatrix}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns 4 x 4 Matrix equivalent to a Hamilton product from the right. This
    can be useful when treating quaternion elements as column vectors. Given a quaternion
    \(q = a + bi + cj + dk\) where a, b, c and d are real numbers, the product matrix
    from the left is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}M = \begin{bmatrix} a &-b &-c &-d \\ b & a & d &-c \\ c &-d &
    a & b \\ d & c &-b & a \end{bmatrix}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the switched arguments: the matrix represents the quaternion on the right,
    but is still considered as a matrix multiplication from the left.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Returns the coordinates of the point pin (a 3 tuple) after rotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pin** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A 3-element tuple of coordinates of a point which needs to be rotated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**r** : Quaternion or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Axis and angle of rotation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s important to note that when r is a tuple, it must be of the form (axis,
    angle)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates of the point after rotation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returns scalar part(\(\mathbf{S}(q)\)) of the quaternion q.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Given a quaternion \(q = a + bi + cj + dk\), returns \(\mathbf{S}(q) = a\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Sets norm of an already instantiated quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**norm** : None or number'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-defined quaternion norm. If a value is given, Quaternion.norm returns this
    pre-defined value instead of calculating the norm
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the norm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing set norm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns elements of quaternion as a column vector. By default, a `Matrix` of
    length 4 is returned, with the real part as the first element. If `vector_only`
    is `True`, returns only imaginary part as a Matrix of length 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vector_only** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'If True, only imaginary part is returned. Default value: False'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix
  prefs: []
  type: TYPE_NORMAL
- en: A column vector constructed by the elements of the quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Returns the axis and angle of rotation of a quaternion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of (axis, angle)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Returns Euler angles representing same rotation as the quaternion, in the sequence
    given by `seq`. This implements the method described in [[R3]](#r3).
  prefs: []
  type: TYPE_NORMAL
- en: For degenerate cases (gymbal lock cases), the third angle is set to zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : string of length 3'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the sequence of rotations. For extrinsic rotations, seq must be all
    lowercase and its elements must be from the set `{'x', 'y', 'z'}` For intrinsic
    rotations, seq must be all uppercase and its elements must be from the set `{'X',
    'Y', 'Z'}`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle_addition** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'When True, first and third angles are given as an addition and subtraction
    of two simpler `atan2` expressions. When False, the first and third angles are
    each given by a single more complicated `atan2` expression. This equivalent expression
    is given by:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: \[\operatorname{atan_2} (b,a) \pm \operatorname{atan_2} (d,c) = \operatorname{atan_2}
    (bc\pm ad, ac\mp bd)\]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Default value: True'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**avoid_square_root** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'When True, the second angle is calculated with an expression based on `acos`,
    which is slightly more complicated but avoids a square root. When False, second
    angle is calculated with `atan2`, which is simpler and can be better for numerical
    reasons (some numerical implementations of `acos` have problems near zero). Default
    value: False'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple
  prefs: []
  type: TYPE_NORMAL
- en: The Euler angles calculated from the quaternion
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R3] ([1](#id3),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doi.org/10.1371/journal.pone.0276302](https://doi.org/10.1371/journal.pone.0276302)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Returns the equivalent rotation transformation matrix of the quaternion which
    represents rotation about the origin if `v` is not passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v** : tuple or None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Default value: None'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**homogeneous** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'When True, gives an expression that may be more efficient for symbolic calculations
    but less so for direct evaluation. Both formulas are mathematically equivalent.
    Default value: True'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: Returns the equivalent rotation transformation matrix of the quaternion which
    represents rotation about the origin if v is not passed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Generates a 4x4 transformation matrix (used for rotation about a point other
    than the origin) if the point(v) is passed as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if the axis of the pure quaternions seen as 3D vectors `q1`, `q2`,
    and `q3` are coplanar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**q1**'
  prefs: []
  type: TYPE_NORMAL
- en: A pure Quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**q2**'
  prefs: []
  type: TYPE_NORMAL
- en: A pure Quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**q3**'
  prefs: []
  type: TYPE_NORMAL
- en: A pure Quaternion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if the axis of the pure quaternions seen as 3D vectors'
  prefs: []
  type: TYPE_NORMAL
- en: q1, q2, and q3 are coplanar.
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : if the axis of the pure quaternions seen as 3D vectors'
  prefs: []
  type: TYPE_NORMAL
- en: q1, q2, and q3 are not coplanar.
  prefs: []
  type: TYPE_NORMAL
- en: '**None** : if the axis of the pure quaternions seen as 3D vectors'
  prefs: []
  type: TYPE_NORMAL
- en: q1, q2, and q3 are coplanar is unknown.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Three pure quaternions are vector coplanar if the quaternions seen as 3D vectors
    are coplanar.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`axis`](#sympy.algebras.Quaternion.axis "sympy.algebras.Quaternion.axis"),
    [`is_pure`](#sympy.algebras.Quaternion.is_pure "sympy.algebras.Quaternion.is_pure")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Returns \(\mathbf{V}(q)\), the vector part of the quaternion \(q\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Given a quaternion \(q = a + bi + cj + dk\), returns \(\mathbf{V}(q) = bi +
    cj + dk\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
