- en: Solve an Ordinary Differential Equation (ODE) Algebraically
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数解一个常微分方程（ODE）
- en: 原文：[https://docs.sympy.org/latest/guides/solving/solve-ode.html](https://docs.sympy.org/latest/guides/solving/solve-ode.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/guides/solving/solve-ode.html](https://docs.sympy.org/latest/guides/solving/solve-ode.html)
- en: Use SymPy to solve an ordinary differential equation (ODE) algebraically. For
    example, solving \(y''(x) + 9y(x)=0 \) yields \( y(x)=C_{1} \sin(3x)+ C_{2} \cos(3x)\).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SymPy 代数解一个常微分方程（ODE）。例如，解\(y''(x) + 9y(x)=0 \)得到\( y(x)=C_{1} \sin(3x)+
    C_{2} \cos(3x)\)。
- en: Alternatives to Consider
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可供考虑的替代方案
- en: To numerically solve a system of ODEs, use a [SciPy ODE solver](https://docs.scipy.org/doc/scipy/reference/integrate.html#solving-initial-value-problems-for-ode-systems)
    such as `solve_ivp`. You can also use SymPy to create and then [`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") an ODE to be solved numerically using SciPy’s
    as `solve_ivp` as described below in [Numerically Solve an ODE in SciPy](#numerically-solve-an-ode-in-scipy).
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要数值解一个ODE系统，可以使用 [SciPy ODE solver](https://docs.scipy.org/doc/scipy/reference/integrate.html#solving-initial-value-problems-for-ode-systems)
    ，如 `solve_ivp`。你也可以使用 SymPy 创建然后使用 SciPy 的 `solve_ivp` 数值求解一个ODE，具体可见下文的[在SciPy中数值解ODE](#numerically-solve-an-ode-in-scipy)。
- en: Solve an Ordinary Differential Equation (ODE)
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解一个常微分方程（ODE）
- en: Here is an example of solving the above ordinary differential equation algebraically
    using [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve").
    You can then use [`checkodesol()`](../../modules/solvers/ode.html#sympy.solvers.ode.checkodesol
    "sympy.solvers.ode.checkodesol") to verify that the solution is correct.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")
    代数解上述ODE的示例。你可以使用[`checkodesol()`](../../modules/solvers/ode.html#sympy.solvers.ode.checkodesol
    "sympy.solvers.ode.checkodesol") 来验证解是否正确。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output of [`checkodesol()`](../../modules/solvers/ode.html#sympy.solvers.ode.checkodesol
    "sympy.solvers.ode.checkodesol") is a tuple where the first item, a boolean, tells
    whether substituting the solution into the ODE results in `0`, indicating the
    solution is correct.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`checkodesol()`](../../modules/solvers/ode.html#sympy.solvers.ode.checkodesol
    "sympy.solvers.ode.checkodesol") 的输出是一个元组，其中第一项是布尔值，指示将解代入ODE是否结果为`0`，表示解是正确的。'
- en: Guidance
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指导
- en: Defining Derivatives
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义导数
- en: 'There are many ways to express derivatives of functions. For an undefined function,
    both [`Derivative`](../../modules/core.html#sympy.core.function.Derivative "sympy.core.function.Derivative")
    and [`diff()`](../../modules/core.html#sympy.core.function.diff "sympy.core.function.diff")
    represent the undefined derivative. Thus, all of the following `ypp` (“y prime
    prime”) represent \(y''''\), the second derivative with respect to \(x\) of a
    function \(y(x)\):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表达函数的导数有许多方式。对于未定义的函数，[`Derivative`](../../modules/core.html#sympy.core.function.Derivative
    "sympy.core.function.Derivative") 和 [`diff()`](../../modules/core.html#sympy.core.function.diff
    "sympy.core.function.diff") 都表示未定义的导数。因此，所有以下的 `ypp` (“y prime prime”) 都代表\(y''\)，即函数\(y(x)\)关于\(x\)的二阶导数：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We recommend specifying the function to be solved for, as the second argument
    to [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve").
    Note that it must be a function rather than a variable (symbol). SymPy will give
    an error if you specify a variable (\(x\)) rather than a function (\(f(x)\)):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议将待解函数作为[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") 的第二个参数进行指定。请注意，这必须是一个函数而不是一个变量（符号）。如果你指定了一个变量（\(x\)）而不是一个函数（\(f(x)\)），SymPy
    将会报错：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Similarly, you must specify the argument of the function: \(y(x)\), not just
    \(y\).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你必须指定函数的参数：\(y(x)\)，而不仅仅是\(y\)。
- en: Options to Define an ODE
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义ODE的选项
- en: You can define the function to be solved for in two ways. The subsequent syntax
    for specifying initial conditions depends on your choice.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过两种方式定义待解的函数。对于你选择的初始条件指定语法取决于你的选择。
- en: 'Option 1: Define a Function Without Including Its Independent Variable'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 1：定义一个不包括其自变量的函数
- en: 'You can define a function without including its independent variable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义一个不包括其自变量的函数：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that you supply the functions to be solved for as a list as the second
    argument of [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve"), here `[f(x), g(x)]`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，作为[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")
    的第二个参数，你需要提供待解的函数列表，如此处 `[f(x), g(x)]`。
- en: Specify Initial Conditions or Boundary Conditions
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 指定初始条件或边界条件
- en: 'If your differential equation(s) have initial or boundary conditions, specify
    them with the [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") optional argument `ics`. Initial and boundary conditions
    are treated the same way (even though the argument is called `ics`). It should
    be given in the form of `{f(x0): y0, f(x).diff(x).subs(x, x1): y1}` and so on
    where, for example, the value of \(f(x)\) at \(x = x_{0}\) is \(y_{0}\). For power
    series solutions, if no initial conditions are specified \(f(0)\) is assumed to
    be \(C_{0}\) and the power series solution is calculated about \(0\).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您的微分方程具有初始条件或边界条件，请使用 [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") 的可选参数 `ics` 指定它们。初始条件和边界条件以相同方式处理（尽管参数称为 `ics`）。应以
    `{f(x0): y0, f(x).diff(x).subs(x, x1): y1}` 形式给出，例如在 \(x = x_{0}\) 处 \(f(x)\)
    的值是 \(y_{0}\)。对于幂级数解，如果未指定初始条件，则假定 \(f(0)\) 为 \(C_{0}\)，并且关于 \(0\) 计算幂级数解。'
- en: 'Here is an example of setting the initial values for functions, namely namely
    \(f(0) = 1\) and \(g(2) = 3\):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个设置函数初始值的例子，即 \(f(0) = 1\) 和 \(g(2) = 3\)：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is an example of setting the initial value for the derivative of a function,
    namely \(f''(1) = 2\):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是设置函数导数初始值的例子，即 \(f'(1) = 2\)：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Option 2: Define a Function of an Independent Variable'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 2：定义一个独立变量的函数
- en: 'You may prefer to specify a function (for example \(y\)) of its independent
    variable (for example \(t\)), so that `y` represents `y(t)`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能更喜欢指定一个函数（例如 \(y\)) 的独立变量（例如 \(t\))，这样 `y` 就表示 `y(t)`：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using this convention, the second argument of [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve"), `y`, represents `y(t)`, so SymPy recognizes it as
    a valid function to solve for.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此约定，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")
    的第二个参数 `y` 表示 `y(t)`，因此 SymPy 将其识别为要解的有效函数。
- en: Specify Initial Conditions or Boundary Conditions
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 指定初始条件或边界条件
- en: 'Using that syntax, you specify initialor boundary conditions by substituting
    in values of the independent variable using [`subs()`](../../modules/core.html#sympy.core.basic.Basic.subs
    "sympy.core.basic.Basic.subs") because the function \(y\) already has its independent
    variable as an argument \(t\):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该语法，您可以通过使用 [`subs()`](../../modules/core.html#sympy.core.basic.Basic.subs
    "sympy.core.basic.Basic.subs") 将独立变量的值替换到函数 \(y\) 中，因为函数 \(y\) 已经将其独立变量作为参数 \(t\)：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Beware Copying and Pasting Results
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意复制和粘贴结果
- en: 'If you choose to define a function of an independent variable, note that copying
    a result and pasting it into subsequent code may cause an error because `x` is
    already defined as `y(t)`, so if you paste in `y(t)` it is interpreted as `y(t)(t)`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择定义一个独立变量的函数，请注意复制结果并粘贴到后续代码中可能会导致错误，因为 `x` 已经定义为 `y(t)`，所以如果您粘贴 `y(t)`，它会被解释为
    `y(t)(t)`：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So remember to exclude the independent variable call `(t)`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请记住不要包含独立变量调用 `(t)`：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Use the Solution Result
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用解决方案结果
- en: Unlike other solving functions, [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") returns an [`Equality`](../../modules/core.html#sympy.core.relational.Equality
    "sympy.core.relational.Equality") (equation) formatted as, for example, `Eq(y(x),
    C1*sin(3*x) + C2*cos(3*x))` which is equivalent to the mathematical notation \(y(x)
    = C_1 \sin(3x) + C_2 \cos(3x)\).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于其他求解函数，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") 返回一个以如下格式的 [`Equality`](../../modules/core.html#sympy.core.relational.Equality
    "sympy.core.relational.Equality")（方程）：`Eq(y(x), C1*sin(3*x) + C2*cos(3*x))`，这等同于数学符号
    \(y(x) = C_1 \sin(3x) + C_2 \cos(3x)\)。
- en: Extract the Result for One Solution and Function
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取单个解和函数的结果
- en: 'You can extract the result from an [`Equality`](../../modules/core.html#sympy.core.relational.Equality
    "sympy.core.relational.Equality") using the right-hand side property [`rhs`](../../modules/core.html#sympy.core.relational.Relational.rhs
    "sympy.core.relational.Relational.rhs"):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [`Equality`](../../modules/core.html#sympy.core.relational.Equality "sympy.core.relational.Equality")
    中使用右侧属性 [`rhs`](../../modules/core.html#sympy.core.relational.Relational.rhs "sympy.core.relational.Relational.rhs")
    提取结果：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Some ODEs Cannot Be Solved Explicitly, Only Implicitly
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有些常微分方程不能显式求解，只能隐式求解
- en: 'The above ODE can be solved explicitly, specifically \(y(x)\) can be expressed
    in terms of functions of \(x\). However, some ODEs cannot be solved explicitly,
    for example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述常微分方程可以显式求解，特别是 \(y(x)\) 可以用 \(x\) 的函数表示。然而，有些常微分方程不能显式求解，例如：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This gives no direct expression for \(f(x)\). Instead, [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") expresses a solution as \(g(f(x))\) where \(g\) is
    [`Ei`](../../modules/functions/special.html#sympy.functions.special.error_functions.Ei
    "sympy.functions.special.error_functions.Ei"), the classical exponential integral
    function. `Ei` does not have a known closed-form inverse, so a solution cannot
    be explicitly expressed as \(f(x)\) equaling a function of \(x\). Instead, `dsolve`
    returns an [implicit solution](https://en.wikipedia.org/wiki/Implicit_function).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这不直接给出了 \(f(x)\) 的表达式。相反，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") 将一个解表达为 \(g(f(x))\)，其中 \(g\) 是[`Ei`](../../modules/functions/special.html#sympy.functions.special.error_functions.Ei
    "sympy.functions.special.error_functions.Ei")，经典指数积分函数。`Ei` 没有已知的闭合形式逆运算，所以一个解不能明确地表达为
    \(f(x)\) 等于 \(x\) 的函数。相反，`dsolve` 返回一个[隐式解](https://en.wikipedia.org/wiki/Implicit_function)。
- en: When `dsolve` returns an implicit solution, extracting the right-hand side of
    the returned equality will not give an explicitly expression for the function
    to be solved for, here \(f(x)\). So before extracting an expression for the function
    to be solved for, check that `dsolve` was able to solve for the function explicitly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当`dsolve`返回一个隐式解时，提取返回的等式的右侧将不会给出一个明确的表达式，用于要解的函数，这里是\(f(x)\)。因此，在提取要解的函数的表达式之前，检查`dsolve`能否明确为该函数求解。
- en: Extract the Result for Multiple Function-Solution Pairs
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取多个函数-解对的结果
- en: If you are solving a system of equations with multiple unknown functions, the
    form of the output of [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") depends on whether there is one or multiple solutions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在解决一个具有多个未知函数的方程组，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve")的输出形式取决于是否有一个或多个解。
- en: If There is One Solution Set
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如果存在一个解集
- en: 'If there is only one solution set to a system of equations with multiple unknown
    functions, [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") will return a non-nested list containing an equality.
    You can extract the solution expression using a single loop or comprehension:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个多元函数方程组只有一个解集，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve")将返回一个非嵌套的包含一个等式的列表。您可以使用单个循环或推导式提取解表达式：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If There are Multiple Solution Sets
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如果存在多个解集
- en: If there are multiple solution sets to a system of equations with multiple unknown
    functions, [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") will return a nested list of equalities, the outer
    list representing each solution and the inner list representing each function.
    While you can extract results by specifying the index of each function, we recommend
    an approach which is robust with respect to function ordering. The following converts
    each solution into a dictionary so you can easily extract the result for the desired
    function. It uses standard Python techniques such as loops or comprehensions,
    in a nested fashion.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个多元函数方程组有多个解集，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") 将返回一个嵌套的等式列表，外部列表表示每个解，内部列表表示每个函数。虽然您可以通过指定每个函数的索引来提取结果，但我们建议一种对函数排序具有鲁棒性的方法。以下将每个解转换为字典，以便您可以轻松提取所需函数的结果。它使用标准的Python技术，如循环或推导式，以嵌套的方式。
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Work With Arbitrary Constants
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理任意常数
- en: 'You can manipulate arbitrary constants such as `C1`, `C2`, and `C3`, which
    are generated automatically by [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve"), by creating them as symbols. For example, if you
    want to assign values to arbitrary constants, you can create them as symbols and
    then substitute in their values using [`subs()`](../../modules/core.html#sympy.core.basic.Basic.subs
    "sympy.core.basic.Basic.subs"):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以操纵由[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")自动生成的`C1`、`C2`和`C3`等任意常数，方法是将它们创建为符号。例如，如果您想为任意常数分配值，可以将它们创建为符号，然后使用[`subs()`](../../modules/core.html#sympy.core.basic.Basic.subs
    "sympy.core.basic.Basic.subs")替换它们的值：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Numerically Solve an ODE in SciPy
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在SciPy中数值求解ODE
- en: A common workflow which leverages [SciPy’s](https://docs.scipy.org/doc/scipy/index.html)
    fast numerical ODE solving is
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 利用[SciPy](https://docs.scipy.org/doc/scipy/index.html)快速数值ODE求解的一种常见工作流程是
- en: set up an ODE in SymPy
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SymPy中设置一个ODE
- en: convert it to a numerical function using [`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify")
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify")将其转换为数值函数。
- en: solve the initial value problem by [numerically integrating the ODE using SciPy’s
    `solve_ivp`](https://docs.scipy.org/doc/scipy/reference/integrate.html#solving-initial-value-problems-for-ode-systems).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过[使用SciPy的`solve_ivp`数值积分ODE来解决初值问题](https://docs.scipy.org/doc/scipy/reference/integrate.html#solving-initial-value-problems-for-ode-systems)来解决初始值问题。
- en: 'Here is an [example from the field of chemical kinetics](https://www.sympy.org/scipy-2017-codegen-tutorial/notebooks/25-chemical-kinetics-intro.html)
    where the nonlinear ordinary differential equations take this form:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于[化学动力学领域的示例](https://www.sympy.org/scipy-2017-codegen-tutorial/notebooks/25-chemical-kinetics-intro.html)，其中非线性常微分方程采用以下形式：
- en: \[\begin{split} r_f = & k_f y_0(t)^2 y_1(t) \\ r_b = & k_b y_2(t)^2 \\ \frac{d
    y_0(t)}{dt} = & 2(r_b - r_f) \\ \frac{d y_1(t)}{dt} = & r_b - r_f \\ \frac{d y_2(t)}{dt}
    = & 2(r_f - r_b) \end{split}\]
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split} r_f = & k_f y_0(t)^2 y_1(t) \\ r_b = & k_b y_2(t)^2 \\ \frac{d
    y_0(t)}{dt} = & 2(r_b - r_f) \\ \frac{d y_1(t)}{dt} = & r_b - r_f \\ \frac{d y_2(t)}{dt}
    = & 2(r_f - r_b) \end{split}\]
- en: and
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: \[\begin{split}\vec{y}(t) = \begin{bmatrix} y_0(t) \\ y_1(t) \\ y_2(t) \end{bmatrix}
    \end{split}\]
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\vec{y}(t) = \begin{bmatrix} y_0(t) \\ y_1(t) \\ y_2(t) \end{bmatrix}
    \end{split}\]
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ([`png`](../../_downloads/283e3d4dc325ad83368162cd075bcb83/solve-ode-1.png),
    [`hires.png`](../../_downloads/da2287c494dfc71aef8da50395b3d20d/solve-ode-1.hires.png),
    [`pdf`](../../_downloads/95feb1999af91b22f624aa3ce3c6b1c4/solve-ode-1.pdf))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ([`png`](../../_downloads/283e3d4dc325ad83368162cd075bcb83/solve-ode-1.png),
    [`hires.png`](../../_downloads/da2287c494dfc71aef8da50395b3d20d/solve-ode-1.hires.png),
    [`pdf`](../../_downloads/95feb1999af91b22f624aa3ce3c6b1c4/solve-ode-1.pdf))
- en: '![../../_images/solve-ode-1.png](../Images/78505417a69f1215297a3dfb220dec94.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/solve-ode-1.png](../Images/78505417a69f1215297a3dfb220dec94.png)'
- en: SciPy’s `solve_ivp` returns a result containing `y` (numerical function result,
    here, concentration) values for each of the three chemical species, corresponding
    to the time points `t_eval`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy的`solve_ivp`返回一个结果，其中包含每个化学物种对应于时间点`t_eval`的`y`（数值函数结果，这里是浓度）值。
- en: Ordinary Differential Equation Solving Hints
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 普通微分方程求解提示
- en: Return Unevaluated Integrals
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回未评估的积分
- en: 'By default, [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") attempts to evaluate the integrals it produces to
    solve your ordinary differential equation. You can disable evaluation of the integrals
    by using [Hint Functions](../../modules/solvers/ode.html#hints) ending with `_Integral`,
    for example `separable_Integral`. This is useful because [`integrate()`](../../modules/core.html#sympy.core.expr.Expr.integrate
    "sympy.core.expr.Expr.integrate") is an expensive routine. SymPy may hang (appear
    to never complete the operation) because of a difficult or impossible integral,
    so using an `_Integral` hint will at least return an (unintegrated) result, which
    you can then consider. The simplest way to disable integration is with the `all_Integral`
    hint because you do not need to know which hint to supply: for any hint with a
    corresponding `_Integral` hint, `all_Integral` only returns the `_Integral` hint.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")尝试评估它生成的积分以解决您的普通微分方程。您可以通过使用以`_Integral`结尾的[提示函数](../../modules/solvers/ode.html#hints)来禁用积分的评估，例如`separable_Integral`。这是有用的，因为[`integrate()`](../../modules/core.html#sympy.core.expr.Expr.integrate
    "sympy.core.expr.Expr.integrate")是一个昂贵的例程。由于难以或无法积分，SymPy可能会挂起（似乎永远无法完成操作），因此使用`_Integral`提示至少会返回一个（未积分的）结果，您可以随后考虑。禁用积分的最简单方法是使用`all_Integral`提示，因为您不需要知道要提供哪种提示：对于具有相应的`_Integral`提示的任何提示，`all_Integral`只返回`_Integral`提示。
- en: Select a Specific Solver
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择特定的求解器
- en: 'You may wish to select a specific solver using a hint for a couple of reasons:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望选择特定的求解器，有几个原因：
- en: 'educational purposes: for example if you are learning about a specific method
    to solve ODEs and want to get a result that exactly matches that method'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教育目的：例如，如果您正在学习某种特定的解ODE方法，并希望获得完全匹配该方法的结果
- en: 'form of the result: sometimes an ODE can be solved by many different solvers,
    and they can return different results. They will be mathematically equivalent,
    though the arbitrary constants may not be. [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve") by default tries to use the “best” solvers first,
    which are most likely to return the most usable output, but it is not a perfect
    heuristic. For example, the “best” solver may produce a result with an integral
    that SymPy cannot solve, but another solver may produce a different integral that
    SymPy can solve. So if the solution isn’t in a form you like, you can try other
    hints to check whether they give a preferable result.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果形式：有时候一个常微分方程可以由许多不同的求解器求解，它们可以返回不同的结果。尽管它们在数学上是等价的，但任意常数可能不同。[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve")默认情况下会尝试首先使用“最佳”求解器，这些求解器最有可能产生最有用的输出，但这不是一个完美的启发式。例如，“最佳”求解器可能生成一个包含SymPy无法解决的积分的结果，但另一个求解器可能生成一个SymPy可以解决的不同积分。因此，如果解决方案不符合您的要求，您可以尝试其他提示，以查看它们是否提供更好的结果。
- en: Not All Equations Can Be Solved
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并非所有方程都可以解决
- en: Equations With No Solution
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有解的方程
- en: 'Not all differential equations can be solved, for example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的微分方程都可以解决，例如：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Equations With No Closed-Form Solution
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有封闭形式解的方程
- en: As noted above, [Some ODEs Cannot Be Solved Explicitly, Only Implicitly](#some-odes-cannot-be-solved-explicitly-only-implicitly).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，[有些常微分方程只能隐式求解](#some-odes-cannot-be-solved-explicitly-only-implicitly)。
- en: 'Also, some systems of differential equations have no closed-form solution because
    they are chaotic, for example the [Lorenz system](https://en.wikipedia.org/wiki/Lorenz_system#Overview)
    or a double pendulum described by these two differential equations (simplified
    from [ScienceWorld](https://scienceworld.wolfram.com/physics/DoublePendulum.html)):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有些微分方程组没有封闭形式的解决方案，因为它们是混沌的，例如[Lorenz system](https://en.wikipedia.org/wiki/Lorenz_system#Overview)或由以下这两个微分方程描述的双摆（从[ScienceWorld](https://scienceworld.wolfram.com/physics/DoublePendulum.html)简化而来）：
- en: \[ 2 \theta_1''(t) + \theta_2''(t) \cos(\theta_1-\theta_2) + \theta_2'^2(t)
    \sin(\theta_1 - \theta_2) + 2g \sin(\theta_1) = 0 \]\[ \theta_2''(t) + \theta_1''(t)
    \cos(\theta_1-\theta_2) - \theta_1'^2(t) \sin(\theta_1 - \theta_2) + g \sin(\theta_2)
    = 0 \]
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: \[ 2 \theta_1''(t) + \theta_2''(t) \cos(\theta_1-\theta_2) + \theta_2'^2(t)
    \sin(\theta_1 - \theta_2) + 2g \sin(\theta_1) = 0 \]\[ \theta_2''(t) + \theta_1''(t)
    \cos(\theta_1-\theta_2) - \theta_1'^2(t) \sin(\theta_1 - \theta_2) + g \sin(\theta_2)
    = 0 \]
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For such cases, you can solve the equations numerically as mentioned in [Alternatives
    to Consider](#alternatives-to-consider).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，您可以如[考虑的替代方案](#alternatives-to-consider)中提到的那样通过数值方法来解方程。
- en: Report a Bug
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告错误
- en: If you find a bug with [`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve
    "sympy.solvers.ode.dsolve"), please post the problem on the [SymPy mailing list](https://groups.google.com/g/sympy).
    Until the issue is resolved, you can use a different method listed in [Alternatives
    to Consider](#alternatives-to-consider).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在[`dsolve()`](../../modules/solvers/ode.html#sympy.solvers.ode.dsolve "sympy.solvers.ode.dsolve")中发现了一个bug，请在[SymPy邮件列表](https://groups.google.com/g/sympy)上发布问题。在问题解决之前，您可以使用[考虑的替代方法](#alternatives-to-consider)中列出的其他方法。
