- en: Building from source
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源码构建
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/building/index.html](https://docs.scipy.org/doc/scipy-1.12.0/building/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/building/index.html](https://docs.scipy.org/doc/scipy-1.12.0/building/index.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are only trying to install SciPy, we recommend using binaries - see [Installation](https://scipy.org/install)
    for details on that.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想安装SciPy，我们建议使用二进制文件 - 详细信息请参见[安装](https://scipy.org/install)。
- en: Building SciPy from source requires setting up system-level dependencies (compilers,
    BLAS/LAPACK libraries, etc.) first, and then invoking a build. The build may be
    done in order to install SciPy for local usage, develop SciPy itself, or build
    redistributable binary packages. And it may be desired to customize aspects of
    how the build is done. This guide will cover all these aspects. In addition, it
    provides background information on how the SciPy build works, and links to up-to-date
    guides for generic Python build & packaging documentation that is relevant.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从源码构建SciPy需要先设置系统级依赖项（编译器、BLAS/LAPACK库等），然后调用构建命令。构建可以用来在本地安装SciPy、开发SciPy本身或构建可重新分发的二进制包。可能希望定制构建方式的各个方面。本指南将涵盖所有这些方面。此外，它还提供了有关SciPy构建工作方式的背景信息，并链接到通用Python构建和打包文档的最新指南，这些内容是相关的。
- en: '## System-level dependencies'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '## 系统级别依赖'
- en: SciPy uses compiled code for speed, which means you need compilers and some
    other system-level (i.e, non-Python / non-PyPI) dependencies to build it on your
    system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy使用编译代码以提升速度，这意味着你需要安装编译器和一些其他系统级别（即非Python/非PyPI）的依赖项来在你的系统上构建它。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Conda, you can skip the steps in this section - with the exception
    of installing compilers for Windows or the Apple Developer Tools for macOS. All
    other dependencies will be installed automatically by the `mamba env create -f
    environment.yml` command.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Conda，你可以跳过本节中的步骤 - 除了在Windows上安装编译器或在macOS上安装Apple开发者工具之外。`mamba env
    create -f environment.yml`命令将自动安装所有其他依赖项。
- en: 'If you want to use the system Python and `pip`, you will need:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用系统自带的Python和`pip`，你需要：
- en: C, C++, and Fortran compilers (typically `gcc`, `g++`, and `gfortran`).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C、C++和Fortran编译器（通常是`gcc`、`g++`和`gfortran`）。
- en: Python header files (typically a package named `python3-dev` or `python3-devel`)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python头文件（通常是名为`python3-dev`或`python3-devel`的包）
- en: BLAS and LAPACK libraries. [OpenBLAS](https://github.com/xianyi/OpenBLAS/) is
    the SciPy default; other variants include [ATLAS](http://math-atlas.sourceforge.net/)
    and [MKL](https://software.intel.com/en-us/intel-mkl).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLAS和LAPACK库。[OpenBLAS](https://github.com/xianyi/OpenBLAS/)是SciPy的默认选项；其他变体包括[ATLAS](http://math-atlas.sourceforge.net/)和[MKL](https://software.intel.com/en-us/intel-mkl)。
- en: '`pkg-config` for dependency detection.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于依赖检测的`pkg-config`。
- en: 'To install SciPy build requirements, you can do:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装SciPy的构建要求，可以执行：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can do:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以执行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装构建SciPy所需的一切，其优势在于包管理器处理新的依赖项或更新所需版本。
- en: 'To install SciPy build requirements, you can do:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装SciPy的构建要求，可以执行：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you can do:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以执行：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装构建SciPy所需的一切，其优势在于包管理器处理新的依赖项或更新所需版本。
- en: 'To install SciPy build requirements, you can do:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装SciPy的构建要求，可以执行：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, you can do:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以执行：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command installs whatever is needed to build SciPy, with the advantage
    that new dependencies or updates to required versions are handled by the package
    managers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装构建SciPy所需的一切，其优势在于包管理器处理新的依赖项或更新所需版本。
- en: 'To install SciPy build requirements, you can do:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装SciPy的构建要求，可以执行：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Install Apple Developer Tools. An easy way to do this is to [open a terminal
    window](https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line),
    enter the command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Apple开发者工具。一个简单的方法是[打开终端窗口](https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line)，输入以下命令：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and follow the prompts. Apple Developer Tools includes Git, the Clang C/C++
    compilers, and other development utilities that may be required.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按照提示进行操作。Apple开发者工具包括Git、Clang C/C++编译器和其他可能需要的开发工具。
- en: Do *not* use the macOS system Python. Instead, install Python with [the python.org
    installer](https://www.python.org/downloads/) or with a package manager like Homebrew,
    MacPorts or Fink.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要*使用macOS系统自带的Python。建议使用[python.org安装程序](https://www.python.org/downloads/)或Homebrew、MacPorts或Fink等软件包管理器来安装Python。'
- en: 'The other system dependencies you need are a Fortran compiler, BLAS and LAPACK
    libraries, and pkg-config. They’re easiest to install with [Homebrew](https://brew.sh/):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装Fortran编译器、BLAS和LAPACK库以及pkg-config这些其他系统依赖项。建议使用[Homebrew](https://brew.sh/)来安装这些依赖项：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As of SciPy >=1.2.0, we do not support compiling against the system Accelerate
    library for BLAS and LAPACK. It does not support a sufficiently recent LAPACK
    interface. This is planned to change in 2023, because macOS 13.3 introduced a
    major upgrade to Accelerate which resolved all known issues.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从SciPy >=1.2.0开始，我们不支持使用系统自带的Accelerate库来编译BLAS和LAPACK。它不支持足够新的LAPACK接口。计划在2023年进行更改，因为macOS
    13.3引入了对Accelerate的重大升级，解决了所有已知问题。
- en: 'A compatible set of C, C++ and Fortran compilers is needed to build SciPy.
    This is trickier on Windows than on other platforms, because MSVC does not support
    Fortran, and gfortran and MSVC can’t be used together. You will need one of these
    sets of compilers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上构建SciPy需要一套兼容的C、C++和Fortran编译器。与其他平台相比，这在Windows上要复杂一些，因为MSVC不支持Fortran，而gfortran和MSVC不能一起使用。您需要选择其中一组编译器：
- en: Mingw-w64 compilers (`gcc`, `g++`, `gfortran`) - *recommended, because it’s
    easiest to install and is what we use for SciPy’s own CI and binaries*
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MinGW-w64编译器（`gcc`、`g++`、`gfortran`） - *推荐，因为最容易安装，并且是SciPy自己CI和二进制文件使用的工具*
- en: MSVC + Intel Fortran (`ifort`)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MSVC + Intel Fortran（`ifort`）
- en: Intel compilers (`icc`, `ifort`)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Intel编译器（`icc`、`ifort`）
- en: Compared to macOS and Linux, building SciPy on Windows is a little more difficult,
    due to the need to set up these compilers. It is not possible to just call a one-liner
    on the command prompt as you would on other platforms.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于macOS和Linux，在Windows上构建SciPy稍显复杂，因为需要设置这些编译器。不像在其他平台上可以直接在命令提示符中运行单行命令。
- en: First, install Microsoft Visual Studio - the 2019 Community Edition or any newer
    version will work (see the [Visual Studio download site](https://visualstudio.microsoft.com/downloads/)).
    This is needed even if you use the MinGW-w64 or Intel compilers, in order to ensure
    you have the Windows Universal C Runtime (the other components of Visual Studio
    are not needed when using Mingw-w64, and can be deselected if desired, to save
    disk space).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装Microsoft Visual Studio - 建议使用2019社区版或更新版本（参见[Visual Studio下载站点](https://visualstudio.microsoft.com/downloads/)）。即使使用MinGW-w64或Intel编译器，也需要安装以确保具有Windows通用C运行时（在使用Mingw-w64时不需要Visual
    Studio的其他组件，如果需要可以取消选择以节省磁盘空间）。
- en: 'There are several sources of binaries for MinGW-w64\. We recommend the RTools
    versions, which can be installed with Chocolatey (see Chocolatey install instructions
    [here](https://chocolatey.org/install)):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个MinGW-w64二进制发行版。我们推荐使用RTools版本，可以通过Chocolatey（参见[这里的Chocolatey安装说明](https://chocolatey.org/install)）安装：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In case of issues, we recommend using the exact same version as used in the
    [SciPy GitHub Actions CI jobs for Windows](https://github.com/scipy/scipy/blob/main/.github/workflows/windows.yml).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如遇问题，建议使用与[SciPy GitHub Actions CI jobs for Windows](https://github.com/scipy/scipy/blob/main/.github/workflows/windows.yml)中使用的确切版本相同。
- en: The MSVC installer does not put the compilers on the system path, and the install
    location may change. To query the install location, MSVC comes with a `vswhere.exe`
    command-line utility. And to make the C/C++ compilers available inside the shell
    you are using, you need to run a `.bat` file for the correct bitness and architecture
    (e.g., for 64-bit Intel CPUs, use `vcvars64.bat`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: MSVC安装程序不会将编译器添加到系统路径中，并且安装位置可能会更改。要查询安装位置，MSVC附带有一个`vswhere.exe`命令行实用工具。为了在您使用的shell中使C/C++编译器可用，您需要运行一个适合位数和架构的`.bat`文件（例如，对于64位Intel
    CPU，请使用`vcvars64.bat`）。
- en: For detailed guidance, see [Use the Microsoft C++ toolset from the command line](https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 欲获得详细指导，请参阅[从命令行使用Microsoft C++工具集](https://learn.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170)。
- en: Similar to MSVC, the Intel compilers are designed to be used with an activation
    script (`Intel\oneAPI\setvars.bat`) that you run in the shell you are using. This
    makes the compilers available on the path. For detailed guidance, see [Get Started
    with the Intel® oneAPI HPC Toolkit for Windows](https://www.intel.com/content/www/us/en/docs/oneapi-hpc-toolkit/get-started-guide-windows/2023-1/overview.html).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与 MSVC 类似，Intel 编译器设计为与您正在使用的 shell 中的激活脚本 (`Intel\oneAPI\setvars.bat`) 一起使用。这使得编译器可以在路径中使用。有关详细指导，请参阅
    [Intel® oneAPI HPC Toolkit for Windows 入门指南](https://www.intel.com/content/www/us/en/docs/oneapi-hpc-toolkit/get-started-guide-windows/2023-1/overview.html)。
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Compilers should be on the system path (i.e., the `PATH` environment variable
    should contain the directory in which the compiler executables can be found) in
    order to be found, with the exception of MSVC which will be found automatically
    if and only if there are no other compilers on the `PATH`. You can use any shell
    (e.g., Powershell, `cmd` or Git Bash) to invoke a build. To check that this is
    the case, try invoking a Fortran compiler in the shell you use (e.g., `gfortran
    --version` or `ifort --version`).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器应该在系统路径上（即 `PATH` 环境变量应包含可以找到编译器可执行文件的目录）才能被找到，MSVC 是个例外，如果 `PATH` 上没有其他编译器，它会自动找到。您可以使用任何
    shell（例如 Powershell，`cmd` 或 Git Bash）来调用构建。要检查是否符合条件，请在您使用的 shell 中尝试调用 Fortran
    编译器（例如 `gfortran --version` 或 `ifort --version`）。
- en: Warning
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using a conda environment it is possible that the environment creation
    will not work due to an outdated Fortran compiler. If that happens, remove the
    `compilers` entry from `environment.yml` and try again. The Fortran compiler should
    be installed as described in this section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 conda 环境时，由于过时的 Fortran 编译器可能会导致环境创建失败。如果发生这种情况，请从 `environment.yml` 中删除
    `compilers` 条目，然后重试。Fortran 编译器应按照本节描述的方式安装。
- en: Building SciPy from source
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源码构建 SciPy
- en: If you want to only install SciPy from source once and not do any development
    work, then the recommended way to build and install is to use `pip`. Otherwise,
    conda is recommended.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想从源码安装 SciPy 一次而不进行任何开发工作，则建议使用 `pip` 来构建和安装。否则，推荐使用 conda。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you don’t have a conda installation yet, we recommend using [Mambaforge](https://github.com/conda-forge/miniforge#mambaforge);
    any conda flavor will work though.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 conda，我们建议使用 [Mambaforge](https://github.com/conda-forge/miniforge#mambaforge)；任何
    conda 都可以使用。
- en: Building from source to use SciPy
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源码构建以使用 SciPy
- en: 'If you are using a conda environment, `pip` is still the tool you use to invoke
    a from-source build of SciPy. It is important to always use the `--no-build-isolation`
    flag to the `pip install` command, to avoid building against a `numpy` wheel from
    PyPI. In order for that to work you must first install the remaining build dependencies
    into the conda environment:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 conda 环境，`pip` 仍然是调用 SciPy 源码构建的工具。重要的是始终使用 `--no-build-isolation` 标志来执行
    `pip install` 命令，以避免针对 PyPI 上的 `numpy` 轮构建。为了使其工作，您必须先将其余构建依赖项安装到 conda 环境中：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '### Building from source for SciPy development'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '### 用于 SciPy 开发的源码构建'
- en: 'If you want to build from source in order to work on SciPy itself, first clone
    the SciPy repository:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望从源码构建以便于在 SciPy 自身上工作，请首先克隆 SciPy 存储库：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then you want to do the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要执行以下操作：
- en: Create a dedicated development environment (virtual environment or conda environment),
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个专用的开发环境（虚拟环境或 conda 环境），
- en: Install all needed dependencies (*build*, and also *test*, *doc* and *optional*
    dependencies),
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装所有需要的依赖项（*构建*，以及 *测试*， *文档* 和 *可选* 依赖项），
- en: Build SciPy with our `dev.py` developer interface.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的 `dev.py` 开发者接口构建 SciPy。
- en: 'Step (3) is always the same, steps (1) and (2) are different between conda
    and virtual environments:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤（3）始终相同，步骤（1）和（2）在 conda 和虚拟环境之间有所不同：
- en: 'To create a `scipy-dev` development environment with every required and optional
    dependency installed, run:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `scipy-dev` 开发环境并安装每个必需和可选的依赖项，请运行：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are many tools to manage virtual environments, like `venv`, `virtualenv`/`virtualenvwrapper`,
    `pyenv`/`pyenv-virtualenv`, Poetry, PDM, Hatch, and more. Here we use the basic
    `venv` tool that is part of the Python stdlib. You can use any other tool; all
    we need is an activated Python environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可以管理虚拟环境，如 `venv`，`virtualenv`/`virtualenvwrapper`，`pyenv`/`pyenv-virtualenv`，Poetry，PDM，Hatch
    等。这里我们使用 Python 标准库中的基本工具 `venv`。您可以使用任何其他工具；我们只需要一个已激活的 Python 环境即可。
- en: Create and activate a virtual environment in a new directory named `venv` (
    note that the exact activation command may be different based on your OS and shell
    - see [“How venvs work”](https://docs.python.org/3/library/venv.html#how-venvs-work)
    in the `venv` docs).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为 `venv` 的新目录中创建并激活虚拟环境（请注意，激活命令可能因您的操作系统和 Shell 而异，请参阅[“venv 工作原理”](https://docs.python.org/3/library/venv.html#how-venvs-work)中的
    `venv` 文档）。
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then install the Python-level dependencies (see `pyproject.toml`) from PyPI
    with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令从 PyPI 安装 Python 级依赖项（参见 `pyproject.toml`）：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To build SciPy in an activated development environment, run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要在已激活的开发环境中构建 SciPy，请运行：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will install SciPy inside the repository (by default in a `build-install`
    directory). You can then run tests (`python dev.py test`), drop into IPython (`python
    dev.py ipython`), or take other development steps like build the html documentation
    or running benchmarks. The `dev.py` interface is self-documenting, so please see
    `python dev.py --help` and `python dev.py <subcommand> --help` for detailed guidance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在存储库内安装 SciPy（默认情况下在 `build-install` 目录中）。然后您可以运行测试（`python dev.py test`），进入
    IPython（`python dev.py ipython`），或者进行其他开发步骤，如构建 HTML 文档或运行基准测试。`dev.py` 接口具有自我文档功能，请参阅
    `python dev.py --help` 和 `python dev.py <subcommand> --help` 以获取详细指导。
- en: IDE support & editable installs
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 支持和可编辑安装
- en: 'While the `dev.py` interface is our recommended way of working on SciPy, it
    has one limitation: because of the custom install location, SciPy installed using
    `dev.py` will not be recognized automatically within an IDE (e.g., for running
    a script via a “run” button, or setting breakpoints visually). This will work
    better with an *in-place build* (or “editable install”).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `dev.py` 接口是我们在 SciPy 上推荐的工作方式，但它有一个限制：由于自定义安装位置的原因，使用 `dev.py` 安装的 SciPy
    将不会在 IDE 中被自动识别（例如，通过“运行”按钮运行脚本或者通过视觉设置断点）。这在 *就地构建*（或“可编辑安装”）中可以更好地工作。
- en: Editable installs are supported. It is important to understand that **you may
    use either an editable install or dev.py in a given repository clone, but not
    both**. If you use editable installs, you have to use `pytest` and other development
    tools directly instead of using `dev.py`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 支持可编辑安装。重要的是要理解 **在给定的存储库克隆中，您可以使用可编辑安装或 dev.py，但不能两者都用**。如果使用可编辑安装，您必须直接使用
    `pytest` 和其他开发工具，而不是使用 `dev.py`。
- en: 'To use an editable install, ensure you start from a clean repository (run `git
    clean -xdf` if you’ve built with `dev.py` before) and have all dependencies set
    up correctly as described higher up on this page. Then do:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使用可编辑安装，请确保从干净的存储库开始（如果之前使用过 `dev.py`，请运行 `git clean -xdf`），并且如本页面上方描述的那样正确设置所有依赖项。然后执行：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When making changes to SciPy code, including to compiled code, there is no need
    to manually rebuild or reinstall. When you run `git clean -xdf`, which removes
    the built extension modules, remember to also uninstall SciPy with `pip uninstall
    scipy`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对 SciPy 代码进行更改时，包括编译代码，无需手动重新构建或重新安装。当您运行 `git clean -xdf` 时，它会删除构建的扩展模块，同时记住也要使用
    `pip uninstall scipy` 卸载 SciPy。
- en: See the [meson-python](https://mesonbuild.com/meson-python/) documentation on
    editable installs for more details on how things work under the hood.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [meson-python](https://mesonbuild.com/meson-python/) 文档中有关可编辑安装更多细节的介绍。
- en: Customizing builds
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义构建
- en: '[Compiler selection and customizing a build](compilers_and_options.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[选择编译器和自定义构建](compilers_and_options.html)'
- en: '[BLAS and LAPACK](blas_lapack.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[BLAS 和 LAPACK](blas_lapack.html)'
- en: '[Cross compilation](cross_compilation.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[交叉编译](cross_compilation.html)'
- en: '[Building redistributable binaries](redistributable_binaries.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建可重分发的二进制文件](redistributable_binaries.html)'
- en: Background information
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景信息
- en: '[Understanding Meson](understanding_meson.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 Meson](understanding_meson.html)'
- en: '[Introspecting build steps](introspecting_a_build.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内省构建步骤](introspecting_a_build.html)'
- en: '[Meson and `distutils` ways of doing things](distutils_equivalents.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meson 和 `distutils` 的工作方式](distutils_equivalents.html)'
