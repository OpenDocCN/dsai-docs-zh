- en: Multithreaded Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/random/multithreading.html](https://numpy.org/doc/1.26/reference/random/multithreading.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The four core distributions ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random"), [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"), [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"), and [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")) all allow existing arrays to be filled
    using the `out` keyword argument. Existing arrays need to be contiguous and well-behaved
    (writable and aligned). Under normal circumstances, arrays created using the common
    constructors such as [`numpy.empty`](../generated/numpy.empty.html#numpy.empty
    "numpy.empty") will satisfy these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: This example makes use of Python 3 [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
    "(in Python v3.11)") to fill an array using multiple threads. Threads are long-lived
    so that repeated calls do not require any additional overheads from thread creation.
  prefs: []
  type: TYPE_NORMAL
- en: The random numbers generated are reproducible in the sense that the same seed
    will produce the same outputs, given that the number of threads does not change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The multithreaded random number generator can be used to fill an array. The
    `values` attributes shows the zero-value before the fill and the random value
    after.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The time required to produce using multiple threads can be compared to the time
    required to generate using a single thread.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The single threaded call directly uses the BitGenerator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The gains are substantial and the scaling is reasonable even for arrays that
    are only moderately large. The gains are even larger when compared to a call that
    does not use an existing array due to array creation overhead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that if *threads* is not set by the user, it will be determined by *multiprocessing.cpu_count()*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
