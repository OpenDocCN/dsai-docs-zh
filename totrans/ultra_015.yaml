- en: Oriented Bounding Boxes Object Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/tasks/obb/`](https://docs.ultralytics.com/tasks/obb/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Oriented object detection goes a step further than object detection and introduce
    an extra angle to locate objects more accurate in an image.
  prefs: []
  type: TYPE_NORMAL
- en: The output of an oriented object detector is a set of rotated bounding boxes
    that exactly enclose the objects in the image, along with class labels and confidence
    scores for each box. Object detection is a good choice when you need to identify
    objects of interest in a scene, but don't need to know exactly where the object
    is or its exact shape.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: YOLOv8 OBB models use the `-obb` suffix, i.e. `yolov8n-obb.pt` and are pretrained
    on [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml).
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/Z7Z9pHF8wJc`](https://www.youtube.com/embed/Z7Z9pHF8wJc)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Object Detection using Ultralytics YOLOv8 Oriented Bounding Boxes
    (YOLOv8-OBB) |'
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/uZ7SymQfqKI`](https://www.youtube.com/embed/uZ7SymQfqKI)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Object Detection with YOLOv8-OBB using Ultralytics HUB |'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Samples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Ships Detection using OBB | Vehicle Detection using OBB |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![Ships Detection using OBB](img/9746d59315102b8321668f12dc976c22.png) |
    ![Vehicle Detection using OBB](img/afa9d27b5f1ea8d233f8d5945949d05c.png) |'
  prefs: []
  type: TYPE_TB
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models/v8)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YOLOv8 pretrained OBB models are shown here, which are pretrained on the [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models)
    download automatically from the latest Ultralytics [release](https://github.com/ultralytics/assets/releases)
    on first use.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Model | size ^((pixels)) | mAP^(test 50) | Speed ^(CPU ONNX'
  prefs: []
  type: TYPE_NORMAL
- en: (ms)) | Speed ^(A100 TensorRT
  prefs: []
  type: TYPE_NORMAL
- en: (ms)) | params ^((M)) | FLOPs ^((B)) |
  prefs: []
  type: TYPE_NORMAL
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [YOLOv8n-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-obb.pt)
    | 1024 | 78.0 | 204.77 | 3.57 | 3.1 | 23.3 |'
  prefs: []
  type: TYPE_TB
- en: '| [YOLOv8s-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-obb.pt)
    | 1024 | 79.5 | 424.88 | 4.07 | 11.4 | 76.3 |'
  prefs: []
  type: TYPE_TB
- en: '| [YOLOv8m-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-obb.pt)
    | 1024 | 80.5 | 763.48 | 7.61 | 26.4 | 208.6 |'
  prefs: []
  type: TYPE_TB
- en: '| [YOLOv8l-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-obb.pt)
    | 1024 | 80.7 | 1278.42 | 11.83 | 44.5 | 433.8 |'
  prefs: []
  type: TYPE_TB
- en: '| [YOLOv8x-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-obb.pt)
    | 1024 | 81.36 | 1759.10 | 13.23 | 69.5 | 676.7 |'
  prefs: []
  type: TYPE_TB
- en: '**mAP^(test)** values are for single-model multiscale on [DOTAv1 test](https://captain-whu.github.io/DOTA/index.html)
    dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reproduce by `yolo val obb data=DOTAv1.yaml device=0 split=test` and submit
    merged results to [DOTA evaluation](https://captain-whu.github.io/DOTA/evaluation.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Speed** averaged over DOTAv1 val images using an [Amazon EC2 P4d](https://aws.amazon.com/ec2/instance-types/p4/)
    instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reproduce by `yolo val obb data=DOTAv1.yaml batch=1 device=0|cpu`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Train YOLOv8n-obb on the `dota8.yaml` dataset for 100 epochs at image size 640\.
    For a full list of available arguments see the Configuration page.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Dataset format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OBB dataset format can be found in detail in the Dataset Guide.
  prefs: []
  type: TYPE_NORMAL
- en: Val
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Validate trained YOLOv8n-obb model accuracy on the DOTA8 dataset. No argument
    need to passed as the `model` retains its training `data` and arguments as model
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Predict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use a trained YOLOv8n-obb model to run predictions on images.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See full `predict` mode details in the Predict page.
  prefs: []
  type: TYPE_NORMAL
- en: Export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Export a YOLOv8n-obb model to a different format like ONNX, CoreML, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Available YOLOv8-obb export formats are in the table below. You can export to
    any format using the `format` argument, i.e. `format='onnx'` or `format='engine'`.
    You can predict or validate directly on exported models, i.e. `yolo predict model=yolov8n-obb.onnx`.
    Usage examples are shown for your model after export completes.
  prefs: []
  type: TYPE_NORMAL
- en: '| Format | `format` Argument | Model | Metadata | Arguments |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [PyTorch](https://pytorch.org/) | - | `yolov8n-obb.pt` | ✅ | - |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | `torchscript` | `yolov8n-obb.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | `onnx` | `yolov8n-obb.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | `openvino` | `yolov8n-obb_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
  prefs: []
  type: TYPE_TB
- en: '| TensorRT | `engine` | `yolov8n-obb.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| CoreML | `coreml` | `yolov8n-obb.mlpackage` | ✅ | `imgsz`, `half`, `int8`,
    `nms`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | `saved_model` | `yolov8n-obb_saved_model/` | ✅ | `imgsz`,
    `keras`, `int8`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | `pb` | `yolov8n-obb.pb` | ❌ | `imgsz`, `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | `tflite` | `yolov8n-obb.tflite` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| TF Edge TPU | `edgetpu` | `yolov8n-obb_edgetpu.tflite` | ✅ | `imgsz` |'
  prefs: []
  type: TYPE_TB
- en: '| TF.js | `tfjs` | `yolov8n-obb_web_model/` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | `paddle` | `yolov8n-obb_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | `ncnn` | `yolov8n-obb_ncnn_model/` | ✅ | `imgsz`, `half`, `batch`
    |'
  prefs: []
  type: TYPE_TB
- en: See full `export` details in the Export page.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are Oriented Bounding Boxes (OBB) and how do they differ from regular bounding
    boxes?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Oriented Bounding Boxes (OBB) include an additional angle to enhance object
    localization accuracy in images. Unlike regular bounding boxes, which are axis-aligned
    rectangles, OBBs can rotate to fit the orientation of the object better. This
    is particularly useful for applications requiring precise object placement, such
    as aerial or satellite imagery (Dataset Guide).
  prefs: []
  type: TYPE_NORMAL
- en: How do I train a YOLOv8n-obb model using a custom dataset?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To train a YOLOv8n-obb model with a custom dataset, follow the example below
    using Python or CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For more training arguments, check the Configuration section.
  prefs: []
  type: TYPE_NORMAL
- en: What datasets can I use for training YOLOv8-OBB models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: YOLOv8-OBB models are pretrained on datasets like [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    but you can use any dataset formatted for OBB. Detailed information on OBB dataset
    formats can be found in the Dataset Guide.
  prefs: []
  type: TYPE_NORMAL
- en: How can I export a YOLOv8-OBB model to ONNX format?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exporting a YOLOv8-OBB model to ONNX format is straightforward using either
    Python or CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For more export formats and details, refer to the Export page.
  prefs: []
  type: TYPE_NORMAL
- en: How do I validate the accuracy of a YOLOv8n-obb model?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To validate a YOLOv8n-obb model, you can use Python or CLI commands as shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See full validation details in the Val section.
  prefs: []
  type: TYPE_NORMAL
