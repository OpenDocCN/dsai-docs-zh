- en: numpy.linalg.matrix_rank
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.linalg.matrix_rank.html](https://numpy.org/doc/1.26/reference/generated/numpy.linalg.matrix_rank.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return matrix rank of array using SVD method
  prefs: []
  type: TYPE_NORMAL
- en: Rank of the array is the number of singular values of the array that are greater
    than *tol*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.14: Can now operate on stacks of matrices'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**{(M,), (…, M, N)} array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input vector or stack of matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**(…) array_like, float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Threshold below which SVD values are considered zero. If *tol* is None, and
    `S` is an array with singular values for *M*, and `eps` is the epsilon value for
    datatype of `S`, then *tol* is set to `S.max() * max(M, N) * eps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.14: Broadcasted against the stack of matrices'
  prefs: []
  type: TYPE_NORMAL
- en: '**hermitian**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, *A* is assumed to be Hermitian (symmetric if real-valued), enabling
    a more efficient method for finding singular values. Defaults to False.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rank**(…) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Rank of A.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The default threshold to detect rank deficiency is a test on the magnitude of
    the singular values of *A*. By default, we identify singular values less than
    `S.max() * max(M, N) * eps` as indicating rank deficiency (with the symbols defined
    above). This is the algorithm MATLAB uses [1]. It also appears in *Numerical recipes*
    in the discussion of SVD solutions for linear least squares [2].
  prefs: []
  type: TYPE_NORMAL
- en: 'This default threshold is designed to detect rank deficiency accounting for
    the numerical errors of the SVD computation. Imagine that there is a column in
    *A* that is an exact (in floating point) linear combination of other columns in
    *A*. Computing the SVD on *A* will not produce a singular value exactly equal
    to 0 in general: any difference of the smallest SVD value from 0 will be caused
    by numerical imprecision in the calculation of the SVD. Our threshold for small
    SVD values takes this numerical imprecision into account, and the default threshold
    will detect such numerical rank deficiency. The threshold may declare a matrix
    *A* rank deficient even if the linear combination of some columns of *A* is not
    exactly equal to another column of *A* but only numerically very close to another
    column of *A*.'
  prefs: []
  type: TYPE_NORMAL
- en: We chose our default threshold because it is in wide use. Other thresholds are
    possible. For example, elsewhere in the 2007 edition of *Numerical recipes* there
    is an alternative threshold of `S.max() * np.finfo(A.dtype).eps / 2. * np.sqrt(m
    + n + 1.)`. The authors describe this threshold as being based on “expected roundoff
    error” (p 71).
  prefs: []
  type: TYPE_NORMAL
- en: The thresholds above deal with floating point roundoff error in the calculation
    of the SVD. However, you may have more information about the sources of error
    in *A* that would make you consider other tolerance values to detect *effective*
    rank deficiency. The most useful measure of the tolerance depends on the operations
    you intend to use on your matrix. For example, if your data come from uncertain
    measurements with uncertainties greater than floating point epsilon, choosing
    a tolerance near that uncertainty may be preferable. The tolerance may be absolute
    if the uncertainties are absolute rather than relative.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB reference documentation, “Rank” [https://www.mathworks.com/help/techdoc/ref/rank.html](https://www.mathworks.com/help/techdoc/ref/rank.html)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery, “Numerical
    Recipes (3rd edition)”, Cambridge University Press, 2007, page 795.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
