- en: numpy.take_along_axis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.take_along_axis
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html](https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html](https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Take values from the input array by matching 1d index and data slices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过匹配1d索引和数据切片从输入数组中取值。
- en: This iterates over matching 1d slices oriented along the specified axis in the
    index and data arrays, and uses the former to look up values in the latter. These
    slices can be different lengths.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这在索引和数据数组上沿指定轴迭代匹配的1d切片，然后使用前者在后者中查找值。这些切片可以具有不同的长度。
- en: Functions returning an index along an axis, like [`argsort`](numpy.argsort.html#numpy.argsort
    "numpy.argsort") and [`argpartition`](numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), produce suitable indices for this function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 返回沿轴线的索引的函数，如 [`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort")
    和 [`argpartition`](numpy.argpartition.html#numpy.argpartition "numpy.argpartition")，可为此函数生成合适的索引。
- en: New in version 1.15.0.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.15.0 中的新增功能。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**arr**ndarray (Ni…, M, Nk…)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**arr**ndarray（Ni…，M，Nk…）'
- en: Source array
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 源数组
- en: '**indices**ndarray (Ni…, J, Nk…)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**indices**ndarray（Ni…，J，Nk…）'
- en: Indices to take along each 1d slice of *arr*. This must match the dimension
    of arr, but dimensions Ni and Nj only need to broadcast against *arr*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用于每个1d切片的索引。这必须与arr的维度相匹配，但是维度Ni和Nj只需要对arr进行广播。
- en: '**axis**int'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**int'
- en: The axis to take 1d slices along. If axis is None, the input array is treated
    as if it had first been flattened to 1d, for consistency with [`sort`](numpy.sort.html#numpy.sort
    "numpy.sort") and [`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于沿着某个轴切片的轴。如果轴为 None，则对输入数组进行1d扁平化处理，以保持与 [`sort`](numpy.sort.html#numpy.sort
    "numpy.sort") 和 [`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort")
    一致性。
- en: 'Returns:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'out: ndarray (Ni…, J, Nk…)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: out：ndarray（Ni…，J，Nk…）
- en: The indexed result.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 索引结果。
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`take`](numpy.take.html#numpy.take "numpy.take")'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`take`](numpy.take.html#numpy.take "numpy.take")'
- en: Take along an axis, using the same indices for every 1d slice
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 沿轴线进行处理，对每个1d切片使用相同的索引
- en: '[`put_along_axis`](numpy.put_along_axis.html#numpy.put_along_axis "numpy.put_along_axis")'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`put_along_axis`](numpy.put_along_axis.html#numpy.put_along_axis "numpy.put_along_axis")'
- en: Put values into the destination array by matching 1d index and data slices
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过匹配1d索引和数据切片将值放入目标数组
- en: Notes
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'This is equivalent to (but faster than) the following use of [`ndindex`](numpy.ndindex.html#numpy.ndindex
    "numpy.ndindex") and [`s_`](numpy.s_.html#numpy.s_ "numpy.s_"), which sets each
    of `ii` and `kk` to a tuple of indices:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这等效于（但比其更快）以下对 [`ndindex`](numpy.ndindex.html#numpy.ndindex "numpy.ndindex")
    和 [`s_`](numpy.s_.html#numpy.s_ "numpy.s_") 的使用，将 `ii` 和 `kk` 的每个设置为索引元组：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Equivalently, eliminating the inner loop, the last two lines would be:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，消除内部循环，最后两行将是：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: For this sample array
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例数组
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can sort either by using sort directly, or argsort and this function
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接使用 sort 或 argsort 和此函数进行排序
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The same works for max and min, if you maintain the trivial dimension with
    `keepdims`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果保持与 "keepdims" 的显式维度：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we want to get the max and min at the same time, we can stack the indices
    first
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们同时想要获得最大值和最小值，我们可以首先堆叠索引
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
