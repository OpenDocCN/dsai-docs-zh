["```py\nscipy.stats.fit(dist, data, bounds=None, *, guess=None, method='mle', optimizer=<function differential_evolution>)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> rng = np.random.default_rng()\n>>> dist = stats.nbinom\n>>> shapes = (5, 0.5)\n>>> data = dist.rvs(*shapes, size=1000, random_state=rng) \n```", "```py\n>>> bounds = [(0, 30), (0, 1)]\n>>> res = stats.fit(dist, data, bounds) \n```", "```py\n>>> res.params\nFitParams(n=5.0, p=0.5028157644634368, loc=0.0)  # may vary \n```", "```py\n>>> import matplotlib.pyplot as plt  # matplotlib must be installed to plot\n>>> res.plot()\n>>> plt.show() \n```", "```py\n>>> bounds = {'n': (0, 30)}  # omit parameter p using a `dict`\n>>> res2 = stats.fit(dist, data, bounds)\n>>> res2.params\nFitParams(n=5.0, p=0.5016492009232932, loc=0.0)  # may vary \n```", "```py\n>>> bounds = {'n': (6, 6)}  # fix parameter `n`\n>>> res3 = stats.fit(dist, data, bounds)\n>>> res3.params\nFitParams(n=6.0, p=0.5486556076755706, loc=0.0)  # may vary\n>>> res3.nllf() > res.nllf()\nTrue  # may vary \n```", "```py\n>>> from scipy.optimize import differential_evolution\n>>> rng = np.random.default_rng()\n>>> def optimizer(fun, bounds, *, integrality):\n...     return differential_evolution(fun, bounds, strategy='best2bin',\n...                                   seed=rng, integrality=integrality)\n>>> bounds = [(0, 30), (0, 1)]\n>>> res4 = stats.fit(dist, data, bounds, optimizer=optimizer)\n>>> res4.params\nFitParams(n=5.0, p=0.5015183149259951, loc=0.0) \n```"]