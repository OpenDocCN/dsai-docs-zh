- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Original text：[https://docs.sympy.org/latest/tutorials/intro-tutorial/intro.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/intro.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/intro.html)
- en: '## What is Symbolic Computation?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 什么是符号计算？'
- en: Symbolic computation deals with the computation of mathematical objects symbolically.
    This means that the mathematical objects are represented exactly, not approximately,
    and mathematical expressions with unevaluated variables are left in symbolic form.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 符号计算处理数学对象的符号计算。这意味着数学对象被精确地表示，而不是近似表示，并且带有未评估变量的数学表达式以符号形式保留。
- en: Let’s take an example. Say we wanted to use the built-in Python functions to
    compute square roots. We might do something like this
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子。假设我们想要使用内置的 Python 函数来计算平方根。我们可能会做这样的事情
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 9 is a perfect square, so we got the exact answer, 3\. But suppose we computed
    the square root of a number that isn’t a perfect square
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 9 是一个完全平方数，所以我们得到了精确答案，3。但假设我们计算的是不是完全平方数的平方根
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we got an approximate result. 2.82842712475 is not the exact square root
    of 8 (indeed, the actual square root of 8 cannot be represented by a finite decimal,
    since it is an irrational number). If all we cared about was the decimal form
    of the square root of 8, we would be done.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们得到了一个近似结果。2.82842712475 并不是 8 的精确平方根（事实上，8 的实际平方根不能用有限小数表示，因为它是一个无理数）。如果我们只关心
    8 的小数形式的平方根，我们就结束了。
- en: But suppose we want to go further. Recall that \(\sqrt{8} = \sqrt{4\cdot 2}
    = 2\sqrt{2}\). We would have a hard time deducing this from the above result.
    This is where symbolic computation comes in. With a symbolic computation system
    like SymPy, square roots of numbers that are not perfect squares are left unevaluated
    by default
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设我们想进一步。回想一下 \(\sqrt{8} = \sqrt{4\cdot 2} = 2\sqrt{2}\)。我们很难从上面的结果推断出这一点。这就是符号计算发挥作用的地方。使用类似
    SymPy 的符号计算系统，不是完全平方数的数字的平方根默认保留为未评估状态
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Furthermore—and this is where we start to see the real power of symbolic computation—symbolic
    results can be symbolically simplified.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外——这是我们开始看到符号计算真正力量的地方——符号结果可以被符号化简。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A More Interesting Example
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更有趣的例子
- en: The above example starts to show how we can manipulate irrational numbers exactly
    using SymPy. But it is much more powerful than that. Symbolic computation systems
    (which by the way, are also often called computer algebra systems, or just CASs)
    such as SymPy are capable of computing symbolic expressions with variables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子开始展示了如何使用 SymPy 精确地操作无理数。但它比那更强大。符号计算系统（顺便说一下，它们通常也被称为计算机代数系统，或者只是 CAS）如
    SymPy 能够计算带有变量的符号表达式。
- en: As we will see later, in SymPy, variables are defined using `symbols`. Unlike
    many symbolic manipulation systems, variables in SymPy must be defined before
    they are used (the reason for this will be discussed in the [next section](gotchas.html#tutorial-gotchas-symbols)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们后面将看到的，在 SymPy 中，变量是用 `symbols` 定义的。与许多符号操作系统不同，SymPy 中的变量必须在使用之前定义（这个原因将在[下一节](gotchas.html#tutorial-gotchas-symbols)中讨论）。
- en: Let us define a symbolic expression, representing the mathematical expression
    \(x + 2y\).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个符号表达式，表示数学表达式 \(x + 2y\)。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that we wrote `x + 2*y` just as we would if `x` and `y` were ordinary
    Python variables. But in this case, instead of evaluating to something, the expression
    remains as just `x + 2*y`. Now let us play around with it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们写的 `x + 2*y` 就像我们如果 `x` 和 `y` 是普通的 Python 变量一样。但在这种情况下，而不是评估为某些东西，表达式仍然只是
    `x + 2*y`。现在让我们玩弄一下它：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice something in the above example. When we typed `expr - x`, we did not
    get `x + 2*y - x`, but rather just `2*y`. The `x` and the `-x` automatically canceled
    one another. This is similar to how `sqrt(8)` automatically turned into `2*sqrt(2)`
    above. This isn’t always the case in SymPy, however:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上面示例中的一些情况。当我们输入 `expr - x` 时，我们没有得到 `x + 2*y - x`，而只是得到 `2*y`。`x` 和 `-x`
    自动抵消了。这类似于上面 `sqrt(8)` 自动变成 `2*sqrt(2)` 的情况。然而在 SymPy 中，并非总是这样：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we might have expected \(x(x + 2y)\) to transform into \(x^2 + 2xy\),
    but instead we see that the expression was left alone. This is a common theme
    in SymPy. Aside from obvious simplifications like \(x - x = 0\) and \(\sqrt{8}
    = 2\sqrt{2}\), most simplifications are not performed automatically. This is because
    we might prefer the factored form \(x(x + 2y)\), or we might prefer the expanded
    form \(x^2 + 2xy\). Both forms are useful in different circumstances. In SymPy,
    there are functions to go from one form to the other
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可能希望 \(x(x + 2y)\) 转换成 \(x^2 + 2xy\)，但实际上我们看到表达式保持不变。这是 SymPy 中的一个常见主题。除了像
    \(x - x = 0\) 和 \(\sqrt{8} = 2\sqrt{2}\) 这样的显而易见的简化外，大多数简化不会自动执行。这是因为我们可能更喜欢因式分解形式
    \(x(x + 2y)\)，或者更喜欢展开形式 \(x^2 + 2xy\)。在不同的情况下，两种形式都是有用的。在 SymPy 中，有函数可以在这两种形式之间转换。
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Power of Symbolic Computation
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号计算的威力
- en: The real power of a symbolic computation system such as SymPy is the ability
    to do all sorts of computations symbolically. SymPy can simplify expressions,
    compute derivatives, integrals, and limits, solve equations, work with matrices,
    and much, much more, and do it all symbolically. It includes modules for plotting,
    printing (like 2D pretty printed output of math formulas, or \(\mathrm{\LaTeX}\)),
    code generation, physics, statistics, combinatorics, number theory, geometry,
    logic, and more. Here is a small sampling of the sort of symbolic power SymPy
    is capable of, to whet your appetite.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个符号计算系统（如 SymPy）真正的力量在于能够进行各种各样的符号计算。SymPy 能够简化表达式、计算导数、积分和极限、解方程、处理矩阵等等，并且全部都是符号计算。它包括绘图、打印（例如数学公式的二维漂亮打印输出，或者
    \(\mathrm{\LaTeX}\)）、代码生成、物理学、统计学、组合数学、数论、几何学、逻辑学等模块。这里是 SymPy 能够实现的一小部分符号计算能力，以激发您的兴趣。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will make all further examples pretty print with unicode characters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使得所有后续的示例都能使用 unicode 字符进行漂亮打印。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Take the derivative of \(\sin{(x)}e^x\).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对 \(\sin{(x)}e^x\) 求导数。
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Compute \(\int(e^x\sin{(x)} + e^x\cos{(x)})\,dx\).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 \(\int(e^x\sin{(x)} + e^x\cos{(x)})\,dx\)。
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Compute \(\int_{-\infty}^\infty \sin{(x^2)}\,dx\).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 \(\int_{-\infty}^\infty \sin{(x^2)}\,dx\)。
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Find \(\lim_{x\to 0}\frac{\sin{(x)}}{x}\).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 求 \(\lim_{x\to 0}\frac{\sin{(x)}}{x}\)。
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Solve \(x^2 - 2 = 0\).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解 \(x^2 - 2 = 0\)。
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Solve the differential equation \(y'' - y = e^t\).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 解微分方程 \(y'' - y = e^t\)。
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Find the eigenvalues of \(\left[\begin{smallmatrix}1 & 2\\2 & 2\end{smallmatrix}\right]\).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 求 \(\left[\begin{smallmatrix}1 & 2\\2 & 2\end{smallmatrix}\right]\) 的特征值。
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Rewrite the Bessel function \(J_{\nu}\left(z\right)\) in terms of the spherical
    Bessel function \(j_\nu(z)\).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将贝塞尔函数 \(J_{\nu}\left(z\right)\) 重写为球贝塞尔函数 \(j_\nu(z)\) 的形式。
- en: '[PRE17]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Print \(\int_{0}^{\pi} \cos^{2}{\left (x \right )}\, dx\) using \(\mathrm{\LaTeX}\).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 \(\mathrm{\LaTeX}\)，打印 \(\int_{0}^{\pi} \cos^{2}{\left (x \right )}\, dx\)。
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Why SymPy?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 SymPy？
- en: There are many computer algebra systems out there. [This](https://en.wikipedia.org/wiki/List_of_computer_algebra_systems)
    Wikipedia article lists many of them. What makes SymPy a better choice than the
    alternatives?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多计算代数系统可供选择。[这篇文章](https://en.wikipedia.org/wiki/List_of_computer_algebra_systems)列出了许多。SymPy
    为何比其他选择更好呢？
- en: First off, SymPy is completely free. It is open source, and licensed under the
    liberal BSD license, so you can modify the source code and even sell it if you
    want to. This contrasts with popular commercial systems like Maple or Mathematica
    that cost hundreds of dollars in licenses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，SymPy 是完全免费的。它是开源的，并且在宽松的 BSD 许可下发布，因此您可以修改源代码，甚至出售它。这与像 Maple 或 Mathematica
    这样的流行商业系统形成对比，后者需要花费数百美元购买许可。
- en: 'Second, SymPy uses Python. Most computer algebra systems invent their own language.
    Not SymPy. SymPy is written entirely in Python, and is executed entirely in Python.
    This means that if you already know Python, it is much easier to get started with
    SymPy, because you already know the syntax (and if you don’t know Python, it is
    really easy to learn). We already know that Python is a well-designed, battle-tested
    language. The SymPy developers are confident in their abilities in writing mathematical
    software, but programming language design is a completely different thing. By
    reusing an existing language, we are able to focus on those things that matter:
    the mathematics.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，SymPy 使用 Python。大多数计算代数系统都会发明自己的语言。但 SymPy 不同。SymPy 完全用 Python 编写，并且完全在 Python
    中执行。这意味着如果您已经了解 Python，那么使用 SymPy 就更容易上手，因为您已经熟悉语法（而如果您尚未了解 Python，则学习起来也非常简单）。我们已经知道
    Python 是一种经过良好设计和经受过考验的语言。SymPy 的开发者对自己编写数学软件的能力很有信心，但编程语言设计是完全不同的事情。通过重复使用现有语言，我们能够专注于那些真正重要的事情：数学。
- en: Another computer algebra system, Sage also uses Python as its language. But
    Sage is large, with a download of over a gigabyte. An advantage of SymPy is that
    it is lightweight. In addition to being relatively small, it has no dependencies
    other than Python, so it can be used almost anywhere easily. Furthermore, the
    goals of Sage and the goals of SymPy are different. Sage aims to be a full featured
    system for mathematics, and aims to do so by compiling all the major open source
    mathematical systems together into one. When you call some function in Sage, such
    as `integrate`, it calls out to one of the open source packages that it includes.
    In fact, SymPy is included in Sage. SymPy on the other hand aims to be an independent
    system, with all the features implemented in SymPy itself.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个计算机代数系统 Sage 也使用 Python 作为其语言。但是 Sage 很大，下载超过一千兆字节。SymPy 的一个优点是它很轻量级。除了 Python
    之外，它没有其他依赖项，因此几乎可以在任何地方轻松使用。此外，Sage 和 SymPy 的目标不同。Sage 的目标是成为一个完整的数学系统，并通过将所有主要的开源数学系统编译到一起来实现这一目标。当您在
    Sage 中调用某些函数（如`integrate`）时，它会调用其中包含的一个开源包。实际上，SymPy 已包含在 Sage 中。另一方面，SymPy 的目标是成为一个独立的系统，所有功能都在
    SymPy 本身实现。
- en: A final important feature of SymPy is that it can be used as a library. Many
    computer algebra systems focus on being usable in interactive environments, but
    if you wish to automate or extend them, it is difficult to do. With SymPy, you
    can just as easily use it in an interactive Python environment or import it in
    your own Python application. SymPy also provides APIs to make it easy to extend
    it with your own custom functions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 的另一个重要特点是可以作为一个库来使用。许多计算机代数系统侧重于在交互式环境中的可用性，但如果您希望自动化或扩展它们，这将变得困难。使用 SymPy，您既可以在交互式
    Python 环境中轻松使用它，也可以在您自己的 Python 应用程序中导入它。SymPy 还提供了 API 来方便您使用自定义函数扩展它。
