["```py\nsympy.utilities.misc.as_int(n, strict=True)\n```", "```py\n>>> from sympy.utilities.misc import as_int\n>>> from sympy import sqrt, S \n```", "```py\n>>> as_int(S(3))\n3 \n```", "```py\n>>> big = 1e23\n>>> type(big) is float\nTrue\n>>> big == int(big)\nTrue\n>>> as_int(big)\nTraceback (most recent call last):\n...\nValueError: ... is not an integer\n>>> as_int(big, strict=False)\n99999999999999991611392 \n```", "```py\n>>> one = sqrt(3 + 2*sqrt(2)) - sqrt(2)\n>>> int(one) == 1\nTrue\n>>> as_int(one)\nTraceback (most recent call last):\n...\nValueError: ... is not an integer \n```", "```py\nsympy.utilities.misc.debug(*args)\n```", "```py\nsympy.utilities.misc.debug_decorator(func)\n```", "```py\nsympy.utilities.misc.debugf(string, args)\n```", "```py\nsympy.utilities.misc.filldedent(s, w=70, **kwargs)\n```", "```py\nsympy.utilities.misc.find_executable(executable, path=None)\n```", "```py\nsympy.utilities.misc.func_name(x, short=False)\n```", "```py\n>>> from sympy.utilities.misc import func_name\n>>> from sympy import Matrix\n>>> from sympy.abc import x\n>>> func_name(Matrix.eye(3))\n'MutableDenseMatrix'\n>>> func_name(x < 1)\n'StrictLessThan'\n>>> func_name(x < 1, short=True)\n'Lt' \n```", "```py\nsympy.utilities.misc.ordinal(num)\n```", "```py\nsympy.utilities.misc.rawlines(s)\n```", "```py\n>>> from sympy.utilities.misc import rawlines\n>>> from sympy import TableForm\n>>> s = str(TableForm([[1, 10]], headings=(None, ['a', 'bee'])))\n>>> print(rawlines(s))\n(\n 'a bee\\n'\n '-----\\n'\n '1 10 '\n)\n>>> print(rawlines('''this\n... that'''))\ndedent('''\\\n this\n that''') \n```", "```py\n>>> print(rawlines('''this\n... that\n... '''))\ndedent('''\\\n this\n that\n ''') \n```", "```py\n>>> s = \"\"\"this\n... is a triple '''\n... \"\"\"\n>>> print(rawlines(s))\ndedent(\"\"\"\\\n this\n is a triple '''\n \"\"\") \n```", "```py\n>>> print(rawlines('''this\n... that\n...     '''))\n(\n 'this\\n'\n 'that\\n'\n '    '\n) \n```", "```py\nsympy.utilities.misc.replace(string, *reps)\n```", "```py\n>>> from sympy.utilities.misc import replace\n>>> replace('foo', {'oo': 'ar', 'f': 'b'})\n'bar'\n>>> replace(\"spamham sha\", (\"spam\", \"eggs\"), (\"sha\",\"md5\"))\n'eggsham md5' \n```", "```py\n>>> reps = [\n...     ('ab', 'x'),\n...     ('bc', 'y')]\n>>> replace('abc', *reps) in ('xc', 'ay')\nTrue \n```", "```py\nsympy.utilities.misc.strlines(s, c=64, short=False)\n```", "```py\n>>> from sympy.utilities.misc import strlines\n>>> q = 'this is a long string that should be broken into shorter lines'\n>>> print(strlines(q, 40))\n(\n'this is a long string that should be b'\n'roken into shorter lines'\n)\n>>> q == (\n... 'this is a long string that should be b'\n... 'roken into shorter lines'\n... )\nTrue \n```", "```py\nsympy.utilities.misc.translate(s, a, b=None, c=None)\n```", "```py\n>>> from sympy.utilities.misc import translate\n>>> abc = 'abc'\n>>> translate(abc, None, 'a')\n'bc'\n>>> translate(abc, {'a': 'x'}, 'c')\n'xb'\n>>> translate(abc, {'abc': 'x', 'a': 'y'})\n'x' \n```", "```py\n>>> translate('abcd', 'ac', 'AC', 'd')\n'AbC' \n```", "```py\n>>> translate(abc, {'ab': 'x', 'bc': 'y'}) in ('xc', 'ay')\nTrue \n```"]