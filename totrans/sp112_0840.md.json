["```py\nscipy.special.fdtr(dfn, dfd, x, out=None) = <ufunc 'fdtr'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import fdtr\n>>> fdtr(1, 2, 1)\n0.5773502691896258 \n```", "```py\n>>> x = np.array([0.5, 2., 3.])\n>>> fdtr(1, 2, x)\narray([0.4472136 , 0.70710678, 0.77459667]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> dfn_parameters = [1, 5, 10, 50]\n>>> dfd_parameters = [1, 1, 2, 3]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(dfn_parameters, dfd_parameters,\n...                            linestyles))\n>>> x = np.linspace(0, 30, 1000)\n>>> fig, ax = plt.subplots()\n>>> for parameter_set in parameters_list:\n...     dfn, dfd, style = parameter_set\n...     fdtr_vals = fdtr(dfn, dfd, x)\n...     ax.plot(x, fdtr_vals, label=rf\"$d_n={dfn},\\, d_d={dfd}$\",\n...             ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$x$\")\n>>> ax.set_title(\"F distribution cumulative distribution function\")\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import f\n>>> dfn, dfd = 1, 2\n>>> x = 1\n>>> fdtr_res = fdtr(dfn, dfd, x)  # this will often be faster than below\n>>> f_dist_res = f(dfn, dfd).cdf(x)\n>>> fdtr_res == f_dist_res  # test that results are equal\nTrue \n```"]