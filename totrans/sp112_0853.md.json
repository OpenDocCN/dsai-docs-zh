["```py\nscipy.special.nbdtr(k, n, p, out=None) = <ufunc 'nbdtr'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import nbdtr\n>>> nbdtr(10, 5, 0.5)\n0.940765380859375 \n```", "```py\n>>> nbdtr([5, 10, 15], 10, 0.5)\narray([0.15087891, 0.58809853, 0.88523853]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> k = np.arange(130)\n>>> n_parameters = [20, 20, 20, 80]\n>>> p_parameters = [0.2, 0.5, 0.8, 0.5]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(p_parameters, n_parameters,\n...                            linestyles))\n>>> fig, ax = plt.subplots(figsize=(8, 8))\n>>> for parameter_set in parameters_list:\n...     p, n, style = parameter_set\n...     nbdtr_vals = nbdtr(k, n, p)\n...     ax.plot(k, nbdtr_vals, label=rf\"$n={n},\\, p={p}$\",\n...             ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$k$\")\n>>> ax.set_title(\"Negative binomial cumulative distribution function\")\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import nbinom\n>>> k, n, p = 5, 3, 0.5\n>>> nbdtr_res = nbdtr(k, n, p)  # this will often be faster than below\n>>> stats_res = nbinom(n, p).cdf(k)\n>>> stats_res, nbdtr_res  # test that results are equal\n(0.85546875, 0.85546875) \n```", "```py\n>>> k = np.array([[5], [10], [15]])\n>>> p = np.array([0.3, 0.5, 0.7, 0.9])\n>>> k.shape, p.shape\n((3, 1), (4,)) \n```", "```py\n>>> nbdtr(k, 5, p)\narray([[0.15026833, 0.62304687, 0.95265101, 0.9998531 ],\n [0.48450894, 0.94076538, 0.99932777, 0.99999999],\n [0.76249222, 0.99409103, 0.99999445, 1\\.        ]]) \n```"]