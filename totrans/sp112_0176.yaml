- en: scipy.interpolate.RBFInterpolator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RBFInterpolator.html#scipy.interpolate.RBFInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RBFInterpolator.html#scipy.interpolate.RBFInterpolator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Radial basis function (RBF) interpolation in N dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**(npoints, ndims) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 2-D array of data point coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '**d**(npoints, …) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: N-D array of data values at *y*. The length of *d* along the first axis must
    be equal to the length of *y*. Unlike some interpolators, the interpolation axis
    cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**neighbors**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If specified, the value of the interpolant at each evaluation point will be
    computed using only this many nearest data points. All the data points are used
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**smoothing**float or (npoints, ) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Smoothing parameter. The interpolant perfectly fits the data when this is set
    to 0\. For large values, the interpolant approaches a least squares fit of a polynomial
    with the specified degree. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**kernel**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of RBF. This should be one of
  prefs: []
  type: TYPE_NORMAL
- en: '‘linear’ : `-r`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘thin_plate_spline’ : `r**2 * log(r)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘cubic’ : `r**3`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘quintic’ : `-r**5`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘multiquadric’ : `-sqrt(1 + r**2)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘inverse_multiquadric’ : `1/sqrt(1 + r**2)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘inverse_quadratic’ : `1/(1 + r**2)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘gaussian’ : `exp(-r**2)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is ‘thin_plate_spline’.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape parameter that scales the input to the RBF. If *kernel* is ‘linear’, ‘thin_plate_spline’,
    ‘cubic’, or ‘quintic’, this defaults to 1 and can be ignored because it has the
    same effect as scaling the smoothing parameter. Otherwise, this must be specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**degree**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the added polynomial. For some RBFs the interpolant may not be well-posed
    if the polynomial degree is too small. Those RBFs and their corresponding minimum
    degrees are
  prefs: []
  type: TYPE_NORMAL
- en: '‘multiquadric’ : 0'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘linear’ : 0'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘thin_plate_spline’ : 1'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘cubic’ : 1'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘quintic’ : 2'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value is the minimum degree for *kernel* or 0 if there is no minimum
    degree. Set this to -1 for no added polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`NearestNDInterpolator`](scipy.interpolate.NearestNDInterpolator.html#scipy.interpolate.NearestNDInterpolator
    "scipy.interpolate.NearestNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CloughTocher2DInterpolator`](scipy.interpolate.CloughTocher2DInterpolator.html#scipy.interpolate.CloughTocher2DInterpolator
    "scipy.interpolate.CloughTocher2DInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: An RBF is a scalar valued function in N-dimensional space whose value at \(x\)
    can be expressed in terms of \(r=||x - c||\), where \(c\) is the center of the
    RBF.
  prefs: []
  type: TYPE_NORMAL
- en: An RBF interpolant for the vector of data values \(d\), which are from locations
    \(y\), is a linear combination of RBFs centered at \(y\) plus a polynomial with
    a specified degree. The RBF interpolant is written as
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) = K(x, y) a + P(x) b,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(K(x, y)\) is a matrix of RBFs with centers at \(y\) evaluated at the
    points \(x\), and \(P(x)\) is a matrix of monomials, which span polynomials with
    the specified degree, evaluated at \(x\). The coefficients \(a\) and \(b\) are
    the solution to the linear equations
  prefs: []
  type: TYPE_NORMAL
- en: \[(K(y, y) + \lambda I) a + P(y) b = d\]
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: \[P(y)^T a = 0,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\lambda\) is a non-negative smoothing parameter that controls how well
    we want to fit the data. The data are fit exactly when the smoothing parameter
    is 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above system is uniquely solvable if the following requirements are met:'
  prefs: []
  type: TYPE_NORMAL
- en: \(P(y)\) must have full column rank. \(P(y)\) always has full column rank when
    *degree* is -1 or 0\. When *degree* is 1, \(P(y)\) has full column rank if the
    data point locations are not all collinear (N=2), coplanar (N=3), etc.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If *kernel* is ‘multiquadric’, ‘linear’, ‘thin_plate_spline’, ‘cubic’, or ‘quintic’,
    then *degree* must not be lower than the minimum value listed above.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If *smoothing* is 0, then each data point location must be distinct.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: When using an RBF that is not scale invariant (‘multiquadric’, ‘inverse_multiquadric’,
    ‘inverse_quadratic’, or ‘gaussian’), an appropriate shape parameter must be chosen
    (e.g., through cross validation). Smaller values for the shape parameter correspond
    to wider RBFs. The problem can become ill-conditioned or singular when the shape
    parameter is too small.
  prefs: []
  type: TYPE_NORMAL
- en: The memory required to solve for the RBF interpolation coefficients increases
    quadratically with the number of data points, which can become impractical when
    interpolating more than about a thousand data points. To overcome memory limitations
    for large interpolation problems, the *neighbors* argument can be specified to
    compute an RBF interpolant for each evaluation point using only the nearest data
    points.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Fasshauer, G., 2007\. Meshfree Approximation Methods with Matlab. World Scientific
    Publishing Co.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://amadeus.math.iit.edu/~fass/603_ch3.pdf](http://amadeus.math.iit.edu/~fass/603_ch3.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: Wahba, G., 1990\. Spline Models for Observational Data. SIAM.
  prefs: []
  type: TYPE_NORMAL
- en: '[4]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pages.stat.wisc.edu/~wahba/stat860public/lect/lect8/lect8.pdf](http://pages.stat.wisc.edu/~wahba/stat860public/lect/lect8/lect8.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrate interpolating scattered data to a grid in 2-D.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-RBFInterpolator-1.png](../Images/d6b924cde0ee4aa951c6eecf4ab665de.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.RBFInterpolator.__call__.html#scipy.interpolate.RBFInterpolator.__call__
    "scipy.interpolate.RBFInterpolator.__call__")(x) | Evaluate the interpolant at
    *x*. |'
  prefs: []
  type: TYPE_TB
