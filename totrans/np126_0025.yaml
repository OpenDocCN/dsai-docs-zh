- en: numpy.ndarray.flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.flags.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.flags.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: attribute
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Information about the memory layout of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The [`flags`](#numpy.ndarray.flags "numpy.ndarray.flags") object can be accessed
    dictionary-like (as in `a.flags['WRITEABLE']`), or by using lowercased attribute
    names (as in `a.flags.writeable`). Short flag names are only supported in dictionary
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be changed by the
    user, via direct assignment to the attribute or dictionary entry, or by calling
    [`ndarray.setflags`](numpy.ndarray.setflags.html#numpy.ndarray.setflags "numpy.ndarray.setflags").
  prefs: []
  type: TYPE_NORMAL
- en: 'The array flags cannot be set arbitrarily:'
  prefs: []
  type: TYPE_NORMAL
- en: WRITEBACKIFCOPY can only be set `False`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ALIGNED can only be set `True` if the data is truly aligned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WRITEABLE can only be set `True` if the array owns its own memory or the ultimate
    owner of the memory exposes a writeable buffer interface or is a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays can be both C-style and Fortran-style contiguous simultaneously. This
    is clear for 1-dimensional arrays, but can also be true for higher dimensional
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Even for contiguous arrays a stride for a given dimension `arr.strides[dim]`
    may be *arbitrary* if `arr.shape[dim] == 1` or the array has no elements. It does
    *not* generally hold that `self.strides[-1] == self.itemsize` for C-style contiguous
    arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous arrays
    is true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**C_CONTIGUOUS (C)**'
  prefs: []
  type: TYPE_NORMAL
- en: The data is in a single, C-style contiguous segment.
  prefs: []
  type: TYPE_NORMAL
- en: '**F_CONTIGUOUS (F)**'
  prefs: []
  type: TYPE_NORMAL
- en: The data is in a single, Fortran-style contiguous segment.
  prefs: []
  type: TYPE_NORMAL
- en: '**OWNDATA (O)**'
  prefs: []
  type: TYPE_NORMAL
- en: The array owns the memory it uses or borrows it from another object.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITEABLE (W)**'
  prefs: []
  type: TYPE_NORMAL
- en: The data area can be written to. Setting this to False locks the data, making
    it read-only. A view (slice, etc.) inherits WRITEABLE from its base array at creation
    time, but a view of a writeable array may be subsequently locked while the base
    array remains writeable. (The opposite is not true, in that a view of a locked
    array may not be made writeable. However, currently, locking a base object does
    not lock any views that already reference it, so under that circumstance it is
    possible to alter the contents of a locked array via a previously created writeable
    view onto it.) Attempting to change a non-writeable array raises a RuntimeError
    exception.
  prefs: []
  type: TYPE_NORMAL
- en: '**ALIGNED (A)**'
  prefs: []
  type: TYPE_NORMAL
- en: The data and all elements are aligned appropriately for the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITEBACKIFCOPY (X)**'
  prefs: []
  type: TYPE_NORMAL
- en: This array is a copy of some other array. The C-API function PyArray_ResolveWritebackIfCopy
    must be called before deallocating to the base array will be updated with the
    contents of this array.
  prefs: []
  type: TYPE_NORMAL
- en: '**FNC**'
  prefs: []
  type: TYPE_NORMAL
- en: F_CONTIGUOUS and not C_CONTIGUOUS.
  prefs: []
  type: TYPE_NORMAL
- en: '**FORC**'
  prefs: []
  type: TYPE_NORMAL
- en: F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).
  prefs: []
  type: TYPE_NORMAL
- en: '**BEHAVED (B)**'
  prefs: []
  type: TYPE_NORMAL
- en: ALIGNED and WRITEABLE.
  prefs: []
  type: TYPE_NORMAL
- en: '**CARRAY (CA)**'
  prefs: []
  type: TYPE_NORMAL
- en: BEHAVED and C_CONTIGUOUS.
  prefs: []
  type: TYPE_NORMAL
- en: '**FARRAY (FA)**'
  prefs: []
  type: TYPE_NORMAL
- en: BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.
  prefs: []
  type: TYPE_NORMAL
