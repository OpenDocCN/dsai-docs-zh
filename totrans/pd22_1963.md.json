["```py\nIn [1]: iris = pd.read_csv('data/iris.data')\n\nIn [2]: iris.head()\nOut[2]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\n[5 rows x 5 columns]\n\nIn [3]: iris.assign(sepal_ratio=iris['SepalWidth'] / iris['SepalLength']).head()\nOut[3]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [4]: iris.assign(sepal_ratio=lambda x: (x['SepalWidth']\n ...:                                   / x['SepalLength'])).head()\n ...: \nOut[4]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [5]: iris = pd.read_csv('data/iris.data')\n\nIn [6]: (iris.query('SepalLength > 5')\n ...:     .assign(SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ...:             PetalRatio=lambda x: x.PetalWidth / x.PetalLength)\n ...:     .plot(kind='scatter', x='SepalRatio', y='PetalRatio'))\n ...: \nOut[6]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\ns = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\ns.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                     (1, 2, 'a', 1),\n                                     (1, 1, 'b', 0),\n                                     (1, 1, 'b', 1),\n                                     (2, 1, 'b', 0),\n                                     (2, 1, 'b', 1)],\n                                    names=['A', 'B', 'C', 'D'])\n\ns\n\n# SparseSeries\nss = s.to_sparse()\nss\n\nA, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                             column_levels=['C', 'D'],\n                             sort_labels=False)\n\nA\nA.todense()\nrows\ncolumns \n```", "```py\nfrom scipy import sparse\nA = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                      shape=(3, 4))\nA\nA.todense()\n\nss = pd.SparseSeries.from_coo(A)\nss \n```", "```py\n    In [7]: s = pd.Series(['abcd', '3456', 'EFGH'])\n\n    In [8]: s.str.isalpha()\n    Out[8]: \n    0     True\n    1    False\n    2     True\n    Length: 3, dtype: bool\n\n    In [9]: s.str.find('ab')\n    Out[9]: \n    0    0\n    1   -1\n    2   -1\n    Length: 3, dtype: int64 \n    ```", "```py\n    In [10]: s = pd.Series(['12', '300', '25'])\n\n    In [11]: s.str.pad(5, fillchar='_')\n    Out[11]: \n    0    ___12\n    1    __300\n    2    ___25\n    Length: 3, dtype: object \n    ```", "```py\n    In [12]: s = pd.Series(['ABCD', 'EFGH', 'IJK'])\n\n    In [13]: s.str.slice_replace(1, 3, 'X')\n    Out[13]: \n    0    AXD\n    1    EXH\n    2     IX\n    Length: 3, dtype: object\n\n    # replaced with empty char\n    In [14]: s.str.slice_replace(0, 1)\n    Out[14]: \n    0    BCD\n    1    FGH\n    2     JK\n    Length: 3, dtype: object \n    ```", "```py\n    In [15]: df = pd.DataFrame({'x': range(5)})\n\n    In [16]: df.reindex([0.2, 1.8, 3.5], method='nearest')\n    Out[16]: \n     x\n    0.2  0\n    1.8  2\n    3.5  4\n\n    [3 rows x 1 columns] \n    ```", "```py\n    # Returns the 1st and 4th sheet, as a dictionary of DataFrames.\n    pd.read_excel('path_to_file.xls', sheetname=['Sheet1', 3]) \n    ```", "```py\nIn [2]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [3]: t.days\nOut[3]: 1\n\nIn [4]: t.seconds\nOut[4]: 12\n\nIn [5]: t.microseconds\nOut[5]: 123 \n```", "```py\nIn [17]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [18]: t.days\nOut[18]: 1\n\nIn [19]: t.seconds\nOut[19]: 36672\n\nIn [20]: t.microseconds\nOut[20]: 100123 \n```", "```py\nIn [21]: t.components\nOut[21]: Components(days=1, hours=10, minutes=11, seconds=12, milliseconds=100, microseconds=123, nanoseconds=0)\n\nIn [22]: t.components.seconds\nOut[22]: 12 \n```", "```py\n    In [23]: df = pd.DataFrame(np.random.randn(5, 4),\n     ....:                  columns=list('ABCD'),\n     ....:                  index=pd.date_range('20130101', periods=5))\n     ....: \n\n    In [24]: df\n    Out[24]: \n     A         B         C         D\n    2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [5 rows x 4 columns]\n\n    In [25]: s = pd.Series(range(5), [-2, -1, 1, 2, 3])\n\n    In [26]: s\n    Out[26]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [4]: df.loc['2013-01-02':'2013-01-10']\n    KeyError: 'stop bound [2013-01-10] is not in the [index]'\n\n    In [6]: s.loc[-10:3]\n    KeyError: 'start bound [-10] is not the [index]' \n    ```", "```py\n    In [27]: df.loc['2013-01-02':'2013-01-10']\n    Out[27]: \n     A         B         C         D\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [4 rows x 4 columns]\n\n    In [28]: s.loc[-10:3]\n    Out[28]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [8]: s.ix[-1.0:2]\n    TypeError: the slice start value [-1.0] is not a proper indexer for this index type (Int64Index) \n    ```", "```py\n    In [2]: s.ix[-1.0:2]\n    Out[2]:\n    -1    1\n     1    2\n     2    3\n    dtype: int64 \n    ```", "```py\n    In [4]: df.loc[2:3]\n    KeyError: 'start bound [2] is not the [index]' \n    ```", "```py\n    In [4]: df.loc[2:3]\n    TypeError: Cannot do slice indexing on <class 'pandas.tseries.index.DatetimeIndex'> with <type 'int'> keys \n    ```", "```py\nIn [3]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [4]: s\nOut[4]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [5]: s.cat.ordered\nOut[5]: True\n\nIn [6]: s.cat.ordered = False\n\nIn [7]: s\nOut[7]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0, 1, 2] \n```", "```py\nIn [29]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0, 1, 2]\n\nIn [31]: s.cat.ordered\nOut[31]: False\n\nIn [32]: s = s.cat.as_ordered()\n\nIn [33]: s\nOut[33]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [34]: s.cat.ordered\nOut[34]: True\n\n# you can set in the constructor of the Categorical\nIn [35]: s = pd.Series(pd.Categorical([0, 1, 2], ordered=True))\n\nIn [36]: s\nOut[36]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [37]: s.cat.ordered\nOut[37]: True \n```", "```py\nIn [54]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"]).astype('category', ordered=True)\n\nIn [55]: s\nOut[55]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): [a < b < c]\n\nIn [56]: s = (pd.Series([\"a\", \"b\", \"c\", \"a\"])\n   ....:        .astype('category', categories=list('abcdef'), ordered=False))\n\nIn [57]: s\nOut[57]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (6, object): [a, b, c, d, e, f] \n```", "```py\n    In [2]: pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1.0,\"1\":2.0}}' \n    ```", "```py\n    In [2]:  pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1,\"1\":2}}' \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    True\n    b    True\n    c    True\n    d    True\n    dtype: bool \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    4\n    b    5\n    c    6\n    d    7\n    dtype: int64 \n    ```", "```py\n    In [2]: p = pd.Series([0, 1])\n\n    In [3]: p / 0\n    Out[3]:\n    0    inf\n    1    inf\n    dtype: float64\n\n    In [4]: p // 0\n    Out[4]:\n    0    inf\n    1    inf\n    dtype: float64 \n    ```", "```py\n    In [38]: p = pd.Series([0, 1])\n\n    In [39]: p / 0\n    Out[39]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64\n\n    In [40]: p // 0\n    Out[40]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64 \n    ```", "```py\n    In [4]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[4]: Timestamp('2000-01-31 00:00:00') \n    ```", "```py\n    In [41]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[41]: Timestamp('2000-02-28 00:00:00') \n    ```", "```py\n    In [2]: pd.options.display.max_rows = 10\n    In [3]: s = pd.Series([1,1,1,1,1,1,1,1,1,1,0.9999,1,1]*10)\n    In [4]: s\n    Out[4]:\n    0    1\n    1    1\n    2    1\n    ...\n    127    0.9999\n    128    1.0000\n    129    1.0000\n    Length: 130, dtype: float64 \n    ```", "```py\n    0      1.0000\n    1      1.0000\n    2      1.0000\n    3      1.0000\n    4      1.0000\n    ...\n    125    1.0000\n    126    1.0000\n    127    0.9999\n    128    1.0000\n    129    1.0000\n    dtype: float64 \n    ```", "```py\n    In [42]: df1 = pd.DataFrame({'x': pd.Series(['a', 'b', 'c']),\n     ....:                    'y': pd.Series(['d', 'e', 'f'])})\n     ....: \n\n    In [43]: df2 = df1[['x']]\n\n    In [44]: df2['y'] = ['g', 'h', 'i'] \n    ```", "```py\nIn [1]: iris = pd.read_csv('data/iris.data')\n\nIn [2]: iris.head()\nOut[2]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\n[5 rows x 5 columns]\n\nIn [3]: iris.assign(sepal_ratio=iris['SepalWidth'] / iris['SepalLength']).head()\nOut[3]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [4]: iris.assign(sepal_ratio=lambda x: (x['SepalWidth']\n ...:                                   / x['SepalLength'])).head()\n ...: \nOut[4]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [5]: iris = pd.read_csv('data/iris.data')\n\nIn [6]: (iris.query('SepalLength > 5')\n ...:     .assign(SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ...:             PetalRatio=lambda x: x.PetalWidth / x.PetalLength)\n ...:     .plot(kind='scatter', x='SepalRatio', y='PetalRatio'))\n ...: \nOut[6]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\ns = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\ns.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                     (1, 2, 'a', 1),\n                                     (1, 1, 'b', 0),\n                                     (1, 1, 'b', 1),\n                                     (2, 1, 'b', 0),\n                                     (2, 1, 'b', 1)],\n                                    names=['A', 'B', 'C', 'D'])\n\ns\n\n# SparseSeries\nss = s.to_sparse()\nss\n\nA, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                             column_levels=['C', 'D'],\n                             sort_labels=False)\n\nA\nA.todense()\nrows\ncolumns \n```", "```py\nfrom scipy import sparse\nA = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                      shape=(3, 4))\nA\nA.todense()\n\nss = pd.SparseSeries.from_coo(A)\nss \n```", "```py\n    In [7]: s = pd.Series(['abcd', '3456', 'EFGH'])\n\n    In [8]: s.str.isalpha()\n    Out[8]: \n    0     True\n    1    False\n    2     True\n    Length: 3, dtype: bool\n\n    In [9]: s.str.find('ab')\n    Out[9]: \n    0    0\n    1   -1\n    2   -1\n    Length: 3, dtype: int64 \n    ```", "```py\n    In [10]: s = pd.Series(['12', '300', '25'])\n\n    In [11]: s.str.pad(5, fillchar='_')\n    Out[11]: \n    0    ___12\n    1    __300\n    2    ___25\n    Length: 3, dtype: object \n    ```", "```py\n    In [12]: s = pd.Series(['ABCD', 'EFGH', 'IJK'])\n\n    In [13]: s.str.slice_replace(1, 3, 'X')\n    Out[13]: \n    0    AXD\n    1    EXH\n    2     IX\n    Length: 3, dtype: object\n\n    # replaced with empty char\n    In [14]: s.str.slice_replace(0, 1)\n    Out[14]: \n    0    BCD\n    1    FGH\n    2     JK\n    Length: 3, dtype: object \n    ```", "```py\n    In [15]: df = pd.DataFrame({'x': range(5)})\n\n    In [16]: df.reindex([0.2, 1.8, 3.5], method='nearest')\n    Out[16]: \n     x\n    0.2  0\n    1.8  2\n    3.5  4\n\n    [3 rows x 1 columns] \n    ```", "```py\n    # Returns the 1st and 4th sheet, as a dictionary of DataFrames.\n    pd.read_excel('path_to_file.xls', sheetname=['Sheet1', 3]) \n    ```", "```py\nIn [1]: iris = pd.read_csv('data/iris.data')\n\nIn [2]: iris.head()\nOut[2]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\n[5 rows x 5 columns]\n\nIn [3]: iris.assign(sepal_ratio=iris['SepalWidth'] / iris['SepalLength']).head()\nOut[3]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [4]: iris.assign(sepal_ratio=lambda x: (x['SepalWidth']\n ...:                                   / x['SepalLength'])).head()\n ...: \nOut[4]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000\n\n[5 rows x 6 columns] \n```", "```py\nIn [5]: iris = pd.read_csv('data/iris.data')\n\nIn [6]: (iris.query('SepalLength > 5')\n ...:     .assign(SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ...:             PetalRatio=lambda x: x.PetalWidth / x.PetalLength)\n ...:     .plot(kind='scatter', x='SepalRatio', y='PetalRatio'))\n ...: \nOut[6]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\ns = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\ns.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),\n                                     (1, 2, 'a', 1),\n                                     (1, 1, 'b', 0),\n                                     (1, 1, 'b', 1),\n                                     (2, 1, 'b', 0),\n                                     (2, 1, 'b', 1)],\n                                    names=['A', 'B', 'C', 'D'])\n\ns\n\n# SparseSeries\nss = s.to_sparse()\nss\n\nA, rows, columns = ss.to_coo(row_levels=['A', 'B'],\n                             column_levels=['C', 'D'],\n                             sort_labels=False)\n\nA\nA.todense()\nrows\ncolumns \n```", "```py\nfrom scipy import sparse\nA = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),\n                      shape=(3, 4))\nA\nA.todense()\n\nss = pd.SparseSeries.from_coo(A)\nss \n```", "```py\n    In [7]: s = pd.Series(['abcd', '3456', 'EFGH'])\n\n    In [8]: s.str.isalpha()\n    Out[8]: \n    0     True\n    1    False\n    2     True\n    Length: 3, dtype: bool\n\n    In [9]: s.str.find('ab')\n    Out[9]: \n    0    0\n    1   -1\n    2   -1\n    Length: 3, dtype: int64 \n    ```", "```py\n    In [10]: s = pd.Series(['12', '300', '25'])\n\n    In [11]: s.str.pad(5, fillchar='_')\n    Out[11]: \n    0    ___12\n    1    __300\n    2    ___25\n    Length: 3, dtype: object \n    ```", "```py\n    In [12]: s = pd.Series(['ABCD', 'EFGH', 'IJK'])\n\n    In [13]: s.str.slice_replace(1, 3, 'X')\n    Out[13]: \n    0    AXD\n    1    EXH\n    2     IX\n    Length: 3, dtype: object\n\n    # replaced with empty char\n    In [14]: s.str.slice_replace(0, 1)\n    Out[14]: \n    0    BCD\n    1    FGH\n    2     JK\n    Length: 3, dtype: object \n    ```", "```py\n    In [15]: df = pd.DataFrame({'x': range(5)})\n\n    In [16]: df.reindex([0.2, 1.8, 3.5], method='nearest')\n    Out[16]: \n     x\n    0.2  0\n    1.8  2\n    3.5  4\n\n    [3 rows x 1 columns] \n    ```", "```py\n    # Returns the 1st and 4th sheet, as a dictionary of DataFrames.\n    pd.read_excel('path_to_file.xls', sheetname=['Sheet1', 3]) \n    ```", "```py\nIn [2]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [3]: t.days\nOut[3]: 1\n\nIn [4]: t.seconds\nOut[4]: 12\n\nIn [5]: t.microseconds\nOut[5]: 123 \n```", "```py\nIn [17]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [18]: t.days\nOut[18]: 1\n\nIn [19]: t.seconds\nOut[19]: 36672\n\nIn [20]: t.microseconds\nOut[20]: 100123 \n```", "```py\nIn [21]: t.components\nOut[21]: Components(days=1, hours=10, minutes=11, seconds=12, milliseconds=100, microseconds=123, nanoseconds=0)\n\nIn [22]: t.components.seconds\nOut[22]: 12 \n```", "```py\n    In [23]: df = pd.DataFrame(np.random.randn(5, 4),\n     ....:                  columns=list('ABCD'),\n     ....:                  index=pd.date_range('20130101', periods=5))\n     ....: \n\n    In [24]: df\n    Out[24]: \n     A         B         C         D\n    2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [5 rows x 4 columns]\n\n    In [25]: s = pd.Series(range(5), [-2, -1, 1, 2, 3])\n\n    In [26]: s\n    Out[26]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [4]: df.loc['2013-01-02':'2013-01-10']\n    KeyError: 'stop bound [2013-01-10] is not in the [index]'\n\n    In [6]: s.loc[-10:3]\n    KeyError: 'start bound [-10] is not the [index]' \n    ```", "```py\n    In [27]: df.loc['2013-01-02':'2013-01-10']\n    Out[27]: \n     A         B         C         D\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [4 rows x 4 columns]\n\n    In [28]: s.loc[-10:3]\n    Out[28]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [8]: s.ix[-1.0:2]\n    TypeError: the slice start value [-1.0] is not a proper indexer for this index type (Int64Index) \n    ```", "```py\n    In [2]: s.ix[-1.0:2]\n    Out[2]:\n    -1    1\n     1    2\n     2    3\n    dtype: int64 \n    ```", "```py\n    In [4]: df.loc[2:3]\n    KeyError: 'start bound [2] is not the [index]' \n    ```", "```py\n    In [4]: df.loc[2:3]\n    TypeError: Cannot do slice indexing on <class 'pandas.tseries.index.DatetimeIndex'> with <type 'int'> keys \n    ```", "```py\nIn [3]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [4]: s\nOut[4]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [5]: s.cat.ordered\nOut[5]: True\n\nIn [6]: s.cat.ordered = False\n\nIn [7]: s\nOut[7]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0, 1, 2] \n```", "```py\nIn [29]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0, 1, 2]\n\nIn [31]: s.cat.ordered\nOut[31]: False\n\nIn [32]: s = s.cat.as_ordered()\n\nIn [33]: s\nOut[33]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [34]: s.cat.ordered\nOut[34]: True\n\n# you can set in the constructor of the Categorical\nIn [35]: s = pd.Series(pd.Categorical([0, 1, 2], ordered=True))\n\nIn [36]: s\nOut[36]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [37]: s.cat.ordered\nOut[37]: True \n```", "```py\nIn [54]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"]).astype('category', ordered=True)\n\nIn [55]: s\nOut[55]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): [a < b < c]\n\nIn [56]: s = (pd.Series([\"a\", \"b\", \"c\", \"a\"])\n   ....:        .astype('category', categories=list('abcdef'), ordered=False))\n\nIn [57]: s\nOut[57]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (6, object): [a, b, c, d, e, f] \n```", "```py\n    In [2]: pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1.0,\"1\":2.0}}' \n    ```", "```py\n    In [2]:  pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1,\"1\":2}}' \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    True\n    b    True\n    c    True\n    d    True\n    dtype: bool \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    4\n    b    5\n    c    6\n    d    7\n    dtype: int64 \n    ```", "```py\n    In [2]: p = pd.Series([0, 1])\n\n    In [3]: p / 0\n    Out[3]:\n    0    inf\n    1    inf\n    dtype: float64\n\n    In [4]: p // 0\n    Out[4]:\n    0    inf\n    1    inf\n    dtype: float64 \n    ```", "```py\n    In [38]: p = pd.Series([0, 1])\n\n    In [39]: p / 0\n    Out[39]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64\n\n    In [40]: p // 0\n    Out[40]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64 \n    ```", "```py\n    In [4]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[4]: Timestamp('2000-01-31 00:00:00') \n    ```", "```py\n    In [41]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[41]: Timestamp('2000-02-28 00:00:00') \n    ```", "```py\nIn [2]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [3]: t.days\nOut[3]: 1\n\nIn [4]: t.seconds\nOut[4]: 12\n\nIn [5]: t.microseconds\nOut[5]: 123 \n```", "```py\nIn [17]: t = pd.Timedelta('1 day, 10:11:12.100123')\n\nIn [18]: t.days\nOut[18]: 1\n\nIn [19]: t.seconds\nOut[19]: 36672\n\nIn [20]: t.microseconds\nOut[20]: 100123 \n```", "```py\nIn [21]: t.components\nOut[21]: Components(days=1, hours=10, minutes=11, seconds=12, milliseconds=100, microseconds=123, nanoseconds=0)\n\nIn [22]: t.components.seconds\nOut[22]: 12 \n```", "```py\n    In [23]: df = pd.DataFrame(np.random.randn(5, 4),\n     ....:                  columns=list('ABCD'),\n     ....:                  index=pd.date_range('20130101', periods=5))\n     ....: \n\n    In [24]: df\n    Out[24]: \n     A         B         C         D\n    2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [5 rows x 4 columns]\n\n    In [25]: s = pd.Series(range(5), [-2, -1, 1, 2, 3])\n\n    In [26]: s\n    Out[26]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [4]: df.loc['2013-01-02':'2013-01-10']\n    KeyError: 'stop bound [2013-01-10] is not in the [index]'\n\n    In [6]: s.loc[-10:3]\n    KeyError: 'start bound [-10] is not the [index]' \n    ```", "```py\n    In [27]: df.loc['2013-01-02':'2013-01-10']\n    Out[27]: \n     A         B         C         D\n    2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n    2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n    2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n    2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\n    [4 rows x 4 columns]\n\n    In [28]: s.loc[-10:3]\n    Out[28]: \n    -2    0\n    -1    1\n     1    2\n     2    3\n     3    4\n    Length: 5, dtype: int64 \n    ```", "```py\n    In [8]: s.ix[-1.0:2]\n    TypeError: the slice start value [-1.0] is not a proper indexer for this index type (Int64Index) \n    ```", "```py\n    In [2]: s.ix[-1.0:2]\n    Out[2]:\n    -1    1\n     1    2\n     2    3\n    dtype: int64 \n    ```", "```py\n    In [4]: df.loc[2:3]\n    KeyError: 'start bound [2] is not the [index]' \n    ```", "```py\n    In [4]: df.loc[2:3]\n    TypeError: Cannot do slice indexing on <class 'pandas.tseries.index.DatetimeIndex'> with <type 'int'> keys \n    ```", "```py\nIn [3]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [4]: s\nOut[4]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [5]: s.cat.ordered\nOut[5]: True\n\nIn [6]: s.cat.ordered = False\n\nIn [7]: s\nOut[7]:\n0    0\n1    1\n2    2\ndtype: category\nCategories (3, int64): [0, 1, 2] \n```", "```py\nIn [29]: s = pd.Series([0, 1, 2], dtype='category')\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0, 1, 2]\n\nIn [31]: s.cat.ordered\nOut[31]: False\n\nIn [32]: s = s.cat.as_ordered()\n\nIn [33]: s\nOut[33]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [34]: s.cat.ordered\nOut[34]: True\n\n# you can set in the constructor of the Categorical\nIn [35]: s = pd.Series(pd.Categorical([0, 1, 2], ordered=True))\n\nIn [36]: s\nOut[36]: \n0    0\n1    1\n2    2\nLength: 3, dtype: category\nCategories (3, int64): [0 < 1 < 2]\n\nIn [37]: s.cat.ordered\nOut[37]: True \n```", "```py\nIn [54]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"]).astype('category', ordered=True)\n\nIn [55]: s\nOut[55]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): [a < b < c]\n\nIn [56]: s = (pd.Series([\"a\", \"b\", \"c\", \"a\"])\n   ....:        .astype('category', categories=list('abcdef'), ordered=False))\n\nIn [57]: s\nOut[57]:\n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (6, object): [a, b, c, d, e, f] \n```", "```py\n    In [2]: pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1.0,\"1\":2.0}}' \n    ```", "```py\n    In [2]:  pd.DataFrame({'i': [1,2], 'f': [3.0, 4.2]}).to_json()\n    Out[2]: '{\"f\":{\"0\":3.0,\"1\":4.2},\"i\":{\"0\":1,\"1\":2}}' \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    True\n    b    True\n    c    True\n    d    True\n    dtype: bool \n    ```", "```py\n    In [2]: pd.Series([0, 1, 2, 3], list('abcd')) | pd.Series([4, 4, 4, 4], list('abcd'))\n    Out[2]:\n    a    4\n    b    5\n    c    6\n    d    7\n    dtype: int64 \n    ```", "```py\n    In [2]: p = pd.Series([0, 1])\n\n    In [3]: p / 0\n    Out[3]:\n    0    inf\n    1    inf\n    dtype: float64\n\n    In [4]: p // 0\n    Out[4]:\n    0    inf\n    1    inf\n    dtype: float64 \n    ```", "```py\n    In [38]: p = pd.Series([0, 1])\n\n    In [39]: p / 0\n    Out[39]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64\n\n    In [40]: p // 0\n    Out[40]: \n    0    NaN\n    1    inf\n    Length: 2, dtype: float64 \n    ```", "```py\n    In [4]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[4]: Timestamp('2000-01-31 00:00:00') \n    ```", "```py\n    In [41]: pd.to_datetime(['2000-01-31', '2000-02-28']).asof('2000-02')\n    Out[41]: Timestamp('2000-02-28 00:00:00') \n    ```", "```py\n    In [2]: pd.options.display.max_rows = 10\n    In [3]: s = pd.Series([1,1,1,1,1,1,1,1,1,1,0.9999,1,1]*10)\n    In [4]: s\n    Out[4]:\n    0    1\n    1    1\n    2    1\n    ...\n    127    0.9999\n    128    1.0000\n    129    1.0000\n    Length: 130, dtype: float64 \n    ```", "```py\n    0      1.0000\n    1      1.0000\n    2      1.0000\n    3      1.0000\n    4      1.0000\n    ...\n    125    1.0000\n    126    1.0000\n    127    0.9999\n    128    1.0000\n    129    1.0000\n    dtype: float64 \n    ```", "```py\n    In [42]: df1 = pd.DataFrame({'x': pd.Series(['a', 'b', 'c']),\n     ....:                    'y': pd.Series(['d', 'e', 'f'])})\n     ....: \n\n    In [43]: df2 = df1[['x']]\n\n    In [44]: df2['y'] = ['g', 'h', 'i'] \n    ```"]