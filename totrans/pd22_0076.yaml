- en: pandas.read_xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_xml.html](https://pandas.pydata.org/docs/reference/api/pandas.read_xml.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read XML document into a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path_or_buffer**str, path object, or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: String, path object (implementing `os.PathLike[str]`), or file-like object implementing
    a `read()` function. The string can be any valid XML string or a path. The string
    can further be a URL. Valid URL schemes include http, ftp, s3, and file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: Passing xml literal strings is deprecated.
    Wrap literal xml input in `io.StringIO` or `io.BytesIO` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**xpath**str, optional, default ‘./*’'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `XPath` to parse required set of nodes for migration to [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").``XPath`` should return a collection of elements and not a
    single element. Note: The `etree` parser supports limited `XPath` expressions.
    For more complex `XPath`, use `lxml` which requires installation.'
  prefs: []
  type: TYPE_NORMAL
- en: '**namespaces**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The namespaces defined in XML document as dicts with key being namespace prefix
    and value the URI. There is no need to include all namespaces in XML, only the
    ones used in `xpath` expression. Note: if XML document uses default namespace
    denoted as xmlns=’<URI>’ without a prefix, you must assign any temporary namespace
    prefix such as ‘doc’ to the URI in order to parse underlying nodes and/or attributes.
    For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**elems_only**bool, optional, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Parse only the child elements at the specified `xpath`. By default, all child
    elements and non-empty text nodes are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**attrs_only**bool, optional, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Parse only the attributes at the specified `xpath`. By default, all attributes
    are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**names**list-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Column names for DataFrame of parsed XML data. Use this parameter to rename
    original element names and distinguish same named elements and attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**Type name or dict of column -> type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type for data or columns. E.g. {‘a’: np.float64, ‘b’: np.int32, ‘c’: ‘Int64’}
    Use str or object together with suitable na_values settings to preserve and not
    interpret dtype. If converters are specified, they will be applied INSTEAD of
    dtype conversion.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**converters**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Dict of functions for converting values in certain columns. Keys can either
    be integers or column labels.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**parse_dates**bool or list of int or names or list of lists or dict, default
    False'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identifiers to parse index or columns to datetime. The behavior is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: boolean. If True -> try parsing the index.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3 each
    as a separate date column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list of lists. e.g. If [[1, 3]] -> combine columns 1 and 3 and parse as a single
    date column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dict, e.g. {‘foo’ : [1, 3]} -> parse columns 1, 3 as date and call result ‘foo’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, optional, default ‘utf-8’'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding of XML document.
  prefs: []
  type: TYPE_NORMAL
- en: '**parser**{‘lxml’,’etree’}, default ‘lxml’'
  prefs: []
  type: TYPE_NORMAL
- en: Parser module to use for retrieval of data. Only ‘lxml’ and ‘etree’ are supported.
    With ‘lxml’ more complex `XPath` searches and ability to use XSLT stylesheet are
    supported.
  prefs: []
  type: TYPE_NORMAL
- en: '**stylesheet**str, path object or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: A URL, file-like object, or a raw string containing an XSLT script. This stylesheet
    should flatten complex, deeply nested XML documents for easier parsing. To use
    this feature you must have `lxml` module installed and specify ‘lxml’ as `parser`.
    The `xpath` must reference nodes of transformed XML document generated after XSLT
    transformation and not the original XML document. Only XSLT 1.0 scripts and not
    later versions is currently supported.
  prefs: []
  type: TYPE_NORMAL
- en: '**iterparse**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The nodes or attributes to retrieve in iterparsing of XML document as a dict
    with key being the name of repeating element and value being list of elements
    or attribute names that are descendants of the repeated element. Note: If this
    option is used, it will replace `xpath` parsing and unlike `xpath`, descendants
    do not need to relate to each other but can exist any where in document under
    the repeating element. This memory- efficient method should be used for very large
    XML files (500MB, 1GB, or 5GB+). For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**compression**str or dict, default ‘infer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'For on-the-fly decompression of on-disk data. If ‘infer’ and ‘path_or_buffer’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). If using ‘zip’ or ‘tar’, the ZIP file must contain only one data
    file to be read in. Set to `None` for no decompression. Can also be a dict with
    key `''method''` set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`,
    `''xz''`, `''tar''`} and other key-value pairs are forwarded to `zipfile.ZipFile`,
    `gzip.GzipFile`, `bz2.BZ2File`, `zstandard.ZstdDecompressor`, `lzma.LZMAFile`
    or `tarfile.TarFile`, respectively. As an example, the following could be passed
    for Zstandard decompression using a custom compression dictionary: `compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Added support for .tar files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0: Zstandard support.'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: df
  prefs: []
  type: TYPE_NORMAL
- en: A DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_json`](pandas.read_json.html#pandas.read_json "pandas.read_json")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert a JSON string to pandas object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_html`](pandas.read_html.html#pandas.read_html "pandas.read_html")'
  prefs: []
  type: TYPE_NORMAL
- en: Read HTML tables into a list of DataFrame objects.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method is best designed to import shallow XML documents in following format
    which is the ideal fit for the two-dimensions of a `DataFrame` (row by column).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As a file format, XML documents can be designed any way including layout of
    elements and attributes as long as it conforms to W3C specifications. Therefore,
    this method is a convenience handler for a specific flatter design and not all
    possible XML structures.
  prefs: []
  type: TYPE_NORMAL
- en: However, for more complex XML documents, `stylesheet` allows you to temporarily
    redesign original document with XSLT (a special purpose language) for a flatter
    version for migration to a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: This function will *always* return a single [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or raise exceptions due to issues with XML document, `xpath`,
    or other parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See the [read_xml documentation in the IO section of the docs](../../user_guide/io.html#io-read-xml)
    for more information in using this method to parse XML files to DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
