["```py\nscipy.optimize.curve_fit(f, xdata, ydata, p0=None, sigma=None, absolute_sigma=False, check_finite=None, bounds=(-inf, inf), method=None, jac=None, *, full_output=False, nan_policy=None, **kwargs)\n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.optimize import curve_fit \n```", "```py\n>>> def func(x, a, b, c):\n...     return a * np.exp(-b * x) + c \n```", "```py\n>>> xdata = np.linspace(0, 4, 50)\n>>> y = func(xdata, 2.5, 1.3, 0.5)\n>>> rng = np.random.default_rng()\n>>> y_noise = 0.2 * rng.normal(size=xdata.size)\n>>> ydata = y + y_noise\n>>> plt.plot(xdata, ydata, 'b-', label='data') \n```", "```py\n>>> popt, pcov = curve_fit(func, xdata, ydata)\n>>> popt\narray([2.56274217, 1.37268521, 0.47427475])\n>>> plt.plot(xdata, func(xdata, *popt), 'r-',\n...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt)) \n```", "```py\n>>> popt, pcov = curve_fit(func, xdata, ydata, bounds=(0, [3., 1., 0.5]))\n>>> popt\narray([2.43736712, 1\\.        , 0.34463856])\n>>> plt.plot(xdata, func(xdata, *popt), 'g--',\n...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt)) \n```", "```py\n>>> plt.xlabel('x')\n>>> plt.ylabel('y')\n>>> plt.legend()\n>>> plt.show() \n```", "```py\n>>> np.linalg.cond(pcov)\n34.571092161547405  # may vary \n```", "```py\n>>> def func(x, a, b, c, d):\n...     return a * d * np.exp(-b * x) + c  # a and d are redundant\n>>> popt, pcov = curve_fit(func, xdata, ydata)\n>>> np.linalg.cond(pcov)\n1.13250718925596e+32  # may vary \n```", "```py\n>>> np.diag(pcov)\narray([1.48814742e+29, 3.78596560e-02, 5.39253738e-03, 2.76417220e+28])  # may vary \n```"]