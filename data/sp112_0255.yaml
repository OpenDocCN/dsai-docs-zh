- en: scipy.linalg.bandwidth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.linalg.bandwidth
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return the lower and upper bandwidth of a 2D numeric array.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个二维数值数组的下界和上界带宽。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a**ndarray'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**ndarray**（数组）'
- en: Input array of size (N, M)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 输入大小为（N，M）的数组
- en: 'Returns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**lu**tuple'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**lu**元组'
- en: 2-tuple of ints indicating the lower and upper bandwidth. A zero denotes no
    sub- or super-diagonal on that side (triangular), and, say for N rows (N-1) means
    that side is full. Same example applies to the upper triangular part with (M-1).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2-tuple of ints indicating the lower and upper bandwidth. A zero denotes no
    sub- or super-diagonal on that side (triangular), and, say for N rows (N-1) means
    that side is full. Same example applies to the upper triangular part with (M-1).
- en: 'Raises:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'Raises:'
- en: TypeError
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TypeError
- en: If the dtype of the array is not supported, in particular, NumPy float16, float128
    and complex256 dtypes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组的dtype不受支持，特别是NumPy的float16，float128和complex256 dtypes。
- en: Notes
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Notes
- en: This helper function simply runs over the array looking for the nonzero entries
    whether there exists a banded structure in the array or not. Hence, the performance
    depends on the density of nonzero entries and also memory-layout. Fortran- or
    C- contiguous arrays are handled best and otherwise suffers from extra random
    memory access cost.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助函数简单地遍历数组，查找非零条目，无论数组中是否存在带状结构。因此，性能取决于非零条目的密度和内存布局。Fortran或C连续数组处理最佳，否则会遭受额外的随机内存访问成本。
- en: The strategy is to look for only untested band elements in the upper and lower
    triangular parts separately; depending on the memory layout we scan row-wise or
    column-wise. Moreover, say we are scanning rows and in the 6th row, 4th entry
    is nonzero then, on the succeeding rows the horizontal search is done only up
    to that band entries since we know that band is occupied. Therefore, a completely
    dense matrix scan cost is in the the order of n.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是分别查找上三角部分和下三角部分中仅未测试的带元素；根据内存布局，我们可以逐行或逐列扫描。此外，例如我们正在扫描行，并且在第6行，第4个条目不为零，则在后续行中，仅在该带条目处进行水平搜索，因为我们知道该带已被占用。因此，完全密集矩阵扫描的成本是按照n的顺序。
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
