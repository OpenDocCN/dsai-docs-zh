- en: Introducing the domainmatrix of the poly module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/polys/domainmatrix.html](https://docs.sympy.org/latest/modules/polys/domainmatrix.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This page introduces the idea behind domainmatrix which is used in SymPy’s [`sympy.polys`](reference.html#module-sympy.polys
    "sympy.polys") module. This is a relatively advanced topic so for a better understanding
    it is recommended to read about [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") and [`DDM`](#sympy.polys.matrices.ddm.DDM
    "sympy.polys.matrices.ddm.DDM") along with [`sympy.matrices`](../matrices/index.html#module-sympy.matrices
    "sympy.matrices") module.
  prefs: []
  type: TYPE_NORMAL
- en: What is domainmatrix?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is way of associating Matrix with [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain").
  prefs: []
  type: TYPE_NORMAL
- en: A domainmatrix represents a matrix with elements that are in a particular Domain.
    Each domainmatrix internally wraps a DDM which is used for the lower-level operations.
    The idea is that the domainmatrix class provides the convenience routines for
    converting between Expr and the poly domains as well as unifying matrices with
    different domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, we represent a matrix without concerning about the [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Module for the DomainMatrix class.
  prefs: []
  type: TYPE_NORMAL
- en: A DomainMatrix represents a matrix with elements that are in a particular Domain.
    Each DomainMatrix internally wraps a DDM which is used for the lower-level operations.
    The idea is that the DomainMatrix class provides the convenience routines for
    converting between Expr and the poly domains as well as unifying matrices with
    different domains.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Convenient alias for DomainMatrix.from_list
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DomainMatrix.from_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Associate Matrix with [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain")
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix uses [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") for its internal representation which makes
    it faster than the SymPy Matrix class (currently) for many common operations,
    but this advantage makes it not entirely compatible with Matrix. DomainMatrix
    are analogous to numpy arrays with “dtype”. In the DomainMatrix, each element
    has a domain such as [ZZ](domainsref.html#zz) or [QQ<a>](domainsref.html#qq-a).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a DomainMatrix from the existing Matrix class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Directly forming a DomainMatrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM"), [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM"), [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain"), [`Poly`](reference.html#sympy.polys.polytools.Poly
    "sympy.polys.polytools.Poly")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adds two DomainMatrix matrices of the same Domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A, B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: matrices to add
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after Addition
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DMShapeError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the dimensions of the two DomainMatrix are not equal
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of the two DomainMatrix are not same
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sub`](#sympy.polys.matrices.domainmatrix.DomainMatrix.sub "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"),
    [`matmul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.matmul "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adjugate and determinant of a square [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(adjugate, determinant)** : (DomainMatrix, DomainScalar)'
  prefs: []
  type: TYPE_NORMAL
- en: The adjugate matrix and determinant of this matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`adjugate`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate "sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns only the adjugate matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[`det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.det "sympy.polys.matrices.domainmatrix.DomainMatrix.det")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns only the determinant.
  prefs: []
  type: TYPE_NORMAL
- en: '[`inv_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a matrix/denominator pair representing the inverse matrix but perhaps
    differing from the adjugate and determinant by a common factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return the polynomial \(p\) such that \(p(A) = adj(A)\) and also the determinant
    of \(A\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`adjugate`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate "sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate"),
    [`eval_poly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly"),
    [`adj_det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adjugate of a square [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix").
  prefs: []
  type: TYPE_NORMAL
- en: 'The adjugate matrix is the transpose of the cofactor matrix and is related
    to the inverse by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Unlike the inverse matrix the adjugate matrix can be computed and expressed
    without division or fractions in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: The adjugate matrix of this matrix with the same domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`adj_det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Cancel factors between a matrix and a denominator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a matrix and denominator on lowest terms.
  prefs: []
  type: TYPE_NORMAL
- en: Requires `gcd` in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Methods like [`solve_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"), [`inv_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den") and [`rref_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den") return a matrix and
    denominator but not necessarily on lowest terms. Reduction to lowest terms without
    fractions can be performed with [`cancel_denom()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The denominator is made canonical with respect to units (e.g. a negative denominator
    is made positive):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Any factor common to _all_ elements will be cancelled but there can still be
    factors in common between _some_ elements of the matrix and the denominator. To
    cancel factors between each element and the denominator, use [`cancel_denom_elementwise()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise") or
    otherwise convert to a field and use division:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`solve_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"),
    [`inv_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den"),
    [`rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"),
    [`cancel_denom_elementwise`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Cancel factors between the elements of a matrix and a denominator.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a matrix of numerators and matrix of denominators.
  prefs: []
  type: TYPE_NORMAL
- en: Requires `gcd` in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Use [`cancel_denom()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom") to cancel factors
    between the matrix and the denominator while preserving the form of a matrix with
    a scalar denominator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`cancel_denom`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Characteristic polynomial of a square matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Computes the characteristic polynomial in a fully expanded form using division
    free arithmetic. If a factorization of the characteristic polynomial is needed
    then it is more efficient to call [`charpoly_factor_list()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list") than calling
    [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")
    and then factorizing the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'list: list of DomainElement'
  prefs: []
  type: TYPE_NORMAL
- en: coefficients of the characteristic polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly_factor_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the factorisation of the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly_factor_blocks`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks")'
  prefs: []
  type: TYPE_NORMAL
- en: A partial factorisation of the characteristic polynomial that can be computed
    more efficiently than either the full factorisation or the fully expanded polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Base case for [`charpoly_factor_blocks()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks") after
    block decomposition.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used internally by [`charpoly_factor_blocks()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks") as the
    base case for computing the characteristic polynomial of a block. It is more efficient
    to call [`charpoly_factor_blocks()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks"), [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly") or [`charpoly_factor_list()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list") rather
    than call this method directly.
  prefs: []
  type: TYPE_NORMAL
- en: This will use either the dense or the sparse implementation depending on the
    sparsity of the matrix and will clear denominators if possible before calling
    [`charpoly_berk()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk") to compute the
    characteristic polynomial using the Berkowitz algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"),
    [`charpoly_factor_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list"), [`charpoly_factor_blocks`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks"), [`charpoly_berk`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Compute the characteristic polynomial using the Berkowitz algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: This method directly calls the underlying implementation of the Berkowitz algorithm
    ([`sympy.polys.matrices.dense.ddm_berk()`](#sympy.polys.matrices.dense.ddm_berk
    "sympy.polys.matrices.dense.ddm_berk") or [`sympy.polys.matrices.sdm.sdm_berk()`](#sympy.polys.matrices.sdm.sdm_berk
    "sympy.polys.matrices.sdm.sdm_berk")).
  prefs: []
  type: TYPE_NORMAL
- en: This is used by [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly") and other methods as
    the base case for for computing the characteristic polynomial. However those methods
    will apply other optimizations such as block decomposition, clearing denominators
    and converting between dense and sparse representations before calling this method.
    It is more efficient to call those methods instead of this one but this method
    is provided for direct access to the Berkowitz algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"),
    [`charpoly_base`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_base
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_base"), [`charpoly_factor_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list"), [`charpoly_factor_blocks`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks"), [`sympy.polys.matrices.dense.ddm_berk`](#sympy.polys.matrices.dense.ddm_berk
    "sympy.polys.matrices.dense.ddm_berk"), [`sympy.polys.matrices.sdm.sdm_berk`](#sympy.polys.matrices.sdm.sdm_berk
    "sympy.polys.matrices.sdm.sdm_berk")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Partial factorisation of the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: This factorisation arises from a block structure of the matrix (if any) and
    so the factors are not guaranteed to be irreducible. The [`charpoly_factor_blocks()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks") method
    is the most efficient way to get a representation of the characteristic polynomial
    but the result is neither fully expanded nor fully factored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'list: list of pairs (factor, multiplicity)'
  prefs: []
  type: TYPE_NORMAL
- en: A partial factorization of the characteristic polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This computes a partial factorization using only the block structure of the
    matrix to reveal factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'These factors correspond to the two diagonal blocks in the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Use [`charpoly_factor_list()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list") to get
    a complete factorization into irreducibles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Use [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly") to get the expanded
    characteristic polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the fully expanded characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly_factor_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute a full factorization of the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Full factorization of the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'list: list of pairs (factor, multiplicity)'
  prefs: []
  type: TYPE_NORMAL
- en: A full factorization of the characteristic polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute the factorization of the characteristic polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Use [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly") to get the unfactorized
    characteristic polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The same calculations with `Matrix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: Expanded form of the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`charpoly_factor_blocks`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks")'
  prefs: []
  type: TYPE_NORMAL
- en: A partial factorisation of the characteristic polynomial that can be computed
    more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a domain found by [`construct_domain()`](reference.html#sympy.polys.constructor.construct_domain
    "sympy.polys.constructor.construct_domain").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Keyword arguments are passed to [`construct_domain()`](reference.html#sympy.polys.constructor.construct_domain
    "sympy.polys.constructor.construct_domain").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`construct_domain`](reference.html#sympy.polys.constructor.construct_domain
    "sympy.polys.constructor.construct_domain"), [`convert_to`](#sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to
    "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Clear denominators, but keep the domain unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The numerator matrix will be in the same domain as the original matrix unless
    `convert` is set to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The denominator is always in the associated ring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polytools.Poly.clear_denoms`](reference.html#sympy.polys.polytools.Poly.clear_denoms
    "sympy.polys.polytools.Poly.clear_denoms"), [`clear_denoms_rowwise`](#sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms_rowwise
    "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms_rowwise")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Clear denominators from each row of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The denominator matrix is a diagonal matrix with the denominators of each row
    on the diagonal. The invariants are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The numerator matrix will be in the same domain as the original matrix unless
    `convert` is set to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The domain of the denominator matrix is the associated ring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polytools.Poly.clear_denoms`](reference.html#sympy.polys.polytools.Poly.clear_denoms
    "sympy.polys.polytools.Poly.clear_denoms"), [`clear_denoms`](#sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms
    "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Returns the columnspace for the DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: The columns of this matrix form a basis for the columnspace.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return the gcd of the elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Requires `gcd` in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`primitive`](#sympy.polys.matrices.domainmatrix.DomainMatrix.primitive "sympy.polys.matrices.domainmatrix.DomainMatrix.primitive"),
    [`cancel_denom`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Change the domain of DomainMatrix to desired domain or field
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**K** : Represents the desired domain or field.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, `None` may be passed, in which case this method just returns
    a copy of this DomainMatrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix with the desired domain or field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Returns the determinant of a square [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'determinant: DomainElement'
  prefs: []
  type: TYPE_NORMAL
- en: Determinant of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of DomainMatrix is not a Field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Return diagonal matrix with entries from `diagonal`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Get the diagonal entries of the matrix as a list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_diagonal`](#sympy.polys.matrices.domainmatrix.DomainMatrix.is_diagonal
    "sympy.polys.matrices.domainmatrix.DomainMatrix.is_diagonal"), [`diag`](#sympy.polys.matrices.domainmatrix.DomainMatrix.diag
    "sympy.polys.matrices.domainmatrix.DomainMatrix.diag")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate polynomial function of a matrix \(p(A)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval_poly_mul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly_mul
    "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly_mul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate polynomial matrix product \(p(A) \times B\).
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate the polynomial matrix product \(p(A) \times B\) using Horner’s method
    without creating the matrix \(p(A)\) explicitly. If \(B\) is a column matrix then
    this method will only use matrix-vector multiplies and no matrix-matrix multiplies
    are needed.
  prefs: []
  type: TYPE_NORMAL
- en: If \(B\) is square or wide or if \(A\) can be represented in a simpler domain
    than \(B\) then it might be faster to evaluate \(p(A)\) explicitly (see [`eval_poly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly")) and then multiply
    with \(B\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval_poly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly"),
    [`solve_den_charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Return identity matrix of size n or shape (m, n).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Convert Matrix to DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**M: Matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Returns DomainMatrix with identical elements as M
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: We can keep internal representation as ddm using fmt=’dense’ >>> from sympy
    import Matrix, QQ >>> from sympy.polys.matrices import DomainMatrix >>> A = DomainMatrix.from_Matrix(Matrix([[QQ(1,
    2), QQ(3, 4)], [QQ(0, 1), QQ(0, 1)]]), fmt=’dense’) >>> A.rep [[1/2, 3/4], [0,
    0]]
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Matrix`](../matrices/dense.html#sympy.matrices.dense.Matrix "sympy.matrices.dense.Matrix")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nrows: number of rows**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ncols: number of cols**'
  prefs: []
  type: TYPE_NORMAL
- en: '**elemsdict: dict of dicts containing non-zero elements of the DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix containing elements of elemsdict
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list_sympy`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Create sparse [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") from dict of dict (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_dod()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod")
    for explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod"),
    [`from_dod_like`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod_like
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod_like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Create [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    like `self` from dict of dict (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_dod()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod")
    for explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod"),
    [`from_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Create [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    from dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_dok()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok")
    for explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Reconstruct [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") after calling [`to_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz").
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz") for explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Convert a list of lists into a DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rows: list of lists**'
  prefs: []
  type: TYPE_NORMAL
- en: Each element of the inner lists should be either the single arg, or tuple of
    args, that would be passed to the domain constructor in order to form an element
    of the domain. See examples.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix containing elements defined in rows
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list_sympy`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Create [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    from flat list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Convert a list of lists of Expr into a DomainMatrix using construct_domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nrows: number of rows**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ncols: number of columns**'
  prefs: []
  type: TYPE_NORMAL
- en: '**rows: list of lists**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix containing elements of rows
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.constructor.construct_domain`](reference.html#sympy.polys.constructor.construct_domain
    "sympy.polys.constructor.construct_domain"), [`from_dict_sympy`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Create a new DomainMatrix efficiently from DDM/SDM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rep: SDM or DDM**'
  prefs: []
  type: TYPE_NORMAL
- en: The internal sparse or dense representation of the matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: A [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    wrapping *rep*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    with an dense internal representation as [`DDM`](#sympy.polys.matrices.ddm.DDM
    "sympy.polys.matrices.ddm.DDM"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    with a sparse internal representation as [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This takes ownership of rep as its internal representation. If rep is being
    mutated elsewhere then a copy should be provided to `from_rep`. Only minimal verification
    or checking is done on *rep* as this is supposed to be an efficient internal routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Horizontally stack the given matrices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrices to stack horizontally.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix by stacking horizontally.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`unify`](#sympy.polys.matrices.domainmatrix.DomainMatrix.unify "sympy.polys.matrices.domainmatrix.DomainMatrix.unify")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Finds the inverse of the DomainMatrix if exists
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after inverse
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of DomainMatrix not a Field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**DMNonSquareMatrixError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the DomainMatrix is not a not Square DomainMatrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`neg`](#sympy.polys.matrices.domainmatrix.DomainMatrix.neg "sympy.polys.matrices.domainmatrix.DomainMatrix.neg")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Return the inverse as a [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") with denominator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The method to use to compute the inverse. Can be one of `None`, `'rref'` or
    `'charpoly'`. If `None` then the method is chosen automatically (see [`solve_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den") for details).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(inv, den)** : ([`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix"), [`DomainElement`](domainsref.html#sympy.polys.domains.domainelement.DomainElement
    "sympy.polys.domains.domainelement.DomainElement"))'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse matrix and its denominator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is more or less equivalent to [`adj_det()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det
    "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det") except that `inv`
  prefs: []
  type: TYPE_NORMAL
- en: and `den` are not guaranteed to be the adjugate and inverse. The
  prefs: []
  type: TYPE_NORMAL
- en: ratio `inv/den` is equivalent to `adj/det` but some factors
  prefs: []
  type: TYPE_NORMAL
- en: might be cancelled between `inv` and `den`. In simple cases this
  prefs: []
  type: TYPE_NORMAL
- en: might just be a minus sign so that `(inv, den) == (-adj, -det)` but
  prefs: []
  type: TYPE_NORMAL
- en: factors more complicated than `-1` can also be cancelled.
  prefs: []
  type: TYPE_NORMAL
- en: Cancellation is not guaranteed to be complete so `inv` and `den`
  prefs: []
  type: TYPE_NORMAL
- en: may not be on lowest terms. The denominator `den` will be zero if and
  prefs: []
  type: TYPE_NORMAL
- en: only if the determinant is zero.
  prefs: []
  type: TYPE_NORMAL
- en: If the actual adjugate and determinant are needed, use [`adj_det()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det
    "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det")
  prefs: []
  type: TYPE_NORMAL
- en: instead. If the intention is to compute the inverse matrix or solve a
  prefs: []
  type: TYPE_NORMAL
- en: system of equations then [`inv_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den") is more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`inv`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"),
    [`det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.det "sympy.polys.matrices.domainmatrix.DomainMatrix.det"),
    [`adj_det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det"),
    [`solve_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: True if the matrix is diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: Can return true for non-square matrices. A matrix is diagonal if `M[i,j] ==
    0` whenever `i != j`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_upper`](#sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"),
    [`is_lower`](#sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"),
    [`is_square`](#sympy.polys.matrices.domainmatrix.DomainMatrix.is_square "sympy.polys.matrices.domainmatrix.DomainMatrix.is_square"),
    [`diagonal`](#sympy.polys.matrices.domainmatrix.DomainMatrix.diagonal "sympy.polys.matrices.domainmatrix.DomainMatrix.diagonal")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is lower-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: True if the matrix is square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is upper-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over indices and values of nonzero elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iter_values`](#sympy.polys.matrices.domainmatrix.DomainMatrix.iter_values
    "sympy.polys.matrices.domainmatrix.DomainMatrix.iter_values"), [`to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok"), [`sympy.matrices.matrixbase.MatrixBase.iter_items`](../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.iter_items
    "sympy.matrices.matrixbase.MatrixBase.iter_items")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over nonzero elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iter_items`](#sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items "sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items"),
    [`to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"), [`sympy.matrices.matrixbase.MatrixBase.iter_values`](../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.iter_values
    "sympy.matrices.matrixbase.MatrixBase.iter_values")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Lenstra–Lenstra–Lovász (LLL) basis reduction algorithm. See [[R772]](#r772)
    and [[R773]](#r773).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**delta** : QQ, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The Lovász parameter. Must be in the interval (0.25, 1), with larger values
    producing a more reduced basis. The default is 0.75 for historical reasons.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The reduced basis as a DomainMatrix over ZZ.
  prefs: []
  type: TYPE_NORMAL
- en: Throws
  prefs: []
  type: TYPE_NORMAL
- en: 'DMValueError: if delta is not in the range (0.25, 1) DMShapeError: if the matrix
    is not of shape (m, n) with m <= n DMDomainError: if the matrix domain is not
    ZZ DMRankError: if the matrix contains linearly dependent rows'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The implementation is derived from the Maple code given in Figures 4.3 and 4.4
    of [[R774]](#r774) (pp.68-69). It uses the efficient method of only calculating
    state updates as they are required.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lll_transform`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R772] ([1](#id1),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm](https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[R773] ([1](#id2),[2](#id5))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20221029115428/https://web.cs.elte.hu/~lovasz/scans/lll.pdf](https://web.archive.org/web/20221029115428/https://web.cs.elte.hu/~lovasz/scans/lll.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[R774] ([1](#id3),[2](#id6))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Murray R. Bremner, “Lattice Basis Reduction: An Introduction to the LLL Algorithm
    and Its Applications”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Lenstra–Lenstra–Lovász (LLL) basis reduction algorithm and returns
    the reduced basis and transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Parameters, algorithm and basis are the same as for [`lll()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lll") except that the return value
    is a tuple \((B, T)\) with \(B\) the reduced basis and \(T\) a transformation
    matrix. The original basis \(A\) is transformed to \(B\) with \(T*A == B\). If
    only \(B\) is needed then [`lll()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lll") should be used as it is
    a little faster.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lll`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll "sympy.polys.matrices.domainmatrix.DomainMatrix.lll")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Returns Lower and Upper decomposition of the DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: (L, U, exchange)
  prefs: []
  type: TYPE_NORMAL
- en: L, U are Lower and Upper decomposition of the DomainMatrix, exchange is the
    list of indices of rows exchanged in the decomposition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of DomainMatrix not a Field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lu_solve`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Solver for DomainMatrix x in the A*x = B
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rhs** : DomainMatrix B'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: x in A*x = B
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DMShapeError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the DomainMatrix A and rhs have different number of rows
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of DomainMatrix A not a Field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lu`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lu "sympy.polys.matrices.domainmatrix.DomainMatrix.lu")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Performs matrix multiplication of two DomainMatrix matrices
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A, B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: to multiply
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after multiplication
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.mul "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"),
    [`pow`](#sympy.polys.matrices.domainmatrix.DomainMatrix.pow "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"),
    [`add`](#sympy.polys.matrices.domainmatrix.DomainMatrix.add "sympy.polys.matrices.domainmatrix.DomainMatrix.add"),
    [`sub`](#sympy.polys.matrices.domainmatrix.DomainMatrix.sub "sympy.polys.matrices.domainmatrix.DomainMatrix.sub")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Performs term by term multiplication for the second DomainMatrix w.r.t first
    DomainMatrix. Returns a DomainMatrix whose rows are list of DomainMatrix matrices
    created after term by term multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A, B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: matrices to multiply term-wise
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after term by term multiplication
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`matmul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.matmul "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Returns the negative of DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A** : Represents a DomainMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after Negation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Number of nonzero elements in the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Returns the nullspace for the DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**divide_last** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If False (the default), the vectors are not normalized and the RREF is computed
    using [`rref_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den") and the denominator
    is discarded. If True, then each row is divided by its final element; the domain
    must be a field in this case.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: The rows of this matrix form a basis for the nullspace.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned matrix is a basis for the nullspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Nullspace can also be computed for non-field rings. If the ring is not a field
    then division is not used. Setting `divide_last` to True will raise an error in
    this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Over a ring with `gcd` defined the nullspace can potentially be reduced with
    [`primitive()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.primitive "sympy.polys.matrices.domainmatrix.DomainMatrix.primitive"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'A matrix over a ring can often be normalized by converting it to a field but
    it is often a bad idea to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'The unnormalized form here is nicer than the normalized form that spreads a
    large denominator throughout the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nullspace_from_rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref"), [`rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"), [`rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"), [`rowspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Compute nullspace from rref and pivots.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix can be any domain.
  prefs: []
  type: TYPE_NORMAL
- en: The matrix must be in reduced row echelon form already. Otherwise the result
    will be incorrect. Use [`rref()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref") or [`rref_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den") first to get the reduced
    row echelon form or use [`nullspace()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace") instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nullspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"),
    [`rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"),
    [`rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"),
    [`sympy.polys.matrices.sdm.SDM.nullspace_from_rref`](#sympy.polys.matrices.sdm.SDM.nullspace_from_rref
    "sympy.polys.matrices.sdm.SDM.nullspace_from_rref"), [`sympy.polys.matrices.ddm.DDM.nullspace_from_rref`](#sympy.polys.matrices.ddm.DDM.nullspace_from_rref
    "sympy.polys.matrices.ddm.DDM.nullspace_from_rref")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Returns a DomainMatrix of 1s, of size shape, belonging to the specified domain
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Computes A**n
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A** : DomainMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : exponent for A'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix on computing A**n
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: if n is negative.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`matmul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.matmul "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Factor out gcd of the elements of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Requires `gcd` in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`content`](#sympy.polys.matrices.domainmatrix.DomainMatrix.content "sympy.polys.matrices.domainmatrix.DomainMatrix.content"),
    [`cancel_denom`](#sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom
    "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Returns the rowspace for the DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: The rows of this matrix form a basis for the rowspace.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Returns reduced-row echelon form (RREF) and list of pivots.
  prefs: []
  type: TYPE_NORMAL
- en: If the domain is not a field then it will be converted to a field. See [`rref_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den") for the fraction-free
    version of this routine that returns RREF with denominator instead.
  prefs: []
  type: TYPE_NORMAL
- en: The domain must either be a field or have an associated fraction field (see
    [`to_field()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_field "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** : str, optional (default: ‘auto’)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method to use to compute the RREF. The default is `''auto''`, which will
    attempt to choose the fastest method. The other options are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`A.rref(method=''GJ'')` uses Gauss-Jordan elimination with division. If the
    domain is not a field then it will be converted to a field with [`to_field()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_field
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field") first and RREF will
    be computed by inverting the pivot elements in each row. This is most efficient
    for very sparse matrices or for matrices whose elements have complex denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''FF'')` uses fraction-free Gauss-Jordan elimination. Elimination
    is performed using exact division (`exquo`) to control the growth of the coefficients.
    In this case the current domain is always used for elimination but if the domain
    is not a field then it will be converted to a field at the end and divided by
    the denominator. This is most efficient for dense matrices or for matrices with
    simple denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''CD'')` clears the denominators before using fraction-free
    Gauss-Jordan elimination in the assoicated ring. This is most efficient for dense
    matrices with very simple denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''GJ_dense'')`, `A.rref(method=''FF_dense'')`, and `A.rref(method=''CD_dense'')`
    are the same as the above methods except that the dense implementations of the
    algorithms are used. By default `A.rref(method=''auto'')` will usually choose
    the sparse implementations for RREF.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Regardless of which algorithm is used the returned matrix will always have the
    same format (sparse or dense) as the input and its domain will always be the field
    of fractions of the input domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: (DomainMatrix, list)
  prefs: []
  type: TYPE_NORMAL
- en: reduced-row echelon form and list of pivots for the DomainMatrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: RREF with denominator
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.sdm.sdm_irref`](#sympy.polys.matrices.sdm.sdm_irref
    "sympy.polys.matrices.sdm.sdm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse implementation of `method='GJ'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.sdm.sdm_rref_den`](#sympy.polys.matrices.sdm.sdm_rref_den
    "sympy.polys.matrices.sdm.sdm_rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse implementation of `method='FF'` and `method='CD'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref`](#sympy.polys.matrices.dense.ddm_irref
    "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: Dense implementation of `method='GJ'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref_den`](#sympy.polys.matrices.dense.ddm_irref_den
    "sympy.polys.matrices.dense.ddm_irref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Dense implementation of `method='FF'` and `method='CD'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`clear_denoms`](#sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms
    "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms")'
  prefs: []
  type: TYPE_NORMAL
- en: Clear denominators from a matrix, used by `method='CD'` and by `method='GJ'`
    when the original domain is not a field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Returns reduced-row echelon form with denominator and list of pivots.
  prefs: []
  type: TYPE_NORMAL
- en: Requires exact division in the ground domain (`exquo`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method** : str, optional (default: ‘auto’)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method to use to compute the RREF. The default is `''auto''`, which will
    attempt to choose the fastest method. The other options are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`A.rref(method=''FF'')` uses fraction-free Gauss-Jordan elimination. Elimination
    is performed using exact division (`exquo`) to control the growth of the coefficients.
    In this case the current domain is always used for elimination and the result
    is always returned as a matrix over the current domain. This is most efficient
    for dense matrices or for matrices with simple denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''CD'')` clears denominators before using fraction-free Gauss-Jordan
    elimination in the assoicated ring. The result will be converted back to the original
    domain unless `keep_domain=False` is passed in which case the result will be over
    the ring used for elimination. This is most efficient for dense matrices with
    very simple denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''GJ'')` uses Gauss-Jordan elimination with division. If the
    domain is not a field then it will be converted to a field with [`to_field()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_field
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field") first and RREF will
    be computed by inverting the pivot elements in each row. The result is converted
    back to the original domain by clearing denominators unless `keep_domain=False`
    is passed in which case the result will be over the field used for elimination.
    This is most efficient for very sparse matrices or for matrices whose elements
    have complex denominators.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`A.rref(method=''GJ_dense'')`, `A.rref(method=''FF_dense'')`, and `A.rref(method=''CD_dense'')`
    are the same as the above methods except that the dense implementations of the
    algorithms are used. By default `A.rref(method=''auto'')` will usually choose
    the sparse implementations for RREF.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Regardless of which algorithm is used the returned matrix will always have the
    same format (sparse or dense) as the input and if `keep_domain=True` its domain
    will always be the same as the input.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**keep_domain** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True (the default), the domain of the returned matrix and denominator are
    the same as the domain of the input matrix. If False, the domain of the returned
    matrix might be changed to an associated ring or field if the algorithm used a
    different domain. This is useful for efficiency if the caller does not need the
    result to be in the original domain e.g. it avoids clearing denominators in the
    case of `A.rref(method='GJ')`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: (DomainMatrix, scalar, list)
  prefs: []
  type: TYPE_NORMAL
- en: Reduced-row echelon form, denominator and list of pivot indices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref "sympy.polys.matrices.domainmatrix.DomainMatrix.rref")'
  prefs: []
  type: TYPE_NORMAL
- en: RREF without denominator for field domains.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.sdm.sdm_irref`](#sympy.polys.matrices.sdm.sdm_irref
    "sympy.polys.matrices.sdm.sdm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse implementation of `method='GJ'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.sdm.sdm_rref_den`](#sympy.polys.matrices.sdm.sdm_rref_den
    "sympy.polys.matrices.sdm.sdm_rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse implementation of `method='FF'` and `method='CD'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref`](#sympy.polys.matrices.dense.ddm_irref
    "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: Dense implementation of `method='GJ'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref_den`](#sympy.polys.matrices.dense.ddm_irref_den
    "sympy.polys.matrices.dense.ddm_irref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Dense implementation of `method='FF'` and `method='CD'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`clear_denoms`](#sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms
    "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms")'
  prefs: []
  type: TYPE_NORMAL
- en: Clear denominators from a matrix, used by `method='CD'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Compute the strongly connected components of a DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: List of lists of integers
  prefs: []
  type: TYPE_NORMAL
- en: Each list represents a strongly connected component.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A square matrix can be considered as the adjacency matrix for a directed graph
    where the row and column indices are the vertices. In this graph if there is an
    edge from vertex `i` to vertex `j` if `M[i, j]` is nonzero. This routine computes
    the strongly connected components of that graph which are subsets of the rows
    and columns that are connected by some nonzero element of the matrix. The strongly
    connected components are useful because many operations such as the determinant
    can be computed by working with the submatrices corresponding to each component.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the strongly connected components of a matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute the determinant from the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'The components are given in reverse topological order and represent a permutation
    of the rows and columns that will bring the matrix into block lower-triangular
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.matrices.matrixbase.MatrixBase.strongly_connected_components`](../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.strongly_connected_components
    "sympy.matrices.matrixbase.MatrixBase.strongly_connected_components"), [`sympy.utilities.iterables.strongly_connected_components`](../utilities/iterables.html#sympy.utilities.iterables.strongly_connected_components
    "sympy.utilities.iterables.strongly_connected_components")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Solve matrix equation \(Ax = b\) without fractions in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**self** : [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `m x n` matrix \(A\) in the equation \(Ax = b\). Underdetermined systems
    are not supported so `m >= n`: \(A\) should be square or have more rows than columns.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b** : [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  prefs: []
  type: TYPE_NORMAL
- en: The `n x m` matrix \(b\) for the rhs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**cp** : list of [`DomainElement`](domainsref.html#sympy.polys.domains.domainelement.DomainElement
    "sympy.polys.domains.domainelement.DomainElement"), optional'
  prefs: []
  type: TYPE_NORMAL
- en: The characteristic polynomial of the matrix \(A\). If not given, it will be
    computed using [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**method: str, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: The method to use for solving the system. Can be one of `None`, `'charpoly'`
    or `'rref'`. If `None` (the default) then the method will be chosen automatically.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `charpoly` method uses [`solve_den_charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly") and can only
    be used if the matrix is square. This method is division free and can be used
    with any domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `rref` method is fraction free but requires exact division in the ground
    domain (`exquo`). This is also suitable for most domains. This method can be used
    with overdetermined systems (more equations than unknowns) but not underdetermined
    systems as a unique solution is sought.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(xnum, xden)** : (DomainMatrix, DomainElement)'
  prefs: []
  type: TYPE_NORMAL
- en: The solution of the equation \(Ax = b\) as a pair consisting of an `n x m` matrix
    numerator `xnum` and a scalar denominator `xden`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The solution \(x\) is given by `x = xnum / xden`. The division free
  prefs: []
  type: TYPE_NORMAL
- en: invariant is `A * xnum == xden * b`. If \(A\) is square then the
  prefs: []
  type: TYPE_NORMAL
- en: denominator `xden` will be a divisor of the determinant \(det(A)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DMNonInvertibleMatrixError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the system \(Ax = b\) does not have a unique solution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Solve a matrix equation over the integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Solve a matrix equation over a polynomial ring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution can be expressed over a fraction field which will cancel gcds
    between the denominator and the elements of the numerator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'When solving a large system of equations this cancellation step might be a
    lot slower than [`solve_den()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den") itself. The solution
    can also be expressed as a `Matrix` without attempting any polynomial cancellation
    between the numerator and denominator giving a less simplified result more quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`solve_den_charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly"), [`solve_den_rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref"), [`inv_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Solve matrix equation \(Ax = b\) using the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: This method solves the square matrix equation \(Ax = b\) for \(x\) using the
    characteristic polynomial without any division or fractions in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**self** : DomainMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: The `n x n` matrix \(A\) in the equation \(Ax = b\). Must be square and invertible.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b** : DomainMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: The `n x m` matrix \(b\) for the rhs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**cp** : list, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The characteristic polynomial of the matrix \(A\) if known. If not given, it
    will be computed using [`charpoly()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If `True` (the default) check that the determinant is not zero and raise an
    error if it is. If `False` then if the determinant is zero the return value will
    be equal to `(A.adjugate()*b, 0)`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(xnum, detA)** : (DomainMatrix, DomainElement)'
  prefs: []
  type: TYPE_NORMAL
- en: The solution of the equation \(Ax = b\) as a matrix numerator and scalar denominator
    pair. The denominator is equal to the determinant of \(A\) and the numerator is
    `adj(A)*b`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The solution \(x\) is given by `x = xnum / detA`. The division free
  prefs: []
  type: TYPE_NORMAL
- en: invariant is `A * xnum == detA * b`.
  prefs: []
  type: TYPE_NORMAL
- en: If `b` is the identity matrix, then `xnum` is the adjugate matrix
  prefs: []
  type: TYPE_NORMAL
- en: and we have `A * adj(A) == detA * I`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Solve a matrix equation over the integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`solve_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Main frontend for solving matrix equations with denominator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`solve_den_rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref")'
  prefs: []
  type: TYPE_NORMAL
- en: Solve matrix equations using fraction-free RREF.
  prefs: []
  type: TYPE_NORMAL
- en: '[`inv_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Invert a matrix using the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Solve matrix equation \(Ax = b\) using fraction-free RREF
  prefs: []
  type: TYPE_NORMAL
- en: Solves the matrix equation \(Ax = b\) for \(x\) and returns the solution as
    a numerator/denominator pair.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`solve_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"),
    [`solve_den_charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Subtracts two DomainMatrix matrices of the same Domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A, B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: matrices to subtract
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix after Subtraction
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DMShapeError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the dimensions of the two DomainMatrix are not equal
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of the two DomainMatrix are not same
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`add`](#sympy.polys.matrices.domainmatrix.DomainMatrix.add "sympy.polys.matrices.domainmatrix.DomainMatrix.add"),
    [`matmul`](#sympy.polys.matrices.domainmatrix.DomainMatrix.matmul "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Convert DomainMatrix to Matrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix
  prefs: []
  type: TYPE_NORMAL
- en: MutableDenseMatrix for the DomainMatrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_Matrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    representation of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_sdm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_sdm "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sdm"),
    [`to_dense`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"),
    [`sympy.polys.matrices.ddm.DDM.to_sdm`](#sympy.polys.matrices.ddm.DDM.to_sdm "sympy.polys.matrices.ddm.DDM.to_sdm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Return a dense DomainMatrix representation of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    representation of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm"),
    [`to_dense`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"),
    [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    or [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM") representation
    of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    representation can only be used if the ground types are `flint` and the ground
    domain is supported by `python-flint`. This method will return a [`DFM`](#sympy.polys.matrices._dfm.DFM
    "sympy.polys.matrices._dfm.DFM") representation if possible, but will return a
    [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM") representation
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: Always return a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dfm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    representation or raise an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dense`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert internally to a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    or [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
  prefs: []
  type: TYPE_NORMAL
- en: '[`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    dense FLINT matrix representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")'
  prefs: []
  type: TYPE_NORMAL
- en: The Python [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    dense domain matrix representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    to dictionary of dictionaries (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a dictionary of dictionaries representing the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod"),
    [`from_dod_like`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod_like
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod_like"), [`to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok"), [`to_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"), [`to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"), [`to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"), [`sympy.matrices.matrixbase.MatrixBase.todod`](../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.todod
    "sympy.matrices.matrixbase.MatrixBase.todod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    to dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'The matrix can be reconstructed by calling [`from_dok()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok") although the reconstructed
    matrix will always be in sparse format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok"),
    [`to_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"),
    [`to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"), [`to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Returns a DomainMatrix with the appropriate field
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix with the appropriate field
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    to list of nonzero elements and data.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a tuple `(elements, data)` where `elements` is a list of elements of
    the matrix with zeros possibly excluded. The matrix can be reconstructed by passing
    these to [`from_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz"). The idea is to
    be able to modify a flat list of the elements and then create a new matrix of
    the same shape with the modified elements in the same positions.
  prefs: []
  type: TYPE_NORMAL
- en: The format of `data` differs depending on whether the underlying representation
    is dense or sparse but either way it represents the positions of the elements
    in the list in a way that [`from_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz") can use to reconstruct
    the matrix. The [`from_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz") method should be
    called on the same [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") that was used to call [`to_flat_nz()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a matrix with the elements doubled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    to list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"),
    [`to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"), [`to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"), [`to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    to flat list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat"), [`to_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"), [`to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"), [`to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    representation of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm"),
    [`to_sparse`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"),
    [`sympy.polys.matrices.sdm.SDM.to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Return a sparse DomainMatrix representation of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Matrix transpose of `self`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Unifies the domains and the format of self and other matrices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**others** : DomainMatrix'
  prefs: []
  type: TYPE_NORMAL
- en: '**fmt: string ‘dense’, ‘sparse’ or `None` (default)**'
  prefs: []
  type: TYPE_NORMAL
- en: The preferred format to convert to if self and other are not already in the
    same format. If \(None\) or not specified then no conversion if performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple[DomainMatrix]
  prefs: []
  type: TYPE_NORMAL
- en: Matrices with unified domain and format
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Unify the domain of DomainMatrix that have different domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'Unify the format (dense or sparse):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`convert_to`](#sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"),
    [`to_dense`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"),
    [`to_sparse`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Vertically stack the given matrices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**B: DomainMatrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrices to stack vertically.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix
  prefs: []
  type: TYPE_NORMAL
- en: DomainMatrix by stacking vertically.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`unify`](#sympy.polys.matrices.domainmatrix.DomainMatrix.unify "sympy.polys.matrices.domainmatrix.DomainMatrix.unify")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Returns a zero DomainMatrix of size shape, belonging to the specified domain
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Module for the DDM class.
  prefs: []
  type: TYPE_NORMAL
- en: The DDM class is an internal representation used by DomainMatrix. The letters
    DDM stand for Dense Domain Matrix. A DDM instance represents a matrix using elements
    from a polynomial Domain (e.g. ZZ, QQ, …) in a dense-matrix representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'The ddm_* functions are designed to operate on DDM as well as on an ordinary
    list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that ddm_idet modifies the input matrix in-place. It is recommended to
    use the DDM.det method as a friendlier interface to this instead which takes care
    of copying the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Normally DDM would not be used directly and is just part of the internal representation
    of DomainMatrix which adds further functionality including e.g. unifying domains.
  prefs: []
  type: TYPE_NORMAL
- en: The dense format used by DDM is a list of lists of elements e.g. the 2x2 identity
    matrix is like [[1, 0], [0, 1]]. The DDM class itself is a subclass of list and
    its list items are plain lists. Elements are accessed as e.g. ddm[i][j] where
    ddm[i] gives the ith row and ddm[i][j] gets the element in the jth column of that
    row. Subclassing list makes e.g. iteration and indexing very efficient. We do
    not override __getitem__ because it would lose that benefit.
  prefs: []
  type: TYPE_NORMAL
- en: The core routines are implemented by the ddm_* functions defined in dense.py.
    Those functions are intended to be able to operate on a raw list-of-lists representation
    of matrices with most functions operating in-place. The DDM class takes care of
    copying etc and also stores a Domain object associated with its elements. This
    makes it possible to implement things like A + B with domain checking and also
    shape checking so that the list of lists representation is friendlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Dense matrix based on polys domain elements
  prefs: []
  type: TYPE_NORMAL
- en: This is a list subclass and is a wrapper for a list of lists that supports basic
    matrix arithmetic +, -, *, **.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: a + b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Coefficients of characteristic polynomial of a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Determinant of a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Returns a square diagonal matrix with *values* on the diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.diag`](#sympy.polys.matrices.domainmatrix.DomainMatrix.diag
    "sympy.polys.matrices.domainmatrix.DomainMatrix.diag")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of the elements from the diagonal of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    from a dictionary of dictionaries (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dod`](#sympy.polys.matrices.ddm.DDM.to_dod "sympy.polys.matrices.ddm.DDM.to_dod"),
    [`sympy.polys.matrices.sdm.SDM.from_dod`](#sympy.polys.matrices.sdm.SDM.from_dod
    "sympy.polys.matrices.sdm.SDM.from_dod"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    from a dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dok`](#sympy.polys.matrices.ddm.DDM.to_dok "sympy.polys.matrices.ddm.DDM.to_dok"),
    [`sympy.polys.matrices.sdm.SDM.from_dok`](#sympy.polys.matrices.sdm.SDM.from_dok
    "sympy.polys.matrices.sdm.SDM.from_dok"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Reconstruct a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    after calling [`to_flat_nz()`](#sympy.polys.matrices.ddm.DDM.to_flat_nz "sympy.polys.matrices.ddm.DDM.to_flat_nz").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_flat_nz`](#sympy.polys.matrices.ddm.DDM.to_flat_nz "sympy.polys.matrices.ddm.DDM.to_flat_nz"),
    [`sympy.polys.matrices.sdm.SDM.from_flat_nz`](#sympy.polys.matrices.sdm.SDM.from_flat_nz
    "sympy.polys.matrices.sdm.SDM.from_flat_nz"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    from a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list_flat`](#sympy.polys.matrices.ddm.DDM.from_list_flat "sympy.polys.matrices.ddm.DDM.from_list_flat")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Create a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    from a flat list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_list_flat`](#sympy.polys.matrices.ddm.DDM.to_list_flat "sympy.polys.matrices.ddm.DDM.to_list_flat"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Horizontally stacks [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Inverse of a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is diagonal. True can be returned even if the matrix
    is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is lower-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is upper-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix has all zero entries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over indices and values of nonzero elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iter_values`](#sympy.polys.matrices.ddm.DDM.iter_values "sympy.polys.matrices.ddm.DDM.iter_values"),
    [`to_dok`](#sympy.polys.matrices.ddm.DDM.to_dok "sympy.polys.matrices.ddm.DDM.to_dok"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items`](#sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items
    "sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Iterater over the non-zero values of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iter_items`](#sympy.polys.matrices.ddm.DDM.iter_items "sympy.polys.matrices.ddm.DDM.iter_items"),
    [`to_list_flat`](#sympy.polys.matrices.ddm.DDM.to_list_flat "sympy.polys.matrices.ddm.DDM.to_list_flat"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.iter_values`](#sympy.polys.matrices.domainmatrix.DomainMatrix.iter_values
    "sympy.polys.matrices.domainmatrix.DomainMatrix.iter_values")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: L, U decomposition of a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: x where a*x = b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: a @ b (matrix product)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: -a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Number of non-zero entries in [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nnz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nnz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Returns a basis for the nullspace of a.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix must be a field.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rref`](#sympy.polys.matrices.ddm.DDM.rref "sympy.polys.matrices.ddm.DDM.rref"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Compute the nullspace of a matrix from its rref.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix can be any domain.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a tuple (basis, nonpivots).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace")'
  prefs: []
  type: TYPE_NORMAL
- en: The higher level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: Reduced-row echelon form of a and list of pivots.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref`](#sympy.polys.matrices.dense.ddm_irref
    "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: The underlying algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: Reduced-row echelon form of a with denominator and list of pivots
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref_den`](#sympy.polys.matrices.dense.ddm_irref_den
    "sympy.polys.matrices.dense.ddm_irref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: The underlying algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Strongly connected components of a square matrix *a*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.scc`](#sympy.polys.matrices.domainmatrix.DomainMatrix.scc
    "sympy.polys.matrices.domainmatrix.DomainMatrix.scc")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: a - b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM").
  prefs: []
  type: TYPE_NORMAL
- en: This just returns `self` but exists to parallel the corresponding method in
    other matrix types like [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_sdm`](#sympy.polys.matrices.ddm.DDM.to_sdm "sympy.polys.matrices.ddm.DDM.to_sdm"),
    [`to_dfm`](#sympy.polys.matrices.ddm.DDM.to_dfm "sympy.polys.matrices.ddm.DDM.to_dfm"),
    [`to_dfm_or_ddm`](#sympy.polys.matrices.ddm.DDM.to_dfm_or_ddm "sympy.polys.matrices.ddm.DDM.to_dfm_or_ddm"),
    [`sympy.polys.matrices.sdm.SDM.to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Convert to [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    to [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM"), [`sympy.polys.matrices._dfm.DFM.to_ddm`](#sympy.polys.matrices._dfm.DFM.to_ddm
    "sympy.polys.matrices._dfm.DFM.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Convert to [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    if possible or otherwise return self.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dfm`](#sympy.polys.matrices.ddm.DDM.to_dfm "sympy.polys.matrices.ddm.DDM.to_dfm"),
    [`to_ddm`](#sympy.polys.matrices.ddm.DDM.to_ddm "sympy.polys.matrices.ddm.DDM.to_ddm"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a dictionary of dictionaries (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dod`](#sympy.polys.matrices.ddm.DDM.from_dod "sympy.polys.matrices.ddm.DDM.from_dod"),
    [`sympy.polys.matrices.sdm.SDM.to_dod`](#sympy.polys.matrices.sdm.SDM.to_dod "sympy.polys.matrices.sdm.SDM.to_dod"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    to dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dok`](#sympy.polys.matrices.ddm.DDM.from_dok "sympy.polys.matrices.ddm.DDM.from_dok"),
    [`sympy.polys.matrices.sdm.SDM.to_dok`](#sympy.polys.matrices.sdm.SDM.to_dok "sympy.polys.matrices.sdm.SDM.to_dok"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a flat list of nonzero elements and data.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is used to operate on a list of the elements of a matrix and then reconstruct
    a matrix using [`from_flat_nz()`](#sympy.polys.matrices.ddm.DDM.from_flat_nz "sympy.polys.matrices.ddm.DDM.from_flat_nz").
    Zero elements are included in the list but that may change in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_flat_nz`](#sympy.polys.matrices.ddm.DDM.from_flat_nz "sympy.polys.matrices.ddm.DDM.from_flat_nz"),
    [`sympy.polys.matrices.sdm.SDM.to_flat_nz`](#sympy.polys.matrices.sdm.SDM.to_flat_nz
    "sympy.polys.matrices.sdm.SDM.to_flat_nz"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_list_flat`](#sympy.polys.matrices.ddm.DDM.to_list_flat "sympy.polys.matrices.ddm.DDM.to_list_flat"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_list`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a flat list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM"), [`sympy.polys.matrices.sdm.SDM.to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm
    "sympy.polys.matrices.sdm.SDM.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Vertically stacks [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Module for the ddm_* routines for operating on a matrix in list of lists matrix
    representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'These routines are used internally by the DDM class which also provides a friendlier
    interface for them. The idea here is to implement core matrix routines in a way
    that can be applied to any simple list representation without the need to use
    any particular matrix class. For example we can compute the RREF of a matrix like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: These are lower-level routines that work mostly in place.The routines at this
    level should not need to know what the domain of the elements is but should ideally
    document what operations they will use and what functions they need to be provided
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next-level up is the DDM class which uses these routines but wraps them
    up with an interface that handles copying etc and keeps track of the Domain of
    the elements of the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Type variable for the elements of the matrix that are in a ring
  prefs: []
  type: TYPE_NORMAL
- en: alias of TypeVar(‘R’, bound=[`RingElement`](#sympy.polys.matrices._typing.RingElement
    "sympy.polys.matrices._typing.RingElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Type variable for the elements of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: alias of TypeVar(‘T’)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Berkowitz algorithm for computing the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Berkowitz algorithm is a division-free algorithm for computing the characteristic
    polynomial of a matrix over any commutative ring using only arithmetic in the
    coefficient ring.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R775](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Samuelson%E2%80%93Berkowitz_algorithm](https://en.wikipedia.org/wiki/Samuelson%E2%80%93Berkowitz_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: a += b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: a <– echelon(a); return det
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Compute the determinant of \(a\) using the Bareiss fraction-free algorithm.
    The matrix \(a\) is modified in place. Its diagonal elements are the determinants
    of the leading principal minors. The determinant of \(a\) is returned.
  prefs: []
  type: TYPE_NORMAL
- en: The domain \(K\) must support exact division (`K.exquo`). This method is suitable
    for most exact rings and fields like [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq)
    and [QQ<a>](domainsref.html#qq-a) but not for inexact domains like [RR](domainsref.html#rr)
    and [CC](domainsref.html#cc).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.det
    "sympy.polys.matrices.domainmatrix.DomainMatrix.det")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R776](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bareiss_algorithm](https://en.wikipedia.org/wiki/Bareiss_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R777](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.math.usm.edu/perry/Research/Thesis_DRL.pdf](https://www.math.usm.edu/perry/Research/Thesis_DRL.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: ainv <– inv(a)
  prefs: []
  type: TYPE_NORMAL
- en: Compute the inverse of a matrix \(a\) over a field \(K\) using Gauss-Jordan
    elimination. The result is stored in \(ainv\).
  prefs: []
  type: TYPE_NORMAL
- en: Uses division in the ground domain which should be an exact field.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_irref`](#sympy.polys.matrices.dense.ddm_irref "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: the underlying routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: a <– LU(a)
  prefs: []
  type: TYPE_NORMAL
- en: Computes the LU decomposition of a matrix in place. Returns a list of row swaps
    that were performed.
  prefs: []
  type: TYPE_NORMAL
- en: Uses division in the ground domain which should be an exact field.
  prefs: []
  type: TYPE_NORMAL
- en: This is only suitable for domains like [GF(p)](domainsref.html#gf-p), [QQ](domainsref.html#qq),
    [QQ_I](domainsref.html#qq-i) and [QQ<a>](domainsref.html#qq-a). With a rational
    function field like [K(x)](domainsref.html#id11) it is better to clear denominators
    and use division-free algorithms. Pivoting is used to avoid exact zeros but not
    for floating point accuracy so [RR](domainsref.html#rr) and [CC](domainsref.html#cc)
    are not suitable (use [`ddm_irref()`](#sympy.polys.matrices.dense.ddm_irref "sympy.polys.matrices.dense.ddm_irref")
    instead).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: 'The same example using `Matrix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_irref`](#sympy.polys.matrices.dense.ddm_irref "sympy.polys.matrices.dense.ddm_irref"),
    [`ddm_ilu_solve`](#sympy.polys.matrices.dense.ddm_ilu_solve "sympy.polys.matrices.dense.ddm_ilu_solve"),
    [`sympy.matrices.matrixbase.MatrixBase.LUdecomposition`](../matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.LUdecomposition
    "sympy.matrices.matrixbase.MatrixBase.LUdecomposition")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: x <– solve(L*U*x = swaps(b))
  prefs: []
  type: TYPE_NORMAL
- en: Solve a linear system, \(A*x = b\), given an LU factorization of \(A\).
  prefs: []
  type: TYPE_NORMAL
- en: Uses division in the ground domain which must be a field.
  prefs: []
  type: TYPE_NORMAL
- en: Modifies \(x\) in place.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute the LU decomposition of \(A\) (in place):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'Solve the linear system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_ilu`](#sympy.polys.matrices.dense.ddm_ilu "sympy.polys.matrices.dense.ddm_ilu")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the LU decomposition of a matrix in place.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_ilu_split`](#sympy.polys.matrices.dense.ddm_ilu_split "sympy.polys.matrices.dense.ddm_ilu_split")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the LU decomposition of a matrix and separate \(L\) and \(U\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: L, U <– LU(U)
  prefs: []
  type: TYPE_NORMAL
- en: Compute the LU decomposition of a matrix \(L\) in place and store the lower
    and upper triangular matrices in \(L\) and \(U\), respectively. Returns a list
    of row swaps that were performed.
  prefs: []
  type: TYPE_NORMAL
- en: Uses division in the ground domain which should be an exact field.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_ilu`](#sympy.polys.matrices.dense.ddm_ilu "sympy.polys.matrices.dense.ddm_ilu"),
    [`ddm_ilu_solve`](#sympy.polys.matrices.dense.ddm_ilu_solve "sympy.polys.matrices.dense.ddm_ilu_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: a += b @ c
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: a <– a*b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: a <– -a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: a <– b*a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: In-place reduced row echelon form of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Compute the reduced row echelon form of \(a\). Modifies \(a\) in place and returns
    a list of the pivot columns.
  prefs: []
  type: TYPE_NORMAL
- en: Uses naive Gauss-Jordan elimination in the ground domain which must be a field.
  prefs: []
  type: TYPE_NORMAL
- en: This routine is only really suitable for use with simple field domains like
    [GF(p)](domainsref.html#gf-p), [QQ](domainsref.html#qq) and [QQ<a>](domainsref.html#qq-a)
    although even for [QQ](domainsref.html#qq) with larger matrices it is possibly
    more efficient to use fraction free approaches.
  prefs: []
  type: TYPE_NORMAL
- en: This method is not suitable for use with rational function fields ([K(x)](domainsref.html#id11))
    because the elements will blowup leading to costly gcd operations. In this case
    clearing denominators and using fraction free approaches is likely to be more
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: For inexact numeric domains like [RR](domainsref.html#rr) and [CC](domainsref.html#cc)
    pass `_partial_pivot=True` to use partial pivoting to control rounding errors.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to this routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_irref_den`](#sympy.polys.matrices.dense.ddm_irref_den "sympy.polys.matrices.dense.ddm_irref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: The fraction free version of this routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sdm_irref`](#sympy.polys.matrices.sdm.sdm_irref "sympy.polys.matrices.sdm.sdm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: A sparse version of this routine.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R778](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Row_echelon_form#Reduced_row_echelon_form](https://en.wikipedia.org/wiki/Row_echelon_form#Reduced_row_echelon_form)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: a <– rref(a); return (den, pivots)
  prefs: []
  type: TYPE_NORMAL
- en: Compute the fraction-free reduced row echelon form (RREF) of \(a\). Modifies
    \(a\) in place and returns a tuple containing the denominator of the RREF and
    a list of the pivot columns.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm used is the fraction-free version of Gauss-Jordan elimination
    described as FFGJ in [[R779]](#r779). Here it is modified to handle zero or missing
    pivots and to avoid redundant arithmetic.
  prefs: []
  type: TYPE_NORMAL
- en: The domain \(K\) must support exact division (`K.exquo`) but does not need to
    be a field. This method is suitable for most exact rings and fields like [ZZ](domainsref.html#zz),
    [QQ](domainsref.html#qq) and [QQ<a>](domainsref.html#qq-a). In the case of [QQ](domainsref.html#qq)
    or [K(x)](domainsref.html#id11) it might be more efficient to clear denominators
    and use [ZZ](domainsref.html#zz) or [K[x]](domainsref.html#k-x) instead.
  prefs: []
  type: TYPE_NORMAL
- en: For inexact domains like [RR](domainsref.html#rr) and [CC](domainsref.html#cc)
    use `ddm_irref` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_irref`](#sympy.polys.matrices.dense.ddm_irref "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: A version of this routine that uses field division.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sdm_irref`](#sympy.polys.matrices.sdm.sdm_irref "sympy.polys.matrices.sdm.sdm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: A sparse version of [`ddm_irref()`](#sympy.polys.matrices.dense.ddm_irref "sympy.polys.matrices.dense.ddm_irref").
  prefs: []
  type: TYPE_NORMAL
- en: '[`sdm_rref_den`](#sympy.polys.matrices.sdm.sdm_rref_den "sympy.polys.matrices.sdm.sdm_rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: A sparse version of [`ddm_irref_den()`](#sympy.polys.matrices.dense.ddm_irref_den
    "sympy.polys.matrices.dense.ddm_irref_den").
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R779] ([1](#id11),[2](#id12))'
  prefs: []
  type: TYPE_NORMAL
- en: Fraction-free algorithms for linear and polynomial equations. George C. Nakos
    , Peter R. Turner , Robert M. Williams. [https://dl.acm.org/doi/10.1145/271130.271133](https://dl.acm.org/doi/10.1145/271130.271133)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: a -= b
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: matrix transpose
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: A ring element.
  prefs: []
  type: TYPE_NORMAL
- en: Must support `+`, `-`, `*`, `**` and `-`.
  prefs: []
  type: TYPE_NORMAL
- en: Module for the SDM class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Sparse matrix based on polys domain elements
  prefs: []
  type: TYPE_NORMAL
- en: This is a dict subclass and is a wrapper for a dict of dicts that supports basic
    matrix arithmetic +, -, *, **.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create a new [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM"),
    a dict of dicts mapping non-zero elements to their corresponding row and column
    in the matrix is needed.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to specify the shape and [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") of our [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM") object.
  prefs: []
  type: TYPE_NORMAL
- en: We declare a 2x2 [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix belonging to QQ domain as shown below. The 2x2 Matrix in the example is
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}A = \left[\begin{array}{ccc} 0 & \frac{1}{2} \\ 0 & 0 \end{array}
    \right]\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: We can manipulate [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    the same way as a Matrix class
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Multiplication
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: Adds two [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrices
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: Returns the coefficients of the characteristic polynomial of the [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM") matrix. These elements will be domain elements.
    The domain of the elements will be same as domain of the [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: We can create a polynomial using the coefficients using [`Poly`](reference.html#sympy.polys.polytools.Poly
    "sympy.polys.polytools.Poly")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Converts the [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM") matrix
    to K
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: Returns the copy of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    object
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: Returns determinant of A
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: Returns the diagonal of the matrix as a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: Returns a identity [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix of dimensions size x size, belonging to the specified domain
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Create [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    from a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm"),
    [`from_list`](#sympy.polys.matrices.sdm.SDM.from_list "sympy.polys.matrices.sdm.SDM.from_list"),
    [`from_list_flat`](#sympy.polys.matrices.sdm.SDM.from_list_flat "sympy.polys.matrices.sdm.SDM.from_list_flat"),
    [`from_dok`](#sympy.polys.matrices.sdm.SDM.from_dok "sympy.polys.matrices.sdm.SDM.from_dok")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: Create [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    from dictionary of dictionaries (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dod`](#sympy.polys.matrices.sdm.SDM.to_dod "sympy.polys.matrices.sdm.SDM.to_dod"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: Create [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    from dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_dok`](#sympy.polys.matrices.sdm.SDM.to_dok "sympy.polys.matrices.sdm.SDM.to_dok"),
    [`from_list`](#sympy.polys.matrices.sdm.SDM.from_list "sympy.polys.matrices.sdm.SDM.from_list"),
    [`from_list_flat`](#sympy.polys.matrices.sdm.SDM.from_list_flat "sympy.polys.matrices.sdm.SDM.from_list_flat"),
    [`from_ddm`](#sympy.polys.matrices.sdm.SDM.from_ddm "sympy.polys.matrices.sdm.SDM.from_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Reconstruct a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    after calling [`to_flat_nz()`](#sympy.polys.matrices.sdm.SDM.to_flat_nz "sympy.polys.matrices.sdm.SDM.to_flat_nz").
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_flat_nz()`](#sympy.polys.matrices.sdm.SDM.to_flat_nz "sympy.polys.matrices.sdm.SDM.to_flat_nz")
    for explanation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_flat_nz`](#sympy.polys.matrices.sdm.SDM.to_flat_nz "sympy.polys.matrices.sdm.SDM.to_flat_nz"),
    [`from_list_flat`](#sympy.polys.matrices.sdm.SDM.from_list_flat "sympy.polys.matrices.sdm.SDM.from_list_flat"),
    [`sympy.polys.matrices.ddm.DDM.from_flat_nz`](#sympy.polys.matrices.ddm.DDM.from_flat_nz
    "sympy.polys.matrices.ddm.DDM.from_flat_nz"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: Create [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    object from a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ddm:**'
  prefs: []
  type: TYPE_NORMAL
- en: list of lists containing domain elements
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**shape:**'
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions of [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain:**'
  prefs: []
  type: TYPE_NORMAL
- en: Represents [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    of [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM") object
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM") containing
    elements of ddm'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_list`](#sympy.polys.matrices.sdm.SDM.to_list "sympy.polys.matrices.sdm.SDM.to_list"),
    [`from_list_flat`](#sympy.polys.matrices.sdm.SDM.from_list_flat "sympy.polys.matrices.sdm.SDM.from_list_flat"),
    [`from_dok`](#sympy.polys.matrices.sdm.SDM.from_dok "sympy.polys.matrices.sdm.SDM.from_dok"),
    [`from_ddm`](#sympy.polys.matrices.sdm.SDM.from_ddm "sympy.polys.matrices.sdm.SDM.from_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: Create [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    from a flat list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_list_flat`](#sympy.polys.matrices.sdm.SDM.to_list_flat "sympy.polys.matrices.sdm.SDM.to_list_flat"),
    [`from_list`](#sympy.polys.matrices.sdm.SDM.from_list "sympy.polys.matrices.sdm.SDM.from_list"),
    [`from_dok`](#sympy.polys.matrices.sdm.SDM.from_dok "sympy.polys.matrices.sdm.SDM.from_dok"),
    [`from_ddm`](#sympy.polys.matrices.sdm.SDM.from_ddm "sympy.polys.matrices.sdm.SDM.from_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Horizontally stacks [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Returns inverse of a matrix A
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is diagonal. True can be returned even if the matrix
    is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is lower-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix is upper-triangular. True can be returned even if the
    matrix is not square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: Says whether this matrix has all zero entries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over indices and values of the nonzero elements.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items`](#sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items
    "sympy.polys.matrices.domainmatrix.DomainMatrix.iter_items")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over the nonzero values of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: Returns the LLL-reduced basis for the [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM") matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Returns the LLL-reduced basis and transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: Returns LU decomposition for a matrix A
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: Uses LU decomposition to solve Ax = b,
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Performs matrix multiplication of two SDM matrices
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A, B: SDM to multiply**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: SDM
  prefs: []
  type: TYPE_NORMAL
- en: SDM after multiplication
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DomainError**'
  prefs: []
  type: TYPE_NORMAL
- en: If domain of A does not match with that of B
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: Multiplies each element of A with a scalar b
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: Returns the negative of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sdm: A dict of dicts for non-zero elements in SDM**'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape: tuple representing dimension of SDM**'
  prefs: []
  type: TYPE_NORMAL
- en: '**domain: Represents :py:class:`~.Domain` of SDM**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM") object
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: Number of non-zero elements in the [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nnz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nnz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: Nullspace of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix A.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix must be a field.
  prefs: []
  type: TYPE_NORMAL
- en: It is better to use the [`nullspace()`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace") method rather than
    this method which is otherwise no longer used.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace")'
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to get the nullspace of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: Returns nullspace for a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix `A` in RREF.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix can be any domain.
  prefs: []
  type: TYPE_NORMAL
- en: The matrix must already be in reduced row echelon form (RREF).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace")'
  prefs: []
  type: TYPE_NORMAL
- en: The higher-level function that would usually be called instead of calling this
    one directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref")'
  prefs: []
  type: TYPE_NORMAL
- en: The higher-level direct equivalent of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.ddm.DDM.nullspace_from_rref`](#sympy.polys.matrices.ddm.DDM.nullspace_from_rref
    "sympy.polys.matrices.ddm.DDM.nullspace_from_rref")'
  prefs: []
  type: TYPE_NORMAL
- en: The equivalent function for dense [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: Returns reduced-row echelon form and list of pivots for the [`SDM`](#sympy.polys.matrices.sdm.SDM
    "sympy.polys.matrices.sdm.SDM")
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: Returns reduced-row echelon form (RREF) with denominator and pivots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Strongly connected components of a square matrix *A*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.scc`](#sympy.polys.matrices.domainmatrix.DomainMatrix.scc
    "sympy.polys.matrices.domainmatrix.DomainMatrix.scc")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Subtracts two [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrices
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: Convert a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    object to a [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    object
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: Convert a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    object to a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    object
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm"),
    [`to_dfm_or_ddm`](#sympy.polys.matrices.sdm.SDM.to_dfm_or_ddm "sympy.polys.matrices.sdm.SDM.to_dfm_or_ddm"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Convert to [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    if possible, else [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm"),
    [`to_dfm`](#sympy.polys.matrices.sdm.SDM.to_dfm "sympy.polys.matrices.sdm.SDM.to_dfm"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: Convert to dictionary of dictionaries (dod) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dod`](#sympy.polys.matrices.sdm.SDM.from_dod "sympy.polys.matrices.sdm.SDM.from_dod"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dod")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Convert to dictionary of keys (dok) format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dok`](#sympy.polys.matrices.sdm.SDM.from_dok "sympy.polys.matrices.sdm.SDM.from_dok"),
    [`to_list`](#sympy.polys.matrices.sdm.SDM.to_list "sympy.polys.matrices.sdm.SDM.to_list"),
    [`to_list_flat`](#sympy.polys.matrices.sdm.SDM.to_list_flat "sympy.polys.matrices.sdm.SDM.to_list_flat"),
    [`to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    to a flat list of nonzero elements and data.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is used to operate on a list of the elements of a matrix and then reconstruct
    a modified matrix with elements in the same positions using [`from_flat_nz()`](#sympy.polys.matrices.sdm.SDM.from_flat_nz
    "sympy.polys.matrices.sdm.SDM.from_flat_nz"). Zero elements are omitted from the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_flat_nz`](#sympy.polys.matrices.sdm.SDM.from_flat_nz "sympy.polys.matrices.sdm.SDM.from_flat_nz"),
    [`to_list_flat`](#sympy.polys.matrices.sdm.SDM.to_list_flat "sympy.polys.matrices.sdm.SDM.to_list_flat"),
    [`sympy.polys.matrices.ddm.DDM.to_flat_nz`](#sympy.polys.matrices.ddm.DDM.to_flat_nz
    "sympy.polys.matrices.ddm.DDM.to_flat_nz"), [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: Convert a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    object to a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Convert [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    to a flat list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_list_flat`](#sympy.polys.matrices.sdm.SDM.from_list_flat "sympy.polys.matrices.sdm.SDM.from_list_flat"),
    [`to_list`](#sympy.polys.matrices.sdm.SDM.to_list "sympy.polys.matrices.sdm.SDM.to_list"),
    [`to_dok`](#sympy.polys.matrices.sdm.SDM.to_dok "sympy.polys.matrices.sdm.SDM.to_dok"),
    [`to_ddm`](#sympy.polys.matrices.sdm.SDM.to_ddm "sympy.polys.matrices.sdm.SDM.to_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: Convert to [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    format (returns self).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Returns the transpose of a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrix
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: Vertically stacks [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: Returns a [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")
    of size shape, belonging to the specified domain
  prefs: []
  type: TYPE_NORMAL
- en: In the example below we declare a matrix A where,
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}A := \left[\begin{array}{ccc} 0 & 0 & 0 \\ 0 & 0 & 0 \end{array}
    \right]\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Berkowitz algorithm for computing the characteristic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Berkowitz algorithm is a division-free algorithm for computing the characteristic
    polynomial of a matrix over any commutative ring using only arithmetic in the
    coefficient ring. This implementation is for sparse matrices represented in a
    dict-of-dicts format (like [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM")).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: The high-level interface to this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_berk`](#sympy.polys.matrices.dense.ddm_berk
    "sympy.polys.matrices.dense.ddm_berk")'
  prefs: []
  type: TYPE_NORMAL
- en: The dense version of this function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R780](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Samuelson%E2%80%93Berkowitz_algorithm](https://en.wikipedia.org/wiki/Samuelson%E2%80%93Berkowitz_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: RREF and pivots of a sparse matrix *A*.
  prefs: []
  type: TYPE_NORMAL
- en: Compute the reduced row echelon form (RREF) of the matrix *A* and return a list
    of the pivot columns. This routine does not work in place and leaves the original
    matrix *A* unmodified.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the matrix must be a field.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'This routine works with a dict of dicts sparse representation of a matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: The analogous calculation with [`MutableDenseMatrix`](../matrices/dense.html#sympy.matrices.dense.MutableDenseMatrix
    "sympy.matrices.dense.MutableDenseMatrix") would be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The cost of this algorithm is determined purely by the nonzero elements of the
    matrix. No part of the cost of any step in this algorithm depends on the number
    of rows or columns in the matrix. No step depends even on the number of nonzero
    rows apart from the primary loop over those rows. The implementation is much faster
    than ddm_rref for sparse matrices. In fact at the time of writing it is also (slightly)
    faster than the dense implementation even if the input is a fully dense matrix
    so it seems to be faster in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: The elements of the matrix should support exact division with `/`. For example
    elements of any domain that is a field (e.g. `QQ`) should be fine. No attempt
    is made to handle inexact arithmetic.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref")'
  prefs: []
  type: TYPE_NORMAL
- en: The higher-level function that would normally be used to call this routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.dense.ddm_irref`](#sympy.polys.matrices.dense.ddm_irref
    "sympy.polys.matrices.dense.ddm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: The dense equivalent of this routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sdm_rref_den`](#sympy.polys.matrices.sdm.sdm_rref_den "sympy.polys.matrices.sdm.sdm_rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Fraction-free version of this routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: Get nullspace from A which is in RREF
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: Get a particular solution from A which is in RREF
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Return the reduced row echelon form (RREF) of A with denominator.
  prefs: []
  type: TYPE_NORMAL
- en: The RREF is computed using fraction-free Gauss-Jordan elimination.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm used is the fraction-free version of Gauss-Jordan elimination
    described as FFGJ in [[R781]](#r781). Here it is modified to handle zero or missing
    pivots and to avoid redundant arithmetic. This implementation is also optimized
    for sparse matrices.
  prefs: []
  type: TYPE_NORMAL
- en: The domain \(K\) must support exact division (`K.exquo`) but does not need to
    be a field. This method is suitable for most exact rings and fields like [ZZ](domainsref.html#zz),
    [QQ](domainsref.html#qq) and [QQ<a>](domainsref.html#qq-a). In the case of [QQ](domainsref.html#qq)
    or [K(x)](domainsref.html#id11) it might be more efficient to clear denominators
    and use [ZZ](domainsref.html#zz) or [K[x]](domainsref.html#k-x) instead.
  prefs: []
  type: TYPE_NORMAL
- en: For inexact domains like [RR](domainsref.html#rr) and [CC](domainsref.html#cc)
    use `ddm_irref` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den`](#sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den
    "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher-level interface to `sdm_rref_den` that would usually be used instead
    of calling this function directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.sdm.sdm_rref_den`](#sympy.polys.matrices.sdm.sdm_rref_den
    "sympy.polys.matrices.sdm.sdm_rref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: The `SDM` method that uses this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sdm_irref`](#sympy.polys.matrices.sdm.sdm_irref "sympy.polys.matrices.sdm.sdm_irref")'
  prefs: []
  type: TYPE_NORMAL
- en: Computes RREF using field division.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ddm_irref_den`](#sympy.polys.matrices.dense.ddm_irref_den "sympy.polys.matrices.dense.ddm_irref_den")'
  prefs: []
  type: TYPE_NORMAL
- en: The dense version of this algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R781] ([1](#id14),[2](#id15))'
  prefs: []
  type: TYPE_NORMAL
- en: Fraction-free algorithms for linear and polynomial equations. George C. Nakos
    , Peter R. Turner , Robert M. Williams. [https://dl.acm.org/doi/10.1145/271130.271133](https://dl.acm.org/doi/10.1145/271130.271133)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: Dense FLINT matrix. This class is a wrapper for matrices from python-flint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Usually, the DFM class is not instantiated directly, but is created as the internal
    representation of [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix"). When \(SYMPY_GROUND_TYPES\)
    is set to \(flint\) and \(python-flint\) is installed, the [`DFM`](#sympy.polys.matrices._dfm.DFM
    "sympy.polys.matrices._dfm.DFM") class is used automatically as the internal representation
    of [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    in dense format if the domain is supported by python-flint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: 'A [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")
    can be converted to [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    by calling the [`to_dfm()`](#sympy.polys.matrices._dfm.DFM.to_dfm "sympy.polys.matrices._dfm.DFM.to_dfm")
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: Add two DFM matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function to each entry of a DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: Compute the characteristic polynomial of the matrix using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `.charpoly()` method of the underlying FLINT matrix.
  prefs: []
  type: TYPE_NORMAL
- en: For [ZZ](domainsref.html#zz) or [QQ](domainsref.html#qq) this calls `fmpz_mat_charpoly`
    or `fmpq_mat_charpoly` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing the implementation of `fmpq_mat_charpoly` clears a denominator
    from the whole matrix and then calls `fmpz_mat_charpoly`. The coefficients of
    the characteristic polynomial are then multiplied by powers of the denominator.
  prefs: []
  type: TYPE_NORMAL
- en: The `fmpz_mat_charpoly` method uses a modular algorithm with CRT reconstruction.
    The modular algorithm uses `nmod_mat_charpoly` which uses Berkowitz for small
    matrices and non-prime moduli or otherwise the Danilevsky method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly`](#sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly
    "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to compute the characteristic polynomial of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a new domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: Compute the determinant of the matrix using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `.det()` method of the underlying FLINT matrix.
  prefs: []
  type: TYPE_NORMAL
- en: For [ZZ](domainsref.html#zz) or [QQ](domainsref.html#qq) this calls `fmpz_mat_det`
    or `fmpq_mat_det` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing the implementation of `fmpz_mat_det` uses one of several
    algorithms depending on the size of the matrix and bit size of the entries. The
    algorithms used are:'
  prefs: []
  type: TYPE_NORMAL
- en: Cofactor for very small (up to 4x4) matrices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bareiss for small (up to 25x25) matrices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular algorithms for larger matrices (up to 60x60) or for larger matrices
    with large bit sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular “accelerated” for larger matrices (60x60 upwards) if the bit size is
    smaller than the dimensions of the matrix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of `fmpq_mat_det` clears denominators from each row (not
    the whole matrix) and then calls `fmpz_mat_det` and divides by the product of
    the denominators.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.det`](#sympy.polys.matrices.domainmatrix.DomainMatrix.det
    "sympy.polys.matrices.domainmatrix.DomainMatrix.det")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to compute the determinant of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: Return a diagonal matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: Return the diagonal of a DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: Extract a submatrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Slice a DFM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: Return the identity matrix of size n.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: Convert from a DDM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Inverse of [`to_dod()`](#sympy.polys.matrices._dfm.DFM.to_dod "sympy.polys.matrices._dfm.DFM.to_dod").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Inverse of \(to_dod\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: Inverse of [`to_flat_nz()`](#sympy.polys.matrices._dfm.DFM.to_flat_nz "sympy.polys.matrices._dfm.DFM.to_flat_nz").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: Construct from a nested list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Inverse of [`to_list_flat()`](#sympy.polys.matrices._dfm.DFM.to_list_flat "sympy.polys.matrices._dfm.DFM.to_list_flat").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: Get the `(i, j)`-th entry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: Horizontally stack matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Compute the inverse of a matrix using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `.inv()` method of the underlying FLINT matrix.
  prefs: []
  type: TYPE_NORMAL
- en: For now this will raise an error if the domain is [ZZ](domainsref.html#zz) but
    will use the FLINT method for [QQ](domainsref.html#qq).
  prefs: []
  type: TYPE_NORMAL
- en: The FLINT methods for [ZZ](domainsref.html#zz) and [QQ](domainsref.html#qq)
    are `fmpz_mat_inv` and `fmpq_mat_inv` respectively. The `fmpz_mat_inv` method
    computes an inverse with denominator. This is implemented by calling `fmpz_mat_solve`
    (see notes in [`lu_solve()`](#sympy.polys.matrices._dfm.DFM.lu_solve "sympy.polys.matrices._dfm.DFM.lu_solve")
    about the algorithm).
  prefs: []
  type: TYPE_NORMAL
- en: The `fmpq_mat_inv` method clears denominators from each row and then multiplies
    those into the rhs identity matrix before calling `fmpz_mat_solve`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.inv`](#sympy.polys.matrices.domainmatrix.DomainMatrix.inv
    "sympy.polys.matrices.domainmatrix.DomainMatrix.inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level method for computing the inverse of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the matrix is diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the matrix is lower triangular.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the matrix is upper triangular.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the matrix is the zero matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Iterate over indices and values of nonzero elements of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: Iterater over the non-zero values of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: Compute LLL-reduced basis using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: See [`lll_transform()`](#sympy.polys.matrices._dfm.DFM.lll_transform "sympy.polys.matrices._dfm.DFM.lll_transform")
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.lll`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lll")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to compute LLL-reduced basis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lll_transform`](#sympy.polys.matrices._dfm.DFM.lll_transform "sympy.polys.matrices._dfm.DFM.lll_transform")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute LLL-reduced basis and transform matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: Compute LLL-reduced basis and transform using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.lll`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lll
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lll")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to compute LLL-reduced basis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lll`](#sympy.polys.matrices._dfm.DFM.lll "sympy.polys.matrices._dfm.DFM.lll")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute LLL-reduced basis without transform matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Return the LU decomposition of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: Solve a matrix equation using FLINT.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `.solve()` method of the underlying FLINT matrix.
  prefs: []
  type: TYPE_NORMAL
- en: For now this will raise an error if the domain is [ZZ](domainsref.html#zz) but
    will use the FLINT method for [QQ](domainsref.html#qq).
  prefs: []
  type: TYPE_NORMAL
- en: 'The FLINT methods for [ZZ](domainsref.html#zz) and [QQ](domainsref.html#qq)
    are `fmpz_mat_solve` and `fmpq_mat_solve` respectively. The `fmpq_mat_solve` method
    uses one of two algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: For small matrices (<25 rows) it clears denominators between the matrix and
    rhs and uses `fmpz_mat_solve`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For larger matrices it uses `fmpq_mat_solve_dixon` which is a modular approach
    with CRT reconstruction over [QQ](domainsref.html#qq).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `fmpz_mat_solve` method uses one of four algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: For very small (<= 3x3) matrices it uses a Cramer’s rule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For small (<= 15x15) matrices it uses a fraction-free LU solve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise it uses either Dixon or another multimodular approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve`](#sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve
    "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: Higher level interface to solve a matrix equation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Multiply two DFM matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: Multiply a DFM matrix from the right by a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: Elementwise multiplication of two DFM matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: Negate a DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of non-zero elements in the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Return a basis for the nullspace of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: Return a basis for the nullspace of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Return a one DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: Return a particular solution to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Multiply a DFM matrix from the left by a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: Return the strongly connected components of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Set the `(i, j)`-th entry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Subtract two DFM matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a DDM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Return self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM").
  prefs: []
  type: TYPE_NORMAL
- en: This [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM")
    method exists to parallel the [`DDM`](#sympy.polys.matrices.ddm.DDM "sympy.polys.matrices.ddm.DDM")
    and [`SDM`](#sympy.polys.matrices.sdm.SDM "sympy.polys.matrices.sdm.SDM") methods.
    For [`DFM`](#sympy.polys.matrices._dfm.DFM "sympy.polys.matrices._dfm.DFM") it
    will always return self.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_ddm`](#sympy.polys.matrices._dfm.DFM.to_ddm "sympy.polys.matrices._dfm.DFM.to_ddm"),
    [`to_sdm`](#sympy.polys.matrices._dfm.DFM.to_sdm "sympy.polys.matrices._dfm.DFM.to_sdm"),
    [`sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm`](#sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm
    "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a DOD.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a DOK.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a flat list of non-zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a nested list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a flat list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Convert to a SDM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Transpose a DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: Vertically stack matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Return a zero DFM matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: Return the Smith Normal Form of a matrix \(m\) over the ring \(domain\). This
    will only work if the ring is a principal ideal domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Compute the Hermite Normal Form of [`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") *A* over [ZZ](domainsref.html#zz).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A** : \(m \times n\) `DomainMatrix` over [ZZ](domainsref.html#zz).'
  prefs: []
  type: TYPE_NORMAL
- en: '**D** : [ZZ](domainsref.html#zz), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Let \(W\) be the HNF of *A*. If known in advance, a positive integer *D* being
    any multiple of \(\det(W)\) may be provided. In this case, if *A* also has rank
    \(m\), then we may use an alternative algorithm that works mod *D* in order to
    prevent coefficient explosion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check_rank** : boolean, optional (default=False)'
  prefs: []
  type: TYPE_NORMAL
- en: The basic assumption is that, if you pass a value for *D*, then you already
    believe that *A* has rank \(m\), so we do not waste time checking it for you.
    If you do want this to be checked (and the ordinary, non-modulo *D* algorithm
    to be used if the check fails), then set *check_rank* to `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DomainMatrix`](#sympy.polys.matrices.domainmatrix.DomainMatrix "sympy.polys.matrices.domainmatrix.DomainMatrix")'
  prefs: []
  type: TYPE_NORMAL
- en: The HNF of matrix *A*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DMDomainError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of the matrix is not [ZZ](domainsref.html#zz), or if *D* is given
    but is not in [ZZ](domainsref.html#zz).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**DMShapeError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the mod *D* algorithm is used but the matrix has more rows than columns.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R782](#id16)]'
  prefs: []
  type: TYPE_NORMAL
- en: Cohen, H. *A Course in Computational Algebraic Number Theory.* (See Algorithms
    2.4.5 and 2.4.8.)
  prefs: []
  type: TYPE_NORMAL
