["```py\nclass sympy.geometry.ellipse.Ellipse(center=None, hradius=None, vradius=None, eccentricity=None, **kwargs)\n```", "```py\n>>> from sympy import Ellipse, Point, Rational\n>>> e1 = Ellipse(Point(0, 0), 5, 1)\n>>> e1.hradius, e1.vradius\n(5, 1)\n>>> e2 = Ellipse(Point(3, 1), hradius=3, eccentricity=Rational(4, 5))\n>>> e2\nEllipse(Point2D(3, 1), 3, 9/5) \n```", "```py\nproperty apoapsis\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.apoapsis\n2*sqrt(2) + 3 \n```", "```py\narbitrary_point(parameter='t')\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e1 = Ellipse(Point(0, 0), 3, 2)\n>>> e1.arbitrary_point()\nPoint2D(3*cos(t), 2*sin(t)) \n```", "```py\nproperty area\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.area\n3*pi \n```", "```py\nauxiliary_circle()\n```", "```py\n>>> from sympy import Ellipse, Point, symbols\n>>> c = Point(1, 2)\n>>> Ellipse(c, 8, 7).auxiliary_circle()\nCircle(Point2D(1, 2), 8)\n>>> a, b = symbols('a b')\n>>> Ellipse(c, a, b).auxiliary_circle()\nCircle(Point2D(1, 2), Max(a, b)) \n```", "```py\nproperty bounds\n```", "```py\nproperty center\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.center\nPoint2D(0, 0) \n```", "```py\nproperty circumference\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.circumference\n12*elliptic_e(8/9) \n```", "```py\ndirector_circle()\n```", "```py\n>>> from sympy import Ellipse, Point, symbols\n>>> c = Point(3,8)\n>>> Ellipse(c, 7, 9).director_circle()\nCircle(Point2D(3, 8), sqrt(130))\n>>> a, b = symbols('a b')\n>>> Ellipse(c, a, b).director_circle()\nCircle(Point2D(3, 8), sqrt(a**2 + b**2)) \n```", "```py\nproperty eccentricity\n```", "```py\n>>> from sympy import Point, Ellipse, sqrt\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, sqrt(2))\n>>> e1.eccentricity\nsqrt(7)/3 \n```", "```py\nencloses_point(p)\n```", "```py\n>>> from sympy import Ellipse, S\n>>> from sympy.abc import t\n>>> e = Ellipse((0, 0), 3, 2)\n>>> e.encloses_point((0, 0))\nTrue\n>>> e.encloses_point(e.arbitrary_point(t).subs(t, S.Half))\nFalse\n>>> e.encloses_point((4, 0))\nFalse \n```", "```py\nequation(x='x', y='y', _slope=None)\n```", "```py\n>>> from sympy import Point, Ellipse, pi\n>>> from sympy.abc import x, y\n>>> e1 = Ellipse(Point(1, 0), 3, 2)\n>>> eq1 = e1.equation(x, y); eq1\ny**2/4 + (x/3 - 1/3)**2 - 1\n>>> eq2 = e1.equation(x, y, _slope=1); eq2\n(-x + y + 1)**2/8 + (x + y - 1)**2/18 - 1 \n```", "```py\n>>> p1 = e1.center + Point(e1.major, 0)\n>>> assert eq1.subs(x, p1.x).subs(y, p1.y) == 0 \n```", "```py\n>>> r1 = p1.rotate(pi/4, e1.center)\n>>> assert eq2.subs(x, r1.x).subs(y, r1.y) == 0 \n```", "```py\nevolute(x='x', y='y')\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e1 = Ellipse(Point(1, 0), 3, 2)\n>>> e1.evolute()\n2**(2/3)*y**(2/3) + (3*x - 3)**(2/3) - 5**(2/3) \n```", "```py\nproperty foci\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.foci\n(Point2D(-2*sqrt(2), 0), Point2D(2*sqrt(2), 0)) \n```", "```py\nproperty focus_distance\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.focus_distance\n2*sqrt(2) \n```", "```py\nproperty hradius\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.hradius\n3 \n```", "```py\nintersection(o)\n```", "```py\n>>> from sympy import Ellipse, Point, Line\n>>> e = Ellipse(Point(0, 0), 5, 7)\n>>> e.intersection(Point(0, 0))\n[]\n>>> e.intersection(Point(5, 0))\n[Point2D(5, 0)]\n>>> e.intersection(Line(Point(0,0), Point(0, 1)))\n[Point2D(0, -7), Point2D(0, 7)]\n>>> e.intersection(Line(Point(5,0), Point(5, 1)))\n[Point2D(5, 0)]\n>>> e.intersection(Line(Point(6,0), Point(6, 1)))\n[]\n>>> e = Ellipse(Point(-1, 0), 4, 3)\n>>> e.intersection(Ellipse(Point(1, 0), 4, 3))\n[Point2D(0, -3*sqrt(15)/4), Point2D(0, 3*sqrt(15)/4)]\n>>> e.intersection(Ellipse(Point(5, 0), 4, 3))\n[Point2D(2, -3*sqrt(7)/4), Point2D(2, 3*sqrt(7)/4)]\n>>> e.intersection(Ellipse(Point(100500, 0), 4, 3))\n[]\n>>> e.intersection(Ellipse(Point(0, 0), 3, 4))\n[Point2D(3, 0), Point2D(-363/175, -48*sqrt(111)/175), Point2D(-363/175, 48*sqrt(111)/175)]\n>>> e.intersection(Ellipse(Point(-1, 0), 3, 4))\n[Point2D(-17/5, -12/5), Point2D(-17/5, 12/5), Point2D(7/5, -12/5), Point2D(7/5, 12/5)] \n```", "```py\nis_tangent(o)\n```", "```py\n>>> from sympy import Point, Ellipse, Line\n>>> p0, p1, p2 = Point(0, 0), Point(3, 0), Point(3, 3)\n>>> e1 = Ellipse(p0, 3, 2)\n>>> l1 = Line(p1, p2)\n>>> e1.is_tangent(l1)\nTrue \n```", "```py\nproperty major\n```", "```py\n>>> from sympy import Point, Ellipse, Symbol\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.major\n3 \n```", "```py\n>>> a = Symbol('a')\n>>> b = Symbol('b')\n>>> Ellipse(p1, a, b).major\na\n>>> Ellipse(p1, b, a).major\nb \n```", "```py\n>>> m = Symbol('m')\n>>> M = m + 1\n>>> Ellipse(p1, m, M).major\nm + 1 \n```", "```py\nproperty minor\n```", "```py\n>>> from sympy import Point, Ellipse, Symbol\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.minor\n1 \n```", "```py\n>>> a = Symbol('a')\n>>> b = Symbol('b')\n>>> Ellipse(p1, a, b).minor\nb\n>>> Ellipse(p1, b, a).minor\na \n```", "```py\n>>> m = Symbol('m')\n>>> M = m + 1\n>>> Ellipse(p1, m, M).minor\nm \n```", "```py\nnormal_lines(p, prec=None)\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e = Ellipse((0, 0), 2, 3)\n>>> c = e.center\n>>> e.normal_lines(c + Point(1, 0))\n[Line2D(Point2D(0, 0), Point2D(1, 0))]\n>>> e.normal_lines(c)\n[Line2D(Point2D(0, 0), Point2D(0, 1)), Line2D(Point2D(0, 0), Point2D(1, 0))] \n```", "```py\n>>> e.normal_lines((3, 3), prec=2)\n[Line2D(Point2D(-0.81, -2.7), Point2D(0.19, -1.2)),\nLine2D(Point2D(1.5, -2.0), Point2D(2.5, -2.7))] \n```", "```py\nproperty periapsis\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.periapsis\n3 - 2*sqrt(2) \n```", "```py\nplot_interval(parameter='t')\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e1 = Ellipse(Point(0, 0), 3, 2)\n>>> e1.plot_interval()\n[t, -pi, pi] \n```", "```py\npolar_second_moment_of_area()\n```", "```py\n>>> from sympy import symbols, Circle, Ellipse\n>>> c = Circle((5, 5), 4)\n>>> c.polar_second_moment_of_area()\n128*pi\n>>> a, b = symbols('a, b')\n>>> e = Ellipse((0, 0), a, b)\n>>> e.polar_second_moment_of_area()\npi*a**3*b/4 + pi*a*b**3/4 \n```", "```py\nrandom_point(seed=None)\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e1 = Ellipse(Point(0, 0), 3, 2)\n>>> e1.random_point() # gives some random point\nPoint2D(...)\n>>> p1 = e1.random_point(seed=0); p1.n(2)\nPoint2D(2.1, 1.4) \n```", "```py\n>>> from sympy.abc import t\n>>> from sympy import Rational\n>>> arb = e1.arbitrary_point(t); arb\nPoint2D(3*cos(t), 2*sin(t))\n>>> arb.subs(t, .1) in e1\nFalse\n>>> arb.subs(t, Rational(.1)) in e1\nTrue\n>>> arb.subs(t, Rational('.1')) in e1\nTrue \n```", "```py\nreflect(line)\n```", "```py\n>>> from sympy import Circle, Line\n>>> Circle((0, 1), 1).reflect(Line((0, 0), (1, 1)))\nCircle(Point2D(1, 0), -1)\n>>> from sympy import Ellipse, Line, Point\n>>> Ellipse(Point(3, 4), 1, 3).reflect(Line(Point(0, -4), Point(5, 0)))\nTraceback (most recent call last):\n...\nNotImplementedError:\nGeneral Ellipse is not supported but the equation of the reflected\nEllipse is given by the zeros of: f(x, y) = (9*x/41 + 40*y/41 +\n37/41)**2 + (40*x/123 - 3*y/41 - 364/123)**2 - 1 \n```", "```py\nrotate(angle=0, pt=None)\n```", "```py\n>>> from sympy import Ellipse, pi\n>>> Ellipse((1, 0), 2, 1).rotate(pi/2)\nEllipse(Point2D(0, 1), 1, 2)\n>>> Ellipse((1, 0), 2, 1).rotate(pi)\nEllipse(Point2D(-1, 0), 2, 1) \n```", "```py\nscale(x=1, y=1, pt=None)\n```", "```py\n>>> from sympy import Ellipse\n>>> Ellipse((0, 0), 2, 1).scale(2, 4)\nCircle(Point2D(0, 0), 4)\n>>> Ellipse((0, 0), 2, 1).scale(2)\nEllipse(Point2D(0, 0), 4, 1) \n```", "```py\nsecond_moment_of_area(point=None)\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.second_moment_of_area()\n(3*pi/4, 27*pi/4, 0) \n```", "```py\nsection_modulus(point=None)\n```", "```py\n>>> from sympy import Symbol, Ellipse, Circle, Point2D\n>>> d = Symbol('d', positive=True)\n>>> c = Circle((0, 0), d/2)\n>>> c.section_modulus()\n(pi*d**3/32, pi*d**3/32)\n>>> e = Ellipse(Point2D(0, 0), 2, 4)\n>>> e.section_modulus()\n(8*pi, 4*pi)\n>>> e.section_modulus((2, 2))\n(16*pi, 4*pi) \n```", "```py\nproperty semilatus_rectum\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.semilatus_rectum\n1/3 \n```", "```py\ntangent_lines(p)\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> e1 = Ellipse(Point(0, 0), 3, 2)\n>>> e1.tangent_lines(Point(3, 0))\n[Line2D(Point2D(3, 0), Point2D(3, -12))] \n```", "```py\nproperty vradius\n```", "```py\n>>> from sympy import Point, Ellipse\n>>> p1 = Point(0, 0)\n>>> e1 = Ellipse(p1, 3, 1)\n>>> e1.vradius\n1 \n```", "```py\nclass sympy.geometry.ellipse.Circle(*args, **kwargs)\n```", "```py\n>>> from sympy import Point, Circle, Eq\n>>> from sympy.abc import x, y, a, b \n```", "```py\n>>> c1 = Circle(Point(0, 0), 5)\n>>> c1.hradius, c1.vradius, c1.radius\n(5, 5, 5) \n```", "```py\n>>> c2 = Circle(Point(0, 0), Point(1, 1), Point(1, 0))\n>>> c2.hradius, c2.vradius, c2.radius, c2.center\n(sqrt(2)/2, sqrt(2)/2, sqrt(2)/2, Point2D(1/2, 1/2)) \n```", "```py\n>>> Circle(x**2 + y**2 - 25)\nCircle(Point2D(0, 0), 5) \n```", "```py\n>>> Circle(Eq(a**2 + b**2, 25), x='a', y=b)\nCircle(Point2D(0, 0), 5) \n```", "```py\nproperty circumference\n```", "```py\n>>> from sympy import Point, Circle\n>>> c1 = Circle(Point(3, 4), 6)\n>>> c1.circumference\n12*pi \n```", "```py\nequation(x='x', y='y')\n```", "```py\n>>> from sympy import Point, Circle\n>>> c1 = Circle(Point(0, 0), 5)\n>>> c1.equation()\nx**2 + y**2 - 25 \n```", "```py\nintersection(o)\n```", "```py\n>>> from sympy import Point, Circle, Line, Ray\n>>> p1, p2, p3 = Point(0, 0), Point(5, 5), Point(6, 0)\n>>> p4 = Point(5, 0)\n>>> c1 = Circle(p1, 5)\n>>> c1.intersection(p2)\n[]\n>>> c1.intersection(p4)\n[Point2D(5, 0)]\n>>> c1.intersection(Ray(p1, p2))\n[Point2D(5*sqrt(2)/2, 5*sqrt(2)/2)]\n>>> c1.intersection(Line(p2, p3))\n[] \n```", "```py\nproperty radius\n```", "```py\n>>> from sympy import Point, Circle\n>>> c1 = Circle(Point(3, 4), 6)\n>>> c1.radius\n6 \n```", "```py\nreflect(line)\n```", "```py\n>>> from sympy import Circle, Line\n>>> Circle((0, 1), 1).reflect(Line((0, 0), (1, 1)))\nCircle(Point2D(1, 0), -1) \n```", "```py\nscale(x=1, y=1, pt=None)\n```", "```py\n>>> from sympy import Circle\n>>> Circle((0, 0), 1).scale(2, 2)\nCircle(Point2D(0, 0), 2)\n>>> Circle((0, 0), 1).scale(2, 4)\nEllipse(Point2D(0, 0), 2, 4) \n```", "```py\nproperty vradius\n```", "```py\n>>> from sympy import Point, Circle\n>>> c1 = Circle(Point(3, 4), 6)\n>>> c1.vradius\n6 \n```"]