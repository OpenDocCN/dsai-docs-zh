["```py\nscipy.signal.iircomb(w0, Q, ftype='notch', fs=2.0, *, pass_zero=False)\n```", "```py\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np \n```", "```py\n>>> fs = 200.0  # Sample frequency (Hz)\n>>> f0 = 20.0  # Frequency to be removed from signal (Hz)\n>>> Q = 30.0  # Quality factor\n>>> # Design notching comb filter\n>>> b, a = signal.iircomb(f0, Q, ftype='notch', fs=fs) \n```", "```py\n>>> # Frequency response\n>>> freq, h = signal.freqz(b, a, fs=fs)\n>>> response = abs(h)\n>>> # To avoid divide by zero when graphing\n>>> response[response == 0] = 1e-20\n>>> # Plot\n>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\n>>> ax[0].plot(freq, 20*np.log10(abs(response)), color='blue')\n>>> ax[0].set_title(\"Frequency Response\")\n>>> ax[0].set_ylabel(\"Amplitude (dB)\", color='blue')\n>>> ax[0].set_xlim([0, 100])\n>>> ax[0].set_ylim([-30, 10])\n>>> ax[0].grid(True)\n>>> ax[1].plot(freq, (np.angle(h)*180/np.pi+180)%360 - 180, color='green')\n>>> ax[1].set_ylabel(\"Angle (degrees)\", color='green')\n>>> ax[1].set_xlabel(\"Frequency (Hz)\")\n>>> ax[1].set_xlim([0, 100])\n>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])\n>>> ax[1].set_ylim([-90, 90])\n>>> ax[1].grid(True)\n>>> plt.show() \n```", "```py\n>>> fs = 1000.0  # Sample frequency (Hz)\n>>> f0 = 250.0  # Frequency to be retained (Hz)\n>>> Q = 30.0  # Quality factor\n>>> # Design peaking filter\n>>> b, a = signal.iircomb(f0, Q, ftype='peak', fs=fs, pass_zero=True) \n```", "```py\n>>> # Frequency response\n>>> freq, h = signal.freqz(b, a, fs=fs)\n>>> response = abs(h)\n>>> # To avoid divide by zero when graphing\n>>> response[response == 0] = 1e-20\n>>> # Plot\n>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\n>>> ax[0].plot(freq, 20*np.log10(np.maximum(abs(h), 1e-5)), color='blue')\n>>> ax[0].set_title(\"Frequency Response\")\n>>> ax[0].set_ylabel(\"Amplitude (dB)\", color='blue')\n>>> ax[0].set_xlim([0, 500])\n>>> ax[0].set_ylim([-80, 10])\n>>> ax[0].grid(True)\n>>> ax[1].plot(freq, (np.angle(h)*180/np.pi+180)%360 - 180, color='green')\n>>> ax[1].set_ylabel(\"Angle (degrees)\", color='green')\n>>> ax[1].set_xlabel(\"Frequency (Hz)\")\n>>> ax[1].set_xlim([0, 500])\n>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])\n>>> ax[1].set_ylim([-90, 90])\n>>> ax[1].grid(True)\n>>> plt.show() \n```"]