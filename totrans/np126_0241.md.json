["```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a):\n...     print(x, end=' ')\n...\n0 1 2 3 4 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a.T):\n...     print(x, end=' ')\n...\n0 1 2 3 4 5 \n```", "```py\n>>> for x in np.nditer(a.T.copy(order='C')):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, order='F'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5\n>>> for x in np.nditer(a.T, order='C'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> a\narray([[0, 1, 2],\n [3, 4, 5]])\n>>> with np.nditer(a, op_flags=['readwrite']) as it:\n...    for x in it:\n...        x[...] = 2 * x\n...\n>>> a\narray([[ 0,  2,  4],\n [ 6,  8, 10]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop']):\n...     print(x, end=' ')\n...\n[0 1 2 3 4 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> for x in it:\n...     print(\"%d <%d>\" % (x, it.index), end=' ')\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> for x in it:\n...     print(\"%d <%s>\" % (x, it.multi_index), end=' ')\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     for x in it:\n...         x[...] = it.multi_index[1] - it.multi_index[0]\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.zeros((2,3))\n>>> it = np.nditer(a, flags=['c_index', 'external_loop'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Iterator flag EXTERNAL_LOOP cannot be used if an index or multi-index is being tracked \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> while not it.finished:\n...     print(\"%d <%d>\" % (it[0], it.index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> while not it.finished:\n...     print(\"%d <%s>\" % (it[0], it.multi_index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     while not it.finished:\n...         it[0] = it.multi_index[1] - it.multi_index[0]\n...         is_not_finished = it.iternext()\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop','buffered'], order='F'):\n...     print(x, end=' ')\n...\n[0 3 1 4 2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand required copying or buffering, but neither copying nor buffering was enabled \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_flags=['readonly','copy'],\n...                 op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> a = np.arange(6.)\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32']):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('float32') according to the rule 'safe' \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32'],\n...                 casting='same_kind'):\n...     print(x, end=' ')\n...\n0.0 1.0 2.0 3.0 4.0 5.0 \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['int32'], casting='same_kind'):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('int32') according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(6)\n>>> for x in np.nditer(a, flags=['buffered'], op_flags=['readwrite'],\n...                 op_dtypes=['float64'], casting='same_kind'):\n...     x[...] = x / 2.0\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nTypeError: Iterator requested dtype could not be cast from dtype('float64') to dtype('int64'), the operand 0 dtype, according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(3)\n>>> b = np.arange(6).reshape(2,3)\n>>> for x, y in np.nditer([a,b]):\n...     print(\"%d:%d\" % (x,y), end=' ')\n...\n0:0 1:1 2:2 0:3 1:4 2:5 \n```", "```py\n>>> a = np.arange(2)\n>>> b = np.arange(6).reshape(2,3)\n>>> for x, y in np.nditer([a,b]):\n...     print(\"%d:%d\" % (x,y), end=' ')\n...\nTraceback (most recent call last):\n...\nValueError: operands could not be broadcast together with shapes (2,) (2,3) \n```", "```py\n>>> def square(a):\n...     with np.nditer([a, None]) as it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n...\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> def square(a, out=None):\n...     it = np.nditer([a, out],\n...             flags = ['external_loop', 'buffered'],\n...             op_flags = [['readonly'],\n...                         ['writeonly', 'allocate', 'no_broadcast']])\n...     with it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n... \n```", "```py\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> b = np.zeros((3,))\n>>> square([1,2,3], out=b)\narray([1.,  4.,  9.])\n>>> b\narray([1.,  4.,  9.]) \n```", "```py\n>>> square(np.arange(6).reshape(2,3), out=b)\nTraceback (most recent call last):\n  ...\nValueError: non-broadcastable output operand with shape (3,) doesn't\nmatch the broadcast shape (2,3) \n```", "```py\n>>> a = np.arange(3)\n>>> b = np.arange(8).reshape(2,4)\n>>> it = np.nditer([a, b, None], flags=['external_loop'],\n...             op_axes=[[0, -1, -1], [-1, 0, 1], None])\n>>> with it:\n...     for x, y, z in it:\n...         z[...] = x*y\n...     result = it.operands[2]  # same as z\n...\n>>> result\narray([[[ 0,  0,  0,  0],\n [ 0,  0,  0,  0]],\n [[ 0,  1,  2,  3],\n [ 4,  5,  6,  7]],\n [[ 0,  2,  4,  6],\n [ 8, 10, 12, 14]]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> b = np.array(0)\n>>> with np.nditer([a, b], flags=['reduce_ok'],\n...                     op_flags=[['readonly'], ['readwrite']]) as it:\n...     for x,y in it:\n...         y[...] += x\n...\n>>> b\narray(276)\n>>> np.sum(a)\n276 \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]])\n>>> np.sum(a, axis=2)\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok',\n...                                  'buffered', 'delay_bufalloc'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     it.reset()\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> def axis_to_axeslist(axis, ndim):\n...     if axis is None:\n...         return [-1] * ndim\n...     else:\n...         if type(axis) is not tuple:\n...             axis = (axis,)\n...         axeslist = [1] * ndim\n...         for i in axis:\n...             axeslist[i] = -1\n...         ax = 0\n...         for i in range(ndim):\n...             if axeslist[i] != -1:\n...                 axeslist[i] = ax\n...                 ax += 1\n...         return axeslist\n...\n>>> def sum_squares_py(arr, axis=None, out=None):\n...     axeslist = axis_to_axeslist(axis, arr.ndim)\n...     it = np.nditer([arr, out], flags=['reduce_ok',\n...                                       'buffered', 'delay_bufalloc'],\n...                 op_flags=[['readonly'], ['readwrite', 'allocate']],\n...                 op_axes=[None, axeslist],\n...                 op_dtypes=['float64', 'float64'])\n...     with it:\n...         it.operands[1][...] = 0\n...         it.reset()\n...         for x, y in it:\n...             y[...] += x*x\n...         return it.operands[1]\n...\n>>> a = np.arange(6).reshape(2,3)\n>>> sum_squares_py(a)\narray(55.)\n>>> sum_squares_py(a, axis=-1)\narray([  5.,  50.]) \n```", "```py\nimport numpy as np\ncimport numpy as np\ncimport cython\n\ndef axis_to_axeslist(axis, ndim):\n    if axis is None:\n        return [-1] * ndim\n    else:\n        if type(axis) is not tuple:\n            axis = (axis,)\n        axeslist = [1] * ndim\n        for i in axis:\n            axeslist[i] = -1\n        ax = 0\n        for i in range(ndim):\n            if axeslist[i] != -1:\n                axeslist[i] = ax\n                ax += 1\n        return axeslist\n\n@cython.boundscheck(False)\ndef sum_squares_cy(arr, axis=None, out=None):\n    cdef np.ndarray[double] x\n    cdef np.ndarray[double] y\n    cdef int size\n    cdef double value\n\n    axeslist = axis_to_axeslist(axis, arr.ndim)\n    it = np.nditer([arr, out], flags=['reduce_ok', 'external_loop',\n                                      'buffered', 'delay_bufalloc'],\n                op_flags=[['readonly'], ['readwrite', 'allocate']],\n                op_axes=[None, axeslist],\n                op_dtypes=['float64', 'float64'])\n    with it:\n        it.operands[1][...] = 0\n        it.reset()\n        for xarr, yarr in it:\n            x = xarr\n            y = yarr\n            size = x.shape[0]\n            for i in range(size):\n               value = x[i]\n               y[i] = y[i] + value * value\n        return it.operands[1] \n```", "```py\n$ cython sum_squares.pyx\n$ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -I/usr/include/python2.7 -fno-strict-aliasing -o sum_squares.so sum_squares.c \n```", "```py\n>>> from sum_squares import sum_squares_cy \n>>> a = np.arange(6).reshape(2,3)\n>>> sum_squares_cy(a) \narray(55.0)\n>>> sum_squares_cy(a, axis=-1) \narray([  5.,  50.]) \n```", "```py\n>>> a = np.random.rand(1000,1000)\n\n>>> timeit sum_squares_py(a, axis=-1)\n10 loops, best of 3: 37.1 ms per loop\n\n>>> timeit np.sum(a*a, axis=-1)\n10 loops, best of 3: 20.9 ms per loop\n\n>>> timeit sum_squares_cy(a, axis=-1)\n100 loops, best of 3: 11.8 ms per loop\n\n>>> np.all(sum_squares_cy(a, axis=-1) == np.sum(a*a, axis=-1))\nTrue\n\n>>> np.all(sum_squares_py(a, axis=-1) == np.sum(a*a, axis=-1))\nTrue \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a):\n...     print(x, end=' ')\n...\n0 1 2 3 4 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a.T):\n...     print(x, end=' ')\n...\n0 1 2 3 4 5 \n```", "```py\n>>> for x in np.nditer(a.T.copy(order='C')):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, order='F'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5\n>>> for x in np.nditer(a.T, order='C'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> a\narray([[0, 1, 2],\n [3, 4, 5]])\n>>> with np.nditer(a, op_flags=['readwrite']) as it:\n...    for x in it:\n...        x[...] = 2 * x\n...\n>>> a\narray([[ 0,  2,  4],\n [ 6,  8, 10]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop']):\n...     print(x, end=' ')\n...\n[0 1 2 3 4 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> for x in it:\n...     print(\"%d <%d>\" % (x, it.index), end=' ')\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> for x in it:\n...     print(\"%d <%s>\" % (x, it.multi_index), end=' ')\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     for x in it:\n...         x[...] = it.multi_index[1] - it.multi_index[0]\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.zeros((2,3))\n>>> it = np.nditer(a, flags=['c_index', 'external_loop'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Iterator flag EXTERNAL_LOOP cannot be used if an index or multi-index is being tracked \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> while not it.finished:\n...     print(\"%d <%d>\" % (it[0], it.index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> while not it.finished:\n...     print(\"%d <%s>\" % (it[0], it.multi_index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     while not it.finished:\n...         it[0] = it.multi_index[1] - it.multi_index[0]\n...         is_not_finished = it.iternext()\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop','buffered'], order='F'):\n...     print(x, end=' ')\n...\n[0 3 1 4 2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand required copying or buffering, but neither copying nor buffering was enabled \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_flags=['readonly','copy'],\n...                 op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> a = np.arange(6.)\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32']):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('float32') according to the rule 'safe' \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32'],\n...                 casting='same_kind'):\n...     print(x, end=' ')\n...\n0.0 1.0 2.0 3.0 4.0 5.0 \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['int32'], casting='same_kind'):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('int32') according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(6)\n>>> for x in np.nditer(a, flags=['buffered'], op_flags=['readwrite'],\n...                 op_dtypes=['float64'], casting='same_kind'):\n...     x[...] = x / 2.0\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nTypeError: Iterator requested dtype could not be cast from dtype('float64') to dtype('int64'), the operand 0 dtype, according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, order='F'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5\n>>> for x in np.nditer(a.T, order='C'):\n...     print(x, end=' ')\n...\n0 3 1 4 2 5 \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> a\narray([[0, 1, 2],\n [3, 4, 5]])\n>>> with np.nditer(a, op_flags=['readwrite']) as it:\n...    for x in it:\n...        x[...] = 2 * x\n...\n>>> a\narray([[ 0,  2,  4],\n [ 6,  8, 10]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop']):\n...     print(x, end=' ')\n...\n[0 1 2 3 4 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> for x in it:\n...     print(\"%d <%d>\" % (x, it.index), end=' ')\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> for x in it:\n...     print(\"%d <%s>\" % (x, it.multi_index), end=' ')\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     for x in it:\n...         x[...] = it.multi_index[1] - it.multi_index[0]\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.zeros((2,3))\n>>> it = np.nditer(a, flags=['c_index', 'external_loop'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Iterator flag EXTERNAL_LOOP cannot be used if an index or multi-index is being tracked \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> it = np.nditer(a, flags=['f_index'])\n>>> while not it.finished:\n...     print(\"%d <%d>\" % (it[0], it.index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <0> 1 <2> 2 <4> 3 <1> 4 <3> 5 <5> \n```", "```py\n>>> it = np.nditer(a, flags=['multi_index'])\n>>> while not it.finished:\n...     print(\"%d <%s>\" % (it[0], it.multi_index), end=' ')\n...     is_not_finished = it.iternext()\n...\n0 <(0, 0)> 1 <(0, 1)> 2 <(0, 2)> 3 <(1, 0)> 4 <(1, 1)> 5 <(1, 2)> \n```", "```py\n>>> with np.nditer(a, flags=['multi_index'], op_flags=['writeonly']) as it:\n...     while not it.finished:\n...         it[0] = it.multi_index[1] - it.multi_index[0]\n...         is_not_finished = it.iternext()\n...\n>>> a\narray([[ 0,  1,  2],\n [-1,  0,  1]]) \n```", "```py\n>>> a = np.arange(6).reshape(2,3)\n>>> for x in np.nditer(a, flags=['external_loop'], order='F'):\n...     print(x, end=' ')\n...\n[0 3] [1 4] [2 5] \n```", "```py\n>>> for x in np.nditer(a, flags=['external_loop','buffered'], order='F'):\n...     print(x, end=' ')\n...\n[0 3 1 4 2 5] \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand required copying or buffering, but neither copying nor buffering was enabled \n```", "```py\n>>> a = np.arange(6).reshape(2,3) - 3\n>>> for x in np.nditer(a, op_flags=['readonly','copy'],\n...                 op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['complex128']):\n...     print(np.sqrt(x), end=' ')\n...\n1.7320508075688772j 1.4142135623730951j 1j 0j (1+0j) (1.4142135623730951+0j) \n```", "```py\n>>> a = np.arange(6.)\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32']):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('float32') according to the rule 'safe' \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['float32'],\n...                 casting='same_kind'):\n...     print(x, end=' ')\n...\n0.0 1.0 2.0 3.0 4.0 5.0 \n```", "```py\n>>> for x in np.nditer(a, flags=['buffered'], op_dtypes=['int32'], casting='same_kind'):\n...     print(x, end=' ')\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Iterator operand 0 dtype could not be cast from dtype('float64') to dtype('int32') according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(6)\n>>> for x in np.nditer(a, flags=['buffered'], op_flags=['readwrite'],\n...                 op_dtypes=['float64'], casting='same_kind'):\n...     x[...] = x / 2.0\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nTypeError: Iterator requested dtype could not be cast from dtype('float64') to dtype('int64'), the operand 0 dtype, according to the rule 'same_kind' \n```", "```py\n>>> a = np.arange(3)\n>>> b = np.arange(6).reshape(2,3)\n>>> for x, y in np.nditer([a,b]):\n...     print(\"%d:%d\" % (x,y), end=' ')\n...\n0:0 1:1 2:2 0:3 1:4 2:5 \n```", "```py\n>>> a = np.arange(2)\n>>> b = np.arange(6).reshape(2,3)\n>>> for x, y in np.nditer([a,b]):\n...     print(\"%d:%d\" % (x,y), end=' ')\n...\nTraceback (most recent call last):\n...\nValueError: operands could not be broadcast together with shapes (2,) (2,3) \n```", "```py\n>>> def square(a):\n...     with np.nditer([a, None]) as it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n...\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> def square(a, out=None):\n...     it = np.nditer([a, out],\n...             flags = ['external_loop', 'buffered'],\n...             op_flags = [['readonly'],\n...                         ['writeonly', 'allocate', 'no_broadcast']])\n...     with it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n... \n```", "```py\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> b = np.zeros((3,))\n>>> square([1,2,3], out=b)\narray([1.,  4.,  9.])\n>>> b\narray([1.,  4.,  9.]) \n```", "```py\n>>> square(np.arange(6).reshape(2,3), out=b)\nTraceback (most recent call last):\n  ...\nValueError: non-broadcastable output operand with shape (3,) doesn't\nmatch the broadcast shape (2,3) \n```", "```py\n>>> a = np.arange(3)\n>>> b = np.arange(8).reshape(2,4)\n>>> it = np.nditer([a, b, None], flags=['external_loop'],\n...             op_axes=[[0, -1, -1], [-1, 0, 1], None])\n>>> with it:\n...     for x, y, z in it:\n...         z[...] = x*y\n...     result = it.operands[2]  # same as z\n...\n>>> result\narray([[[ 0,  0,  0,  0],\n [ 0,  0,  0,  0]],\n [[ 0,  1,  2,  3],\n [ 4,  5,  6,  7]],\n [[ 0,  2,  4,  6],\n [ 8, 10, 12, 14]]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> b = np.array(0)\n>>> with np.nditer([a, b], flags=['reduce_ok'],\n...                     op_flags=[['readonly'], ['readwrite']]) as it:\n...     for x,y in it:\n...         y[...] += x\n...\n>>> b\narray(276)\n>>> np.sum(a)\n276 \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]])\n>>> np.sum(a, axis=2)\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok',\n...                                  'buffered', 'delay_bufalloc'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     it.reset()\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> def square(a):\n...     with np.nditer([a, None]) as it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n...\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> def square(a, out=None):\n...     it = np.nditer([a, out],\n...             flags = ['external_loop', 'buffered'],\n...             op_flags = [['readonly'],\n...                         ['writeonly', 'allocate', 'no_broadcast']])\n...     with it:\n...         for x, y in it:\n...             y[...] = x*x\n...         return it.operands[1]\n... \n```", "```py\n>>> square([1,2,3])\narray([1, 4, 9]) \n```", "```py\n>>> b = np.zeros((3,))\n>>> square([1,2,3], out=b)\narray([1.,  4.,  9.])\n>>> b\narray([1.,  4.,  9.]) \n```", "```py\n>>> square(np.arange(6).reshape(2,3), out=b)\nTraceback (most recent call last):\n  ...\nValueError: non-broadcastable output operand with shape (3,) doesn't\nmatch the broadcast shape (2,3) \n```", "```py\n>>> a = np.arange(3)\n>>> b = np.arange(8).reshape(2,4)\n>>> it = np.nditer([a, b, None], flags=['external_loop'],\n...             op_axes=[[0, -1, -1], [-1, 0, 1], None])\n>>> with it:\n...     for x, y, z in it:\n...         z[...] = x*y\n...     result = it.operands[2]  # same as z\n...\n>>> result\narray([[[ 0,  0,  0,  0],\n [ 0,  0,  0,  0]],\n [[ 0,  1,  2,  3],\n [ 4,  5,  6,  7]],\n [[ 0,  2,  4,  6],\n [ 8, 10, 12, 14]]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> b = np.array(0)\n>>> with np.nditer([a, b], flags=['reduce_ok'],\n...                     op_flags=[['readonly'], ['readwrite']]) as it:\n...     for x,y in it:\n...         y[...] += x\n...\n>>> b\narray(276)\n>>> np.sum(a)\n276 \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]])\n>>> np.sum(a, axis=2)\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> a = np.arange(24).reshape(2,3,4)\n>>> it = np.nditer([a, None], flags=['reduce_ok',\n...                                  'buffered', 'delay_bufalloc'],\n...             op_flags=[['readonly'], ['readwrite', 'allocate']],\n...             op_axes=[None, [0,1,-1]])\n>>> with it:\n...     it.operands[1][...] = 0\n...     it.reset()\n...     for x, y in it:\n...         y[...] += x\n...     result = it.operands[1]\n...\n>>> result\narray([[ 6, 22, 38],\n [54, 70, 86]]) \n```", "```py\n>>> def axis_to_axeslist(axis, ndim):\n...     if axis is None:\n...         return [-1] * ndim\n...     else:\n...         if type(axis) is not tuple:\n...             axis = (axis,)\n...         axeslist = [1] * ndim\n...         for i in axis:\n...             axeslist[i] = -1\n...         ax = 0\n...         for i in range(ndim):\n...             if axeslist[i] != -1:\n...                 axeslist[i] = ax\n...                 ax += 1\n...         return axeslist\n...\n>>> def sum_squares_py(arr, axis=None, out=None):\n...     axeslist = axis_to_axeslist(axis, arr.ndim)\n...     it = np.nditer([arr, out], flags=['reduce_ok',\n...                                       'buffered', 'delay_bufalloc'],\n...                 op_flags=[['readonly'], ['readwrite', 'allocate']],\n...                 op_axes=[None, axeslist],\n...                 op_dtypes=['float64', 'float64'])\n...     with it:\n...         it.operands[1][...] = 0\n...         it.reset()\n...         for x, y in it:\n...             y[...] += x*x\n...         return it.operands[1]\n...\n>>> a = np.arange(6).reshape(2,3)\n>>> sum_squares_py(a)\narray(55.)\n>>> sum_squares_py(a, axis=-1)\narray([  5.,  50.]) \n```", "```py\nimport numpy as np\ncimport numpy as np\ncimport cython\n\ndef axis_to_axeslist(axis, ndim):\n    if axis is None:\n        return [-1] * ndim\n    else:\n        if type(axis) is not tuple:\n            axis = (axis,)\n        axeslist = [1] * ndim\n        for i in axis:\n            axeslist[i] = -1\n        ax = 0\n        for i in range(ndim):\n            if axeslist[i] != -1:\n                axeslist[i] = ax\n                ax += 1\n        return axeslist\n\n@cython.boundscheck(False)\ndef sum_squares_cy(arr, axis=None, out=None):\n    cdef np.ndarray[double] x\n    cdef np.ndarray[double] y\n    cdef int size\n    cdef double value\n\n    axeslist = axis_to_axeslist(axis, arr.ndim)\n    it = np.nditer([arr, out], flags=['reduce_ok', 'external_loop',\n                                      'buffered', 'delay_bufalloc'],\n                op_flags=[['readonly'], ['readwrite', 'allocate']],\n                op_axes=[None, axeslist],\n                op_dtypes=['float64', 'float64'])\n    with it:\n        it.operands[1][...] = 0\n        it.reset()\n        for xarr, yarr in it:\n            x = xarr\n            y = yarr\n            size = x.shape[0]\n            for i in range(size):\n               value = x[i]\n               y[i] = y[i] + value * value\n        return it.operands[1] \n```", "```py\n$ cython sum_squares.pyx\n$ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -I/usr/include/python2.7 -fno-strict-aliasing -o sum_squares.so sum_squares.c \n```", "```py\n>>> from sum_squares import sum_squares_cy \n>>> a = np.arange(6).reshape(2,3)\n>>> sum_squares_cy(a) \narray(55.0)\n>>> sum_squares_cy(a, axis=-1) \narray([  5.,  50.]) \n```", "```py\n>>> a = np.random.rand(1000,1000)\n\n>>> timeit sum_squares_py(a, axis=-1)\n10 loops, best of 3: 37.1 ms per loop\n\n>>> timeit np.sum(a*a, axis=-1)\n10 loops, best of 3: 20.9 ms per loop\n\n>>> timeit sum_squares_cy(a, axis=-1)\n100 loops, best of 3: 11.8 ms per loop\n\n>>> np.all(sum_squares_cy(a, axis=-1) == np.sum(a*a, axis=-1))\nTrue\n\n>>> np.all(sum_squares_py(a, axis=-1) == np.sum(a*a, axis=-1))\nTrue \n```"]