- en: scipy.signal.peak_prominences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.peak_prominences.html#scipy.signal.peak_prominences](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.peak_prominences.html#scipy.signal.peak_prominences)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the prominence of each peak in a signal.
  prefs: []
  type: TYPE_NORMAL
- en: The prominence of a peak measures how much a peak stands out from the surrounding
    baseline of the signal and is defined as the vertical distance between the peak
    and its lowest contour line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: A signal with peaks.
  prefs: []
  type: TYPE_NORMAL
- en: '**peaks**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of peaks in *x*.
  prefs: []
  type: TYPE_NORMAL
- en: '**wlen**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A window length in samples that optionally limits the evaluated area for each
    peak to a subset of *x*. The peak is always placed in the middle of the window
    therefore the given length is rounded up to the next odd integer. This parameter
    can speed up the calculation (see Notes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**prominences**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The calculated prominences for each peak in *peaks*.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_bases, right_bases**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The peaks’ bases as indices in *x* to the left and right of each peak. The higher
    base of each pair is a peak’s lowest contour line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If a value in *peaks* is an invalid index for *x*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: PeakPropertyWarning
  prefs: []
  type: TYPE_NORMAL
- en: For indices in *peaks* that don’t point to valid local maxima in *x*, the returned
    prominence will be 0 and this warning is raised. This also happens if *wlen* is
    smaller than the plateau size of a peak.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function may return unexpected results for data containing NaNs. To avoid
    this, NaNs should either be removed or replaced.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`find_peaks`](scipy.signal.find_peaks.html#scipy.signal.find_peaks "scipy.signal.find_peaks")'
  prefs: []
  type: TYPE_NORMAL
- en: Find peaks inside a signal based on peak properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[`peak_widths`](scipy.signal.peak_widths.html#scipy.signal.peak_widths "scipy.signal.peak_widths")'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the width of peaks.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Strategy to compute a peak’s prominence:'
  prefs: []
  type: TYPE_NORMAL
- en: Extend a horizontal line from the current peak to the left and right until the
    line either reaches the window border (see *wlen*) or intersects the signal again
    at the slope of a higher peak. An intersection with a peak of the same height
    is ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On each side find the minimal signal value within the interval defined above.
    These points are the peak’s bases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The higher one of the two bases marks the peak’s lowest contour line. The prominence
    can then be calculated as the vertical difference between the peaks height itself
    and its lowest contour line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Searching for the peak’s bases can be slow for large *x* with periodic behavior
    because large chunks or even the full signal need to be evaluated for the first
    algorithmic step. This evaluation area can be limited with the parameter *wlen*
    which restricts the algorithm to a window around the current peak and can shorten
    the calculation time if the window length is short in relation to *x*. However,
    this may stop the algorithm from finding the true global contour line if the peak’s
    true bases are outside this window. Instead, a higher contour line is found within
    the restricted window leading to a smaller calculated prominence. In practice,
    this is only relevant for the highest set of peaks in *x*. This behavior may even
    be used intentionally to calculate “local” prominences.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wikipedia Article for Topographic Prominence: [https://en.wikipedia.org/wiki/Topographic_prominence](https://en.wikipedia.org/wiki/Topographic_prominence)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a test signal with two overlaid harmonics
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Find all peaks and calculate prominences
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the height of each peak’s contour line and plot the results
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-peak_prominences-1_00_00.png](../Images/db2d8ae290c824b984f178b41dce96ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s evaluate a second example that demonstrates several edge cases for one
    peak at index 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-peak_prominences-1_01_00.png](../Images/0304de73b4fe4686b9a0d202e44e91a9.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note how the peak at index 3 of the same height is not considered as a border
    while searching for the left base. Instead, two minima at 0 and 2 are found in
    which case the one closer to the evaluated peak is always chosen. On the right
    side, however, the base must be placed at 6 because the higher peak represents
    the right border to the evaluated area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we restricted the algorithm to a window from 3 to 7 (the length is 5 samples
    because *wlen* was rounded up to the next odd integer). Thus, the only two candidates
    in the evaluated area are the two neighboring samples and a smaller prominence
    is calculated.
  prefs: []
  type: TYPE_NORMAL
