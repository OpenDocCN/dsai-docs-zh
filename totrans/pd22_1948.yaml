- en: Version 0.22.0 (December 29, 2017)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本0.22.0（2017年12月29日）
- en: 原文：[https://pandas.pydata.org/docs/whatsnew/v0.22.0.html](https://pandas.pydata.org/docs/whatsnew/v0.22.0.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/whatsnew/v0.22.0.html](https://pandas.pydata.org/docs/whatsnew/v0.22.0.html)
- en: This is a major release from 0.21.1 and includes a single, API-breaking change.
    We recommend that all users upgrade to this version after carefully reading the
    release note (singular!).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从0.21.1的一个重大发布，包含一个破坏性API更改。我们建议所有用户在仔细阅读发布说明后升级到此版本（单数！）。
- en: '## Backwards incompatible API changes'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 不兼容的API更改'
- en: pandas 0.22.0 changes the handling of empty and all-*NA* sums and products.
    The summary is that
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 0.22.0更改了空和所有*NA*的求和和乘积处理方式。总结如下
- en: The sum of an empty or all-*NA* `Series` is now `0`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空或所有*NA* `Series`的求和现在为`0`
- en: The product of an empty or all-*NA* `Series` is now `1`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空或所有*NA* `Series`的乘积现在为`1`
- en: We’ve added a `min_count` parameter to `.sum()` and `.prod()` controlling the
    minimum number of valid values for the result to be valid. If fewer than `min_count`
    non-*NA* values are present, the result is *NA*. The default is `0`. To return
    `NaN`, the 0.21 behavior, use `min_count=1`.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为`.sum()`和`.prod()`添加了一个`min_count`参数，控制结果有效的最小有效值数量。如果少于`min_count`个非*NA*值存在，则结果为*NA*。默认值为`0`。要返回`NaN`，即0.21版本的行为，请使用`min_count=1`。
- en: 'Some background: In pandas 0.21, we fixed a long-standing inconsistency in
    the return value of all-*NA* series depending on whether or not bottleneck was
    installed. See [Sum/prod of all-NaN or empty Series/DataFrames is now consistently
    NaN](v0.21.0.html#whatsnew-0210-api-breaking-bottleneck). At the same time, we
    changed the sum and prod of an empty `Series` to also be `NaN`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些背景：在pandas 0.21中，我们修复了一个长期存在的关于所有*NA*系列返回值的不一致性，具体取决于是否安装了bottleneck。请参阅[所有-NaN或空Series/DataFrames的Sum/prod现在一致为NaN](v0.21.0.html#whatsnew-0210-api-breaking-bottleneck)。同时，我们还将空`Series`的sum和prod更改为`NaN`。
- en: Based on feedback, we’ve partially reverted those changes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据反馈，我们部分撤销了这些更改。
- en: Arithmetic operations
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算
- en: The default sum for empty or all-*NA* `Series` is now `0`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 空或所有*NA* `Series`的默认求和现在为`0`。
- en: '*pandas 0.21.x*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*pandas 0.22.0*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The default behavior is the same as pandas 0.20.3 with bottleneck installed.
    It also matches the behavior of NumPy’s `np.nansum` on empty and all-*NA* arrays.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为与安装了bottleneck的pandas 0.20.3相同。它还与NumPy的`np.nansum`在空和所有*NA*数组上的行为相匹配。
- en: To have the sum of an empty series return `NaN` (the default behavior of pandas
    0.20.3 without bottleneck, or pandas 0.21.x), use the `min_count` keyword.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使空系列的求和返回`NaN`（pandas 0.20.3没有bottleneck的默认行为，或pandas 0.21.x），请使用`min_count`关键字。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thanks to the `skipna` parameter, the `.sum` on an all-*NA* series is conceptually
    the same as the `.sum` of an empty one with `skipna=True` (the default).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`skipna`参数，对于所有*NA*系列的`.sum`在概念上与带有`skipna=True`（默认）的空系列的`.sum`相同。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `min_count` parameter refers to the minimum number of *non-null* values
    required for a non-NA sum or product.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_count`参数指的是非*null*值所需的最小数量，以便进行非NA求和或乘积。'
- en: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod") has been updated to behave the same as [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum"), returning `1` instead.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod")已更新为与[`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum")相同的行为，返回`1`。'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These changes affect [`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") and [`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod") as well. Finally, a few less obvious places in pandas
    are affected by this change.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改影响[`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum")和[`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod")。最后，pandas中的一些不太明显的地方也受到这一更改的影响。
- en: Grouping by a Categorical
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过分类分组
- en: Grouping by a `Categorical` and summing now returns `0` instead of `NaN` for
    categories with no observations. The product now returns `1` instead of `NaN`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Categorical`分组并求和现在对于没有观测值的类别返回`0`而不是`NaN`。乘积现在返回`1`而不是`NaN`。
- en: '*pandas 0.21.x*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*pandas 0.22*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22*'
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To restore the 0.21 behavior of returning `NaN` for unobserved groups, use `min_count>=1`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复返回未观察到的组为`NaN`的0.21行为，请使用`min_count>=1`。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Resample
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新采样
- en: The sum and product of all-*NA* bins has changed from `NaN` to `0` for sum and
    `1` for product.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有*NA*箱的求和和乘积已从`NaN`更改为求和为`0`，乘积为`1`。
- en: '*pandas 0.21.x*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*pandas 0.22.0*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To restore the 0.21 behavior of returning `NaN`, use `min_count>=1`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复返回`NaN`的 0.21 行为，请使用`min_count>=1`。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In particular, upsampling and taking the sum or product is affected, as upsampling
    introduces missing values even if the original series was entirely valid.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，上采样和求和或乘积受到影响，因为上采样会引入缺失值，即使原始系列完全有效。
- en: '*pandas 0.21.x*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*pandas 0.22.0*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once again, the `min_count` keyword is available to restore the 0.21 behavior.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，`min_count`关键字可用于恢复 0.21 版本的行为。
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Rolling and expanding
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滚动和扩展
- en: Rolling and expanding already have a `min_periods` keyword that behaves similar
    to `min_count`. The only case that changes is when doing a rolling or expanding
    sum with `min_periods=0`. Previously this returned `NaN`, when fewer than `min_periods`
    non-*NA* values were in the window. Now it returns `0`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动和扩展已经有一个`min_periods`关键字，行为类似于`min_count`。唯一改变的情况是使用`min_periods=0`进行滚动或扩展求和时。以前，当窗口中少于`min_periods`个非-*NA*值时，返回`NaN`。现在返回`0`。
- en: '*pandas 0.21.1*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.1*'
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*pandas 0.22.0*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The default behavior of `min_periods=None`, implying that `min_periods` equals
    the window size, is unchanged.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为为`min_periods=None`，意味着`min_periods`等于窗口大小，未更改。
- en: Compatibility
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性
- en: If you maintain a library that should work across pandas versions, it may be
    easiest to exclude pandas 0.21 from your requirements. Otherwise, all your `sum()`
    calls would need to check if the `Series` is empty before summing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您维护一个应该跨 pandas 版本工作的库，最简单的方法可能是将 pandas 0.21 从您的要求中排除。否则，所有您的`sum()`调用在求和之前都需要检查`Series`是否为空。
- en: 'With setuptools, in your `setup.py` use:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 setuptools，在您的`setup.py`中使用：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With conda, use
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 conda，
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that the inconsistency in the return value for all-*NA* series is still
    there for pandas 0.20.3 and earlier. Avoiding pandas 0.21 will only help with
    the empty case.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 pandas 0.20.3 及更早版本，所有-*NA*系列的返回值不一致仍然存在。避免使用 pandas 0.21 只会对空情况有所帮助。
- en: '## Contributors'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '## 贡献者'
- en: A total of 1 people contributed patches to this release. People with a “+” by
    their names contributed a patch for the first time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有 1 人为此版本贡献了补丁。名字旁边带有“+”的人第一次贡献了补丁。
- en: 'Tom Augspurger  ## Backwards incompatible API changes'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Tom Augspurger  ## 不兼容的API更改'
- en: pandas 0.22.0 changes the handling of empty and all-*NA* sums and products.
    The summary is that
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 0.22.0 更改了空和所有-*NA*的总和和乘积处理方式。总结如下
- en: The sum of an empty or all-*NA* `Series` is now `0`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空或所有-*NA*`Series`的总和现在为`0`
- en: The product of an empty or all-*NA* `Series` is now `1`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空或所有-*NA*`Series`的乘积现在为`1`
- en: We’ve added a `min_count` parameter to `.sum()` and `.prod()` controlling the
    minimum number of valid values for the result to be valid. If fewer than `min_count`
    non-*NA* values are present, the result is *NA*. The default is `0`. To return
    `NaN`, the 0.21 behavior, use `min_count=1`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为`.sum()`和`.prod()`添加了一个`min_count`参数，控制结果有效的最小有效值数。如果少于`min_count`个非-*NA*值存在，则结果为*NA*。默认值为`0`。要返回`NaN`，即
    0.21 行为，请使用`min_count=1`。
- en: 'Some background: In pandas 0.21, we fixed a long-standing inconsistency in
    the return value of all-*NA* series depending on whether or not bottleneck was
    installed. See [Sum/prod of all-NaN or empty Series/DataFrames is now consistently
    NaN](v0.21.0.html#whatsnew-0210-api-breaking-bottleneck). At the same time, we
    changed the sum and prod of an empty `Series` to also be `NaN`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些背景：在 pandas 0.21 版本中，我们修复了一个长期存在的关于所有-*NA*系列返回值的不一致性，这取决于是否安装了 bottleneck。请参阅[所有-NaN或空Series/DataFrames的总和/乘积现在一致为NaN](v0.21.0.html#whatsnew-0210-api-breaking-bottleneck)。同时，我们还将空`Series`的总和和乘积更改为`NaN`。
- en: Based on feedback, we’ve partially reverted those changes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据反馈，我们部分撤销了这些更改。
- en: Arithmetic operations
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术操作
- en: The default sum for empty or all-*NA* `Series` is now `0`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 空或所有-*NA*`Series`的默认总和现在为`0`。
- en: '*pandas 0.21.x*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*pandas 0.22.0*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The default behavior is the same as pandas 0.20.3 with bottleneck installed.
    It also matches the behavior of NumPy’s `np.nansum` on empty and all-*NA* arrays.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为与安装了 bottleneck 的 pandas 0.20.3 相同。它也与 NumPy 的`np.nansum`在空和所有-*NA*数组上的行为相匹配。
- en: To have the sum of an empty series return `NaN` (the default behavior of pandas
    0.20.3 without bottleneck, or pandas 0.21.x), use the `min_count` keyword.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要使空系列的总和返回`NaN`（pandas 0.20.3在没有 bottleneck 的情况下的默认行为，或者 pandas 0.21.x），请使用`min_count`关键字。
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Thanks to the `skipna` parameter, the `.sum` on an all-*NA* series is conceptually
    the same as the `.sum` of an empty one with `skipna=True` (the default).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `skipna` 参数，所有 *NA* 系列的 `.sum` 在概念上与带有 `skipna=True`（默认）的空系列的 `.sum` 相同。
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `min_count` parameter refers to the minimum number of *non-null* values
    required for a non-NA sum or product.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_count` 参数是指非NA总和或乘积所需的非空值的最小数量。'
- en: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod") has been updated to behave the same as [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum"), returning `1` instead.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod") 已更新为与 [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum") 相同的行为，返回 `1`。'
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These changes affect [`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") and [`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod") as well. Finally, a few less obvious places in pandas
    are affected by this change.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化也影响了 [`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") 和 [`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod")。最后，pandas 中的一些不太明显的地方也受到了这一变化的影响。
- en: Grouping by a Categorical
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按分类分组
- en: Grouping by a `Categorical` and summing now returns `0` instead of `NaN` for
    categories with no observations. The product now returns `1` instead of `NaN`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按 `Categorical` 分组并求和现在返回 `0` 而不是对于没有观察的类别返回 `NaN`。乘积现在返回 `1` 而不是 `NaN`。
- en: '*pandas 0.21.x*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*pandas 0.22*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22*'
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To restore the 0.21 behavior of returning `NaN` for unobserved groups, use `min_count>=1`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复对于未观察到的组返回 `NaN` 的 0.21 行为，请使用 `min_count>=1`。
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Resample
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新采样
- en: The sum and product of all-*NA* bins has changed from `NaN` to `0` for sum and
    `1` for product.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 *NA* 箱的总和和乘积已从 `NaN` 更改为总和为 `0`，乘积为 `1`。
- en: '*pandas 0.21.x*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*pandas 0.22.0*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To restore the 0.21 behavior of returning `NaN`, use `min_count>=1`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复返回 `NaN` 的 0.21 行为，请使用 `min_count>=1`。
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In particular, upsampling and taking the sum or product is affected, as upsampling
    introduces missing values even if the original series was entirely valid.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，上采样和取和或乘积受到影响，因为上采样即使原始系列完全有效也会引入缺失值。
- en: '*pandas 0.21.x*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*pandas 0.22.0*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once again, the `min_count` keyword is available to restore the 0.21 behavior.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一次再次，`min_count` 关键字可用于恢复 0.21 的行为。
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Rolling and expanding
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滚动和扩展
- en: Rolling and expanding already have a `min_periods` keyword that behaves similar
    to `min_count`. The only case that changes is when doing a rolling or expanding
    sum with `min_periods=0`. Previously this returned `NaN`, when fewer than `min_periods`
    non-*NA* values were in the window. Now it returns `0`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动和扩展已经有一个 `min_periods` 关键字，其行为类似于 `min_count`。唯一改变的情况是在使用 `min_periods=0`
    进行滚动或扩展求和时。以前，当窗口中的非 *NA* 值少于 `min_periods` 时，返回 `NaN`。现在返回 `0`。
- en: '*pandas 0.21.1*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.1*'
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*pandas 0.22.0*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The default behavior of `min_periods=None`, implying that `min_periods` equals
    the window size, is unchanged.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_periods=None` 的默认行为，意味着 `min_periods` 等于窗口大小，保持不变。'
- en: Arithmetic operations
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算
- en: The default sum for empty or all-*NA* `Series` is now `0`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 空或所有 *NA* `Series` 的默认总和现在是 `0`。
- en: '*pandas 0.21.x*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE34]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '*pandas 0.22.0*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE35]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The default behavior is the same as pandas 0.20.3 with bottleneck installed.
    It also matches the behavior of NumPy’s `np.nansum` on empty and all-*NA* arrays.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为与安装了bottleneck的pandas 0.20.3相同。它也与NumPy的`np.nansum`在空数组和所有 *NA* 数组上的行为匹配。
- en: To have the sum of an empty series return `NaN` (the default behavior of pandas
    0.20.3 without bottleneck, or pandas 0.21.x), use the `min_count` keyword.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使空系列的总和返回 `NaN`（即pandas 0.20.3没有bottleneck的默认行为，或者pandas 0.21.x），请使用 `min_count`
    关键字。
- en: '[PRE36]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Thanks to the `skipna` parameter, the `.sum` on an all-*NA* series is conceptually
    the same as the `.sum` of an empty one with `skipna=True` (the default).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `skipna` 参数，所有 *NA* 系列的 `.sum` 在概念上与带有 `skipna=True`（默认）的空系列的 `.sum` 相同。
- en: '[PRE37]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `min_count` parameter refers to the minimum number of *non-null* values
    required for a non-NA sum or product.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_count` 参数是指非NA总和或乘积所需的非空值的最小数量。'
- en: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod") has been updated to behave the same as [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum"), returning `1` instead.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.prod()`](../reference/api/pandas.Series.prod.html#pandas.Series.prod
    "pandas.Series.prod") 已更新，与 [`Series.sum()`](../reference/api/pandas.Series.sum.html#pandas.Series.sum
    "pandas.Series.sum") 表现一致，返回`1`。'
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: These changes affect [`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") and [`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod") as well. Finally, a few less obvious places in pandas
    are affected by this change.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改也影响到 [`DataFrame.sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") 和 [`DataFrame.prod()`](../reference/api/pandas.DataFrame.prod.html#pandas.DataFrame.prod
    "pandas.DataFrame.prod")。最后，pandas 中一些不太明显的地方也受到这一变化的影响。
- en: Grouping by a Categorical
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按`Categorical`分组
- en: Grouping by a `Categorical` and summing now returns `0` instead of `NaN` for
    categories with no observations. The product now returns `1` instead of `NaN`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 按`Categorical`分组并求和现在返回`0`而不是`NaN`，对于没有观测值的类别，乘积现在返回`1`而不是`NaN`。
- en: '*pandas 0.21.x*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE39]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*pandas 0.22*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22*'
- en: '[PRE40]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To restore the 0.21 behavior of returning `NaN` for unobserved groups, use `min_count>=1`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复未观察到的组返回`NaN`的 0.21 版本行为，使用`min_count>=1`。
- en: '[PRE41]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Resample
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新采样
- en: The sum and product of all-*NA* bins has changed from `NaN` to `0` for sum and
    `1` for product.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 所有-*NA* 箱的和与乘积已从`NaN`更改为和为`0`，乘积为`1`。
- en: '*pandas 0.21.x*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE42]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '*pandas 0.22.0*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE43]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To restore the 0.21 behavior of returning `NaN`, use `min_count>=1`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复返回`NaN`的 0.21 版本行为，使用`min_count>=1`。
- en: '[PRE44]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In particular, upsampling and taking the sum or product is affected, as upsampling
    introduces missing values even if the original series was entirely valid.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，上采样并求和或乘积受到影响，因为上采样会引入缺失值，即使原始系列完全有效。
- en: '*pandas 0.21.x*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.x*'
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '*pandas 0.22.0*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE46]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Once again, the `min_count` keyword is available to restore the 0.21 behavior.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，`min_count`关键字可用于恢复 0.21 版本的行为。
- en: '[PRE47]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Rolling and expanding
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滚动和扩展
- en: Rolling and expanding already have a `min_periods` keyword that behaves similar
    to `min_count`. The only case that changes is when doing a rolling or expanding
    sum with `min_periods=0`. Previously this returned `NaN`, when fewer than `min_periods`
    non-*NA* values were in the window. Now it returns `0`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动和扩展已经有一个`min_periods`关键字，行为类似于`min_count`。唯一改变的情况是使用`min_periods=0`进行滚动或扩展求和时。以前，当窗口中少于`min_periods`个非-*NA*值时，返回`NaN`。现在返回`0`。
- en: '*pandas 0.21.1*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.21.1*'
- en: '[PRE48]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '*pandas 0.22.0*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas 0.22.0*'
- en: '[PRE49]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The default behavior of `min_periods=None`, implying that `min_periods` equals
    the window size, is unchanged.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_periods=None`的默认行为，意味着`min_periods`等于窗口大小，保持不变。'
- en: Compatibility
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性
- en: If you maintain a library that should work across pandas versions, it may be
    easiest to exclude pandas 0.21 from your requirements. Otherwise, all your `sum()`
    calls would need to check if the `Series` is empty before summing.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你维护一个应该跨 pandas 版本工作的库，最简单的方法可能是将 pandas 0.21 排除在你的要求之外。否则，所有你的`sum()`调用在求和之前都需要检查`Series`是否为空。
- en: 'With setuptools, in your `setup.py` use:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 setuptools，在你的`setup.py`中使用：
- en: '[PRE50]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With conda, use
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 conda，使用
- en: '[PRE51]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that the inconsistency in the return value for all-*NA* series is still
    there for pandas 0.20.3 and earlier. Avoiding pandas 0.21 will only help with
    the empty case.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 pandas 0.20.3 及更早版本，所有-*NA* 系列的返回值不一致的问题仍然存在。避免使用 pandas 0.21 只会在空情况下有所帮助。
- en: '## Contributors'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '## 贡献者'
- en: A total of 1 people contributed patches to this release. People with a “+” by
    their names contributed a patch for the first time.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有 1 人为这个版本提交了补丁。名字旁边有“+”的人是第一次为补丁做出贡献。
- en: Tom Augspurger
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tom Augspurger
