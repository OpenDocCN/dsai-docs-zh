- en: numpy.chararray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.chararray
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.chararray.html](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/1.26/reference/generated/numpy.chararray.html](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.html)'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Provides a convenient view on arrays of string and unicode values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为字符串和unicode值的数组提供了便利的视图。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`chararray`](numpy.char.chararray.html#numpy.char.chararray "numpy.chararray")
    class exists for backwards compatibility with Numarray, it is not recommended
    for new development. Starting from numpy 1.4, if one needs arrays of strings,
    it is recommended to use arrays of [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")
    [`object_`](../arrays.scalars.html#numpy.object_ "numpy.object_"), [`bytes_`](../arrays.scalars.html#numpy.bytes_
    "numpy.bytes_") or [`str_`](../arrays.scalars.html#numpy.str_ "numpy.str_"), and
    use the free functions in the [`numpy.char`](../routines.char.html#module-numpy.char
    "numpy.char") module for fast vectorized string operations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`chararray`](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.html)类是为了向后兼容Numarray而存在的，不建议用于新开发。从numpy
    1.4开始，如果需要字符串数组，则建议使用[`dtype`](https://numpy.org/doc/1.26/reference/generated/numpy.dtype.html)为[`object_`](https://numpy.org/doc/1.26/reference/generated/numpy.object_.html)，[`bytes_`](https://numpy.org/doc/1.26/reference/generated/numpy.bytes_.html)或[`str_`](https://numpy.org/doc/1.26/reference/generated/numpy.str_.html)的数组，并使用[`numpy.char`](https://numpy.org/doc/1.26/reference/generated/numpy.char.html)模块中的自由函数执行快速矢量化字符串操作。'
- en: 'Versus a regular NumPy array of type *str* or *unicode*, this class adds the
    following functionality:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通的类型为*str*或*unicode*的NumPy数组相比，此类添加了以下功能：
- en: values automatically have whitespace removed from the end when indexed
  id: totrans-7
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 索引时，对值自动从末尾去除空格
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: comparison operators automatically remove whitespace from the end when comparing
    values
  id: totrans-10
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较操作符在比较值时会自动从末尾去除空格。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: vectorized string operations are provided as methods (e.g. [`endswith`](numpy.chararray.endswith.html#numpy.chararray.endswith
    "numpy.chararray.endswith")) and infix operators (e.g. `"+", "*", "%"`)
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供矢量化字符串操作作为方法（例如[`endswith`](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.endswith.html)）和中缀运算符（例如`+`、`*`、`%`）
- en: chararrays should be created using [`numpy.char.array`](numpy.char.array.html#numpy.char.array
    "numpy.char.array") or [`numpy.char.asarray`](numpy.char.asarray.html#numpy.char.asarray
    "numpy.char.asarray"), rather than this constructor directly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用[`numpy.char.array`](https://numpy.org/doc/1.26/reference/generated/numpy.char.array.html)或[`numpy.char.asarray`](https://numpy.org/doc/1.26/reference/generated/numpy.char.asarray.html)来创建chararrays，而不是直接使用该构造函数。
- en: This constructor creates the array, using *buffer* (with *offset* and [`strides`](numpy.chararray.strides.html#numpy.chararray.strides
    "numpy.chararray.strides")) if it is not `None`. If *buffer* is `None`, then constructs
    a new array with [`strides`](numpy.chararray.strides.html#numpy.chararray.strides
    "numpy.chararray.strides") in “C order”, unless both `len(shape) >= 2` and `order='F'`,
    in which case [`strides`](numpy.chararray.strides.html#numpy.chararray.strides
    "numpy.chararray.strides") is in “Fortran order”.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此构造函数创建数组，使用*buffer*（带有*offset*和[`strides`](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.strides.html)）如果不为`None`的话。如果*buffer*为`None`，则构造一个`C顺序`的新数组，除非`len(shape)
    >= 2`且`order='F'`，在这种情况下，[`strides`](https://numpy.org/doc/1.26/reference/generated/numpy.chararray.strides.html)是`Fortran顺序`。
- en: 'Parameters:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**shape**tuple'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**shape**元组'
- en: Shape of the array.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的形状。
- en: '**itemsize**int, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**itemsize**int，可选'
- en: Length of each array element, in number of characters. Default is 1.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素的长度，以字符数表示。默认为1。
- en: '**unicode**bool, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**unicode**bool，可选'
- en: Are the array elements of type unicode (True) or string (False). Default is
    False.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素是unicode（True）还是string（False）。默认为False。
- en: '**buffer**object exposing the buffer interface or str, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**buffer**暴露缓冲接口的对象或str，可选'
- en: Memory address of the start of the array data. Default is None, in which case
    a new array is created.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数据的起始内存地址。默认为None，此时将创建一个新数组。
- en: '**offset**int, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset**int，可选'
- en: Fixed stride displacement from the beginning of an axis? Default is 0\. Needs
    to be >=0.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从轴的起始处的固定步长位移？默认为0。必须是>=0。
- en: '**strides**array_like of ints, optional'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**strides**int的数组样式，可选'
- en: Strides for the array (see [`ndarray.strides`](numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") for full description). Default is None.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的步幅（完整说明请参见[`ndarray.strides`](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.strides.html)）。默认为None。
- en: '**order**{‘C’, ‘F’}, optional'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**{‘C’, ‘F’}，可选'
- en: 'The order in which the array data is stored in memory: ‘C’ -> “row major” order
    (the default), ‘F’ -> “column major” (Fortran) order.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数据在内存中存储的顺序：‘C’ -> “行优先”顺序（默认），‘F’ -> “列优先”（Fortran）顺序。
- en: Examples
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Attributes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`T`](numpy.chararray.T.html#numpy.chararray.T "numpy.chararray.T")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`T`](numpy.chararray.T.html#numpy.chararray.T "numpy.chararray.T")'
- en: View of the transposed array.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 转置数组的视图。
- en: '[`base`](numpy.chararray.base.html#numpy.chararray.base "numpy.chararray.base")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](numpy.chararray.base.html#numpy.chararray.base "numpy.chararray.base")'
- en: Base object if memory is from some other object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存储在内存中的数组来自其他对象，则为基础对象。
- en: '[`ctypes`](numpy.chararray.ctypes.html#numpy.chararray.ctypes "numpy.chararray.ctypes")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ctypes`](numpy.chararray.ctypes.html#numpy.chararray.ctypes "numpy.chararray.ctypes")'
- en: An object to simplify the interaction of the array with the ctypes module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用来简化数组与 ctypes 模块交互的对象。
- en: '[`data`](numpy.chararray.data.html#numpy.chararray.data "numpy.chararray.data")'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data`](numpy.chararray.data.html#numpy.chararray.data "numpy.chararray.data")'
- en: Python buffer object pointing to the start of the array’s data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组数据起始位置的 Python 缓冲区对象。
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
- en: Data-type of the array’s elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素的数据类型。
- en: '[`flags`](numpy.chararray.flags.html#numpy.chararray.flags "numpy.chararray.flags")'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flags`](numpy.chararray.flags.html#numpy.chararray.flags "numpy.chararray.flags")'
- en: Information about the memory layout of the array.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数组内存布局的信息。
- en: '[`flat`](numpy.chararray.flat.html#numpy.chararray.flat "numpy.chararray.flat")'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flat`](numpy.chararray.flat.html#numpy.chararray.flat "numpy.chararray.flat")'
- en: A 1-D iterator over the array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的 1-D 迭代器。
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
- en: The imaginary part of the array.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的虚部。
- en: '[`itemsize`](numpy.chararray.itemsize.html#numpy.chararray.itemsize "numpy.chararray.itemsize")'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itemsize`](numpy.chararray.itemsize.html#numpy.chararray.itemsize "numpy.chararray.itemsize")'
- en: Length of one array element in bytes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素的字节数。
- en: '[`nbytes`](numpy.chararray.nbytes.html#numpy.chararray.nbytes "numpy.chararray.nbytes")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nbytes`](numpy.chararray.nbytes.html#numpy.chararray.nbytes "numpy.chararray.nbytes")'
- en: Total bytes consumed by the elements of the array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素消耗的总字节数。
- en: '[`ndim`](numpy.chararray.ndim.html#numpy.chararray.ndim "numpy.chararray.ndim")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndim`](numpy.chararray.ndim.html#numpy.chararray.ndim "numpy.chararray.ndim")'
- en: Number of array dimensions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的维度数量。
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`real`](numpy.real.html#numpy.real "numpy.real")'
- en: The real part of the array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的实部。
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
- en: Tuple of array dimensions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的维度的元组。
- en: '[`size`](numpy.chararray.size.html#numpy.chararray.size "numpy.chararray.size")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`size`](numpy.chararray.size.html#numpy.chararray.size "numpy.chararray.size")'
- en: Number of elements in the array.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素数量。
- en: '[`strides`](numpy.chararray.strides.html#numpy.chararray.strides "numpy.chararray.strides")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strides`](numpy.chararray.strides.html#numpy.chararray.strides "numpy.chararray.strides")'
- en: Tuple of bytes to step in each dimension when traversing an array.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个维度在遍历数组时的步长的元组。
- en: Methods
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`astype`](numpy.chararray.astype.html#numpy.chararray.astype "numpy.chararray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`astype`](numpy.chararray.astype.html#numpy.chararray.astype "numpy.chararray.astype")(数据类型[,
    顺序, 强制转换, 可替代, 复制]) | 数组的副本，转换为指定类型。'
- en: '| [`argsort`](numpy.chararray.argsort.html#numpy.chararray.argsort "numpy.chararray.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`argsort`](numpy.chararray.argsort.html#numpy.chararray.argsort "numpy.chararray.argsort")([轴,
    种类, 顺序]) | 返回对数组排序后的索引。'
- en: '| [`copy`](numpy.chararray.copy.html#numpy.chararray.copy "numpy.chararray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](numpy.chararray.copy.html#numpy.chararray.copy "numpy.chararray.copy")([顺序])
    | 返回数组的副本。'
- en: '| [`count`](numpy.chararray.count.html#numpy.chararray.count "numpy.chararray.count")(sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`count`](numpy.chararray.count.html#numpy.chararray.count "numpy.chararray.count")(子串[,
    起始, 结束]) | 返回数组中子串 *sub* 在区间 [*start*, *end*] 内非重叠出现的次数的数组。'
- en: '| [`decode`](numpy.chararray.decode.html#numpy.chararray.decode "numpy.chararray.decode")([encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`decode`](numpy.chararray.decode.html#numpy.chararray.decode "numpy.chararray.decode")([编码,
    错误]) | 逐元素调用 `bytes.decode`。'
- en: '| [`dump`](numpy.chararray.dump.html#numpy.chararray.dump "numpy.chararray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`dump`](numpy.chararray.dump.html#numpy.chararray.dump "numpy.chararray.dump")(文件)
    | 将数组的 pickle 转储到指定文件。'
- en: '| [`dumps`](numpy.chararray.dumps.html#numpy.chararray.dumps "numpy.chararray.dumps")()
    | Returns the pickle of the array as a string. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`dumps`](numpy.chararray.dumps.html#numpy.chararray.dumps "numpy.chararray.dumps")()
    | 返回数组的 pickle 格式字符串。 |'
- en: '| [`encode`](numpy.chararray.encode.html#numpy.chararray.encode "numpy.chararray.encode")([encoding, errors])
    | Calls *str.encode* element-wise. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`encode`](numpy.chararray.encode.html#numpy.chararray.encode "numpy.chararray.encode")([encoding, errors])
    | 逐元素调用 *str.encode*。 |'
- en: '| [`endswith`](numpy.chararray.endswith.html#numpy.chararray.endswith "numpy.chararray.endswith")(suffix[, start, end])
    | Returns a boolean array which is *True* where the string element in *self* ends
    with *suffix*, otherwise *False*. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith`](numpy.chararray.endswith.html#numpy.chararray.endswith "numpy.chararray.endswith")(suffix[, start, end])
    | 返回布尔数组，在其中 *self* 中的字符串元素以 *suffix* 结尾则为 *True*，否则为 *False*。 |'
- en: '| [`expandtabs`](numpy.chararray.expandtabs.html#numpy.chararray.expandtabs
    "numpy.chararray.expandtabs")([tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`expandtabs`](numpy.chararray.expandtabs.html#numpy.chararray.expandtabs
    "numpy.chararray.expandtabs")([tabsize]) | 返回将每个字符串元素中的所有制表符替换为一个或多个空格的副本。 |'
- en: '| [`fill`](numpy.chararray.fill.html#numpy.chararray.fill "numpy.chararray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`fill`](numpy.chararray.fill.html#numpy.chararray.fill "numpy.chararray.fill")(value)
    | 用标量值填充数组。 |'
- en: '| [`find`](numpy.chararray.find.html#numpy.chararray.find "numpy.chararray.find")(sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`find`](numpy.chararray.find.html#numpy.chararray.find "numpy.chararray.find")(sub[, start, end])
    | 对于每个元素，返回字符串中发现子字符串 *sub* 的最低索引。 |'
- en: '| [`flatten`](numpy.chararray.flatten.html#numpy.chararray.flatten "numpy.chararray.flatten")([order])
    | Return a copy of the array collapsed into one dimension. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`flatten`](numpy.chararray.flatten.html#numpy.chararray.flatten "numpy.chararray.flatten")([order])
    | 返回压缩为一维的数组副本。 |'
- en: '| [`getfield`](numpy.chararray.getfield.html#numpy.chararray.getfield "numpy.chararray.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`getfield`](numpy.chararray.getfield.html#numpy.chararray.getfield "numpy.chararray.getfield")(dtype[, offset])
    | 将给定数组的字段作为特定类型返回。 |'
- en: '| [`index`](numpy.chararray.index.html#numpy.chararray.index "numpy.chararray.index")(sub[, start, end])
    | Like [`find`](numpy.chararray.find.html#numpy.chararray.find "numpy.chararray.find"),
    but raises *ValueError* when the substring is not found. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`index`](numpy.chararray.index.html#numpy.chararray.index "numpy.chararray.index")(sub[, start, end])
    | 类似于 [`find`](numpy.chararray.find.html#numpy.chararray.find "numpy.chararray.find")，但在子字符串未找到时会引发
    *ValueError*。 |'
- en: '| [`isalnum`](numpy.chararray.isalnum.html#numpy.chararray.isalnum "numpy.chararray.isalnum")()
    | Returns true for each element if all characters in the string are alphanumeric
    and there is at least one character, false otherwise. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum`](numpy.chararray.isalnum.html#numpy.chararray.isalnum "numpy.chararray.isalnum")()
    | 如果字符串中的所有字符均为字母数字字符且至少有一个字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isalpha`](numpy.chararray.isalpha.html#numpy.chararray.isalpha "numpy.chararray.isalpha")()
    | Returns true for each element if all characters in the string are alphabetic
    and there is at least one character, false otherwise. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha`](numpy.chararray.isalpha.html#numpy.chararray.isalpha "numpy.chararray.isalpha")()
    | 如果字符串中的所有字符均为字母字符且至少有一个字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isdecimal`](numpy.chararray.isdecimal.html#numpy.chararray.isdecimal "numpy.chararray.isdecimal")()
    | For each element in *self*, return True if there are only decimal characters
    in the element. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal`](numpy.chararray.isdecimal.html#numpy.chararray.isdecimal "numpy.chararray.isdecimal")()
    | 对于 *self* 中的每个元素，如果元素中只有十进制字符，则返回 True。 |'
- en: '| [`isdigit`](numpy.chararray.isdigit.html#numpy.chararray.isdigit "numpy.chararray.isdigit")()
    | Returns true for each element if all characters in the string are digits and
    there is at least one character, false otherwise. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit`](numpy.chararray.isdigit.html#numpy.chararray.isdigit "numpy.chararray.isdigit")()
    | 如果字符串中的所有字符均为数字字符且至少有一个字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`islower`](numpy.chararray.islower.html#numpy.chararray.islower "numpy.chararray.islower")()
    | Returns true for each element if all cased characters in the string are lowercase
    and there is at least one cased character, false otherwise. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`islower`](numpy.chararray.islower.html#numpy.chararray.islower "numpy.chararray.islower")()
    | 如果字符串中的所有大小写字符均为小写字母且至少有一个大小写字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isnumeric`](numpy.chararray.isnumeric.html#numpy.chararray.isnumeric "numpy.chararray.isnumeric")()
    | For each element in *self*, return True if there are only numeric characters
    in the element. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`isnumeric`](numpy.chararray.isnumeric.html#numpy.chararray.isnumeric "numpy.chararray.isnumeric")()
    | 对于 *self* 中的每个元素，如果元素中只有数值字符，则返回 True。 |'
- en: '| [`isspace`](numpy.chararray.isspace.html#numpy.chararray.isspace "numpy.chararray.isspace")()
    | Returns true for each element if there are only whitespace characters in the
    string and there is at least one character, false otherwise. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`isspace`](numpy.chararray.isspace.html#numpy.chararray.isspace "numpy.chararray.isspace")()
    | 对于每个元素，如果字符串中只包含空白字符并且至少有一个字符，则返回 true；否则返回 false。'
- en: '| [`istitle`](numpy.chararray.istitle.html#numpy.chararray.istitle "numpy.chararray.istitle")()
    | Returns true for each element if the element is a titlecased string and there
    is at least one character, false otherwise. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`istitle`](numpy.chararray.istitle.html#numpy.chararray.istitle "numpy.chararray.istitle")()
    | 对于每个元素，如果该元素是一个标题化的字符串并且至少有一个字符，则返回 true；否则返回 false。'
- en: '| [`isupper`](numpy.chararray.isupper.html#numpy.chararray.isupper "numpy.chararray.isupper")()
    | Returns true for each element if all cased characters in the string are uppercase
    and there is at least one character, false otherwise. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`isupper`](numpy.chararray.isupper.html#numpy.chararray.isupper "numpy.chararray.isupper")()
    | 对于每个元素，如果字符串中的所有字母都是大写字母并且至少有一个字符，则返回 true；否则返回 false。'
- en: '| [`item`](numpy.chararray.item.html#numpy.chararray.item "numpy.chararray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`item`](numpy.chararray.item.html#numpy.chararray.item "numpy.chararray.item")(*args)
    | 将数组的一个元素复制到一个标准的 Python 标量并返回它。'
- en: '| [`join`](numpy.chararray.join.html#numpy.chararray.join "numpy.chararray.join")(seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`join`](numpy.chararray.join.html#numpy.chararray.join "numpy.chararray.join")(seq)
    | 返回一个由序列 *seq* 中的字符串连接而成的字符串。'
- en: '| [`ljust`](numpy.chararray.ljust.html#numpy.chararray.ljust "numpy.chararray.ljust")(width[, fillchar])
    | Return an array with the elements of *self* left-justified in a string of length
    *width*. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`ljust`](numpy.chararray.ljust.html#numpy.chararray.ljust "numpy.chararray.ljust")(width[, fillchar])
    | 返回一个将 *self* 中的元素左对齐到长度为 *width* 的字符串中的数组。'
- en: '| [`lower`](numpy.chararray.lower.html#numpy.chararray.lower "numpy.chararray.lower")()
    | Return an array with the elements of *self* converted to lowercase. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`lower`](numpy.chararray.lower.html#numpy.chararray.lower "numpy.chararray.lower")()
    | 返回一个将 *self* 中的元素转换为小写的数组。'
- en: '| [`lstrip`](numpy.chararray.lstrip.html#numpy.chararray.lstrip "numpy.chararray.lstrip")([chars])
    | For each element in *self*, return a copy with the leading characters removed.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`lstrip`](numpy.chararray.lstrip.html#numpy.chararray.lstrip "numpy.chararray.lstrip")([chars])
    | 对于 *self* 中的每个元素，返回一个删除前导字符的副本。'
- en: '| [`nonzero`](numpy.chararray.nonzero.html#numpy.chararray.nonzero "numpy.chararray.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`nonzero`](numpy.chararray.nonzero.html#numpy.chararray.nonzero "numpy.chararray.nonzero")()
    | 返回非零元素的索引。'
- en: '| [`put`](numpy.chararray.put.html#numpy.chararray.put "numpy.chararray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`put`](numpy.chararray.put.html#numpy.chararray.put "numpy.chararray.put")(indices, values[, mode])
    | 对于所有 *n* 在索引中的元素，设置 `a.flat[n] = values[n]`。'
- en: '| [`ravel`](numpy.chararray.ravel.html#numpy.chararray.ravel "numpy.chararray.ravel")([order])
    | Return a flattened array. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`ravel`](numpy.chararray.ravel.html#numpy.chararray.ravel "numpy.chararray.ravel")([order])
    | 返回一个扁平化的数组。'
- en: '| [`repeat`](numpy.chararray.repeat.html#numpy.chararray.repeat "numpy.chararray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat`](numpy.chararray.repeat.html#numpy.chararray.repeat "numpy.chararray.repeat")(repeats[, axis])
    | 重复数组的元素。'
- en: '| [`replace`](numpy.chararray.replace.html#numpy.chararray.replace "numpy.chararray.replace")(old, new[, count])
    | For each element in *self*, return a copy of the string with all occurrences
    of substring *old* replaced by *new*. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`replace`](numpy.chararray.replace.html#numpy.chararray.replace "numpy.chararray.replace")(old, new[, count])
    | 对于 *self* 中的每个元素，返回一个将所有子字符串 *old* 的出现替换为 *new* 的字符串副本。'
- en: '| [`reshape`](numpy.chararray.reshape.html#numpy.chararray.reshape "numpy.chararray.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](numpy.chararray.reshape.html#numpy.chararray.reshape "numpy.chararray.reshape")(shape[, order])
    | 返回一个包含相同数据但具有新形状的数组。'
- en: '| [`resize`](numpy.chararray.resize.html#numpy.chararray.resize "numpy.chararray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](numpy.chararray.resize.html#numpy.chararray.resize "numpy.chararray.resize")(new_shape[, refcheck])
    | 原地更改数组的形状和大小。'
- en: '| [`rfind`](numpy.chararray.rfind.html#numpy.chararray.rfind "numpy.chararray.rfind")(sub[, start, end])
    | For each element in *self*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind`](numpy.chararray.rfind.html#numpy.chararray.rfind "numpy.chararray.rfind")(sub[, start, end])
    | 对于 *self* 中的每个元素，返回字符串中子字符串 *sub* 最高索引的位置，其中 *sub* 包含在 [*start*, *end*] 内。'
- en: '| [`rindex`](numpy.chararray.rindex.html#numpy.chararray.rindex "numpy.chararray.rindex")(sub[, start, end])
    | Like [`rfind`](numpy.chararray.rfind.html#numpy.chararray.rfind "numpy.chararray.rfind"),
    but raises *ValueError* when the substring *sub* is not found. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`rindex`](numpy.chararray.rindex.html#numpy.chararray.rindex "numpy.chararray.rindex")(sub[, start, end])
    | 类似于[`rfind`](numpy.chararray.rfind.html#numpy.chararray.rfind "numpy.chararray.rfind")，但在子字符串*sub*未找到时引发*ValueError*。
    |'
- en: '| [`rjust`](numpy.chararray.rjust.html#numpy.chararray.rjust "numpy.chararray.rjust")(width[, fillchar])
    | Return an array with the elements of *self* right-justified in a string of length
    *width*. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust`](numpy.chararray.rjust.html#numpy.chararray.rjust "numpy.chararray.rjust")(width[, fillchar])
    | 返回一个将*self*中的元素右对齐在长度为*width*的字符串中的数组。 |'
- en: '| [`rsplit`](numpy.chararray.rsplit.html#numpy.chararray.rsplit "numpy.chararray.rsplit")([sep, maxsplit])
    | For each element in *self*, return a list of the words in the string, using
    *sep* as the delimiter string. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit`](numpy.chararray.rsplit.html#numpy.chararray.rsplit "numpy.chararray.rsplit")([sep, maxsplit])
    | 对*self*中的每个元素，使用*sep*作为分隔符，返回字符串中单词的列表。 |'
- en: '| [`rstrip`](numpy.chararray.rstrip.html#numpy.chararray.rstrip "numpy.chararray.rstrip")([chars])
    | For each element in *self*, return a copy with the trailing characters removed.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip`](numpy.chararray.rstrip.html#numpy.chararray.rstrip "numpy.chararray.rstrip")([chars])
    | 对*self*中的每个元素，返回一个副本，其中移除了尾随字符。 |'
- en: '| [`searchsorted`](numpy.chararray.searchsorted.html#numpy.chararray.searchsorted
    "numpy.chararray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`searchsorted`](numpy.chararray.searchsorted.html#numpy.chararray.searchsorted
    "numpy.chararray.searchsorted")(v[, side, sorter]) | 找到应该插入数组a的位置索引，以保持顺序。 |'
- en: '| [`setfield`](numpy.chararray.setfield.html#numpy.chararray.setfield "numpy.chararray.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`setfield`](numpy.chararray.setfield.html#numpy.chararray.setfield "numpy.chararray.setfield")(val, dtype[, offset])
    | 在由数据类型定义的字段的指定位置放置一个值。 |'
- en: '| [`setflags`](numpy.chararray.setflags.html#numpy.chararray.setflags "numpy.chararray.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`setflags`](numpy.chararray.setflags.html#numpy.chararray.setflags "numpy.chararray.setflags")([write, align, uic])
    | 设置数组标志WRITEABLE、ALIGNED、WRITEBACKIFCOPY。 |'
- en: '| [`sort`](numpy.chararray.sort.html#numpy.chararray.sort "numpy.chararray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`sort`](numpy.chararray.sort.html#numpy.chararray.sort "numpy.chararray.sort")([axis, kind, order])
    | 对数组进行原地排序。 |'
- en: '| [`split`](numpy.chararray.split.html#numpy.chararray.split "numpy.chararray.split")([sep, maxsplit])
    | For each element in *self*, return a list of the words in the string, using
    *sep* as the delimiter string. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](numpy.chararray.split.html#numpy.chararray.split "numpy.chararray.split")([sep, maxsplit])
    | 对*self*中的每个元素，使用*sep*作为分隔符，返回字符串中单词的列表。 |'
- en: '| [`splitlines`](numpy.chararray.splitlines.html#numpy.chararray.splitlines
    "numpy.chararray.splitlines")([keepends]) | For each element in *self*, return
    a list of the lines in the element, breaking at line boundaries. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`splitlines`](numpy.chararray.splitlines.html#numpy.chararray.splitlines
    "numpy.chararray.splitlines")([keepends]) | 对*self*中的每个元素，在换行符处中断，返回元素中的行列表。 |'
- en: '| [`squeeze`](numpy.chararray.squeeze.html#numpy.chararray.squeeze "numpy.chararray.squeeze")([axis])
    | Remove axes of length one from *a*. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`squeeze`](numpy.chararray.squeeze.html#numpy.chararray.squeeze "numpy.chararray.squeeze")([axis])
    | 从*a*中删除长度为一的轴。 |'
- en: '| [`startswith`](numpy.chararray.startswith.html#numpy.chararray.startswith
    "numpy.chararray.startswith")(prefix[, start, end]) | Returns a boolean array
    which is *True* where the string element in *self* starts with *prefix*, otherwise
    *False*. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`startswith`](numpy.chararray.startswith.html#numpy.chararray.startswith
    "numpy.chararray.startswith")(prefix[, start, end]) | 返回一个布尔数组，其中*True*表示*self*中的字符串元素以*prefix*开头，否则为*False*。
    |'
- en: '| [`strip`](numpy.chararray.strip.html#numpy.chararray.strip "numpy.chararray.strip")([chars])
    | For each element in *self*, return a copy with the leading and trailing characters
    removed. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`strip`](numpy.chararray.strip.html#numpy.chararray.strip "numpy.chararray.strip")([chars])
    | 对*self*中的每个元素，返回一个副本，其中移除了前导和尾随字符。 |'
- en: '| [`swapaxes`](numpy.chararray.swapaxes.html#numpy.chararray.swapaxes "numpy.chararray.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](numpy.chararray.swapaxes.html#numpy.chararray.swapaxes "numpy.chararray.swapaxes")(axis1, axis2)
    | 返回一个将*axis1*和*axis2*交换的数组视图。 |'
- en: '| [`swapcase`](numpy.chararray.swapcase.html#numpy.chararray.swapcase "numpy.chararray.swapcase")()
    | For each element in *self*, return a copy of the string with uppercase characters
    converted to lowercase and vice versa. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase`](numpy.chararray.swapcase.html#numpy.chararray.swapcase "numpy.chararray.swapcase")()
    | 对于*self*中的每个元素，返回将大写字符转换为小写字符，反之亦然的字符串副本。'
- en: '| [`take`](numpy.chararray.take.html#numpy.chararray.take "numpy.chararray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`take`](numpy.chararray.take.html#numpy.chararray.take "numpy.chararray.take")(indices[, axis, out, mode])
    | 返回从给定索引处的*a*的元素形成的数组。'
- en: '| [`title`](numpy.chararray.title.html#numpy.chararray.title "numpy.chararray.title")()
    | For each element in *self*, return a titlecased version of the string: words
    start with uppercase characters, all remaining cased characters are lowercase.
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`title`](numpy.chararray.title.html#numpy.chararray.title "numpy.chararray.title")()
    | 对于*self*中的每个元素，返回字符串的*.title()*版本：单词以大写字符开头，所有其余大小写字符为小写。'
- en: '| [`tofile`](numpy.chararray.tofile.html#numpy.chararray.tofile "numpy.chararray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`tofile`](numpy.chararray.tofile.html#numpy.chararray.tofile "numpy.chararray.tofile")(fid[, sep, format])
    | 将数组写入文件为文本或二进制（默认）。'
- en: '| [`tolist`](numpy.chararray.tolist.html#numpy.chararray.tolist "numpy.chararray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`tolist`](numpy.chararray.tolist.html#numpy.chararray.tolist "numpy.chararray.tolist")()
    | 将数组作为Python标量的`a.ndim`级别深度嵌套列表返回。'
- en: '| [`tostring`](numpy.chararray.tostring.html#numpy.chararray.tostring "numpy.chararray.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.chararray.tobytes.html#numpy.chararray.tobytes
    "numpy.chararray.tobytes"), with exactly the same behavior. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`tostring`](numpy.chararray.tostring.html#numpy.chararray.tostring "numpy.chararray.tostring")([order])
    | 与[`tobytes`](numpy.chararray.tobytes.html#numpy.chararray.tobytes "numpy.chararray.tobytes")完全具有相同行为的兼容别名。'
- en: '| [`translate`](numpy.chararray.translate.html#numpy.chararray.translate "numpy.chararray.translate")(table[, deletechars])
    | For each element in *self*, return a copy of the string where all characters
    occurring in the optional argument *deletechars* are removed, and the remaining
    characters have been mapped through the given translation table. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`translate`](numpy.chararray.translate.html#numpy.chararray.translate "numpy.chararray.translate")(table[, deletechars])
    | 对于*self*中的每个元素，返回删除了可选参数*deletechars*中出现的所有字符，并且剩余字符已通过给定的转换表映射的字符串副本。'
- en: '| [`transpose`](numpy.chararray.transpose.html#numpy.chararray.transpose "numpy.chararray.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](numpy.chararray.transpose.html#numpy.chararray.transpose "numpy.chararray.transpose")(*axes)
    | 返回具有转置轴的数组的视图。'
- en: '| [`upper`](numpy.chararray.upper.html#numpy.chararray.upper "numpy.chararray.upper")()
    | Return an array with the elements of *self* converted to uppercase. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`upper`](numpy.chararray.upper.html#numpy.chararray.upper "numpy.chararray.upper")()
    | 返回将*self*中的元素转换为大写的数组。'
- en: '| [`view`](numpy.chararray.view.html#numpy.chararray.view "numpy.chararray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`view`](numpy.chararray.view.html#numpy.chararray.view "numpy.chararray.view")([dtype][, type])
    | 具有相同数据的数组的新视图。'
- en: '| [`zfill`](numpy.chararray.zfill.html#numpy.chararray.zfill "numpy.chararray.zfill")(width)
    | Return the numeric string left-filled with zeros in a string of length *width*.
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill`](numpy.chararray.zfill.html#numpy.chararray.zfill "numpy.chararray.zfill")(width)
    | 返回长度为*width*的字符串中左侧用零填充的数字字符串。'
