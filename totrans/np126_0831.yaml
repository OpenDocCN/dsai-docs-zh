- en: numpy.round
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.round.html](https://numpy.org/doc/1.26/reference/generated/numpy.round.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Evenly round to the given number of decimals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input data.
  prefs: []
  type: TYPE_NORMAL
- en: '**decimals**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of decimal places to round to (default: 0). If decimals is negative,
    it specifies the number of positions to the left of the decimal point.'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. It must have the same
    shape as the expected output, but the type of the output values will be cast if
    necessary. See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rounded_array**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array of the same type as *a*, containing the rounded values. Unless *out*
    was specified, a new array is created. A reference to the result is returned.
  prefs: []
  type: TYPE_NORMAL
- en: The real and imaginary parts of complex numbers are rounded separately. The
    result of rounding a float is a float.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.round`](numpy.ndarray.round.html#numpy.ndarray.round "numpy.ndarray.round")'
  prefs: []
  type: TYPE_NORMAL
- en: equivalent method
  prefs: []
  type: TYPE_NORMAL
- en: '[`around`](numpy.around.html#numpy.around "numpy.around")'
  prefs: []
  type: TYPE_NORMAL
- en: an alias for this function
  prefs: []
  type: TYPE_NORMAL
- en: '[`ceil`](numpy.ceil.html#numpy.ceil "numpy.ceil"), [`fix`](numpy.fix.html#numpy.fix
    "numpy.fix"), [`floor`](numpy.floor.html#numpy.floor "numpy.floor"), [`rint`](numpy.rint.html#numpy.rint
    "numpy.rint"), [`trunc`](numpy.trunc.html#numpy.trunc "numpy.trunc")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For values exactly halfway between rounded decimal values, NumPy rounds to the
    nearest even value. Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '`np.round` uses a fast but sometimes inexact algorithm to round floating-point
    datatypes. For positive *decimals* it is equivalent to `np.true_divide(np.rint(a
    * 10**decimals), 10**decimals)`, which has error due to the inexact representation
    of decimal fractions in the IEEE floating point standard [[1]](#r25ee6110317b-1)
    and errors introduced when scaling by powers of ten. For instance, note the extra
    “1” in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If your goal is to print such values with a fixed number of decimals, it is
    preferable to use numpy’s float printing routines to limit the number of printed
    decimals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The float printing routines use an accurate but much more computationally demanding
    algorithm to compute the number of digits after the decimal point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, Python’s builtin [`round`](#numpy.round "numpy.round") function
    uses a more accurate but slower algorithm for 64-bit floating point values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Lecture Notes on the Status of IEEE 754”, William Kahan, [https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF](https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
