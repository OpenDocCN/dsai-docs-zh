- en: Polynomials Manipulation Module Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/polys/reference.html](https://docs.sympy.org/latest/modules/polys/reference.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Polynomial manipulation algorithms and algebraic objects.
  prefs: []
  type: TYPE_NORMAL
- en: See [Polynomial Manipulation](index.html#polys-docs) for an index of documentation
    for the polys module and [Basic functionality of the module](basics.html#polys-basics)
    for an introductory explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Basic polynomial manipulation functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently transform an expression into a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial from an expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Construct polynomials from expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return the degree of `f` in the given variable.
  prefs: []
  type: TYPE_NORMAL
- en: The degree of 0 is negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polytools.Poly.total_degree`](#sympy.polys.polytools.Poly.total_degree
    "sympy.polys.polytools.Poly.total_degree"), [`degree_list`](#sympy.polys.polytools.degree_list
    "sympy.polys.polytools.degree_list")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of degrees of `f` in all variables.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return the leading coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Return the leading monomial of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Return the leading term of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial pseudo-division of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial pseudo-remainder of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial pseudo-quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial exact pseudo-quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial division of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial remainder of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Compute polynomial exact quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Half extended Euclidean algorithm of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `(s, h)` such that `h = gcd(f, g)` and `s*f = h (mod g)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Extended Euclidean algorithm of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `(s, t, h)` such that `h = gcd(f, g)` and `s*f + t*g = h`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Invert `f` modulo `g` when possible.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'For more efficient inversion of Rationals, use the [`sympy.core.intfunc.mod_inverse`](../core.html#sympy.core.intfunc.mod_inverse
    "sympy.core.intfunc.mod_inverse") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.core.intfunc.mod_inverse`](../core.html#sympy.core.intfunc.mod_inverse
    "sympy.core.intfunc.mod_inverse")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Compute subresultant PRS of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Compute resultant of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Compute discriminant of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Remove GCD of terms from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: If the `deep` flag is True, then the arguments of `f` will have terms_gcd applied
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: If a fraction is factored out of `f` and `f` is an Add, then an unevaluated
    Mul will be returned so that automatic simplification does not redistribute it.
    The hint `clear`, when set to False, can be used to prevent such factoring when
    all coefficients are not fractions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The default action of polys routines is to expand the expression given to them.
    terms_gcd follows this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is not desired then the hint `expand` can be set to False. In this
    case the expression will be treated as though it were comprised of one or more
    terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to traverse factors of a Mul or the arguments of other functions,
    the `deep` hint can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Rationals are factored out by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Only the y-term had a coefficient that was a fraction; if one does not want
    to factor out the 1/2 in cases like this, the flag `clear` can be set to False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `clear` flag is ignored if all coefficients are fractions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.core.exprtools.gcd_terms`](../core.html#sympy.core.exprtools.gcd_terms
    "sympy.core.exprtools.gcd_terms"), [`sympy.core.exprtools.factor_terms`](../core.html#sympy.core.exprtools.factor_terms
    "sympy.core.exprtools.factor_terms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD and cofactors of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns polynomials `(h, cff, cfg)` such that `h = gcd(f, g)`, and `cff = quo(f,
    h)` and `cfg = quo(g, h)` are, so called, cofactors of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD of a list of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Compute LCM of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Compute LCM of a list of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Reduce `f` modulo a constant `p`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Divide all coefficients of `f` by `LC(f)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD of coefficients of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Compute content and the primitive form of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Expansion is performed by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Set `expand` to False to shut this off. Note that the extraction will not be
    recursive; use the as_content_primitive method for recursive, non-destructive
    Rational extraction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Compute functional composition `f(g)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Compute functional decomposition of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Compute Sturm sequence of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Compute a list of greatest factorial factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the input to ff() and rf() should be Poly instances to use the definitions
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Compute greatest factorial factorization of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Compute square-free norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `s`, `f`, `r`, such that `g(x) = f(x-sa)` and `r(x) = Norm(g(x))` is
    a square-free polynomial over `K`, where `a` is the algebraic extension of the
    ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Compute square-free part of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Compute a list of square-free factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Compute square-free factorization of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Compute a list of irreducible factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Compute the factorization of expression, `f`, into irreducibles. (To factor
    an integer into primes, use `factorint`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'There two modes implemented: symbolic and formal. If `f` is not an instance
    of [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly") and generators
    are not specified, then the former mode is used. Otherwise, the formal mode is
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: In symbolic mode, [`factor()`](#sympy.polys.polytools.factor "sympy.polys.polytools.factor")
    will traverse the expression tree and factor its components without any prior
    expansion, unless an instance of [`Add`](../core.html#sympy.core.add.Add "sympy.core.add.Add")
    is encountered (in this case formal factorization is used). This way [`factor()`](#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") can handle large or symbolic exponents.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the factorization is computed over the rationals. To factor over
    other domain, e.g. an algebraic or finite field, use appropriate options: `extension`,
    `modulus` or `domain`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, factor deals with an expression as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `deep` flag is True then subexpressions will be factored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: If the `fraction` flag is False then rational expressions will not be combined.
    By default it is True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.ntheory.factor_.factorint`](../ntheory.html#sympy.ntheory.factor_.factorint
    "sympy.ntheory.factor_.factorint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Compute isolating intervals for roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Refine an isolating interval of a root to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of roots of `f` in `[inf, sup]` interval.
  prefs: []
  type: TYPE_NORMAL
- en: If one of `inf` or `sup` is complex, it will return the number of roots in the
    complex rectangle with corners at `inf` and `sup`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Returns the real and complex roots of `f` with multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    or [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")'
  prefs: []
  type: TYPE_NORMAL
- en: A univariate polynomial with rational (or `Float`) coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**multiple** : `bool` (default `True`).'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to return a `list` of roots or a list of root/multiplicity pairs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**radicals** : `bool` (default `True`)'
  prefs: []
  type: TYPE_NORMAL
- en: Use simple radical formulae rather than [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf") for some irrational roots.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    (usually [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf"))
    representing
  prefs: []
  type: TYPE_NORMAL
- en: the roots is returned with each root repeated according to its multiplicity
  prefs: []
  type: TYPE_NORMAL
- en: as a root of `f`. The roots are always uniquely ordered with real roots
  prefs: []
  type: TYPE_NORMAL
- en: coming before complex roots. The real roots are in increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: Complex roots are ordered by increasing real part and then increasing
  prefs: []
  type: TYPE_NORMAL
- en: imaginary part.
  prefs: []
  type: TYPE_NORMAL
- en: If `multiple=False` is passed then a list of root/multiplicity pairs is
  prefs: []
  type: TYPE_NORMAL
- en: returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: If `radicals=False` is passed then all roots will be represented as
  prefs: []
  type: TYPE_NORMAL
- en: either rational numbers or [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf").
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Finds all real and complex roots of a univariate polynomial with rational coefficients
    of any degree exactly. The roots are represented in the form given by [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"). This is equivalent to using [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof") to find each of the indexed roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Simple radical formulae are used in some cases but the cubic and quartic formulae
    are avoided. Instead most non-rational roots will be represented as [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'All roots of any polynomial with rational coefficients of any degree can be
    represented using [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf").
    The use of [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf")
    bypasses limitations on the availability of radical formulae for quintic and higher
    degree polynomials _[1]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Irrational algebraic or transcendental coefficients cannot currently be handled
    by [`all_roots()`](#sympy.polys.polytools.all_roots "sympy.polys.polytools.all_roots")
    (or [`rootof()`](#sympy.polys.rootoftools.rootof "sympy.polys.rootoftools.rootof")
    more generally):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of algebraic or transcendental coefficients [`ground_roots()`](#sympy.polys.polytools.ground_roots
    "sympy.polys.polytools.ground_roots") might be able to find some roots by factorisation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'If the coefficients are numeric then [`nroots()`](#sympy.polys.polytools.nroots
    "sympy.polys.polytools.nroots") can be used to find all roots approximately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'If the coefficients are symbolic then [`sympy.polys.polyroots.roots()`](#sympy.polys.polyroots.roots
    "sympy.polys.polyroots.roots") or [`ground_roots()`](#sympy.polys.polytools.ground_roots
    "sympy.polys.polytools.ground_roots") should be used instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Poly.all_roots`](#sympy.polys.polytools.Poly.all_roots "sympy.polys.polytools.Poly.all_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: The underlying [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    method used by [`all_roots()`](#sympy.polys.polytools.all_roots "sympy.polys.polytools.all_roots").
  prefs: []
  type: TYPE_NORMAL
- en: '[`rootof`](#sympy.polys.rootoftools.rootof "sympy.polys.rootoftools.rootof")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute a single numbered root of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`real_roots`](#sympy.polys.polytools.real_roots "sympy.polys.polytools.real_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute all the real roots using [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof").
  prefs: []
  type: TYPE_NORMAL
- en: '[`ground_roots`](#sympy.polys.polytools.ground_roots "sympy.polys.polytools.ground_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute some roots in the ground domain by factorisation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nroots`](#sympy.polys.polytools.nroots "sympy.polys.polytools.nroots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute all roots using approximate numerical techniques.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polyroots.roots`](#sympy.polys.polyroots.roots "sympy.polys.polyroots.roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute symbolic expressions for roots using radical formulae.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R808](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem](https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Returns the real roots of `f` with multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    or [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")'
  prefs: []
  type: TYPE_NORMAL
- en: A univariate polynomial with rational (or `Float`) coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**multiple** : `bool` (default `True`).'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to return a `list` of roots or a list of root/multiplicity pairs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**radicals** : `bool` (default `True`)'
  prefs: []
  type: TYPE_NORMAL
- en: Use simple radical formulae rather than [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf") for some irrational roots.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    (usually [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf"))
    representing
  prefs: []
  type: TYPE_NORMAL
- en: the real roots is returned. The roots are arranged in increasing order and
  prefs: []
  type: TYPE_NORMAL
- en: are repeated according to their multiplicities as roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: If `multiple=False` is passed then a list of root/multiplicity pairs is
  prefs: []
  type: TYPE_NORMAL
- en: returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: If `radicals=False` is passed then all roots will be represented as
  prefs: []
  type: TYPE_NORMAL
- en: either rational numbers or [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf").
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Finds all real roots of a univariate polynomial with rational coefficients of
    any degree exactly. The roots are represented in the form given by [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"). This is equivalent to using [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof") or [`all_roots()`](#sympy.polys.polytools.all_roots
    "sympy.polys.polytools.all_roots") and filtering out only the real roots. However
    if only the real roots are needed then [`real_roots()`](#sympy.polys.polytools.real_roots
    "sympy.polys.polytools.real_roots") is more efficient than [`all_roots()`](#sympy.polys.polytools.all_roots
    "sympy.polys.polytools.all_roots") because it computes only the real roots and
    avoids costly complex root isolation routines.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Real roots of any polynomial with rational coefficients of any degree can be
    represented using [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: All rational roots will be returned as rational numbers. Roots of some simple
    factors will be expressed using radical or other formulae (unless `radicals=False`
    is passed). All other roots will be expressed as [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'All returned root expressions will numerically evaluate to real numbers with
    no imaginary part. This is in contrast to the expressions generated by the cubic
    or quartic formulae as used by [`roots()`](#sympy.polys.polyroots.roots "sympy.polys.polyroots.roots")
    which suffer from casus irreducibilis [[R809]](#r809):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`real_roots()`](#sympy.polys.polytools.real_roots "sympy.polys.polytools.real_roots")
    is equivalent to using [`all_roots()`](#sympy.polys.polytools.all_roots "sympy.polys.polytools.all_roots")
    (or [`rootof()`](#sympy.polys.rootoftools.rootof "sympy.polys.rootoftools.rootof"))
    and filtering out only the real roots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: If only the real roots are wanted then using [`real_roots()`](#sympy.polys.polytools.real_roots
    "sympy.polys.polytools.real_roots") is faster than using [`all_roots()`](#sympy.polys.polytools.all_roots
    "sympy.polys.polytools.all_roots"). Using [`real_roots()`](#sympy.polys.polytools.real_roots
    "sympy.polys.polytools.real_roots") avoids complex root isolation which can be
    a lot slower than real root isolation especially for polynomials of high degree
    which typically have many more complex roots than real roots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Irrational algebraic or transcendental coefficients cannot be handled by [`real_roots()`](#sympy.polys.polytools.real_roots
    "sympy.polys.polytools.real_roots") (or [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof") more generally):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of algebraic or transcendental coefficients [`ground_roots()`](#sympy.polys.polytools.ground_roots
    "sympy.polys.polytools.ground_roots") might be able to find some roots by factorisation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'If the coefficients are numeric then [`nroots()`](#sympy.polys.polytools.nroots
    "sympy.polys.polytools.nroots") can be used to find all roots approximately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: If the coefficients are symbolic then [`sympy.polys.polyroots.roots()`](#sympy.polys.polyroots.roots
    "sympy.polys.polyroots.roots") or [`ground_roots()`](#sympy.polys.polytools.ground_roots
    "sympy.polys.polytools.ground_roots") should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Poly.real_roots`](#sympy.polys.polytools.Poly.real_roots "sympy.polys.polytools.Poly.real_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: The underlying [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    method used by [`real_roots()`](#sympy.polys.polytools.real_roots "sympy.polys.polytools.real_roots").
  prefs: []
  type: TYPE_NORMAL
- en: '[`rootof`](#sympy.polys.rootoftools.rootof "sympy.polys.rootoftools.rootof")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute a single numbered root of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`all_roots`](#sympy.polys.polytools.all_roots "sympy.polys.polytools.all_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute all real and non-real roots using [`rootof()`](#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof").
  prefs: []
  type: TYPE_NORMAL
- en: '[`ground_roots`](#sympy.polys.polytools.ground_roots "sympy.polys.polytools.ground_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute some roots in the ground domain by factorisation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nroots`](#sympy.polys.polytools.nroots "sympy.polys.polytools.nroots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute all roots using approximate numerical techniques.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polyroots.roots`](#sympy.polys.polyroots.roots "sympy.polys.polyroots.roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute symbolic expressions for roots using radical formulae.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R809] ([1](#id2),[2](#id3))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Casus_irreducibilis](https://en.wikipedia.org/wiki/Casus_irreducibilis)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Compute numerical approximations of roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Compute roots of `f` by factorization in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial with n-th powers of roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Cancel common factors in a rational function `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: due to automatic distribution of Rationals, a sum divided by an integer
    will appear as a sum. To recover a rational form use \(together\) on the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Reduces a polynomial `f` modulo a set of polynomials `G`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a polynomial `f` and a set of polynomials `G = (g_1, ..., g_n)`, computes
    a set of quotients `q = (q_1, ..., q_n)` and the remainder `r` such that `f =
    q_1*g_1 + ... + q_n*g_n + r`, where `r` vanishes or `r` is a completely reduced
    polynomial with respect to `G`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Computes the reduced Groebner basis for a set of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `order` argument to set the monomial ordering that will be used to compute
    the basis. Allowed orders are `lex`, `grlex` and `grevlex`. If no order is specified,
    it defaults to `lex`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Groebner bases, see the references and the docstring
    of [`solve_poly_system()`](../solvers/solvers.html#sympy.solvers.polysys.solve_poly_system
    "sympy.solvers.polysys.solve_poly_system").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Example taken from [1].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: By default, an improved implementation of the Buchberger algorithm is used.
    Optionally, an implementation of the F5B algorithm can be used. The algorithm
    can be set using the `method` flag or with the [`sympy.polys.polyconfig.setup()`](internals.html#sympy.polys.polyconfig.setup
    "sympy.polys.polyconfig.setup") function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[Buchberger01]](literature.html#buchberger01)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Cox97]](literature.html#cox97)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Checks if the ideal generated by a Groebner basis is zero-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm checks if the set of monomials not divisible by the leading monomial
    of any element of `F` is bounded.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: David A. Cox, John B. Little, Donal O’Shea. Ideals, Varieties and Algorithms,
    3rd edition, p. 230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Generic class for representing and operating on polynomial expressions.
  prefs: []
  type: TYPE_NORMAL
- en: See [Polynomial Manipulation](index.html#polys-docs) for general documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Poly is a subclass of Basic rather than Expr but instances can be converted
    to Expr with the [`as_expr()`](#sympy.polys.polytools.Poly.as_expr "sympy.polys.polytools.Poly.as_expr")
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.6: Combining Poly with non-Poly objects in binary
    operations is deprecated. Explicitly convert both objects to either Poly or Expr
    first. See [Mixing Poly and non-polynomial expressions in binary operations](../../explanation/active-deprecations.html#deprecated-poly-nonpoly-binary-operations).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a univariate polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a univariate polynomial with specific domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a multivariate polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a univariate polynomial, where y is a constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'You can evaluate the above polynomial as a function of y:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.core.expr.Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Returns the last non-zero coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Returns the last non-zero monomial of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Returns the last non-zero term of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading monomial of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: The Leading monomial signifies the monomial having the highest power of the
    principal generator in the expression f.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading term of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: The Leading term signifies the term having the highest power of the principal
    generator in the expression f along with its coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Returns the trailing coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Make all coefficients in `f` positive.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Add two polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Add an element of the ground domain to `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Returns all coefficients from a univariate polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Returns all monomials from a univariate polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all_terms`](#sympy.polys.polytools.Poly.all_terms "sympy.polys.polytools.Poly.all_terms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of real and complex roots with multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: See [`all_roots()`](#sympy.polys.polytools.all_roots "sympy.polys.polytools.all_roots")
    for more explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Returns all terms from a univariate polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Switch to a `dict` representation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Poly instance to an Expr instance.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Switch to a `list` representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Converts `self` to a polynomial or returns `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Cancel common factors in a rational function `f/g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Clear denominators, but keep the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Returns the coefficient of `monom` in `f` if there, else None.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `Expr.coeff()` behaves differently, collecting terms if possible;
    the Poly must be converted to an Expr to use that method, however:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nth`](#sympy.polys.polytools.Poly.nth "sympy.polys.polytools.Poly.nth")'
  prefs: []
  type: TYPE_NORMAL
- en: more efficient query using exponents of the monomial’s generators
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero coefficients from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all_coeffs`](#sympy.polys.polytools.Poly.all_coeffs "sympy.polys.polytools.Poly.all_coeffs"),
    [`coeff_monomial`](#sympy.polys.polytools.Poly.coeff_monomial "sympy.polys.polytools.Poly.coeff_monomial"),
    [`nth`](#sympy.polys.polytools.Poly.nth "sympy.polys.polytools.Poly.nth")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: Returns the GCD of `f` and `g` and their cofactors.
  prefs: []
  type: TYPE_NORMAL
- en: Returns polynomials `(h, cff, cfg)` such that `h = gcd(f, g)`, and `cff = quo(f,
    h)` and `cfg = quo(g, h)` are, so called, cofactors of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Computes the functional composition of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: Returns the GCD of polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of roots of `f` in `[inf, sup]` interval.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: Computes a functional decomposition of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: Reduce degree of `f` by mapping `x_i**m` to `y_i`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Returns degree of `f` in `x_j`.
  prefs: []
  type: TYPE_NORMAL
- en: The degree of 0 is negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of degrees of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: Computes partial derivative of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Computes the discriminant of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: Compute the *dispersion* of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'For two polynomials \(f(x)\) and \(g(x)\) with \(\deg f > 0\) and \(\deg g
    > 0\) the dispersion \(\operatorname{dis}(f, g)\) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{dis}(f, g) & := \max\{ J(f,g) \cup \{0\} \} \\
    & = \max\{ \{a \in \mathbb{N} | \gcd(f(x), g(x+a)) \neq 1\} \cup \{0\} \}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: and for a single polynomial \(\operatorname{dis}(f) := \operatorname{dis}(f,
    f)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispersion set and dispersion of a simple polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the definition of the dispersion is not symmetric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: 'Computing the dispersion also works over field extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even perform the computations for polynomials having symbolic coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dispersionset`](#sympy.polys.polytools.Poly.dispersionset "sympy.polys.polytools.Poly.dispersionset")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[ManWright94]](literature.html#manwright94)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Koepf98]](literature.html#koepf98)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Abramov71]](literature.html#abramov71)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Man93]](literature.html#man93)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Compute the *dispersion set* of two polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'For two polynomials \(f(x)\) and \(g(x)\) with \(\deg f > 0\) and \(\deg g
    > 0\) the dispersion set \(\operatorname{J}(f, g)\) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{J}(f, g) & := \{a \in \mathbb{N}_0 | \gcd(f(x),
    g(x+a)) \neq 1\} \\ & = \{a \in \mathbb{N}_0 | \deg \gcd(f(x), g(x+a)) \geq 1\}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: For a single polynomial one defines \(\operatorname{J}(f) := \operatorname{J}(f,
    f)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispersion set and dispersion of a simple polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the definition of the dispersion is not symmetric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: 'Computing the dispersion also works over field extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even perform the computations for polynomials having symbolic coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dispersion`](#sympy.polys.polytools.Poly.dispersion "sympy.polys.polytools.Poly.dispersion")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[ManWright94]](literature.html#manwright94)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Koepf98]](literature.html#koepf98)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Abramov71]](literature.html#abramov71)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[Man93]](literature.html#man93)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial division with remainder of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Get the ground domain of a [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain"):'
  prefs: []
  type: TYPE_NORMAL
- en: Ground domain of the [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Eject selected generators into the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate `f` at `a` in the given variable.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Remove unnecessary generators from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Computes polynomial exact quotient of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of irreducible factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of irreducible factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: Free symbols of a polynomial expression.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: Free symbols of the domain of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial from a `dict`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial from an expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial from a `list`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial from a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: Compute the Galois group of this polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.numberfields.galoisgroups.galois_group`](numberfields.html#sympy.polys.numberfields.galoisgroups.galois_group
    "sympy.polys.numberfields.galoisgroups.galois_group")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: Returns the polynomial GCD of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Extended Euclidean algorithm of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `(s, t, h)` such that `h = gcd(f, g)` and `s*f + t*g = h`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Return the principal generator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Get the ground domain of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: Get the modulus of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Computes greatest factorial factorization of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: Compute roots of `f` by factorization in the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: Half extended Euclidean algorithm of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `(s, h)` such that `h = gcd(f, g)` and `s*f = h (mod g)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if `Poly(f, *gens)` retains ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Returns the homogeneous order of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: A homogeneous polynomial is a polynomial whose all monomials with non-zero coefficients
    have the same total degree. This degree is the homogeneous order of `f`. If you
    only want to check if a polynomial is homogeneous, then use [`Poly.is_homogeneous()`](#sympy.polys.polytools.Poly.is_homogeneous
    "sympy.polys.polytools.Poly.is_homogeneous").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Returns the homogeneous polynomial of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: A homogeneous polynomial is a polynomial whose all monomials with non-zero coefficients
    have the same total degree. If you only want to check if a polynomial is homogeneous,
    then use [`Poly.is_homogeneous()`](#sympy.polys.polytools.Poly.is_homogeneous
    "sympy.polys.polytools.Poly.is_homogeneous"). If you want not only to check if
    a polynomial is homogeneous but also compute its homogeneous order, then use [`Poly.homogeneous_order()`](#sympy.polys.polytools.Poly.homogeneous_order
    "sympy.polys.polytools.Poly.homogeneous_order").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Inject ground domain generators into `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Computes indefinite integral of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: Compute isolating intervals for roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: For real roots the Vincent-Akritas-Strzebonski (VAS) continued fractions method
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: Invert `f` modulo `g` when possible.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a cyclotomic polnomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a homogeneous polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: A homogeneous polynomial is a polynomial whose all monomials with non-zero coefficients
    have the same total degree. If you want not only to check if a polynomial is homogeneous
    but also compute its homogeneous order, then use [`Poly.homogeneous_order()`](#sympy.polys.polytools.Poly.homogeneous_order
    "sympy.polys.polytools.Poly.homogeneous_order").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` has no factors over its domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is linear in all its variables.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if the leading coefficient of `f` is one.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is zero or has only one term.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a multivariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a unit polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if GCD of the coefficients of `f` is one.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is quadratic in all its variables.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a square-free polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a zero polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Returns l1 norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Returns polynomial LCM of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of non-zero terms in `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Convert algebraic coefficients to rationals.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Remove dummy generators from `f` that are to the left of specified `gen` in
    the generators as ordered. When `gen` is an integer, it refers to the generator
    located at that position within the tuple of generators of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Turn any univariate polynomial over [QQ](domainsref.html#qq) or [ZZ](domainsref.html#zz)
    into a monic polynomial over [ZZ](domainsref.html#zz), by scaling the roots as
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Pair `(g, c)`
  prefs: []
  type: TYPE_NORMAL
- en: g is the polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: c is the integer by which the roots had to be scaled
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This operation can be performed whether or not *f* is irreducible; when it is,
    this can be understood as determining an algebraic integer generating the same
    field as a root of *f*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: Match expression from Poly. See Basic.match()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: Returns maximum norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Divides all coefficients by `LC(f)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero monomials from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all_monoms`](#sympy.polys.polytools.Poly.all_monoms "sympy.polys.polytools.Poly.all_monoms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: Multiply two polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: Multiply `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: Negate all coefficients in `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: Construct [`Poly`](#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    instance from raw representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: Computes the product, `Norm(f)`, of the conjugates of a polynomial `f` defined
    over a number field `K`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: A polynomial over a quadratic extension. Two conjugates x - a and x + a.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: A polynomial over a quartic extension. Four conjugates x - a, x - a, x + a and
    x + a.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: Compute numerical approximations of roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n … the number of digits to calculate**'
  prefs: []
  type: TYPE_NORMAL
- en: '**maxsteps … the maximum number of iterations to do**'
  prefs: []
  type: TYPE_NORMAL
- en: '**If the accuracy `n` cannot be reached in `maxsteps`, it will raise an**'
  prefs: []
  type: TYPE_NORMAL
- en: '**exception. You need to rerun with higher maxsteps.**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: Returns the `n`-th coefficient of `f` where `N` are the exponents of the generators
    in the term of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`coeff_monomial`](#sympy.polys.polytools.Poly.coeff_monomial "sympy.polys.polytools.Poly.coeff_monomial")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial with n-th powers of roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: Return one polynomial with `self`’s properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-division of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: Create a Poly out of the given representation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial exact pseudo-quotient of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: Raise `f` to a non-negative power `n`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-quotient of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: See the Caveat note in the function prem(f, g).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-remainder of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Caveat: The function prem(f, g, x) can be safely used to compute'
  prefs: []
  type: TYPE_NORMAL
- en: in Z[x] _only_ subresultant polynomial remainder sequences (prs’s).
  prefs: []
  type: TYPE_NORMAL
- en: To safely compute Euclidean and Sturmian prs’s in Z[x] employ anyone of the
    corresponding functions found in the module sympy.polys.subresultants_qq_zz. The
    functions in the module with suffix _pg compute prs’s in Z[x] employing rem(f,
    g, x), whereas the functions with suffix _amv compute prs’s in Z[x] employing
    rem_z(f, g, x).
  prefs: []
  type: TYPE_NORMAL
- en: The function rem_z(f, g, x) differs from prem(f, g, x) in that to compute the
    remainder polynomials in Z[x] it premultiplies the divident times the absolute
    value of the leading coefficient of the divisor raised to the power degree(f,
    x) - degree(g, x) + 1.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: Returns the content and a primitive form of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: Computes polynomial quotient of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: Clear denominators in a rational function `f/g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of real roots with multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: See [`real_roots()`](#sympy.polys.polytools.real_roots "sympy.polys.polytools.real_roots")
    for more explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: Refine an isolating interval of a root to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: Computes the polynomial remainder of `f` by `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently apply new order of generators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: Replace `x` with `y` in generators list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: Computes the resultant of `f` and `g` via PRS.
  prefs: []
  type: TYPE_NORMAL
- en: If includePRS=True, it includes the subresultant PRS in the result. Because
    the PRS is used to calculate the resultant, this is more efficient than calling
    [`subresultants()`](#sympy.polys.polytools.subresultants "sympy.polys.polytools.subresultants")
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: Recalculate the ground domain of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: Compute `f**(-1)` mod `x**n`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: Get an indexed root of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: Decide whether two roots of this polynomial are equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DomainError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the domain of the polynomial is not [ZZ](domainsref.html#zz), [QQ](domainsref.html#qq),
    [RR](domainsref.html#rr), or [CC](domainsref.html#cc).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**MultivariatePolynomialError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the polynomial is not univariate.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**PolynomialError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the polynomial is of degree < 2.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: Set the ground domain of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: Set the modulus of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently compute Taylor shift `f(x + a)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`shift_list`](#sympy.polys.polytools.Poly.shift_list "sympy.polys.polytools.Poly.shift_list")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogous method for multivariate polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently compute Taylor shift `f(X + A)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`shift`](#sympy.polys.polytools.Poly.shift "sympy.polys.polytools.Poly.shift")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogous method for univariate polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: Take a continuous subsequence of terms of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of square-free factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of square-free factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: Computes square-free norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `s`, `f`, `r`, such that `g(x) = f(x-sa)` and `r(x) = Norm(g(x))` is
    a square-free polynomial over `K`, where `a` is the algebraic extension of the
    ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: Computes square-free part of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: Square a polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Sturm sequence of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: Subtract two polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: Subtract an element of the ground domain from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: Computes the subresultant PRS of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero terms from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all_terms`](#sympy.polys.polytools.Poly.all_terms "sympy.polys.polytools.Poly.all_terms")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: Remove GCD of terms from the polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function to all terms of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain exact.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain a field.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain a ring.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total degree of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently evaluate the functional transformation `q**n * f(p/q)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Reduce `f` modulo a constant `p`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: Make `f` and `g` belong to the same domain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: Return unit polynomial with `self`’s properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: Return zero polynomial with `self`’s properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: Class for representing pure polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: Free symbols of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: Represents a reduced Groebner basis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: Check if `poly` belongs the ideal generated by `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Groebner basis from one ordering to another.
  prefs: []
  type: TYPE_NORMAL
- en: The FGLM algorithm converts reduced Groebner bases of zero-dimensional ideals
    from one ordering to another. This method is often used when it is infeasible
    to compute a Groebner basis with respect to a particular ordering directly.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R810](#id26)]'
  prefs: []
  type: TYPE_NORMAL
- en: J.C. Faugere, P. Gianni, D. Lazard, T. Mora (1994). Efficient Computation of
    Zero-dimensional Groebner Bases by Change of Ordering
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: Checks if the ideal generated by a Groebner basis is zero-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm checks if the set of monomials not divisible by the leading monomial
    of any element of `F` is bounded.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: David A. Cox, John B. Little, Donal O’Shea. Ideals, Varieties and Algorithms,
    3rd edition, p. 230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: Reduces a polynomial modulo a Groebner basis.
  prefs: []
  type: TYPE_NORMAL
- en: Given a polynomial `f` and a set of polynomials `G = (g_1, ..., g_n)`, computes
    a set of quotients `q = (q_1, ..., q_n)` and the remainder `r` such that `f =
    q_1*f_1 + ... + q_n*f_n + r`, where `r` vanishes or `r` is a completely reduced
    polynomial with respect to `G`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: Extra polynomial manipulation functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a polynomial in terms of elementary symmetric polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: A symmetric polynomial is a multivariate polynomial that remains invariant under
    any variable permutation, i.e., if \(f = f(x_1, x_2, \dots, x_n)\), then \(f =
    f(x_{i_1}, x_{i_2}, \dots, x_{i_n})\), where \((i_1, i_2, \dots, i_n)\) is a permutation
    of \((1, 2, \dots, n)\) (an element of the group \(S_n\)).
  prefs: []
  type: TYPE_NORMAL
- en: Returns a tuple of symmetric polynomials `(f1, f2, ..., fn)` such that `f =
    f1 + f2 + ... + fn`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a polynomial in Horner form.
  prefs: []
  type: TYPE_NORMAL
- en: Among other applications, evaluation of a polynomial at a point is optimal when
    it is applied using the Horner scheme ([1]).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1] - [https://en.wikipedia.org/wiki/Horner_scheme](https://en.wikipedia.org/wiki/Horner_scheme)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: Construct an interpolating polynomial for the data points evaluated at point
    x (which can be symbolic or numeric).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: 'A list is interpreted as though it were paired with a range starting from 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be made explicit by giving a list of coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: 'The (x, y) coordinates can also be given as keys and values of a dictionary
    (and the points need not be equispaced):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: 'If the interpolation is going to be used only once then the value of interest
    can be passed instead of passing a symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbolic coordinates are also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: Generate Viete’s formulas for `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: Domain constructors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: Construct a minimal domain for a list of expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**obj: list or dict**'
  prefs: []
  type: TYPE_NORMAL
- en: The expressions to build a domain for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****args: keyword arguments**'
  prefs: []
  type: TYPE_NORMAL
- en: Options that affect the choice of domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '(K, elements): Domain and list of domain elements'
  prefs: []
  type: TYPE_NORMAL
- en: The domain K that can represent the expressions and the list or dict of domain
    elements representing the same expressions as elements of K.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Given a list of normal SymPy expressions (of type [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr")) `construct_domain` will find a minimal [`Domain`](domainsref.html#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") that can represent those expressions. The
    expressions will be converted to elements of the domain and both the domain and
    the domain elements are returned.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Given a list of [`Integer`](../core.html#sympy.core.numbers.Integer "sympy.core.numbers.Integer")
    `construct_domain` will return the domain [ZZ](domainsref.html#zz) and a list
    of integers as elements of [ZZ](domainsref.html#zz).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: If there are any [`Rational`](../core.html#sympy.core.numbers.Rational "sympy.core.numbers.Rational")
    then [QQ](domainsref.html#qq) is returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: If there are symbols then a polynomial ring [K[x]](domainsref.html#k-x) is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: If any symbols appear with negative powers then a rational function field [K(x)](domainsref.html#id11)
    will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: Irrational algebraic numbers will result in the [EX](domainsref.html#ex) domain
    by default. The keyword argument `extension=True` leads to the construction of
    an algebraic number field [QQ<a>](domainsref.html#qq-a).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Domain`](domainsref.html#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain"),
    [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: Monomials encoded as tuples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: Class representing a monomial, i.e. a product of powers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: Convert a monomial instance to a SymPy expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: Greatest common divisor of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: Least common multiple of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: '`max_degrees` and `min_degrees` are either both integers or both lists. Unless
    otherwise specified, `min_degrees` is either `0` or `[0, ..., 0]`.'
  prefs: []
  type: TYPE_NORMAL
- en: A generator of all monomials `monom` is returned, such that either `min_degree
    <= total_degree(monom) <= max_degree`, or `min_degrees[i] <= degree_list(monom)[i]
    <= max_degrees[i]`, for all `i`.
  prefs: []
  type: TYPE_NORMAL
- en: Case I. `max_degrees` And `min_degrees` Are Both Integers
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a set of variables \(V\) and a min_degree \(N\) and a max_degree \(M\)
    generate a set of monomials of degree less than or equal to \(N\) and greater
    than or equal to \(M\). The total number of monomials in commutative variables
    is huge and is given by the following formula if \(M = 0\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{(\#V + N)!}{\#V! N!}\]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example if we would like to generate a dense polynomial of a total degree
    \(N = 50\) and \(M = 0\), which is the worst case, in 5 variables, assuming that
    exponents and all of coefficients are 32-bit long and stored in an array we would
    need almost 80 GiB of memory! Fortunately most polynomials, that we will encounter,
    are sparse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider monomials in commutative variables \(x\) and \(y\) and non-commutative
    variables \(a\) and \(b\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: Case Ii. `max_degrees` And `min_degrees` Are Both Lists
  prefs: []
  type: TYPE_NORMAL
- en: 'If `max_degrees = [d_1, ..., d_n]` and `min_degrees = [e_1, ..., e_n]`, the
    number of monomials generated is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[(d_1 - e_1 + 1) (d_2 - e_2 + 1) \cdots (d_n - e_n + 1)\]
  prefs: []
  type: TYPE_NORMAL
- en: Let us generate all monomials `monom` in variables \(x\) and \(y\) such that
    `[1, 2][i] <= degree_list(monom)[i] <= [2, 4][i]`, `i = 0, 1`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: Computes the number of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of monomials is given by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{(\#V + N)!}{\#V! N!}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(N\) is a total degree and \(V\) is a set of variables.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: Orderings of monomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: Base class for monomial orderings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: Lexicographic order of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: Graded lexicographic order of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: Reversed graded lexicographic order of monomials.
  prefs: []
  type: TYPE_NORMAL
- en: Formal manipulation of roots of polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: An indexed root of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Returns either a [`ComplexRootOf`](#sympy.polys.rootoftools.ComplexRootOf "sympy.polys.rootoftools.ComplexRootOf")
    object or an explicit expression involving radicals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Univariate polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Generator for `f`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**index** : int or Integer'
  prefs: []
  type: TYPE_NORMAL
- en: '**radicals** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Return a radical expression if possible.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**expand** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Expand `f`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: Represents a root of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Base class for roots of different kinds of polynomials. Only complex roots are
    currently supported.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: Represents an indexed complex root of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Roots of a univariate polynomial separated into disjoint real or complex intervals
    and indexed in a fixed order:'
  prefs: []
  type: TYPE_NORMAL
- en: real roots come first and are sorted in increasing order;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complex roots come next and are sorted primarily by increasing real part, secondarily
    by increasing imaginary part.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently only rational coefficients are allowed. Can be imported as `CRootOf`.
    To avoid confusion, the generator must be a Symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: 'CRootOf is a way to reference a particular root of a polynomial. If there is
    a rational root, it will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: 'Whether roots involving radicals are returned or not depends on whether the
    `radicals` flag is true (which is set to True with rootof):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: 'The following cannot be expressed in terms of radicals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: The root bounds can be seen, however, and they are used by the evaluation methods
    to get numerical approximations for the root.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: The evalf method refines the width of the root bounds until it guarantees that
    any decimal approximation within those bounds will satisfy the desired precision.
    It then stores the refined interval so subsequent requests at or below the requested
    precision will not have to recompute the root bounds and will return very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Before evaluation above, the interval was
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: After evaluation it is now
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: 'To reset all intervals for a given polynomial, the [`_reset()`](#sympy.polys.rootoftools.ComplexRootOf._reset
    "sympy.polys.rootoftools.ComplexRootOf._reset") method can be called from any
    CRootOf instance of the polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: The [`eval_approx()`](#sympy.polys.rootoftools.ComplexRootOf.eval_approx "sympy.polys.rootoftools.ComplexRootOf.eval_approx")
    method will also find the root to a given precision but the interval is not modified
    unless the search for the root fails to converge within the root bounds. And the
    secant method is used to find the root. (The `evalf` method uses bisection and
    will always update the interval.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: 'The interval needed to be slightly updated to find that root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: The `evalf_rational` will compute a rational approximation of the root to the
    desired accuracy or precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Although a PurePoly can be constructed from a non-symbol generator RootOf instances
    of non-symbols are disallowed to avoid confusion over what root is being represented.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval_approx`](#sympy.polys.rootoftools.ComplexRootOf.eval_approx "sympy.polys.rootoftools.ComplexRootOf.eval_approx"),
    [`eval_rational`](#sympy.polys.rootoftools.ComplexRootOf.eval_rational "sympy.polys.rootoftools.ComplexRootOf.eval_rational")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: Get real and complex roots of a composite polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: Map initial complex root index to an index in a factor where the root belongs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: Make complex isolating intervals disjoint and sort roots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: Count the number of real or complex roots with multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that our poly has entries in the complexes cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that our poly has entries in the reals cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate this complex root to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the root is imaginary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the root is real.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: Compute complex root isolating intervals for a list of factors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: Get complex root isolating intervals for a square-free factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: Internal function for retrieving isolation interval from cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: Compute real root isolating intervals for a list of factors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE773]'
  prefs: []
  type: TYPE_PRE
- en: Get real root isolating intervals for a square-free factor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE774]'
  prefs: []
  type: TYPE_PRE
- en: Return postprocessed roots of specified kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: Get a root of a composite polynomial by index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: Construct new `CRootOf` object from raw data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: Return the root if it is trivial or a `CRootOf` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: Take heroic measures to make `poly` compatible with `CRootOf`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: Get real roots of a composite polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE780]'
  prefs: []
  type: TYPE_PRE
- en: Map initial real root index to an index in a factor where the root belongs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE781]'
  prefs: []
  type: TYPE_PRE
- en: Make real isolating intervals disjoint and sort roots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE782]'
  prefs: []
  type: TYPE_PRE
- en: return complexes such that no bounding rectangles of non-conjugate roots would
    intersect. In addition, assure that neither ay nor by is 0 to guarantee that non-real
    roots are distinct from real roots in terms of the y-bounds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE783]'
  prefs: []
  type: TYPE_PRE
- en: Reset all intervals
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs: []
  type: TYPE_PRE
- en: Compute roots in linear, quadratic and binomial cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: Internal function for updating isolation interval in cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: Get real and complex roots of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: Reset cache for reals and complexes.
  prefs: []
  type: TYPE_NORMAL
- en: The intervals used to approximate a root instance are updated as needed. When
    a request is made to see the intervals, the most current values are shown. \(clear_cache\)
    will reset all CRootOf instances back to their original state.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_reset`](#sympy.polys.rootoftools.ComplexRootOf._reset "sympy.polys.rootoftools.ComplexRootOf._reset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate this complex root to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: This uses secant method and root bounds are used to both generate an initial
    guess and to check that the root returned is valid. If ever the method converges
    outside the root bounds, the bounds will be made smaller and updated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE789]'
  prefs: []
  type: TYPE_PRE
- en: Return a Rational approximation of `self` that has real and imaginary component
    approximations that are within `dx` and `dy` of the true values, respectively.
    Alternatively, `n` digits of precision can be specified.
  prefs: []
  type: TYPE_NORMAL
- en: The interval is refined with bisection and is sure to converge. The root bounds
    are updated when the refinement is complete so recalculation at the same or lesser
    precision will not have to repeat the refinement and should be much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example first obtains Rational approximation to 1e-8 accuracy
    for all roots of the 4-th order Legendre polynomial. Since the roots are all less
    than 1, this will ensure the decimal representation of the approximation will
    be correct (including rounding) to 6 digits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE790]'
  prefs: []
  type: TYPE_PRE
- en: 'It is not necessary to a two-step calculation, however: the decimal representation
    can be computed directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE792]'
  prefs: []
  type: TYPE_PRE
- en: Get real roots of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE793]'
  prefs: []
  type: TYPE_PRE
- en: Represents a sum of all roots of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: Construct new `RootSum` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic root-finding algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: Computes symbolic roots of a univariate polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Given a univariate polynomial f with symbolic coefficients (or a list of the
    polynomial’s coefficients), returns a dictionary with its roots and their multiplicities.
  prefs: []
  type: TYPE_NORMAL
- en: Only roots expressible via radicals will be returned. To get a complete set
    of roots use RootOf class or numerical methods instead. By default cubic and quartic
    formulas are used in the algorithm. To disable them because of unreadable output
    set `cubics=False` or `quartics=False` respectively. If cubic roots are real but
    are expressed in terms of complex numbers (casus irreducibilis [1]) the `trig`
    flag can be set to True to have the solutions returned in terms of cosine and
    inverse cosine functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get roots from a specific domain set the `filter` flag with one of the following
    specifiers: Z, Q, R, I, C. By default all roots are returned (this is equivalent
    to setting `filter=''C''`).'
  prefs: []
  type: TYPE_NORMAL
- en: By default a dictionary is returned giving a compact result in case of multiple
    roots. However to get a list containing all those roots set the `multiple` flag
    to True; the list will have identical roots appearing next to each other in the
    result. (For a given Poly, the all_roots method will give the roots in sorted
    numerical order.)
  prefs: []
  type: TYPE_NORMAL
- en: If the `strict` flag is True, `UnsolvableFactorError` will be raised if the
    roots found are known to be incomplete (because some roots are not expressible
    in radicals).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE797]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE798]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE799]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE800]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE801]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: '`roots` will only return roots expressible in radicals. If the given polynomial
    has some or all of its roots inexpressible in radicals, the result of `roots`
    will be incomplete or empty respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example where result is incomplete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the polynomial has an unsolvable quintic factor whose roots cannot
    be expressed by radicals. The polynomial has a rational root (due to the factor
    \((x-1)\)), which is returned since `roots` always finds all rational roots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example where result is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: Here, the polynomial has no roots expressible in radicals, so `roots` returns
    an empty dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: The result produced by `roots` is complete if and only if the sum of the multiplicity
    of each root is equal to the degree of the polynomial. If strict=True, UnsolvableFactorError
    will be raised if the result is incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result can be be checked for completeness as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R811](#id27)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cubic_equation#Trigonometric_and_hyperbolic_solutions](https://en.wikipedia.org/wiki/Cubic_equation#Trigonometric_and_hyperbolic_solutions)'
  prefs: []
  type: TYPE_NORMAL
- en: Special polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE806]'
  prefs: []
  type: TYPE_PRE
- en: Generates n-th Swinnerton-Dyer polynomial in \(x\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: \(n\) decides the order of polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '`polys=True` returns an expression, otherwise (default) returns an expression.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: Construct Lagrange interpolating polynomial for `n` data points. If a sequence
    of values are given for `X` and `Y` then the first `n` values will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE808]'
  prefs: []
  type: TYPE_PRE
- en: Generates cyclotomic polynomial of order \(n\) in \(x\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: \(n\) decides the order of polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '`polys=True` returns an expression, otherwise (default) returns an expression.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE809]'
  prefs: []
  type: TYPE_PRE
- en: Generates symmetric polynomial of order \(n\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys: bool, optional (default: False)**'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a Poly object when `polys=True`, otherwise (default) returns an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE810]'
  prefs: []
  type: TYPE_PRE
- en: Generates a polynomial of degree `n` with coefficients in `[inf, sup]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**'
  prefs: []
  type: TYPE_NORMAL
- en: \(x\) is the independent term of polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: \(n\) decides the order of polynomial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**inf**'
  prefs: []
  type: TYPE_NORMAL
- en: Lower limit of range in which coefficients lie
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sup**'
  prefs: []
  type: TYPE_NORMAL
- en: Upper limit of range in which coefficients lie
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: Decides what ring the coefficients are supposed to belong. Default is set to
    Integers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '`polys=True` returns an expression, otherwise (default) returns an expression.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Orthogonal polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE811]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Chebyshev polynomial of the first kind \(T_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE812]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Chebyshev polynomial of the second kind \(U_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE813]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Gegenbauer polynomial \(C_n^{(a)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**'
  prefs: []
  type: TYPE_NORMAL
- en: Decides minimal domain for the list of coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Hermite polynomial \(H_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE815]'
  prefs: []
  type: TYPE_PRE
- en: Generates the probabilist’s Hermite polynomial \(He_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE816]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Jacobi polynomial \(P_n^{(a,b)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**a**'
  prefs: []
  type: TYPE_NORMAL
- en: Lower limit of minimal domain for the list of coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b**'
  prefs: []
  type: TYPE_NORMAL
- en: Upper limit of minimal domain for the list of coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE817]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Legendre polynomial \(P_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE818]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Laguerre polynomial \(L_n^{(\alpha)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: Decides minimal domain for the list of coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE819]'
  prefs: []
  type: TYPE_PRE
- en: Coefficients for the spherical Bessel functions.
  prefs: []
  type: TYPE_NORMAL
- en: These are only needed in the jn() function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coefficients are calculated from:'
  prefs: []
  type: TYPE_NORMAL
- en: fn(0, z) = 1/z fn(1, z) = 1/z**2 fn(n-1, z) + fn(n+1, z) == (2*n+1)/z * fn(n,
    z)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  prefs: []
  type: TYPE_PRE
- en: Appell sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE821]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Bernoulli polynomial \(\operatorname{B}_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: \(\operatorname{B}_n(x)\) is the unique polynomial satisfying
  prefs: []
  type: TYPE_NORMAL
- en: \[\int_{x}^{x+1} \operatorname{B}_n(t) \,dt = x^n.\]
  prefs: []
  type: TYPE_NORMAL
- en: Based on this, we have for nonnegative integer \(s\) and integer \(a\) and \(b\)
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum_{k=a}^{b} k^s = \frac{\operatorname{B}_{s+1}(b+1) - \operatorname{B}_{s+1}(a)}{s+1}\]
  prefs: []
  type: TYPE_NORMAL
- en: which is related to Jakob Bernoulli’s original motivation for introducing the
    Bernoulli numbers, the values of these polynomials at \(x = 1\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE823]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE824]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.bernoulli`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bernoulli
    "sympy.functions.combinatorial.numbers.bernoulli")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R812](#id28)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bernoulli_polynomials](https://en.wikipedia.org/wiki/Bernoulli_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  prefs: []
  type: TYPE_PRE
- en: Generates the central Bernoulli polynomial \(\operatorname{B}_n^c(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'These are scaled and shifted versions of the plain Bernoulli polynomials, done
    in such a way that \(\operatorname{B}_n^c(x)\) is an even or odd function for
    even or odd \(n\) respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{B}_n^c(x) = 2^n \operatorname{B}_n \left(\frac{x+1}{2}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE826]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Genocchi polynomial \(\operatorname{G}_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: '\(\operatorname{G}_n(x)\) is twice the difference between the plain and central
    Bernoulli polynomials, so has degree \(n-1\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{G}_n(x) = 2 (\operatorname{B}_n(x) - \operatorname{B}_n^c(x))\]
  prefs: []
  type: TYPE_NORMAL
- en: The factor of 2 in the definition endows \(\operatorname{G}_n(x)\) with integer
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial plus one.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.genocchi`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.genocchi
    "sympy.functions.combinatorial.numbers.genocchi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Euler polynomial \(\operatorname{E}_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'These are scaled and reindexed versions of the Genocchi polynomials:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{E}_n(x) = -\frac{\operatorname{G}_{n+1}(x)}{n+1}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.euler`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.euler
    "sympy.functions.combinatorial.numbers.euler")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Andre polynomial \(\mathcal{A}_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: This is the Appell sequence where the constant coefficients form the sequence
    of Euler numbers `euler(n)`. As such they have integer coefficients and parities
    matching the parity of \(n\).
  prefs: []
  type: TYPE_NORMAL
- en: Luschny calls these the *Swiss-knife polynomials* because their values at 0
    and 1 can be simply transformed into both the Bernoulli and Euler numbers. Here
    they are called the Andre polynomials because \(|\mathcal{A}_n(n\bmod 2)|\) for
    \(n \ge 0\) generates what Luschny calls the *Andre numbers*, A000111 in the OEIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**polys** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a Poly, otherwise (default) return an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE829]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE830]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE831]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.andre`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.andre
    "sympy.functions.combinatorial.numbers.andre")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R813](#id29)]'
  prefs: []
  type: TYPE_NORMAL
- en: Peter Luschny, “An introduction to the Bernoulli function”, [https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
  prefs: []
  type: TYPE_NORMAL
- en: Manipulation of rational functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE832]'
  prefs: []
  type: TYPE_PRE
- en: Denest and combine rational expressions using symbolic methods.
  prefs: []
  type: TYPE_NORMAL
- en: This function takes an expression or a container of expressions and puts it
    (them) together by denesting and combining rational subexpressions. No heroic
    measures are taken to minimize degree of the resulting numerator and denominator.
    To obtain completely reduced expression use [`cancel()`](#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel"). However, [`together()`](#sympy.polys.rationaltools.together
    "sympy.polys.rationaltools.together") can preserve as much as possible of the
    structure of the input expression in the output (no expansion is performed).
  prefs: []
  type: TYPE_NORMAL
- en: A wide variety of objects can be put together including lists, tuples, sets,
    relational objects, integrals and others. It is also possible to transform interior
    of function applications, by setting `deep` flag to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: By definition, [`together()`](#sympy.polys.rationaltools.together "sympy.polys.rationaltools.together")
    is a complement to [`apart()`](#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart"),
    so `apart(together(expr))` should return expr unchanged. Note however, that [`together()`](#sympy.polys.rationaltools.together
    "sympy.polys.rationaltools.together") uses only symbolic methods, so it might
    be necessary to use [`cancel()`](#sympy.polys.polytools.cancel "sympy.polys.polytools.cancel")
    to perform algebraic simplification and minimize degree of the numerator and denominator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE833]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE834]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE835]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE836]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE837]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE838]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE839]'
  prefs: []
  type: TYPE_PRE
- en: Partial fraction decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE840]'
  prefs: []
  type: TYPE_PRE
- en: Compute partial fraction decomposition of a rational function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a rational function `f`, computes the partial fraction decomposition
    of `f`. Two algorithms are available: One is based on the undertermined coefficients
    method, the other is Bronstein’s full partial fraction decomposition algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: The undetermined coefficients method (selected by `full=False`) uses polynomial
    factorization (and therefore accepts the same options as factor) for the denominator.
    Per default it works over the rational numbers, therefore decomposition of denominators
    with non-rational roots (e.g. irrational, complex roots) is not supported by default
    (see options of factor).
  prefs: []
  type: TYPE_NORMAL
- en: Bronstein’s algorithm can be selected by using `full=True` and allows a decomposition
    of denominators with non-rational roots. A human-readable result can be obtained
    via `doit()` (see examples below).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, using the undetermined coefficients method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  prefs: []
  type: TYPE_PRE
- en: 'The undetermined coefficients method does not provide a result when the denominators
    roots are not rational:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  prefs: []
  type: TYPE_PRE
- en: 'You can choose Bronstein’s algorithm by setting `full=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `doit()` yields a human-readable result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`apart_list`](#sympy.polys.partfrac.apart_list "sympy.polys.partfrac.apart_list"),
    [`assemble_partfrac_list`](#sympy.polys.partfrac.assemble_partfrac_list "sympy.polys.partfrac.assemble_partfrac_list")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  prefs: []
  type: TYPE_PRE
- en: Compute partial fraction decomposition of a rational function and return the
    result in structured form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a rational function `f` compute the partial fraction decomposition of
    `f`. Only Bronstein’s full partial fraction decomposition algorithm is supported
    by this method. The return value is highly structured and perfectly suited for
    further algorithmic treatment rather than being human-readable. The function returns
    a tuple holding three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The first item is the common coefficient, free of the variable \(x\) used for
    decomposition. (It is an element of the base field \(K\).)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second item is the polynomial part of the decomposition. This can be the
    zero polynomial. (It is an element of \(K[x]\).)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third part itself is a list of quadruples. Each quadruple has the following
    elements in this order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The (not necessarily irreducible) polynomial \(D\) whose roots \(w_i\) appear
    in the linear denominator of a bunch of related fraction terms. (This item can
    also be a list of explicit roots. However, at the moment `apart_list` never returns
    a result this way, but the related `assemble_partfrac_list` function accepts this
    format as input.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The numerator of the fraction, written as a function of the root \(w\)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The linear denominator of the fraction *excluding its power exponent*, written
    as a function of the root \(w\).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The power to which the denominator has to be raised.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On can always rebuild a plain expression by using the function `assemble_partfrac_list`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE848]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE849]'
  prefs: []
  type: TYPE_PRE
- en: 'Second example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE850]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE851]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example, showing symbolic parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE853]'
  prefs: []
  type: TYPE_PRE
- en: 'This example is taken from Bronstein’s original paper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE854]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE855]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`apart`](#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart"), [`assemble_partfrac_list`](#sympy.polys.partfrac.assemble_partfrac_list
    "sympy.polys.partfrac.assemble_partfrac_list")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R814](#id31)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Bronstein93]](literature.html#bronstein93)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  prefs: []
  type: TYPE_PRE
- en: Reassemble a full partial fraction decomposition from a structured result obtained
    by the function `apart_list`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'This example is taken from Bronstein’s original paper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE858]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE859]'
  prefs: []
  type: TYPE_PRE
- en: 'If we happen to know some roots we can provide them easily inside the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE861]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE862]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE863]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE864]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`apart`](#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart"), [`apart_list`](#sympy.polys.partfrac.apart_list
    "sympy.polys.partfrac.apart_list")'
  prefs: []
  type: TYPE_NORMAL
- en: Dispersion of Polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE865]'
  prefs: []
  type: TYPE_PRE
- en: Compute the *dispersion set* of two polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'For two polynomials \(f(x)\) and \(g(x)\) with \(\deg f > 0\) and \(\deg g
    > 0\) the dispersion set \(\operatorname{J}(f, g)\) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{J}(f, g) & := \{a \in \mathbb{N}_0 | \gcd(f(x),
    g(x+a)) \neq 1\} \\ & = \{a \in \mathbb{N}_0 | \deg \gcd(f(x), g(x+a)) \geq 1\}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: For a single polynomial one defines \(\operatorname{J}(f) := \operatorname{J}(f,
    f)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispersion set and dispersion of a simple polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE867]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the definition of the dispersion is not symmetric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE868]'
  prefs: []
  type: TYPE_PRE
- en: 'Computing the dispersion also works over field extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE869]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even perform the computations for polynomials having symbolic coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE870]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dispersion`](#sympy.polys.dispersion.dispersion "sympy.polys.dispersion.dispersion")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R815](#id36)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[ManWright94]](literature.html#manwright94)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R816](#id37)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Koepf98]](literature.html#koepf98)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R817](#id38)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Abramov71]](literature.html#abramov71)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R818](#id39)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Man93]](literature.html#man93)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE871]'
  prefs: []
  type: TYPE_PRE
- en: Compute the *dispersion* of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'For two polynomials \(f(x)\) and \(g(x)\) with \(\deg f > 0\) and \(\deg g
    > 0\) the dispersion \(\operatorname{dis}(f, g)\) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{dis}(f, g) & := \max\{ J(f,g) \cup \{0\} \} \\
    & = \max\{ \{a \in \mathbb{N} | \gcd(f(x), g(x+a)) \neq 1\} \cup \{0\} \}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: and for a single polynomial \(\operatorname{dis}(f) := \operatorname{dis}(f,
    f)\). Note that we make the definition \(\max\{\} := -\infty\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE872]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispersion set and dispersion of a simple polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE873]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the definition of the dispersion is not symmetric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE874]'
  prefs: []
  type: TYPE_PRE
- en: The maximum of an empty set is defined to be \(-\infty\) as seen in this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Computing the dispersion also works over field extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE875]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even perform the computations for polynomials having symbolic coefficients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE876]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dispersionset`](#sympy.polys.dispersion.dispersionset "sympy.polys.dispersion.dispersionset")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R819](#id44)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[ManWright94]](literature.html#manwright94)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R820](#id45)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Koepf98]](literature.html#koepf98)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R821](#id46)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Abramov71]](literature.html#abramov71)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R822](#id47)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[[Man93]](literature.html#man93)'
  prefs: []
  type: TYPE_NORMAL
