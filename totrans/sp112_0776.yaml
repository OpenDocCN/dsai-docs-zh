- en: scipy.special.ive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.ive.html#scipy.special.ive](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.ive.html#scipy.special.ive)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially scaled modified Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For imaginary numbers without a real part, returns the unscaled Bessel function
    of the first kind [`iv`](scipy.special.iv.html#scipy.special.iv "scipy.special.iv").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v**array_like of float'
  prefs: []
  type: TYPE_NORMAL
- en: Order.
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like of float or complex'
  prefs: []
  type: TYPE_NORMAL
- en: Argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function values
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: scalar or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: Values of the exponentially scaled modified Bessel function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iv`](scipy.special.iv.html#scipy.special.iv "scipy.special.iv")'
  prefs: []
  type: TYPE_NORMAL
- en: Modified Bessel function of the first kind
  prefs: []
  type: TYPE_NORMAL
- en: '[`i0e`](scipy.special.i0e.html#scipy.special.i0e "scipy.special.i0e")'
  prefs: []
  type: TYPE_NORMAL
- en: Faster implementation of this function for order 0
  prefs: []
  type: TYPE_NORMAL
- en: '[`i1e`](scipy.special.i1e.html#scipy.special.i1e "scipy.special.i1e")'
  prefs: []
  type: TYPE_NORMAL
- en: Faster implementation of this function for order 1
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For positive *v*, the AMOS [[1]](#rd3ac0c69ec97-1) *zbesi* routine is called.
    It uses a power series for small *z*, the asymptotic expansion for large *abs(z)*,
    the Miller algorithm normalized by the Wronskian and a Neumann series for intermediate
    magnitudes, and the uniform asymptotic expansions for \(I_v(z)\) and \(J_v(z)\)
    for large orders. Backward recurrence is used to generate sequences or reduce
    orders when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The calculations above are done in the right half plane and continued into the
    left half plane by the formula,
  prefs: []
  type: TYPE_NORMAL
- en: \[I_v(z \exp(\pm\imath\pi)) = \exp(\pm\pi v) I_v(z)\]
  prefs: []
  type: TYPE_NORMAL
- en: (valid when the real part of *z* is positive). For negative *v*, the formula
  prefs: []
  type: TYPE_NORMAL
- en: \[I_{-v}(z) = I_v(z) + \frac{2}{\pi} \sin(\pi v) K_v(z)\]
  prefs: []
  type: TYPE_NORMAL
- en: is used, where \(K_v(z)\) is the modified Bessel function of the second kind,
    evaluated using the AMOS routine *zbesk*.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ive`](#scipy.special.ive "scipy.special.ive") is useful for large arguments
    *z*: for these, [`iv`](scipy.special.iv.html#scipy.special.iv "scipy.special.iv")
    easily overflows, while [`ive`](#scipy.special.ive "scipy.special.ive") does not
    due to the exponential scaling.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Donald E. Amos, “AMOS, A Portable Package for Bessel Functions of a Complex
    Argument and Nonnegative Order”, [http://netlib.org/amos/](http://netlib.org/amos/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: In the following example [`iv`](scipy.special.iv.html#scipy.special.iv "scipy.special.iv")
    returns infinity whereas [`ive`](#scipy.special.ive "scipy.special.ive") still
    returns a finite number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluate the function at one point for different orders by providing a list
    or NumPy array as argument for the *v* parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the function at several points for order 0 by providing an array for
    *z*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluate the function at several points for different orders by providing arrays
    for both *v* for *z*. Both arrays have to be broadcastable to the correct shape.
    To calculate the orders 0, 1 and 2 for a 1D array of points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plot the functions of order 0 to 3 from -5 to 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-ive-1.png](../Images/0c4ad9341448becd51fab40b5a1c1bb9.png)'
  prefs: []
  type: TYPE_IMG
