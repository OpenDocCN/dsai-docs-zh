["```py\nscipy.stats.zipf = <scipy.stats._discrete_distns.zipf_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import zipf\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> a = 6.5\n>>> mean, var, skew, kurt = zipf.stats(a, moments='mvsk') \n```", "```py\n>>> x = np.arange(zipf.ppf(0.01, a),\n...               zipf.ppf(0.99, a))\n>>> ax.plot(x, zipf.pmf(x, a), 'bo', ms=8, label='zipf pmf')\n>>> ax.vlines(x, 0, zipf.pmf(x, a), colors='b', lw=5, alpha=0.5) \n```", "```py\n>>> rv = zipf(a)\n>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,\n...         label='frozen pmf')\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> prob = zipf.cdf(x, a)\n>>> np.allclose(x, zipf.ppf(prob, a))\nTrue \n```", "```py\n>>> r = zipf.rvs(a, size=1000) \n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import zipf, zipfian\n>>> k = np.arange(11)\n>>> np.allclose(zipf.pmf(k, a), zipfian.pmf(k, a, n=10000000))\nTrue \n```"]