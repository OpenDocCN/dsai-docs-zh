- en: Tensor Product
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 张量积。
- en: Original text：[https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html](https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html](https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html)
- en: Abstract tensor product.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象张量积。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The tensor product of two or more arguments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 两个或更多参数的张量积。
- en: For matrices, this uses `matrix_tensor_product` to compute the Kronecker or
    tensor product matrix. For other objects a symbolic `TensorProduct` instance is
    returned. The tensor product is a non-commutative multiplication that is used
    primarily with operators and states in quantum mechanics.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于矩阵，这使用`matrix_tensor_product`来计算Kronecker或张量积矩阵。对于其他对象，返回一个符号的`TensorProduct`实例。张量积是一种非交换乘法，主要用于量子力学中的算符和态。
- en: Currently, the tensor product distinguishes between commutative and non-commutative
    arguments. Commutative arguments are assumed to be scalars and are pulled out
    in front of the `TensorProduct`. Non-commutative arguments remain in the resulting
    `TensorProduct`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，张量积区分可交换和非可交换参数。可交换参数假定为标量，并且被拉出到`TensorProduct`的前面。非可交换参数保留在生成的`TensorProduct`中。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**args** : tuple'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**：元组'
- en: A sequence of the objects to take the tensor product of.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个需要进行张量积的对象序列。
- en: Examples
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例。
- en: 'Start with a simple tensor product of SymPy matrices:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从SymPy矩阵的简单张量积开始：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also construct tensor products of non-commutative symbols:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以构建非交换符号的张量积：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can take the dagger of a tensor product (note the order does NOT reverse
    like the dagger of a normal product):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对张量积进行伴随（请注意顺序不像普通乘积的伴随那样反转）：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Expand can be used to distribute a tensor product across addition:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`Expand`将张量积分布到加法之间：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try to simplify and combine TensorProducts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试简化和组合TensorProducts。
- en: In general this will try to pull expressions inside of `TensorProducts`. It
    currently only works for relatively simple cases where the products have only
    scalars, raw `TensorProducts`, not `Add`, `Pow`, `Commutators` of `TensorProducts`.
    It is best to see what it does by showing examples.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这将尝试将表达式拉到`TensorProducts`内部。目前仅适用于相对简单的情况，其中乘积仅包含标量、原始的`TensorProducts`，而不是`Add`、`Pow`、`Commutators`的`TensorProducts`。最好通过示例看看它的表现。
- en: Examples
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 示例。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'First see what happens to products of tensor products:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先看看张量积乘积的情况：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is the core logic of this function, and it works inside, powers, sums,
    commutators and anticommutators as well:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该函数的核心逻辑，它适用于内部、幂、求和、对易子和反对易子：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
