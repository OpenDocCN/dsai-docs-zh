- en: scipy.stats.ncf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.ncf.html#scipy.stats.ncf](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.ncf.html#scipy.stats.ncf)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A non-central F distribution continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`ncf`](#scipy.stats.ncf "scipy.stats.ncf")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.f`](scipy.stats.f.html#scipy.stats.f "scipy.stats.f")'
  prefs: []
  type: TYPE_NORMAL
- en: Fisher distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`ncf`](#scipy.stats.ncf "scipy.stats.ncf")
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x, n_1, n_2, \lambda) = \exp\left(\frac{\lambda}{2} + \lambda
    n_1 \frac{x}{2(n_1 x + n_2)} \right) n_1^{n_1/2} n_2^{n_2/2} x^{n_1/2 - 1} \\
    (n_2 + n_1 x)^{-(n_1 + n_2)/2} \gamma(n_1/2) \gamma(1 + n_2/2) \\ \frac{L^{\frac{n_1}{2}-1}_{n_2/2}
    \left(-\lambda n_1 \frac{x}{2(n_1 x + n_2)}\right)} {B(n_1/2, n_2/2) \gamma\left(\frac{n_1
    + n_2}{2}\right)}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(n_1, n_2 > 0\), \(\lambda \ge 0\). Here \(n_1\) is the degrees of freedom
    in the numerator, \(n_2\) the degrees of freedom in the denominator, \(\lambda\)
    the non-centrality parameter, \(\gamma\) is the logarithm of the Gamma function,
    \(L_n^k\) is a generalized Laguerre polynomial and \(B\) is the beta function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ncf`](#scipy.stats.ncf "scipy.stats.ncf") takes `df1`, `df2` and `nc` as
    shape parameters. If `nc=0`, the distribution becomes equivalent to the Fisher
    distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: The probability density above is defined in the “standardized” form. To shift
    and/or scale the distribution use the `loc` and `scale` parameters. Specifically,
    `ncf.pdf(x, dfn, dfd, nc, loc, scale)` is identically equivalent to `ncf.pdf(y,
    dfn, dfd, nc) / scale` with `y = (x - loc) / scale`. Note that shifting the location
    of a distribution does not make it a “noncentral” distribution; noncentral generalizations
    of some distributions are available in separate classes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability density function (`pdf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape, location and scale parameters. This returns a “frozen” RV object holding
    the given parameters fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And compare the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-ncf-1.png](../Images/768e07984f9ce60bbe41ceaa4d0289e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(dfn, dfd, nc, loc=0, scale=1, size=1, random_state=None)** | Random
    variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, dfn, dfd, nc, loc=0, scale=1)** | Probability density function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, dfn, dfd, nc, loc=0, scale=1)** | Log of the probability density
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, dfn, dfd, nc, loc=0, scale=1)** | Cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, dfn, dfd, nc, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, dfn, dfd, nc, loc=0, scale=1)** | Survival function (also defined
    as `1 - cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, dfn, dfd, nc, loc=0, scale=1)** | Log of the survival function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, dfn, dfd, nc, loc=0, scale=1)** | Percent point function (inverse
    of `cdf` — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, dfn, dfd, nc, loc=0, scale=1)** | Inverse survival function (inverse
    of `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, dfn, dfd, nc, loc=0, scale=1)** | Non-central moment of the
    specified order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(dfn, dfd, nc, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(dfn, dfd, nc, loc=0, scale=1)** | (Differential) entropy of the
    RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(dfn, dfd, nc), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(dfn, dfd, nc, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(dfn, dfd, nc, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(dfn, dfd, nc, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(dfn, dfd, nc, loc=0, scale=1)** | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, dfn, dfd, nc, loc=0, scale=1)** | Confidence interval
    with equal areas around the median. |'
  prefs: []
  type: TYPE_TB
