["```py\n>>> from sympy import symbols, sin, cos, tan\n>>> from sympy.physics.mechanics import *\n>>> q1, q2, q3, u1, u2, u3  = dynamicsymbols('q1 q2 q3 u1 u2 u3')\n>>> q1d, q2d, q3d, u1d, u2d, u3d = dynamicsymbols('q1 q2 q3 u1 u2 u3', 1)\n>>> r, m, g = symbols('r m g')\n>>> mechanics_printing(pretty_print=False) \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> Y = N.orientnew('Y', 'Axis', [q1, N.z])\n>>> L = Y.orientnew('L', 'Axis', [q2, Y.x])\n>>> R = L.orientnew('R', 'Axis', [q3, L.y])\n>>> w_R_N_qd = R.ang_vel_in(N)\n>>> R.set_ang_vel(N, u1 * L.x + u2 * L.y + u3 * L.z) \n```", "```py\n>>> C = Point('C')\n>>> C.set_vel(N, 0)\n>>> Dmc = C.locatenew('Dmc', r * L.z)\n>>> Dmc.v2pt_theory(C, N, R)\nr*u2*L.x - r*u1*L.y \n```", "```py\n>>> I = inertia(L, m / 4 * r**2, m / 2 * r**2, m / 4 * r**2)\n>>> mprint(I)\nm*r**2/4*(L.x|L.x) + m*r**2/2*(L.y|L.y) + m*r**2/4*(L.z|L.z) \n```", "```py\n>>> kd = [dot(R.ang_vel_in(N) - w_R_N_qd, uv) for uv in L] \n```", "```py\n>>> ForceList = [(Dmc, - m * g * Y.z)]\n>>> BodyD = RigidBody('BodyD', Dmc, R, m, (I, Dmc))\n>>> BodyList = [BodyD] \n```", "```py\n>>> KM = KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3], kd_eqs=kd)\n>>> (fr, frstar) = KM.kanes_equations(BodyList, ForceList)\n>>> MM = KM.mass_matrix\n>>> forcing = KM.forcing\n>>> rhs = MM.inv() * forcing\n>>> kdd = KM.kindiffdict()\n>>> rhs = rhs.subs(kdd)\n>>> rhs.simplify()\n>>> mprint(rhs)\nMatrix([\n[(4*g*sin(q2) + 6*r*u2*u3 - r*u3**2*tan(q2))/(5*r)],\n[                                       -2*u1*u3/3],\n[                          (-2*u2 + u3*tan(q2))*u1]]) \n```"]