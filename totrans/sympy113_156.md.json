["```py\n>>> from sympy.physics.vector import *\n>>> N = ReferenceFrame('N') \n```", "```py\n>>> N.x\nN.x\n>>> N.y\nN.y\n>>> N.z\nN.z \n```", "```py\n>>> N.x == N.x\nTrue\n>>> N.x == N.y\nFalse\n>>> N.x + N.y\nN.x + N.y\n>>> 2 * N.x + N.y\n2*N.x + N.y \n```", "```py\n>>> from sympy import Symbol, symbols\n>>> x = Symbol('x')\n>>> x * N.x\nx*N.x\n>>> x*(N.x + N.y)\nx*N.x + x*N.y \n```", "```py\n>>> N.x.dot(N.x)\n1\n>>> N.x.dot(N.y)\n0\n>>> dot(N.x, N.x)\n1\n>>> dot(N.x, N.y)\n0 \n```", "```py\n>>> N.x.cross(N.x)\n0\n>>> N.x.cross(N.z)\n- N.y\n>>> cross(N.x, N.y)\nN.z\n>>> cross(N.x, (N.y + N.z))\n- N.y + N.z \n```", "```py\n>>> (N.x + N.y).normalize()\nsqrt(2)/2*N.x + sqrt(2)/2*N.y\n>>> (N.x + N.y).magnitude()\nsqrt(2) \n```", "```py\n>>> (x * N.x + 2 * x * N.y + 3 * x * N.z).to_matrix(N)\nMatrix([\n [  x],\n [2*x],\n [3*x]]) \n```", "```py\n>>> (x * N.x + N.y).diff(x, N)\nN.x \n```", "```py\n>>> A = ReferenceFrame('A')\n>>> A.x + N.x\nN.x + A.x \n```", "```py\n>>> A.orient(N, 'Axis', [x, N.y]) \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> Bp = ReferenceFrame('Bp')\n>>> Bpp = ReferenceFrame('Bpp')\n>>> B = ReferenceFrame('B')\n>>> q1,q2,q3 = symbols('q1 q2 q3')\n>>> Bpp.orient(N,'Axis', [q1, N.x])\n>>> Bp.orient(Bpp,'Axis', [q2, Bpp.y])\n>>> B.orient(Bp,'Axis', [q3, Bp.z])\n>>> N.dcm(B)\nMatrix([\n[                          cos(q2)*cos(q3),                           -sin(q3)*cos(q2),          sin(q2)],\n[sin(q1)*sin(q2)*cos(q3) + sin(q3)*cos(q1), -sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), -sin(q1)*cos(q2)],\n[sin(q1)*sin(q3) - sin(q2)*cos(q1)*cos(q3),  sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1),  cos(q1)*cos(q2)]])\n>>> B.orient(N,'Body',[q1,q2,q3],'XYZ')\n>>> N.dcm(B)\nMatrix([\n[                          cos(q2)*cos(q3),                           -sin(q3)*cos(q2),          sin(q2)],\n[sin(q1)*sin(q2)*cos(q3) + sin(q3)*cos(q1), -sin(q1)*sin(q2)*sin(q3) + cos(q1)*cos(q3), -sin(q1)*cos(q2)],\n[sin(q1)*sin(q3) - sin(q2)*cos(q1)*cos(q3),  sin(q1)*cos(q3) + sin(q2)*sin(q3)*cos(q1),  cos(q1)*cos(q2)]]) \n```", "```py\n>>> C = N.orientnew('C', 'Axis', [q1, N.x]) \n```", "```py\n>>> from sympy import diff\n>>> q1, q2, q3 = dynamicsymbols('q1 q2 q3')\n>>> diff(q1, Symbol('t'))\nDerivative(q1(t), t) \n```", "```py\n>>> q1\nq1(t)\n>>> q1d = diff(q1, Symbol('t'))\n>>> vprint(q1)\nq1\n>>> vprint(q1d)\nq1' \n```", "```py\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> q1\nq1\n>>> q1d\nq1' \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> B = N.orientnew('B', 'Axis', [q1, N.x])\n>>> (B.y*q2 + B.z).diff(q2, N)\nB.y\n>>> (B.y*q2 + B.z).dt(N)\n(-q1' + q2')*B.y + q2*q1'*B.z \n```", "```py\n>>> (B.y*q2 + B.z + q2*N.x).diff(q2, N)\nN.x + B.y \n```"]