- en: Finitely Presented Groups
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有限呈现群
- en: Original text：[https://docs.sympy.org/latest/modules/combinatorics/fp_groups.html](https://docs.sympy.org/latest/modules/combinatorics/fp_groups.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/combinatorics/fp_groups.html](https://docs.sympy.org/latest/modules/combinatorics/fp_groups.html)
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'This module presents the functionality designed for computing with finitely-presented
    groups (fp-groups for short). The name of the corresponding SymPy object is `FpGroup`.
    The functions or classes described here are studied under **computational group
    theory**. All code examples assume:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块提供了用于有限呈现群（fp-groups 简称）计算的功能。对应的 SymPy 对象名称是 `FpGroup`。这里描述的函数或类是在**计算群论**下研究的。所有代码示例假设：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Overview of Facilities
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施概述
- en: The facilities provided for fp-groups fall into a number of natural groupings
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为有限呈现群提供的设施分为几个自然分组
- en: The construction of fp-groups using a free group and a list of words in generators
    of that free group.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自由群和该自由群的生成元词列表构造 fp-groups。
- en: Index determination using the famous Todd-Coxeter procedure.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用著名的 Todd-Coxeter 程序确定指数。
- en: The construction of all subgroups having index less than some (small) specified
    positive integer, using the *Low-Index Subgroups* algorithm.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*低指标子群*算法构造所有指数小于某个（小的）指定正整数的子群。
- en: Algorithms for computing presentations of a subgroup of finite index in a group
    defined by finite presentation.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法用于计算由有限呈现定义的群中有限指数子群的表示。
- en: For a description of fundamental algorithms of finitely presented groups we
    often make use of *Handbook of Computational Group Theory*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有限呈现群的基本算法描述，我们经常使用*计算群论手册*。
- en: The Construction of Finitely Presented Groups
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有限呈现群的构造
- en: Finitely presented groups are constructed by factoring a free group by a set
    of relators. The set of relators is taken in as a list of words in generators
    of free group in SymPy, using a list provides ordering to the relators. If the
    list of relators is empty, the associated free group is returned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有限呈现群通过将自由群因子分解为一组关系者而构造。关系者集合以 SymPy 中自由群的生成元的词列表形式给出，使用列表为关系者提供了顺序。如果关系者列表为空，则返回关联的自由群。
- en: 'Example of construction of a finitely-presented group. The symmetric group
    of degree 4 may be represented as a two generator group with presentation \(\left\langle
    a, b \mid a^2, b^3, (ab)^4 \right\rangle\). Giving the relations as a list of
    relators, group in SymPy would be specified as:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有限呈现群构造的示例。四阶对称群可以表示为具有表示 \(\left\langle a, b \mid a^2, b^3, (ab)^4 \right\rangle\)
    的两个生成元群。将关系者作为关系者列表提供，SymPy 中的群将指定为：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Currently groups with relators having presentation like \(\left\langle r, s,
    t \mid r^2, s^2, t^2, rst = str = trs \right\rangle\) will have to be specified
    as:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的群具有类似于 \(\left\langle r, s, t \mid r^2, s^2, t^2, rst = str = trs \right\rangle\)
    的表示时，必须指定为：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Obviously this is not a unique way to make that particular group, but the point
    is that in case of equality with non-identity the user has to manually do that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这不是制造特定群的唯一方法，但重点在于，如果与非身份相等，用户必须手动执行此操作。
- en: Free Groups and Words
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自由群和词
- en: Construction of a Free Group
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自由群的构造
- en: '`free_group("gen0, gen1, ..., gen_(n-1)")` constructs a free group `F` on `n`
    generators, where `n` is a positive integer. The \(i\)-th generator of \(F\) may
    be obtained using the method `.generators[i]`, \(i = 0, \ldots n-1\).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`free_group("gen0, gen1, ..., gen_(n-1)")` 在 `n` 个生成元上构造了一个自由群 `F`，其中 `n` 是正整数。可以使用方法
    `.generators[i]` 获取 `F` 的第 `i` 个生成元，其中 \(i = 0, \ldots n-1\)。'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: creates a free group `F` of rank 2 and assigns the variables `x` and `y` to
    the two generators.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个秩为2的自由群 `F`，并将变量 `x` 和 `y` 分配给这两个生成元。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: creates a free group `F` of rank 2, with tuple of generators `F.generators`,
    and inserts `x` and `y` as generators into the global namespace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个秩为2的自由群 `F`，并用生成元组 `F.generators` 插入 `x` 和 `y` 作为全局命名空间中的生成元。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: creates a free groups `F[0]` of rank 2, with tuple of generators `F[1]`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个秩为2的自由群 `F[0]`，并用生成元组 `F[1]`。
- en: Construction of words
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 词的构造
- en: This section is applicable to words of `FreeGroup` as well as `FpGroup`. When
    we say *word* in SymPy, it actually means a [reduced word](https://en.wikipedia.org/wiki/Word_(group_theory)#Reduced_words)
    , since the words are automatically reduced. Given a group `G` defined on \(n\)
    generators \(x_1, x_2, x_3, \ldots, x_n\), a word is constructed as \(s_1^{r_1}s_2^{r_2}
    \cdots s_k^{r_k}\) where \(s_i \in \{x_1, x_2, \ldots, x_n\}\) , \(r_i \in \mathbb{Z}\)
    for all \(k\).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节适用于 `FreeGroup` 和 `FpGroup` 中的词。当我们在 SymPy 中提到 *word* 时，实际上指的是一个[简化词](https://en.wikipedia.org/wiki/Word_(group_theory)#Reduced_words)，因为这些词会自动进行简化。给定一个群
    `G`，其由 \(n\) 个生成元 \(x_1, x_2, x_3, \ldots, x_n\) 定义，一个词构造为 \(s_1^{r_1}s_2^{r_2}
    \cdots s_k^{r_k}\)，其中 \(s_i \in \{x_1, x_2, \ldots, x_n\}\)，\(r_i \in \mathbb{Z}\)
    对所有的 \(k\) 成立。
- en: Each word can be constructed in a variety of ways, since after reduction they
    may be equivalent.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个词可以以各种方式构造，因为它们经过简化后可能是等效的。
- en: 'Coset Enumeration: The Todd-Coxeter Algorithm'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 余陪枚举：Todd-Coxeter 算法
- en: This section describes the use of coset enumeration techniques in SymPy. The
    algorithm used for coset enumeration procedure is Todd-Coxeter algorithm and is
    developed in SymPy using [Ho05] and [CDHW73]. The reader should consult [CDHW73]
    and [Hav91] for a general description of the algorithm.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了 SymPy 中余陪枚举技术的使用。用于余陪枚举过程的算法是 Todd-Coxeter 算法，并且是在 SymPy 中使用 [Ho05] 和
    [CDHW73] 开发的。读者应参考 [CDHW73] 和 [Hav91] 了解算法的一般描述。
- en: We have two strategies of coset enumeration *relator-based* and *coset-table
    based* and the two have been implemented as `coset_enumeration_r`, `coset_enumeration_c`
    respectively. The two strategies differ in the way they make new definitions for
    the cosets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种余陪枚举策略 *relator-based* 和 *coset-table based*，并且两者都作为 `coset_enumeration_r`、`coset_enumeration_c`
    实现了。这两种策略在它们为余陪制定新定义的方式上有所不同。
- en: Though from the user point of view it is suggested to rather use the `.coset_enumeration`
    method of `FpGroup` and specify the `strategy` argument.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从用户的角度建议使用 `FpGroup` 的 `.coset_enumeration` 方法，并指定 `strategy` 参数。
- en: '`strategy`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`strategy`：'
- en: (default=”relator_based”) specifies the strategy of coset enumeration to be
    used, possible values are *“relator_based”* or *“coset_table_based”*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: (default=”relator_based”) 指定余陪枚举策略的策略，可能的值是 *“relator_based”* 或 *“coset_table_based”*。
- en: CosetTable
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 余陪表
- en: Class used to manipulate the information regarding the coset enumeration of
    the finitely presented group `G` on the cosets of the subgroup `H`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用于操作有限呈现群 `G` 在子群 `H` 的余陪上余陪枚举信息的类。
- en: Basically a *coset table* `CosetTable(G,H)`, is the permutation representation
    of the finitely presented group on the cosets of a subgroup. Most of the set theoretic
    and group functions use the regular representation of `G`, i.e., the coset table
    of `G` over the trivial subgroup.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上 *coset table* `CosetTable(G,H)` 是有限呈现群在一个子群的余陪上的置换表示。大多数集合论和群函数使用 `G` 的常规表示，即在平凡子群上的余陪表。
- en: The actual mathematical coset table is obtained using `.table` attribute and
    is a list of lists. For each generator `g` of `G` it contains a column and the
    next column corresponds to `g**-1` and so on for other generators, so in total
    it has `2*G.rank()` columns. Each column is simply a list of integers. If `l`
    is the generator list for the generator \(g\) and if `l[i] = j` then generator
    `g` takes the coset \(i\) to the coset \(j\) by multiplication from the right.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数学余陪表通过 `.table` 属性获取，并且是一个列表的列表。对于 `G` 的每个生成元 `g`，它包含一列，下一列对应于 `g**-1`，依此类推对其他生成元，因此总共有
    `2*G.rank()` 列。每列简单地是一个整数列表。如果 `l` 是生成元列表用于生成元 \(g\)，如果 `l[i] = j`，那么生成元 `g` 将余陪
    \(i\) 送到余陪 \(j\)，通过右侧乘法。
- en: For finitely presented groups, a coset table is computed by a Todd-Coxeter coset
    enumeration. Note that you may influence the performance of that enumeration by
    changing the values of the variable `CosetTable.coset_table_max_limit`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有限呈现的群，余陪表通过 Todd-Coxeter 余陪枚举计算。请注意，您可以通过更改变量 `CosetTable.coset_table_max_limit`
    的值来影响该枚举的性能。
- en: Attributes of CosetTable
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CosetTable 的属性
- en: For `CosetTable(G, H)` where `G` is the group and `H` is the subgroup.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `CosetTable(G, H)`，其中 `G` 是群，`H` 是子群。
- en: '`n`: A non-negative integer, non-mutable attribute, dependently calculated
    as the maximum among the live-cosets (i.e. \(\Omega\)).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：一个非负整数，非可变属性，作为活余陪（即 \(\Omega\)）的最大值计算。'
- en: '`table`: A list of lists, mutable attribute, mathematically represents the
    coset table.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`：一个列表的列表，可变属性，数学上表示余陪表。'
- en: '`omega`: A list, dependent on the internal attribute `p`. \(\Omega\) represents
    the list of live-cosets. A *standard* coset-table has its \(\Omega = \{0, 1, \ldots,
    index-1 \}\) where \(index\) is the index of subgroup \(H\) in \(G\).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`omega`：一个列表，依赖于内部属性 `p`。 \(\Omega\) 表示活余类的列表。一个 *标准* 余类表具有其 \(\Omega = \{0,
    1, \ldots, index-1 \}\)，其中 \(index\) 是子群 \(H\) 在 \(G\) 中的指标。'
- en: For experienced users we have a number of parameters that can be used to manipulate
    the algorithm, like
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有经验的用户，我们有一些可以用来操纵算法的参数，如
- en: '`coset_table_max_limit` (default value = \(4096000\)): manipulate the maximum
    number of cosets allowed in coset enumeration, i.e. the number of rows allowed
    in coset table. A coset enumeration will not finish if the subgroup does not have
    finite index, and even if it has it may take many more intermediate cosets than
    the actual index of the subgroup is. To avoid a coset enumeration “running away”
    therefore SymPy has a “safety stop” built-in. This is controlled by this variable.
    To change it, use \(max_cosets\) keyword. For example:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coset_table_max_limit`（默认值为 \(4096000\)）：操纵允许的余类数目在余类枚举中，即在余类表中允许的行数。如果子群没有有限指标，则余类枚举将不会结束，即使它有可能会比子群的实际指标多很多中间余类。为了避免余类枚举“失控”，因此
    SymPy 具有内置的“安全停止”功能。这由此变量控制。要更改它，请使用 `max_cosets` 关键字。例如：'
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`max_stack_size` (default value = \(500\)): manipulate the maximum size of
    `deduction_stack` above or equal to which the stack is emptied.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_stack_size`（默认值为 \(500\)）：操纵 `deduction_stack` 的最大大小，大于或等于该大小时堆栈被清空。'
- en: Compression and Standardization
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩和标准化
- en: For any two entries \(i, j\) with \(i < j\) in coset table, the first occurrence
    of \(i\) in a coset table precedes the first occurrence of \(j\) with respect
    to the usual row-wise ordering of the table entries. We call such a table a standard
    coset table. To standardize a `CosetTable` we use the `.standardize` method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于余类表中的任意两个条目 \(i, j\)，其中 \(i < j\)，在余类表条目的行顺序中，\(i\) 的第一次出现先于 \(j\) 的第一次出现。我们称这样的表为标准余类表。要将
    `CosetTable` 标准化，我们使用 `.standardize` 方法。
- en: '**Note** the method alters the given table, it does not create a copy.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：该方法改变给定的表，而不是创建一个副本。'
- en: Subgroups of Finite Index
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有限指标的子群
- en: The functionality in this section are concerned with the construction of subgroups
    of finite index. We describe a method for computing all subgroups whose index
    does not exceed some (modest) integer bound.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的功能涉及构造有限指标子群。我们描述了一种计算所有指标不超过某个（适度的）整数界限的子群的方法。
- en: Low Index Subgroups
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 低指标子群
- en: '`low_index_subgroups(G, N)`: Given a finitely presented group \(G = \left\langle
    X \mid R \right\rangle\) (can be a free group), and `N` a positive integer, determine
    the conjugacy classes of subgroups of `G` whose indices is less than or equal
    to `N`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`low_index_subgroups(G, N)`: 给定一个有限表达群 \(G = \left\langle X \mid R \right\rangle\)（可以是自由群），以及一个正整数
    `N`，确定 `G` 的指标小于或等于 `N` 的子群的共轭类。'
- en: 'For example to find all subgroups of \(G = \left\langle a, b \mid a^2 = b^3
    = (ab)^4 = 1 \right\rangle\) having index \(\le\) 4, can be found as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要找到所有满足 \(\le 4\) 的子群 \(G = \left\langle a, b \mid a^2 = b^3 = (ab)^4 = 1
    \right\rangle\) 的方法如下所示：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This returns the coset tables of subgroups of satisfying the property that index,
    \(index\), of subgroup in group is \(\le n\).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回满足子群在群中的指标为 \( \le n \) 的子群的余类表。
- en: Constructing a presentation for a subgroup
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建子群的表示
- en: In this section we discuss finding the presentation of a subgroup in a finitely
    presentation group. While the *subgroup* is currently allowed as input only in
    the form of a list of generators for the subgroup, you can expect the functionality
    of a *coset table* as input for subgroup in the group in near future.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论在有限表达群中找到子群的表示。虽然 *子群* 目前只允许作为子群的生成器列表的形式输入，但是你可以期待不久的将来将 *余类表* 的功能作为子群的输入。
- en: There are two ways to construct a set of defining relations for subgroup from
    those of `G`. First is on a set of Schreier generators, known generally as Reidemeister-Schreier
    algorithm or on the given list of generators of `H`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法从 `G` 的那些到 `H` 的生成关系中构造一个子群的定义关系。第一种是在一组 Schreier 生成器上，通常称为 Reidemeister-Schreier
    算法或给定的 `H` 的生成器列表上。
- en: Reidemeister Schreier algorithm
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reidemeister Schreier 算法
- en: called using `reidemeister_presentation(G, Y)` where `G` is the group and `Y`
    is a list of generators for subgroup `H` whose presentation we want to find.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `reidemeister_presentation(G, Y)` 调用，其中 `G` 是群，`Y` 是我们想要找到其表示的子群 `H` 的生成器列表。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Bibliography
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[CDHW73]'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[CDHW73]'
- en: John J. Cannon, Lucien A. Dimino, George Havas, and Jane M. Watson. Implementation
    and analysis of the Todd-Coxeter algorithm. Math. Comp., 27:463– 490, 1973.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: John J. Cannon, Lucien A. Dimino, George Havas 和 Jane M. Watson。《Todd-Coxeter
    算法的实现与分析》。Math. Comp.，27：463– 490，1973 年。
- en: '[Ho05]'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ho05]'
- en: Derek F. Holt, Handbook of Computational Group Theory. In the series ‘Discrete
    Mathematics and its Applications’, [Chapman & Hall/CRC 2005, xvi + 514 p](https://www.routledge.com/Handbook-of-Computational-Group-Theory/Holt-Eick-OBrien/p/book/9781584883722).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Derek F. Holt，《计算群论手册》。在系列“离散数学及其应用”中，[Chapman & Hall/CRC 2005, xvi + 514 p](https://www.routledge.com/Handbook-of-Computational-Group-Theory/Holt-Eick-OBrien/p/book/9781584883722)。
- en: '[Hav91]'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hav91]'
- en: George Havas, Coset enumeration strategies. In Proceedings of the International
    Symposium on Symbolic and Algebraic Computation (ISSAC’91), Bonn 1991, pages 191–199\.
    ACM Press, 1991.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: George Havas，《余类枚举策略》。在国际符号与代数计算研讨会（ISSAC’91）论文集，1991 年波恩，页码 191–199\. ACM 出版社，1991
    年。
